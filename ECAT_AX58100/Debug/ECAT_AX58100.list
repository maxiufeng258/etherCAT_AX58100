
ECAT_AX58100.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cec4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b6c  0800d088  0800d088  0001d088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dbf4  0800dbf4  000203d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800dbf4  0800dbf4  0001dbf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dbfc  0800dbfc  000203d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dbfc  0800dbfc  0001dbfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dc00  0800dc00  0001dc00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003d4  20000000  0800dc04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000818  200003d4  0800dfd8  000203d4  2**2
                  ALLOC
 10 ._user_heap_stack 00001304  20000bec  0800dfd8  00020bec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000203d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c57b  00000000  00000000  00020404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005041  00000000  00000000  0003c97f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001708  00000000  00000000  000419c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015c0  00000000  00000000  000430c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002937f  00000000  00000000  00044688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025d32  00000000  00000000  0006da07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8f9a  00000000  00000000  00093739  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017c6d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005da0  00000000  00000000  0017c724  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	200003d4 	.word	0x200003d4
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800d070 	.word	0x0800d070

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	200003d8 	.word	0x200003d8
 8000200:	0800d070 	.word	0x0800d070

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b974 	b.w	8000514 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	4604      	mov	r4, r0
 800024c:	468e      	mov	lr, r1
 800024e:	2b00      	cmp	r3, #0
 8000250:	d14d      	bne.n	80002ee <__udivmoddi4+0xaa>
 8000252:	428a      	cmp	r2, r1
 8000254:	4694      	mov	ip, r2
 8000256:	d969      	bls.n	800032c <__udivmoddi4+0xe8>
 8000258:	fab2 f282 	clz	r2, r2
 800025c:	b152      	cbz	r2, 8000274 <__udivmoddi4+0x30>
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	f1c2 0120 	rsb	r1, r2, #32
 8000266:	fa20 f101 	lsr.w	r1, r0, r1
 800026a:	fa0c fc02 	lsl.w	ip, ip, r2
 800026e:	ea41 0e03 	orr.w	lr, r1, r3
 8000272:	4094      	lsls	r4, r2
 8000274:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000278:	0c21      	lsrs	r1, r4, #16
 800027a:	fbbe f6f8 	udiv	r6, lr, r8
 800027e:	fa1f f78c 	uxth.w	r7, ip
 8000282:	fb08 e316 	mls	r3, r8, r6, lr
 8000286:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028a:	fb06 f107 	mul.w	r1, r6, r7
 800028e:	4299      	cmp	r1, r3
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x64>
 8000292:	eb1c 0303 	adds.w	r3, ip, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295
 800029a:	f080 811f 	bcs.w	80004dc <__udivmoddi4+0x298>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 811c 	bls.w	80004dc <__udivmoddi4+0x298>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	4463      	add	r3, ip
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 f707 	mul.w	r7, r0, r7
 80002bc:	42a7      	cmp	r7, r4
 80002be:	d90a      	bls.n	80002d6 <__udivmoddi4+0x92>
 80002c0:	eb1c 0404 	adds.w	r4, ip, r4
 80002c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c8:	f080 810a 	bcs.w	80004e0 <__udivmoddi4+0x29c>
 80002cc:	42a7      	cmp	r7, r4
 80002ce:	f240 8107 	bls.w	80004e0 <__udivmoddi4+0x29c>
 80002d2:	4464      	add	r4, ip
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002da:	1be4      	subs	r4, r4, r7
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa4>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xc2>
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	f000 80ef 	beq.w	80004d6 <__udivmoddi4+0x292>
 80002f8:	2600      	movs	r6, #0
 80002fa:	e9c5 0100 	strd	r0, r1, [r5]
 80002fe:	4630      	mov	r0, r6
 8000300:	4631      	mov	r1, r6
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f683 	clz	r6, r3
 800030a:	2e00      	cmp	r6, #0
 800030c:	d14a      	bne.n	80003a4 <__udivmoddi4+0x160>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd4>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80f9 	bhi.w	800050a <__udivmoddi4+0x2c6>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	469e      	mov	lr, r3
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa4>
 8000326:	e9c5 4e00 	strd	r4, lr, [r5]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa4>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xec>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 8092 	bne.w	800045e <__udivmoddi4+0x21a>
 800033a:	eba1 010c 	sub.w	r1, r1, ip
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f fe8c 	uxth.w	lr, ip
 8000346:	2601      	movs	r6, #1
 8000348:	0c20      	lsrs	r0, r4, #16
 800034a:	fbb1 f3f7 	udiv	r3, r1, r7
 800034e:	fb07 1113 	mls	r1, r7, r3, r1
 8000352:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000356:	fb0e f003 	mul.w	r0, lr, r3
 800035a:	4288      	cmp	r0, r1
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0x12c>
 800035e:	eb1c 0101 	adds.w	r1, ip, r1
 8000362:	f103 38ff 	add.w	r8, r3, #4294967295
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x12a>
 8000368:	4288      	cmp	r0, r1
 800036a:	f200 80cb 	bhi.w	8000504 <__udivmoddi4+0x2c0>
 800036e:	4643      	mov	r3, r8
 8000370:	1a09      	subs	r1, r1, r0
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb1 f0f7 	udiv	r0, r1, r7
 8000378:	fb07 1110 	mls	r1, r7, r0, r1
 800037c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000380:	fb0e fe00 	mul.w	lr, lr, r0
 8000384:	45a6      	cmp	lr, r4
 8000386:	d908      	bls.n	800039a <__udivmoddi4+0x156>
 8000388:	eb1c 0404 	adds.w	r4, ip, r4
 800038c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000390:	d202      	bcs.n	8000398 <__udivmoddi4+0x154>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f200 80bb 	bhi.w	800050e <__udivmoddi4+0x2ca>
 8000398:	4608      	mov	r0, r1
 800039a:	eba4 040e 	sub.w	r4, r4, lr
 800039e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a2:	e79c      	b.n	80002de <__udivmoddi4+0x9a>
 80003a4:	f1c6 0720 	rsb	r7, r6, #32
 80003a8:	40b3      	lsls	r3, r6
 80003aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b2:	fa20 f407 	lsr.w	r4, r0, r7
 80003b6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ba:	431c      	orrs	r4, r3
 80003bc:	40f9      	lsrs	r1, r7
 80003be:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c2:	fa00 f306 	lsl.w	r3, r0, r6
 80003c6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ca:	0c20      	lsrs	r0, r4, #16
 80003cc:	fa1f fe8c 	uxth.w	lr, ip
 80003d0:	fb09 1118 	mls	r1, r9, r8, r1
 80003d4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d8:	fb08 f00e 	mul.w	r0, r8, lr
 80003dc:	4288      	cmp	r0, r1
 80003de:	fa02 f206 	lsl.w	r2, r2, r6
 80003e2:	d90b      	bls.n	80003fc <__udivmoddi4+0x1b8>
 80003e4:	eb1c 0101 	adds.w	r1, ip, r1
 80003e8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ec:	f080 8088 	bcs.w	8000500 <__udivmoddi4+0x2bc>
 80003f0:	4288      	cmp	r0, r1
 80003f2:	f240 8085 	bls.w	8000500 <__udivmoddi4+0x2bc>
 80003f6:	f1a8 0802 	sub.w	r8, r8, #2
 80003fa:	4461      	add	r1, ip
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f9 	udiv	r0, r1, r9
 8000404:	fb09 1110 	mls	r1, r9, r0, r1
 8000408:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800040c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000410:	458e      	cmp	lr, r1
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x1e2>
 8000414:	eb1c 0101 	adds.w	r1, ip, r1
 8000418:	f100 34ff 	add.w	r4, r0, #4294967295
 800041c:	d26c      	bcs.n	80004f8 <__udivmoddi4+0x2b4>
 800041e:	458e      	cmp	lr, r1
 8000420:	d96a      	bls.n	80004f8 <__udivmoddi4+0x2b4>
 8000422:	3802      	subs	r0, #2
 8000424:	4461      	add	r1, ip
 8000426:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042a:	fba0 9402 	umull	r9, r4, r0, r2
 800042e:	eba1 010e 	sub.w	r1, r1, lr
 8000432:	42a1      	cmp	r1, r4
 8000434:	46c8      	mov	r8, r9
 8000436:	46a6      	mov	lr, r4
 8000438:	d356      	bcc.n	80004e8 <__udivmoddi4+0x2a4>
 800043a:	d053      	beq.n	80004e4 <__udivmoddi4+0x2a0>
 800043c:	b15d      	cbz	r5, 8000456 <__udivmoddi4+0x212>
 800043e:	ebb3 0208 	subs.w	r2, r3, r8
 8000442:	eb61 010e 	sbc.w	r1, r1, lr
 8000446:	fa01 f707 	lsl.w	r7, r1, r7
 800044a:	fa22 f306 	lsr.w	r3, r2, r6
 800044e:	40f1      	lsrs	r1, r6
 8000450:	431f      	orrs	r7, r3
 8000452:	e9c5 7100 	strd	r7, r1, [r5]
 8000456:	2600      	movs	r6, #0
 8000458:	4631      	mov	r1, r6
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	f1c2 0320 	rsb	r3, r2, #32
 8000462:	40d8      	lsrs	r0, r3
 8000464:	fa0c fc02 	lsl.w	ip, ip, r2
 8000468:	fa21 f303 	lsr.w	r3, r1, r3
 800046c:	4091      	lsls	r1, r2
 800046e:	4301      	orrs	r1, r0
 8000470:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000474:	fa1f fe8c 	uxth.w	lr, ip
 8000478:	fbb3 f0f7 	udiv	r0, r3, r7
 800047c:	fb07 3610 	mls	r6, r7, r0, r3
 8000480:	0c0b      	lsrs	r3, r1, #16
 8000482:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000486:	fb00 f60e 	mul.w	r6, r0, lr
 800048a:	429e      	cmp	r6, r3
 800048c:	fa04 f402 	lsl.w	r4, r4, r2
 8000490:	d908      	bls.n	80004a4 <__udivmoddi4+0x260>
 8000492:	eb1c 0303 	adds.w	r3, ip, r3
 8000496:	f100 38ff 	add.w	r8, r0, #4294967295
 800049a:	d22f      	bcs.n	80004fc <__udivmoddi4+0x2b8>
 800049c:	429e      	cmp	r6, r3
 800049e:	d92d      	bls.n	80004fc <__udivmoddi4+0x2b8>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4463      	add	r3, ip
 80004a4:	1b9b      	subs	r3, r3, r6
 80004a6:	b289      	uxth	r1, r1
 80004a8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004ac:	fb07 3316 	mls	r3, r7, r6, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb06 f30e 	mul.w	r3, r6, lr
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x28a>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c4:	d216      	bcs.n	80004f4 <__udivmoddi4+0x2b0>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d914      	bls.n	80004f4 <__udivmoddi4+0x2b0>
 80004ca:	3e02      	subs	r6, #2
 80004cc:	4461      	add	r1, ip
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d4:	e738      	b.n	8000348 <__udivmoddi4+0x104>
 80004d6:	462e      	mov	r6, r5
 80004d8:	4628      	mov	r0, r5
 80004da:	e705      	b.n	80002e8 <__udivmoddi4+0xa4>
 80004dc:	4606      	mov	r6, r0
 80004de:	e6e3      	b.n	80002a8 <__udivmoddi4+0x64>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6f8      	b.n	80002d6 <__udivmoddi4+0x92>
 80004e4:	454b      	cmp	r3, r9
 80004e6:	d2a9      	bcs.n	800043c <__udivmoddi4+0x1f8>
 80004e8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ec:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f0:	3801      	subs	r0, #1
 80004f2:	e7a3      	b.n	800043c <__udivmoddi4+0x1f8>
 80004f4:	4646      	mov	r6, r8
 80004f6:	e7ea      	b.n	80004ce <__udivmoddi4+0x28a>
 80004f8:	4620      	mov	r0, r4
 80004fa:	e794      	b.n	8000426 <__udivmoddi4+0x1e2>
 80004fc:	4640      	mov	r0, r8
 80004fe:	e7d1      	b.n	80004a4 <__udivmoddi4+0x260>
 8000500:	46d0      	mov	r8, sl
 8000502:	e77b      	b.n	80003fc <__udivmoddi4+0x1b8>
 8000504:	3b02      	subs	r3, #2
 8000506:	4461      	add	r1, ip
 8000508:	e732      	b.n	8000370 <__udivmoddi4+0x12c>
 800050a:	4630      	mov	r0, r6
 800050c:	e709      	b.n	8000322 <__udivmoddi4+0xde>
 800050e:	4464      	add	r4, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e742      	b.n	800039a <__udivmoddi4+0x156>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800051e:	463b      	mov	r3, r7
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800052a:	4b21      	ldr	r3, [pc, #132]	; (80005b0 <MX_ADC1_Init+0x98>)
 800052c:	4a21      	ldr	r2, [pc, #132]	; (80005b4 <MX_ADC1_Init+0x9c>)
 800052e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000530:	4b1f      	ldr	r3, [pc, #124]	; (80005b0 <MX_ADC1_Init+0x98>)
 8000532:	2200      	movs	r2, #0
 8000534:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000536:	4b1e      	ldr	r3, [pc, #120]	; (80005b0 <MX_ADC1_Init+0x98>)
 8000538:	2200      	movs	r2, #0
 800053a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800053c:	4b1c      	ldr	r3, [pc, #112]	; (80005b0 <MX_ADC1_Init+0x98>)
 800053e:	2200      	movs	r2, #0
 8000540:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000542:	4b1b      	ldr	r3, [pc, #108]	; (80005b0 <MX_ADC1_Init+0x98>)
 8000544:	2201      	movs	r2, #1
 8000546:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000548:	4b19      	ldr	r3, [pc, #100]	; (80005b0 <MX_ADC1_Init+0x98>)
 800054a:	2200      	movs	r2, #0
 800054c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000550:	4b17      	ldr	r3, [pc, #92]	; (80005b0 <MX_ADC1_Init+0x98>)
 8000552:	2200      	movs	r2, #0
 8000554:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000556:	4b16      	ldr	r3, [pc, #88]	; (80005b0 <MX_ADC1_Init+0x98>)
 8000558:	4a17      	ldr	r2, [pc, #92]	; (80005b8 <MX_ADC1_Init+0xa0>)
 800055a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800055c:	4b14      	ldr	r3, [pc, #80]	; (80005b0 <MX_ADC1_Init+0x98>)
 800055e:	2200      	movs	r2, #0
 8000560:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000562:	4b13      	ldr	r3, [pc, #76]	; (80005b0 <MX_ADC1_Init+0x98>)
 8000564:	2201      	movs	r2, #1
 8000566:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000568:	4b11      	ldr	r3, [pc, #68]	; (80005b0 <MX_ADC1_Init+0x98>)
 800056a:	2200      	movs	r2, #0
 800056c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000570:	4b0f      	ldr	r3, [pc, #60]	; (80005b0 <MX_ADC1_Init+0x98>)
 8000572:	2201      	movs	r2, #1
 8000574:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000576:	480e      	ldr	r0, [pc, #56]	; (80005b0 <MX_ADC1_Init+0x98>)
 8000578:	f000 fede 	bl	8001338 <HAL_ADC_Init>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000582:	f000 fb37 	bl	8000bf4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000586:	2304      	movs	r3, #4
 8000588:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800058a:	2301      	movs	r3, #1
 800058c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 800058e:	2306      	movs	r3, #6
 8000590:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000592:	463b      	mov	r3, r7
 8000594:	4619      	mov	r1, r3
 8000596:	4806      	ldr	r0, [pc, #24]	; (80005b0 <MX_ADC1_Init+0x98>)
 8000598:	f001 f984 	bl	80018a4 <HAL_ADC_ConfigChannel>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80005a2:	f000 fb27 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005a6:	bf00      	nop
 80005a8:	3710      	adds	r7, #16
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	200003f0 	.word	0x200003f0
 80005b4:	40012000 	.word	0x40012000
 80005b8:	0f000001 	.word	0x0f000001

080005bc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b08a      	sub	sp, #40	; 0x28
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c4:	f107 0314 	add.w	r3, r7, #20
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
 80005d2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a2e      	ldr	r2, [pc, #184]	; (8000694 <HAL_ADC_MspInit+0xd8>)
 80005da:	4293      	cmp	r3, r2
 80005dc:	d156      	bne.n	800068c <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005de:	2300      	movs	r3, #0
 80005e0:	613b      	str	r3, [r7, #16]
 80005e2:	4b2d      	ldr	r3, [pc, #180]	; (8000698 <HAL_ADC_MspInit+0xdc>)
 80005e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005e6:	4a2c      	ldr	r2, [pc, #176]	; (8000698 <HAL_ADC_MspInit+0xdc>)
 80005e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005ec:	6453      	str	r3, [r2, #68]	; 0x44
 80005ee:	4b2a      	ldr	r3, [pc, #168]	; (8000698 <HAL_ADC_MspInit+0xdc>)
 80005f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005f6:	613b      	str	r3, [r7, #16]
 80005f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fa:	2300      	movs	r3, #0
 80005fc:	60fb      	str	r3, [r7, #12]
 80005fe:	4b26      	ldr	r3, [pc, #152]	; (8000698 <HAL_ADC_MspInit+0xdc>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	4a25      	ldr	r2, [pc, #148]	; (8000698 <HAL_ADC_MspInit+0xdc>)
 8000604:	f043 0301 	orr.w	r3, r3, #1
 8000608:	6313      	str	r3, [r2, #48]	; 0x30
 800060a:	4b23      	ldr	r3, [pc, #140]	; (8000698 <HAL_ADC_MspInit+0xdc>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	f003 0301 	and.w	r3, r3, #1
 8000612:	60fb      	str	r3, [r7, #12]
 8000614:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000616:	2310      	movs	r3, #16
 8000618:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800061a:	2303      	movs	r3, #3
 800061c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061e:	2300      	movs	r3, #0
 8000620:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000622:	f107 0314 	add.w	r3, r7, #20
 8000626:	4619      	mov	r1, r3
 8000628:	481c      	ldr	r0, [pc, #112]	; (800069c <HAL_ADC_MspInit+0xe0>)
 800062a:	f002 fc77 	bl	8002f1c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800062e:	4b1c      	ldr	r3, [pc, #112]	; (80006a0 <HAL_ADC_MspInit+0xe4>)
 8000630:	4a1c      	ldr	r2, [pc, #112]	; (80006a4 <HAL_ADC_MspInit+0xe8>)
 8000632:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000634:	4b1a      	ldr	r3, [pc, #104]	; (80006a0 <HAL_ADC_MspInit+0xe4>)
 8000636:	2200      	movs	r2, #0
 8000638:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800063a:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <HAL_ADC_MspInit+0xe4>)
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000640:	4b17      	ldr	r3, [pc, #92]	; (80006a0 <HAL_ADC_MspInit+0xe4>)
 8000642:	2200      	movs	r2, #0
 8000644:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000646:	4b16      	ldr	r3, [pc, #88]	; (80006a0 <HAL_ADC_MspInit+0xe4>)
 8000648:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800064c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800064e:	4b14      	ldr	r3, [pc, #80]	; (80006a0 <HAL_ADC_MspInit+0xe4>)
 8000650:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000654:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000656:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <HAL_ADC_MspInit+0xe4>)
 8000658:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800065c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800065e:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <HAL_ADC_MspInit+0xe4>)
 8000660:	2200      	movs	r2, #0
 8000662:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000664:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <HAL_ADC_MspInit+0xe4>)
 8000666:	2200      	movs	r2, #0
 8000668:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800066a:	4b0d      	ldr	r3, [pc, #52]	; (80006a0 <HAL_ADC_MspInit+0xe4>)
 800066c:	2200      	movs	r2, #0
 800066e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000670:	480b      	ldr	r0, [pc, #44]	; (80006a0 <HAL_ADC_MspInit+0xe4>)
 8000672:	f001 ff69 	bl	8002548 <HAL_DMA_Init>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 800067c:	f000 faba 	bl	8000bf4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	4a07      	ldr	r2, [pc, #28]	; (80006a0 <HAL_ADC_MspInit+0xe4>)
 8000684:	639a      	str	r2, [r3, #56]	; 0x38
 8000686:	4a06      	ldr	r2, [pc, #24]	; (80006a0 <HAL_ADC_MspInit+0xe4>)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800068c:	bf00      	nop
 800068e:	3728      	adds	r7, #40	; 0x28
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40012000 	.word	0x40012000
 8000698:	40023800 	.word	0x40023800
 800069c:	40020000 	.word	0x40020000
 80006a0:	20000438 	.word	0x20000438
 80006a4:	40026410 	.word	0x40026410

080006a8 <ADC_Start_DMA>:
}

/* USER CODE BEGIN 1 */
__IO uint16_t adcVal;
void	ADC_Start_DMA	(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, &adcVal, 1);
 80006ac:	2201      	movs	r2, #1
 80006ae:	4904      	ldr	r1, [pc, #16]	; (80006c0 <ADC_Start_DMA+0x18>)
 80006b0:	4804      	ldr	r0, [pc, #16]	; (80006c4 <ADC_Start_DMA+0x1c>)
 80006b2:	f000 ffad 	bl	8001610 <HAL_ADC_Start_DMA>

	HAL_ADC_ConvCpltCallback(&hadc1);
 80006b6:	4803      	ldr	r0, [pc, #12]	; (80006c4 <ADC_Start_DMA+0x1c>)
 80006b8:	f000 f806 	bl	80006c8 <HAL_ADC_ConvCpltCallback>

}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	20000498 	.word	0x20000498
 80006c4:	200003f0 	.word	0x200003f0

080006c8 <HAL_ADC_ConvCpltCallback>:

/** ADC convert completed callback */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == hadc1.Instance)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681a      	ldr	r2, [r3, #0]
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <HAL_ADC_ConvCpltCallback+0x28>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	429a      	cmp	r2, r3
 80006da:	d104      	bne.n	80006e6 <HAL_ADC_ConvCpltCallback+0x1e>
	{
		HAL_ADC_Start_DMA(hadc, &adcVal, 1);
 80006dc:	2201      	movs	r2, #1
 80006de:	4905      	ldr	r1, [pc, #20]	; (80006f4 <HAL_ADC_ConvCpltCallback+0x2c>)
 80006e0:	6878      	ldr	r0, [r7, #4]
 80006e2:	f000 ff95 	bl	8001610 <HAL_ADC_Start_DMA>
	}
}
 80006e6:	bf00      	nop
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	200003f0 	.word	0x200003f0
 80006f4:	20000498 	.word	0x20000498

080006f8 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80006fe:	463b      	mov	r3, r7
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000706:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <MX_DAC_Init+0x4c>)
 8000708:	4a0f      	ldr	r2, [pc, #60]	; (8000748 <MX_DAC_Init+0x50>)
 800070a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800070c:	480d      	ldr	r0, [pc, #52]	; (8000744 <MX_DAC_Init+0x4c>)
 800070e:	f001 fd47 	bl	80021a0 <HAL_DAC_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000718:	f000 fa6c 	bl	8000bf4 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800071c:	2300      	movs	r3, #0
 800071e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000720:	2300      	movs	r3, #0
 8000722:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000724:	463b      	mov	r3, r7
 8000726:	2210      	movs	r2, #16
 8000728:	4619      	mov	r1, r3
 800072a:	4806      	ldr	r0, [pc, #24]	; (8000744 <MX_DAC_Init+0x4c>)
 800072c:	f001 fe72 	bl	8002414 <HAL_DAC_ConfigChannel>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000736:	f000 fa5d 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	2000049c 	.word	0x2000049c
 8000748:	40007400 	.word	0x40007400

0800074c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08a      	sub	sp, #40	; 0x28
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000754:	f107 0314 	add.w	r3, r7, #20
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
 8000762:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a1b      	ldr	r2, [pc, #108]	; (80007d8 <HAL_DAC_MspInit+0x8c>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d12f      	bne.n	80007ce <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	613b      	str	r3, [r7, #16]
 8000772:	4b1a      	ldr	r3, [pc, #104]	; (80007dc <HAL_DAC_MspInit+0x90>)
 8000774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000776:	4a19      	ldr	r2, [pc, #100]	; (80007dc <HAL_DAC_MspInit+0x90>)
 8000778:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800077c:	6413      	str	r3, [r2, #64]	; 0x40
 800077e:	4b17      	ldr	r3, [pc, #92]	; (80007dc <HAL_DAC_MspInit+0x90>)
 8000780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000782:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000786:	613b      	str	r3, [r7, #16]
 8000788:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	60fb      	str	r3, [r7, #12]
 800078e:	4b13      	ldr	r3, [pc, #76]	; (80007dc <HAL_DAC_MspInit+0x90>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a12      	ldr	r2, [pc, #72]	; (80007dc <HAL_DAC_MspInit+0x90>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b10      	ldr	r3, [pc, #64]	; (80007dc <HAL_DAC_MspInit+0x90>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80007a6:	2320      	movs	r3, #32
 80007a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007aa:	2303      	movs	r3, #3
 80007ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b2:	f107 0314 	add.w	r3, r7, #20
 80007b6:	4619      	mov	r1, r3
 80007b8:	4809      	ldr	r0, [pc, #36]	; (80007e0 <HAL_DAC_MspInit+0x94>)
 80007ba:	f002 fbaf 	bl	8002f1c <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80007be:	2200      	movs	r2, #0
 80007c0:	2100      	movs	r1, #0
 80007c2:	2036      	movs	r0, #54	; 0x36
 80007c4:	f001 fc84 	bl	80020d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80007c8:	2036      	movs	r0, #54	; 0x36
 80007ca:	f001 fcad 	bl	8002128 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80007ce:	bf00      	nop
 80007d0:	3728      	adds	r7, #40	; 0x28
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40007400 	.word	0x40007400
 80007dc:	40023800 	.word	0x40023800
 80007e0:	40020000 	.word	0x40020000

080007e4 <dac_setVal>:
  }
}

/* USER CODE BEGIN 1 */
void	dac_setVal (uint32_t Data)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, Data);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	2200      	movs	r2, #0
 80007f0:	2110      	movs	r1, #16
 80007f2:	4803      	ldr	r0, [pc, #12]	; (8000800 <dac_setVal+0x1c>)
 80007f4:	f001 fdbc 	bl	8002370 <HAL_DAC_SetValue>
}
 80007f8:	bf00      	nop
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	2000049c 	.word	0x2000049c

08000804 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <MX_DMA_Init+0x3c>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a0b      	ldr	r2, [pc, #44]	; (8000840 <MX_DMA_Init+0x3c>)
 8000814:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b09      	ldr	r3, [pc, #36]	; (8000840 <MX_DMA_Init+0x3c>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000826:	2200      	movs	r2, #0
 8000828:	2100      	movs	r1, #0
 800082a:	2038      	movs	r0, #56	; 0x38
 800082c:	f001 fc50 	bl	80020d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000830:	2038      	movs	r0, #56	; 0x38
 8000832:	f001 fc79 	bl	8002128 <HAL_NVIC_EnableIRQ>

}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40023800 	.word	0x40023800

08000844 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08e      	sub	sp, #56	; 0x38
 8000848:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]
 8000858:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	623b      	str	r3, [r7, #32]
 800085e:	4b91      	ldr	r3, [pc, #580]	; (8000aa4 <MX_GPIO_Init+0x260>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a90      	ldr	r2, [pc, #576]	; (8000aa4 <MX_GPIO_Init+0x260>)
 8000864:	f043 0310 	orr.w	r3, r3, #16
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b8e      	ldr	r3, [pc, #568]	; (8000aa4 <MX_GPIO_Init+0x260>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0310 	and.w	r3, r3, #16
 8000872:	623b      	str	r3, [r7, #32]
 8000874:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	61fb      	str	r3, [r7, #28]
 800087a:	4b8a      	ldr	r3, [pc, #552]	; (8000aa4 <MX_GPIO_Init+0x260>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a89      	ldr	r2, [pc, #548]	; (8000aa4 <MX_GPIO_Init+0x260>)
 8000880:	f043 0304 	orr.w	r3, r3, #4
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b87      	ldr	r3, [pc, #540]	; (8000aa4 <MX_GPIO_Init+0x260>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0304 	and.w	r3, r3, #4
 800088e:	61fb      	str	r3, [r7, #28]
 8000890:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	61bb      	str	r3, [r7, #24]
 8000896:	4b83      	ldr	r3, [pc, #524]	; (8000aa4 <MX_GPIO_Init+0x260>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a82      	ldr	r2, [pc, #520]	; (8000aa4 <MX_GPIO_Init+0x260>)
 800089c:	f043 0320 	orr.w	r3, r3, #32
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b80      	ldr	r3, [pc, #512]	; (8000aa4 <MX_GPIO_Init+0x260>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0320 	and.w	r3, r3, #32
 80008aa:	61bb      	str	r3, [r7, #24]
 80008ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	617b      	str	r3, [r7, #20]
 80008b2:	4b7c      	ldr	r3, [pc, #496]	; (8000aa4 <MX_GPIO_Init+0x260>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a7b      	ldr	r2, [pc, #492]	; (8000aa4 <MX_GPIO_Init+0x260>)
 80008b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b79      	ldr	r3, [pc, #484]	; (8000aa4 <MX_GPIO_Init+0x260>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008c6:	617b      	str	r3, [r7, #20]
 80008c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	613b      	str	r3, [r7, #16]
 80008ce:	4b75      	ldr	r3, [pc, #468]	; (8000aa4 <MX_GPIO_Init+0x260>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a74      	ldr	r2, [pc, #464]	; (8000aa4 <MX_GPIO_Init+0x260>)
 80008d4:	f043 0301 	orr.w	r3, r3, #1
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b72      	ldr	r3, [pc, #456]	; (8000aa4 <MX_GPIO_Init+0x260>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	613b      	str	r3, [r7, #16]
 80008e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	4b6e      	ldr	r3, [pc, #440]	; (8000aa4 <MX_GPIO_Init+0x260>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a6d      	ldr	r2, [pc, #436]	; (8000aa4 <MX_GPIO_Init+0x260>)
 80008f0:	f043 0302 	orr.w	r3, r3, #2
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b6b      	ldr	r3, [pc, #428]	; (8000aa4 <MX_GPIO_Init+0x260>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0302 	and.w	r3, r3, #2
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	60bb      	str	r3, [r7, #8]
 8000906:	4b67      	ldr	r3, [pc, #412]	; (8000aa4 <MX_GPIO_Init+0x260>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a66      	ldr	r2, [pc, #408]	; (8000aa4 <MX_GPIO_Init+0x260>)
 800090c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b64      	ldr	r3, [pc, #400]	; (8000aa4 <MX_GPIO_Init+0x260>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	4b60      	ldr	r3, [pc, #384]	; (8000aa4 <MX_GPIO_Init+0x260>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a5f      	ldr	r2, [pc, #380]	; (8000aa4 <MX_GPIO_Init+0x260>)
 8000928:	f043 0308 	orr.w	r3, r3, #8
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b5d      	ldr	r3, [pc, #372]	; (8000aa4 <MX_GPIO_Init+0x260>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0308 	and.w	r3, r3, #8
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800093a:	2200      	movs	r2, #0
 800093c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000940:	4859      	ldr	r0, [pc, #356]	; (8000aa8 <MX_GPIO_Init+0x264>)
 8000942:	f002 fe35 	bl	80035b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_NSS_GPIO_Port, SPI3_NSS_Pin, GPIO_PIN_SET);
 8000946:	2201      	movs	r2, #1
 8000948:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800094c:	4857      	ldr	r0, [pc, #348]	; (8000aac <MX_GPIO_Init+0x268>)
 800094e:	f002 fe2f 	bl	80035b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000952:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000958:	2303      	movs	r3, #3
 800095a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000960:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000964:	4619      	mov	r1, r3
 8000966:	4852      	ldr	r0, [pc, #328]	; (8000ab0 <MX_GPIO_Init+0x26c>)
 8000968:	f002 fad8 	bl	8002f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800096c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000972:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000976:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800097c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000980:	4619      	mov	r1, r3
 8000982:	484c      	ldr	r0, [pc, #304]	; (8000ab4 <MX_GPIO_Init+0x270>)
 8000984:	f002 faca 	bl	8002f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PC3 PC4 PC5
                           PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8000988:	f24c 33ff 	movw	r3, #50175	; 0xc3ff
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800098e:	2303      	movs	r3, #3
 8000990:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000996:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800099a:	4619      	mov	r1, r3
 800099c:	4845      	ldr	r0, [pc, #276]	; (8000ab4 <MX_GPIO_Init+0x270>)
 800099e:	f002 fabd 	bl	8002f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF5 PF6 PF7
                           PF8 PF9 PF10 PF11
                           PF12 PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80009a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009a6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009a8:	2303      	movs	r3, #3
 80009aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80009b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b4:	4619      	mov	r1, r3
 80009b6:	4840      	ldr	r0, [pc, #256]	; (8000ab8 <MX_GPIO_Init+0x274>)
 80009b8:	f002 fab0 	bl	8002f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA6 PA7 PA8 PA9
                           PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80009bc:	f641 73cf 	movw	r3, #8143	; 0x1fcf
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009c2:	2303      	movs	r3, #3
 80009c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ce:	4619      	mov	r1, r3
 80009d0:	4836      	ldr	r0, [pc, #216]	; (8000aac <MX_GPIO_Init+0x268>)
 80009d2:	f002 faa3 	bl	8002f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009d6:	f244 0381 	movw	r3, #16513	; 0x4081
 80009da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009dc:	2301      	movs	r3, #1
 80009de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	2300      	movs	r3, #0
 80009e6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ec:	4619      	mov	r1, r3
 80009ee:	482e      	ldr	r0, [pc, #184]	; (8000aa8 <MX_GPIO_Init+0x264>)
 80009f0:	f002 fa94 	bl	8002f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11
                           PB12 PB13 PB15 PB3
                           PB4 PB5 PB6 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 80009f4:	f64b 737e 	movw	r3, #49022	; 0xbf7e
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009fa:	2303      	movs	r3, #3
 80009fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a06:	4619      	mov	r1, r3
 8000a08:	4827      	ldr	r0, [pc, #156]	; (8000aa8 <MX_GPIO_Init+0x264>)
 8000a0a:	f002 fa87 	bl	8002f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG5 PG6 PG7
                           PG8 PG9 PG10 PG11
                           PG12 PG13 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000a0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a14:	2303      	movs	r3, #3
 8000a16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a20:	4619      	mov	r1, r3
 8000a22:	4826      	ldr	r0, [pc, #152]	; (8000abc <MX_GPIO_Init+0x278>)
 8000a24:	f002 fa7a 	bl	8002f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD12 PD13
                           PD14 PD15 PD0 PD1
                           PD2 PD3 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000a28:	f64f 431f 	movw	r3, #64543	; 0xfc1f
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a2e:	2303      	movs	r3, #3
 8000a30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4820      	ldr	r0, [pc, #128]	; (8000ac0 <MX_GPIO_Init+0x27c>)
 8000a3e:	f002 fa6d 	bl	8002f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_NSS_Pin;
 8000a42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a50:	2300      	movs	r3, #0
 8000a52:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI3_NSS_GPIO_Port, &GPIO_InitStruct);
 8000a54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4814      	ldr	r0, [pc, #80]	; (8000aac <MX_GPIO_Init+0x268>)
 8000a5c:	f002 fa5e 	bl	8002f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = PDI_IRQ_Pin|sync0_Pin|sync1_Pin;
 8000a60:	23e0      	movs	r3, #224	; 0xe0
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a64:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a72:	4619      	mov	r1, r3
 8000a74:	4812      	ldr	r0, [pc, #72]	; (8000ac0 <MX_GPIO_Init+0x27c>)
 8000a76:	f002 fa51 	bl	8002f1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	2017      	movs	r0, #23
 8000a80:	f001 fb26 	bl	80020d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a84:	2017      	movs	r0, #23
 8000a86:	f001 fb4f 	bl	8002128 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	2028      	movs	r0, #40	; 0x28
 8000a90:	f001 fb1e 	bl	80020d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a94:	2028      	movs	r0, #40	; 0x28
 8000a96:	f001 fb47 	bl	8002128 <HAL_NVIC_EnableIRQ>

}
 8000a9a:	bf00      	nop
 8000a9c:	3738      	adds	r7, #56	; 0x38
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40020400 	.word	0x40020400
 8000aac:	40020000 	.word	0x40020000
 8000ab0:	40021000 	.word	0x40021000
 8000ab4:	40020800 	.word	0x40020800
 8000ab8:	40021400 	.word	0x40021400
 8000abc:	40021800 	.word	0x40021800
 8000ac0:	40020c00 	.word	0x40020c00

08000ac4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ac8:	f000 fbc4 	bl	8001254 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000acc:	f000 f824 	bl	8000b18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ad0:	f7ff feb8 	bl	8000844 <MX_GPIO_Init>
  MX_SPI3_Init();
 8000ad4:	f000 f89e 	bl	8000c14 <MX_SPI3_Init>
  MX_DMA_Init();
 8000ad8:	f7ff fe94 	bl	8000804 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000adc:	f000 fb1e 	bl	800111c <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000ae0:	f7ff fd1a 	bl	8000518 <MX_ADC1_Init>
  MX_TIM6_Init();
 8000ae4:	f000 fabc 	bl	8001060 <MX_TIM6_Init>
  MX_DAC_Init();
 8000ae8:	f7ff fe06 	bl	80006f8 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */
  HW_Init();
 8000aec:	f008 fc22 	bl	8009334 <HW_Init>
  MainInit();
 8000af0:	f005 fec6 	bl	8006880 <MainInit>

  ADC_Start_DMA();
 8000af4:	f7ff fdd8 	bl	80006a8 <ADC_Start_DMA>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8000af8:	2110      	movs	r1, #16
 8000afa:	4805      	ldr	r0, [pc, #20]	; (8000b10 <main+0x4c>)
 8000afc:	f001 fb80 	bl	8002200 <HAL_DAC_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MainLoop();
 8000b00:	f005 fee0 	bl	80068c4 <MainLoop>
	  if (cntMainLoop == 10000)
	  {
//		  cntMainLoop = 0;
//		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
	  }
	  cntMainLoop++;
 8000b04:	4b03      	ldr	r3, [pc, #12]	; (8000b14 <main+0x50>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	4a02      	ldr	r2, [pc, #8]	; (8000b14 <main+0x50>)
 8000b0c:	6013      	str	r3, [r2, #0]
  {
 8000b0e:	e7f7      	b.n	8000b00 <main+0x3c>
 8000b10:	2000049c 	.word	0x2000049c
 8000b14:	200004b0 	.word	0x200004b0

08000b18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b094      	sub	sp, #80	; 0x50
 8000b1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b1e:	f107 031c 	add.w	r3, r7, #28
 8000b22:	2234      	movs	r2, #52	; 0x34
 8000b24:	2100      	movs	r1, #0
 8000b26:	4618      	mov	r0, r3
 8000b28:	f00c f99c 	bl	800ce64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b2c:	f107 0308 	add.w	r3, r7, #8
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	4b2a      	ldr	r3, [pc, #168]	; (8000bec <SystemClock_Config+0xd4>)
 8000b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b44:	4a29      	ldr	r2, [pc, #164]	; (8000bec <SystemClock_Config+0xd4>)
 8000b46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b4a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b4c:	4b27      	ldr	r3, [pc, #156]	; (8000bec <SystemClock_Config+0xd4>)
 8000b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b54:	607b      	str	r3, [r7, #4]
 8000b56:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b58:	2300      	movs	r3, #0
 8000b5a:	603b      	str	r3, [r7, #0]
 8000b5c:	4b24      	ldr	r3, [pc, #144]	; (8000bf0 <SystemClock_Config+0xd8>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b64:	4a22      	ldr	r2, [pc, #136]	; (8000bf0 <SystemClock_Config+0xd8>)
 8000b66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b6a:	6013      	str	r3, [r2, #0]
 8000b6c:	4b20      	ldr	r3, [pc, #128]	; (8000bf0 <SystemClock_Config+0xd8>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b74:	603b      	str	r3, [r7, #0]
 8000b76:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b80:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b82:	2302      	movs	r3, #2
 8000b84:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b86:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b8a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b8c:	2304      	movs	r3, #4
 8000b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 90;
 8000b90:	235a      	movs	r3, #90	; 0x5a
 8000b92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b94:	2302      	movs	r3, #2
 8000b96:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b98:	2307      	movs	r3, #7
 8000b9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba0:	f107 031c 	add.w	r3, r7, #28
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f003 f957 	bl	8003e58 <HAL_RCC_OscConfig>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000bb0:	f000 f820 	bl	8000bf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb4:	230f      	movs	r3, #15
 8000bb6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bc4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bca:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bcc:	f107 0308 	add.w	r3, r7, #8
 8000bd0:	2102      	movs	r1, #2
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f002 fd36 	bl	8003644 <HAL_RCC_ClockConfig>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000bde:	f000 f809 	bl	8000bf4 <Error_Handler>
  }
}
 8000be2:	bf00      	nop
 8000be4:	3750      	adds	r7, #80	; 0x50
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	40007000 	.word	0x40007000

08000bf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf8:	b672      	cpsid	i
}
 8000bfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <Error_Handler+0x8>

08000bfe <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	b083      	sub	sp, #12
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
 8000c06:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000c08:	bf00      	nop
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000c18:	4b17      	ldr	r3, [pc, #92]	; (8000c78 <MX_SPI3_Init+0x64>)
 8000c1a:	4a18      	ldr	r2, [pc, #96]	; (8000c7c <MX_SPI3_Init+0x68>)
 8000c1c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000c1e:	4b16      	ldr	r3, [pc, #88]	; (8000c78 <MX_SPI3_Init+0x64>)
 8000c20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c24:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000c26:	4b14      	ldr	r3, [pc, #80]	; (8000c78 <MX_SPI3_Init+0x64>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c2c:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <MX_SPI3_Init+0x64>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000c32:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <MX_SPI3_Init+0x64>)
 8000c34:	2202      	movs	r2, #2
 8000c36:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000c38:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <MX_SPI3_Init+0x64>)
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <MX_SPI3_Init+0x64>)
 8000c40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c44:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000c46:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <MX_SPI3_Init+0x64>)
 8000c48:	2210      	movs	r2, #16
 8000c4a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c4c:	4b0a      	ldr	r3, [pc, #40]	; (8000c78 <MX_SPI3_Init+0x64>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c52:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <MX_SPI3_Init+0x64>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c58:	4b07      	ldr	r3, [pc, #28]	; (8000c78 <MX_SPI3_Init+0x64>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000c5e:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <MX_SPI3_Init+0x64>)
 8000c60:	220a      	movs	r2, #10
 8000c62:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000c64:	4804      	ldr	r0, [pc, #16]	; (8000c78 <MX_SPI3_Init+0x64>)
 8000c66:	f003 fc53 	bl	8004510 <HAL_SPI_Init>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000c70:	f7ff ffc0 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	200004b4 	.word	0x200004b4
 8000c7c:	40003c00 	.word	0x40003c00

08000c80 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08a      	sub	sp, #40	; 0x28
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a19      	ldr	r2, [pc, #100]	; (8000d04 <HAL_SPI_MspInit+0x84>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d12c      	bne.n	8000cfc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	613b      	str	r3, [r7, #16]
 8000ca6:	4b18      	ldr	r3, [pc, #96]	; (8000d08 <HAL_SPI_MspInit+0x88>)
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000caa:	4a17      	ldr	r2, [pc, #92]	; (8000d08 <HAL_SPI_MspInit+0x88>)
 8000cac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb2:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <HAL_SPI_MspInit+0x88>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cba:	613b      	str	r3, [r7, #16]
 8000cbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <HAL_SPI_MspInit+0x88>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	4a10      	ldr	r2, [pc, #64]	; (8000d08 <HAL_SPI_MspInit+0x88>)
 8000cc8:	f043 0304 	orr.w	r3, r3, #4
 8000ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cce:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <HAL_SPI_MspInit+0x88>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	f003 0304 	and.w	r3, r3, #4
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000cda:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000cde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce8:	2303      	movs	r3, #3
 8000cea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cec:	2306      	movs	r3, #6
 8000cee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4805      	ldr	r0, [pc, #20]	; (8000d0c <HAL_SPI_MspInit+0x8c>)
 8000cf8:	f002 f910 	bl	8002f1c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000cfc:	bf00      	nop
 8000cfe:	3728      	adds	r7, #40	; 0x28
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40003c00 	.word	0x40003c00
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	40020800 	.word	0x40020800

08000d10 <WR_CMD>:
  }
}

/* USER CODE BEGIN 1 */
uint8_t	WR_CMD	(uint8_t cmd)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af02      	add	r7, sp, #8
 8000d16:	4603      	mov	r3, r0
 8000d18:	71fb      	strb	r3, [r7, #7]
//	/* Wait for SPI1 data reception */
//	while (__HAL_SPI_GET_FLAG(&hspi3, SPI_FLAG_RXNE) == RESET);
//	/* Read SPI1 received data */
//	HAL_SPI_Receive(&hspi3, &temp, 1, 100);

	HAL_SPI_TransmitReceive(&hspi3, &cmd, &temp, 1, 100);
 8000d1a:	f107 020f 	add.w	r2, r7, #15
 8000d1e:	1df9      	adds	r1, r7, #7
 8000d20:	2364      	movs	r3, #100	; 0x64
 8000d22:	9300      	str	r3, [sp, #0]
 8000d24:	2301      	movs	r3, #1
 8000d26:	4804      	ldr	r0, [pc, #16]	; (8000d38 <WR_CMD+0x28>)
 8000d28:	f003 fd86 	bl	8004838 <HAL_SPI_TransmitReceive>

	return temp;
 8000d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3710      	adds	r7, #16
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	200004b4 	.word	0x200004b4

08000d3c <spi_Select>:

/**
 * select esc SPI  NSS pin reset
 */
void	spi_Select	(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI3_NSS_GPIO_Port, SPI3_NSS_Pin, GPIO_PIN_RESET);
 8000d40:	2200      	movs	r2, #0
 8000d42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d46:	4802      	ldr	r0, [pc, #8]	; (8000d50 <spi_Select+0x14>)
 8000d48:	f002 fc32 	bl	80035b0 <HAL_GPIO_WritePin>
}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40020000 	.word	0x40020000

08000d54 <spi_Deselect>:

/**
 * deselect esc SPI  NSS pin set
 */
void	spi_Deselect(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI3_NSS_GPIO_Port, SPI3_NSS_Pin, GPIO_PIN_SET);
 8000d58:	2201      	movs	r2, #1
 8000d5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d5e:	4802      	ldr	r0, [pc, #8]	; (8000d68 <spi_Deselect+0x14>)
 8000d60:	f002 fc26 	bl	80035b0 <HAL_GPIO_WritePin>
}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40020000 	.word	0x40020000

08000d6c <al_Event_Int_Enable>:

/**
 *	enable PDI_IRQ, SYNC0, SYNC1 interrupt
 */
void	al_Event_Int_Enable	(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000d70:	2017      	movs	r0, #23
 8000d72:	f001 f9d9 	bl	8002128 <HAL_NVIC_EnableIRQ>
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <al_Event_Int_Disable>:

/**
 * disable PDI_IRQ, SYNC0, SYNC1 interrupt
 */
void	al_Event_Int_Disable(void)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8000d7e:	2017      	movs	r0, #23
 8000d80:	f001 f9ea 	bl	8002158 <HAL_NVIC_DisableIRQ>
}
 8000d84:	bf00      	nop
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <timer_Esc_IT_Start>:
extern	TIM_HandleTypeDef htim6;
/**
 * Timer6 ESC-tim start IT mode
 */
void	timer_Esc_IT_Start	(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim6);
 8000d8c:	4802      	ldr	r0, [pc, #8]	; (8000d98 <timer_Esc_IT_Start+0x10>)
 8000d8e:	f004 f8bb 	bl	8004f08 <HAL_TIM_Base_Start_IT>
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	2000051c 	.word	0x2000051c

08000d9c <timer_Get_Value>:

/**
 * Timer6 counter value get
 */
uint32_t	timer_Get_Value	(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
	return	__HAL_TIM_GET_COUNTER(&htim6);
 8000da0:	4b03      	ldr	r3, [pc, #12]	; (8000db0 <timer_Get_Value+0x14>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	2000051c 	.word	0x2000051c

08000db4 <enable_Irq_Sync0_Sync1>:

/**
 * Enable ESC INT, SYNC0, SYNC1
 */
void	enable_Irq_Sync0_Sync1	(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	al_Event_Int_Enable();
 8000db8:	f7ff ffd8 	bl	8000d6c <al_Event_Int_Enable>
	__HAL_TIM_ENABLE_IT(&htim6, TIM_IT_UPDATE|TIM_IT_BREAK);
 8000dbc:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <enable_Irq_Sync0_Sync1+0x1c>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	68da      	ldr	r2, [r3, #12]
 8000dc2:	4b03      	ldr	r3, [pc, #12]	; (8000dd0 <enable_Irq_Sync0_Sync1+0x1c>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f042 0281 	orr.w	r2, r2, #129	; 0x81
 8000dca:	60da      	str	r2, [r3, #12]
}
 8000dcc:	bf00      	nop
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	2000051c 	.word	0x2000051c

08000dd4 <disable_Irq_Sync0_Sync1>:

/**
 * Disable ESC INT, SYNC0, SYNC1
 */
void	disable_Irq_Sync0_Sync1	(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
	al_Event_Int_Disable();
 8000dd8:	f7ff ffcf 	bl	8000d7a <al_Event_Int_Disable>
	__HAL_TIM_DISABLE_IT(&htim6, TIM_IT_UPDATE|TIM_IT_BREAK);
 8000ddc:	4b04      	ldr	r3, [pc, #16]	; (8000df0 <disable_Irq_Sync0_Sync1+0x1c>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	68da      	ldr	r2, [r3, #12]
 8000de2:	4b03      	ldr	r3, [pc, #12]	; (8000df0 <disable_Irq_Sync0_Sync1+0x1c>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f022 0281 	bic.w	r2, r2, #129	; 0x81
 8000dea:	60da      	str	r2, [r3, #12]
}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	2000051c 	.word	0x2000051c

08000df4 <HAL_TIM_PeriodElapsedCallback>:
/**
 * ESC related PDI_IRQ, SYNC0, SYNC1 interrupt callback
 * and others interrupt callback can be add to here
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
	// timer6 used esc timer 1ms
	if (htim->Instance == htim6.Instance)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d10d      	bne.n	8000e24 <HAL_TIM_PeriodElapsedCallback+0x30>
	{
		/** from <el9800w.c> */
		ECAT_CheckTimer();
 8000e08:	f005 fb44 	bl	8006494 <ECAT_CheckTimer>
		static	int cnt = 0;
		if (200 == cnt)
 8000e0c:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2bc8      	cmp	r3, #200	; 0xc8
 8000e12:	d102      	bne.n	8000e1a <HAL_TIM_PeriodElapsedCallback+0x26>
		{
			cnt = 0;
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
//			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
		}
		cnt++;
 8000e1a:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	4a03      	ldr	r2, [pc, #12]	; (8000e30 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000e22:	6013      	str	r3, [r2, #0]

	}
}
 8000e24:	bf00      	nop
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	2000051c 	.word	0x2000051c
 8000e30:	20000510 	.word	0x20000510

08000e34 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	80fb      	strh	r3, [r7, #6]
	/** handler PDI_IRQ interrupt */
	if (PDI_IRQ_Pin == GPIO_Pin)
 8000e3e:	88fb      	ldrh	r3, [r7, #6]
 8000e40:	2b20      	cmp	r3, #32
 8000e42:	d10e      	bne.n	8000e62 <HAL_GPIO_EXTI_Callback+0x2e>
	{
		/** from <el9800w.c> */
		EscIsr();
 8000e44:	f008 fb75 	bl	8009532 <EscIsr>
		static int cntIrq = 0;
		if (cntIrq == 500)
 8000e48:	4b1e      	ldr	r3, [pc, #120]	; (8000ec4 <HAL_GPIO_EXTI_Callback+0x90>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000e50:	d102      	bne.n	8000e58 <HAL_GPIO_EXTI_Callback+0x24>
		{
//			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
			cntIrq = 0;
 8000e52:	4b1c      	ldr	r3, [pc, #112]	; (8000ec4 <HAL_GPIO_EXTI_Callback+0x90>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
		}
		cntIrq++;
 8000e58:	4b1a      	ldr	r3, [pc, #104]	; (8000ec4 <HAL_GPIO_EXTI_Callback+0x90>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	4a19      	ldr	r2, [pc, #100]	; (8000ec4 <HAL_GPIO_EXTI_Callback+0x90>)
 8000e60:	6013      	str	r3, [r2, #0]
	}
	/** handler SYNC0 interrupt */
	if (sync0_Pin == GPIO_Pin)
 8000e62:	88fb      	ldrh	r3, [r7, #6]
 8000e64:	2b40      	cmp	r3, #64	; 0x40
 8000e66:	d101      	bne.n	8000e6c <HAL_GPIO_EXTI_Callback+0x38>
	{
		/** from <el9800w.c> */
		Sync0Isr();
 8000e68:	f008 fb69 	bl	800953e <Sync0Isr>
//		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
	}
	/** handler SYNC1 interrupt */
	if (sync1_Pin == GPIO_Pin)
 8000e6c:	88fb      	ldrh	r3, [r7, #6]
 8000e6e:	2b80      	cmp	r3, #128	; 0x80
 8000e70:	d101      	bne.n	8000e76 <HAL_GPIO_EXTI_Callback+0x42>
	{
		/** from <el9800w.c> */
		Sync1Isr();
 8000e72:	f008 fb6a 	bl	800954a <Sync1Isr>
	}

	/** handler User BTB interrupt */
	if (USER_Btn_Pin == GPIO_Pin)
 8000e76:	88fb      	ldrh	r3, [r7, #6]
 8000e78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e7c:	d11d      	bne.n	8000eba <HAL_GPIO_EXTI_Callback+0x86>
	{
//		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		int cntBtn = 0;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60fb      	str	r3, [r7, #12]
		for (cntBtn = 2000; cntBtn > 0; cntBtn--);
 8000e82:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	e002      	b.n	8000e90 <HAL_GPIO_EXTI_Callback+0x5c>
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	dcf9      	bgt.n	8000e8a <HAL_GPIO_EXTI_Callback+0x56>
		if (HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin))
 8000e96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e9a:	480b      	ldr	r0, [pc, #44]	; (8000ec8 <HAL_GPIO_EXTI_Callback+0x94>)
 8000e9c:	f002 fb62 	bl	8003564 <HAL_GPIO_ReadPin>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d009      	beq.n	8000eba <HAL_GPIO_EXTI_Callback+0x86>
			userBtn1Bit = !userBtn1Bit;
 8000ea6:	4b09      	ldr	r3, [pc, #36]	; (8000ecc <HAL_GPIO_EXTI_Callback+0x98>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	bf0c      	ite	eq
 8000eae:	2301      	moveq	r3, #1
 8000eb0:	2300      	movne	r3, #0
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <HAL_GPIO_EXTI_Callback+0x98>)
 8000eb8:	701a      	strb	r2, [r3, #0]
	}
}
 8000eba:	bf00      	nop
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000514 	.word	0x20000514
 8000ec8:	40020800 	.word	0x40020800
 8000ecc:	2000050c 	.word	0x2000050c

08000ed0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	607b      	str	r3, [r7, #4]
 8000eda:	4b10      	ldr	r3, [pc, #64]	; (8000f1c <HAL_MspInit+0x4c>)
 8000edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ede:	4a0f      	ldr	r2, [pc, #60]	; (8000f1c <HAL_MspInit+0x4c>)
 8000ee0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ee4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ee6:	4b0d      	ldr	r3, [pc, #52]	; (8000f1c <HAL_MspInit+0x4c>)
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eee:	607b      	str	r3, [r7, #4]
 8000ef0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	603b      	str	r3, [r7, #0]
 8000ef6:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <HAL_MspInit+0x4c>)
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efa:	4a08      	ldr	r2, [pc, #32]	; (8000f1c <HAL_MspInit+0x4c>)
 8000efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f00:	6413      	str	r3, [r2, #64]	; 0x40
 8000f02:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <HAL_MspInit+0x4c>)
 8000f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f0a:	603b      	str	r3, [r7, #0]
 8000f0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	40023800 	.word	0x40023800

08000f20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f24:	e7fe      	b.n	8000f24 <NMI_Handler+0x4>

08000f26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f2a:	e7fe      	b.n	8000f2a <HardFault_Handler+0x4>

08000f2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f30:	e7fe      	b.n	8000f30 <MemManage_Handler+0x4>

08000f32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f32:	b480      	push	{r7}
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f36:	e7fe      	b.n	8000f36 <BusFault_Handler+0x4>

08000f38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f3c:	e7fe      	b.n	8000f3c <UsageFault_Handler+0x4>

08000f3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f6c:	f000 f9c4 	bl	80012f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f70:	bf00      	nop
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PDI_IRQ_Pin);
 8000f78:	2020      	movs	r0, #32
 8000f7a:	f002 fb4b 	bl	8003614 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(sync0_Pin);
 8000f7e:	2040      	movs	r0, #64	; 0x40
 8000f80:	f002 fb48 	bl	8003614 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(sync1_Pin);
 8000f84:	2080      	movs	r0, #128	; 0x80
 8000f86:	f002 fb45 	bl	8003614 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000f92:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f96:	f002 fb3d 	bl	8003614 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8000fa4:	4803      	ldr	r0, [pc, #12]	; (8000fb4 <TIM6_DAC_IRQHandler+0x14>)
 8000fa6:	f001 f989 	bl	80022bc <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8000faa:	4803      	ldr	r0, [pc, #12]	; (8000fb8 <TIM6_DAC_IRQHandler+0x18>)
 8000fac:	f004 f872 	bl	8005094 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	2000049c 	.word	0x2000049c
 8000fb8:	2000051c 	.word	0x2000051c

08000fbc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000fc0:	4802      	ldr	r0, [pc, #8]	; (8000fcc <DMA2_Stream0_IRQHandler+0x10>)
 8000fc2:	f001 fd41 	bl	8002a48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000438 	.word	0x20000438

08000fd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fd8:	4a14      	ldr	r2, [pc, #80]	; (800102c <_sbrk+0x5c>)
 8000fda:	4b15      	ldr	r3, [pc, #84]	; (8001030 <_sbrk+0x60>)
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fe4:	4b13      	ldr	r3, [pc, #76]	; (8001034 <_sbrk+0x64>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d102      	bne.n	8000ff2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fec:	4b11      	ldr	r3, [pc, #68]	; (8001034 <_sbrk+0x64>)
 8000fee:	4a12      	ldr	r2, [pc, #72]	; (8001038 <_sbrk+0x68>)
 8000ff0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ff2:	4b10      	ldr	r3, [pc, #64]	; (8001034 <_sbrk+0x64>)
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d207      	bcs.n	8001010 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001000:	f00b fed8 	bl	800cdb4 <__errno>
 8001004:	4603      	mov	r3, r0
 8001006:	220c      	movs	r2, #12
 8001008:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800100a:	f04f 33ff 	mov.w	r3, #4294967295
 800100e:	e009      	b.n	8001024 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001010:	4b08      	ldr	r3, [pc, #32]	; (8001034 <_sbrk+0x64>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001016:	4b07      	ldr	r3, [pc, #28]	; (8001034 <_sbrk+0x64>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4413      	add	r3, r2
 800101e:	4a05      	ldr	r2, [pc, #20]	; (8001034 <_sbrk+0x64>)
 8001020:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001022:	68fb      	ldr	r3, [r7, #12]
}
 8001024:	4618      	mov	r0, r3
 8001026:	3718      	adds	r7, #24
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20020000 	.word	0x20020000
 8001030:	00000b00 	.word	0x00000b00
 8001034:	20000518 	.word	0x20000518
 8001038:	20000bf0 	.word	0x20000bf0

0800103c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <SystemInit+0x20>)
 8001042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001046:	4a05      	ldr	r2, [pc, #20]	; (800105c <SystemInit+0x20>)
 8001048:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800104c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001066:	463b      	mov	r3, r7
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800106e:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <MX_TIM6_Init+0x64>)
 8001070:	4a15      	ldr	r2, [pc, #84]	; (80010c8 <MX_TIM6_Init+0x68>)
 8001072:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 90-1;
 8001074:	4b13      	ldr	r3, [pc, #76]	; (80010c4 <MX_TIM6_Init+0x64>)
 8001076:	2259      	movs	r2, #89	; 0x59
 8001078:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800107a:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <MX_TIM6_Init+0x64>)
 800107c:	2200      	movs	r2, #0
 800107e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8001080:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <MX_TIM6_Init+0x64>)
 8001082:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001086:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001088:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <MX_TIM6_Init+0x64>)
 800108a:	2280      	movs	r2, #128	; 0x80
 800108c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800108e:	480d      	ldr	r0, [pc, #52]	; (80010c4 <MX_TIM6_Init+0x64>)
 8001090:	f003 fe4a 	bl	8004d28 <HAL_TIM_Base_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800109a:	f7ff fdab 	bl	8000bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800109e:	2300      	movs	r3, #0
 80010a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a2:	2300      	movs	r3, #0
 80010a4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80010a6:	463b      	mov	r3, r7
 80010a8:	4619      	mov	r1, r3
 80010aa:	4806      	ldr	r0, [pc, #24]	; (80010c4 <MX_TIM6_Init+0x64>)
 80010ac:	f004 f9c2 	bl	8005434 <HAL_TIMEx_MasterConfigSynchronization>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80010b6:	f7ff fd9d 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	2000051c 	.word	0x2000051c
 80010c8:	40001000 	.word	0x40001000

080010cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a0e      	ldr	r2, [pc, #56]	; (8001114 <HAL_TIM_Base_MspInit+0x48>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d115      	bne.n	800110a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	4b0d      	ldr	r3, [pc, #52]	; (8001118 <HAL_TIM_Base_MspInit+0x4c>)
 80010e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e6:	4a0c      	ldr	r2, [pc, #48]	; (8001118 <HAL_TIM_Base_MspInit+0x4c>)
 80010e8:	f043 0310 	orr.w	r3, r3, #16
 80010ec:	6413      	str	r3, [r2, #64]	; 0x40
 80010ee:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <HAL_TIM_Base_MspInit+0x4c>)
 80010f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f2:	f003 0310 	and.w	r3, r3, #16
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80010fa:	2200      	movs	r2, #0
 80010fc:	2100      	movs	r1, #0
 80010fe:	2036      	movs	r0, #54	; 0x36
 8001100:	f000 ffe6 	bl	80020d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001104:	2036      	movs	r0, #54	; 0x36
 8001106:	f001 f80f 	bl	8002128 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800110a:	bf00      	nop
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40001000 	.word	0x40001000
 8001118:	40023800 	.word	0x40023800

0800111c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001120:	4b11      	ldr	r3, [pc, #68]	; (8001168 <MX_USART3_UART_Init+0x4c>)
 8001122:	4a12      	ldr	r2, [pc, #72]	; (800116c <MX_USART3_UART_Init+0x50>)
 8001124:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001126:	4b10      	ldr	r3, [pc, #64]	; (8001168 <MX_USART3_UART_Init+0x4c>)
 8001128:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800112c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800112e:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <MX_USART3_UART_Init+0x4c>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001134:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <MX_USART3_UART_Init+0x4c>)
 8001136:	2200      	movs	r2, #0
 8001138:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800113a:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <MX_USART3_UART_Init+0x4c>)
 800113c:	2200      	movs	r2, #0
 800113e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001140:	4b09      	ldr	r3, [pc, #36]	; (8001168 <MX_USART3_UART_Init+0x4c>)
 8001142:	220c      	movs	r2, #12
 8001144:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001146:	4b08      	ldr	r3, [pc, #32]	; (8001168 <MX_USART3_UART_Init+0x4c>)
 8001148:	2200      	movs	r2, #0
 800114a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800114c:	4b06      	ldr	r3, [pc, #24]	; (8001168 <MX_USART3_UART_Init+0x4c>)
 800114e:	2200      	movs	r2, #0
 8001150:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001152:	4805      	ldr	r0, [pc, #20]	; (8001168 <MX_USART3_UART_Init+0x4c>)
 8001154:	f004 fa60 	bl	8005618 <HAL_UART_Init>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800115e:	f7ff fd49 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000564 	.word	0x20000564
 800116c:	40004800 	.word	0x40004800

08001170 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08a      	sub	sp, #40	; 0x28
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001178:	f107 0314 	add.w	r3, r7, #20
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a19      	ldr	r2, [pc, #100]	; (80011f4 <HAL_UART_MspInit+0x84>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d12c      	bne.n	80011ec <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]
 8001196:	4b18      	ldr	r3, [pc, #96]	; (80011f8 <HAL_UART_MspInit+0x88>)
 8001198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119a:	4a17      	ldr	r2, [pc, #92]	; (80011f8 <HAL_UART_MspInit+0x88>)
 800119c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011a0:	6413      	str	r3, [r2, #64]	; 0x40
 80011a2:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <HAL_UART_MspInit+0x88>)
 80011a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011aa:	613b      	str	r3, [r7, #16]
 80011ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <HAL_UART_MspInit+0x88>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a10      	ldr	r2, [pc, #64]	; (80011f8 <HAL_UART_MspInit+0x88>)
 80011b8:	f043 0308 	orr.w	r3, r3, #8
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <HAL_UART_MspInit+0x88>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0308 	and.w	r3, r3, #8
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80011ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d0:	2302      	movs	r3, #2
 80011d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d8:	2303      	movs	r3, #3
 80011da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011dc:	2307      	movs	r3, #7
 80011de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011e0:	f107 0314 	add.w	r3, r7, #20
 80011e4:	4619      	mov	r1, r3
 80011e6:	4805      	ldr	r0, [pc, #20]	; (80011fc <HAL_UART_MspInit+0x8c>)
 80011e8:	f001 fe98 	bl	8002f1c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80011ec:	bf00      	nop
 80011ee:	3728      	adds	r7, #40	; 0x28
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40004800 	.word	0x40004800
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40020c00 	.word	0x40020c00

08001200 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001200:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001238 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001204:	480d      	ldr	r0, [pc, #52]	; (800123c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001206:	490e      	ldr	r1, [pc, #56]	; (8001240 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001208:	4a0e      	ldr	r2, [pc, #56]	; (8001244 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800120a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800120c:	e002      	b.n	8001214 <LoopCopyDataInit>

0800120e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800120e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001210:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001212:	3304      	adds	r3, #4

08001214 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001214:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001216:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001218:	d3f9      	bcc.n	800120e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800121a:	4a0b      	ldr	r2, [pc, #44]	; (8001248 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800121c:	4c0b      	ldr	r4, [pc, #44]	; (800124c <LoopFillZerobss+0x26>)
  movs r3, #0
 800121e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001220:	e001      	b.n	8001226 <LoopFillZerobss>

08001222 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001222:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001224:	3204      	adds	r2, #4

08001226 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001226:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001228:	d3fb      	bcc.n	8001222 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800122a:	f7ff ff07 	bl	800103c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800122e:	f00b fdc7 	bl	800cdc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001232:	f7ff fc47 	bl	8000ac4 <main>
  bx  lr    
 8001236:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001238:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800123c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001240:	200003d4 	.word	0x200003d4
  ldr r2, =_sidata
 8001244:	0800dc04 	.word	0x0800dc04
  ldr r2, =_sbss
 8001248:	200003d4 	.word	0x200003d4
  ldr r4, =_ebss
 800124c:	20000bec 	.word	0x20000bec

08001250 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001250:	e7fe      	b.n	8001250 <ADC_IRQHandler>
	...

08001254 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001258:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <HAL_Init+0x40>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a0d      	ldr	r2, [pc, #52]	; (8001294 <HAL_Init+0x40>)
 800125e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001262:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001264:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <HAL_Init+0x40>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a0a      	ldr	r2, [pc, #40]	; (8001294 <HAL_Init+0x40>)
 800126a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800126e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001270:	4b08      	ldr	r3, [pc, #32]	; (8001294 <HAL_Init+0x40>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a07      	ldr	r2, [pc, #28]	; (8001294 <HAL_Init+0x40>)
 8001276:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800127a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800127c:	2003      	movs	r0, #3
 800127e:	f000 ff07 	bl	8002090 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001282:	2000      	movs	r0, #0
 8001284:	f000 f808 	bl	8001298 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001288:	f7ff fe22 	bl	8000ed0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40023c00 	.word	0x40023c00

08001298 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012a0:	4b12      	ldr	r3, [pc, #72]	; (80012ec <HAL_InitTick+0x54>)
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <HAL_InitTick+0x58>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	4619      	mov	r1, r3
 80012aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80012b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012b6:	4618      	mov	r0, r3
 80012b8:	f000 ff66 	bl	8002188 <HAL_SYSTICK_Config>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e00e      	b.n	80012e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2b0f      	cmp	r3, #15
 80012ca:	d80a      	bhi.n	80012e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012cc:	2200      	movs	r2, #0
 80012ce:	6879      	ldr	r1, [r7, #4]
 80012d0:	f04f 30ff 	mov.w	r0, #4294967295
 80012d4:	f000 fefc 	bl	80020d0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012d8:	4a06      	ldr	r2, [pc, #24]	; (80012f4 <HAL_InitTick+0x5c>)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012de:	2300      	movs	r3, #0
 80012e0:	e000      	b.n	80012e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20000000 	.word	0x20000000
 80012f0:	20000008 	.word	0x20000008
 80012f4:	20000004 	.word	0x20000004

080012f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012fc:	4b06      	ldr	r3, [pc, #24]	; (8001318 <HAL_IncTick+0x20>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	461a      	mov	r2, r3
 8001302:	4b06      	ldr	r3, [pc, #24]	; (800131c <HAL_IncTick+0x24>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4413      	add	r3, r2
 8001308:	4a04      	ldr	r2, [pc, #16]	; (800131c <HAL_IncTick+0x24>)
 800130a:	6013      	str	r3, [r2, #0]
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	20000008 	.word	0x20000008
 800131c:	200005a8 	.word	0x200005a8

08001320 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return uwTick;
 8001324:	4b03      	ldr	r3, [pc, #12]	; (8001334 <HAL_GetTick+0x14>)
 8001326:	681b      	ldr	r3, [r3, #0]
}
 8001328:	4618      	mov	r0, r3
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	200005a8 	.word	0x200005a8

08001338 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001340:	2300      	movs	r3, #0
 8001342:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d101      	bne.n	800134e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e15c      	b.n	8001608 <HAL_ADC_Init+0x2d0>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a8e      	ldr	r2, [pc, #568]	; (800158c <HAL_ADC_Init+0x254>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d00e      	beq.n	8001376 <HAL_ADC_Init+0x3e>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a8c      	ldr	r2, [pc, #560]	; (8001590 <HAL_ADC_Init+0x258>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d009      	beq.n	8001376 <HAL_ADC_Init+0x3e>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a8b      	ldr	r2, [pc, #556]	; (8001594 <HAL_ADC_Init+0x25c>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d004      	beq.n	8001376 <HAL_ADC_Init+0x3e>
 800136c:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8001370:	4889      	ldr	r0, [pc, #548]	; (8001598 <HAL_ADC_Init+0x260>)
 8001372:	f7ff fc44 	bl	8000bfe <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d013      	beq.n	80013a6 <HAL_ADC_Init+0x6e>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001386:	d00e      	beq.n	80013a6 <HAL_ADC_Init+0x6e>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001390:	d009      	beq.n	80013a6 <HAL_ADC_Init+0x6e>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800139a:	d004      	beq.n	80013a6 <HAL_ADC_Init+0x6e>
 800139c:	f240 1143 	movw	r1, #323	; 0x143
 80013a0:	487d      	ldr	r0, [pc, #500]	; (8001598 <HAL_ADC_Init+0x260>)
 80013a2:	f7ff fc2c 	bl	8000bfe <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d013      	beq.n	80013d6 <HAL_ADC_Init+0x9e>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013b6:	d00e      	beq.n	80013d6 <HAL_ADC_Init+0x9e>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80013c0:	d009      	beq.n	80013d6 <HAL_ADC_Init+0x9e>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80013ca:	d004      	beq.n	80013d6 <HAL_ADC_Init+0x9e>
 80013cc:	f44f 71a2 	mov.w	r1, #324	; 0x144
 80013d0:	4871      	ldr	r0, [pc, #452]	; (8001598 <HAL_ADC_Init+0x260>)
 80013d2:	f7ff fc14 	bl	8000bfe <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	691b      	ldr	r3, [r3, #16]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d008      	beq.n	80013f0 <HAL_ADC_Init+0xb8>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	691b      	ldr	r3, [r3, #16]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d004      	beq.n	80013f0 <HAL_ADC_Init+0xb8>
 80013e6:	f240 1145 	movw	r1, #325	; 0x145
 80013ea:	486b      	ldr	r0, [pc, #428]	; (8001598 <HAL_ADC_Init+0x260>)
 80013ec:	f7ff fc07 	bl	8000bfe <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	7e1b      	ldrb	r3, [r3, #24]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d008      	beq.n	800140a <HAL_ADC_Init+0xd2>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	7e1b      	ldrb	r3, [r3, #24]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d004      	beq.n	800140a <HAL_ADC_Init+0xd2>
 8001400:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8001404:	4864      	ldr	r0, [pc, #400]	; (8001598 <HAL_ADC_Init+0x260>)
 8001406:	f7ff fbfa 	bl	8000bfe <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800140e:	2b00      	cmp	r3, #0
 8001410:	d054      	beq.n	80014bc <HAL_ADC_Init+0x184>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001416:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800141a:	d04f      	beq.n	80014bc <HAL_ADC_Init+0x184>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001420:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001424:	d04a      	beq.n	80014bc <HAL_ADC_Init+0x184>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800142a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800142e:	d045      	beq.n	80014bc <HAL_ADC_Init+0x184>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001434:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001438:	d040      	beq.n	80014bc <HAL_ADC_Init+0x184>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800143e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8001442:	d03b      	beq.n	80014bc <HAL_ADC_Init+0x184>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001448:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800144c:	d036      	beq.n	80014bc <HAL_ADC_Init+0x184>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001452:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 8001456:	d031      	beq.n	80014bc <HAL_ADC_Init+0x184>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800145c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001460:	d02c      	beq.n	80014bc <HAL_ADC_Init+0x184>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001466:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 800146a:	d027      	beq.n	80014bc <HAL_ADC_Init+0x184>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001470:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8001474:	d022      	beq.n	80014bc <HAL_ADC_Init+0x184>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800147a:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 800147e:	d01d      	beq.n	80014bc <HAL_ADC_Init+0x184>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001484:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8001488:	d018      	beq.n	80014bc <HAL_ADC_Init+0x184>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800148e:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 8001492:	d013      	beq.n	80014bc <HAL_ADC_Init+0x184>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001498:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 800149c:	d00e      	beq.n	80014bc <HAL_ADC_Init+0x184>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80014a6:	d009      	beq.n	80014bc <HAL_ADC_Init+0x184>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ac:	4a3b      	ldr	r2, [pc, #236]	; (800159c <HAL_ADC_Init+0x264>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d004      	beq.n	80014bc <HAL_ADC_Init+0x184>
 80014b2:	f240 1147 	movw	r1, #327	; 0x147
 80014b6:	4838      	ldr	r0, [pc, #224]	; (8001598 <HAL_ADC_Init+0x260>)
 80014b8:	f7ff fba1 	bl	8000bfe <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d009      	beq.n	80014d8 <HAL_ADC_Init+0x1a0>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80014cc:	d004      	beq.n	80014d8 <HAL_ADC_Init+0x1a0>
 80014ce:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80014d2:	4831      	ldr	r0, [pc, #196]	; (8001598 <HAL_ADC_Init+0x260>)
 80014d4:	f7ff fb93 	bl	8000bfe <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	69db      	ldr	r3, [r3, #28]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d003      	beq.n	80014e8 <HAL_ADC_Init+0x1b0>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	69db      	ldr	r3, [r3, #28]
 80014e4:	2b10      	cmp	r3, #16
 80014e6:	d904      	bls.n	80014f2 <HAL_ADC_Init+0x1ba>
 80014e8:	f240 1149 	movw	r1, #329	; 0x149
 80014ec:	482a      	ldr	r0, [pc, #168]	; (8001598 <HAL_ADC_Init+0x260>)
 80014ee:	f7ff fb86 	bl	8000bfe <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d009      	beq.n	8001510 <HAL_ADC_Init+0x1d8>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001502:	2b01      	cmp	r3, #1
 8001504:	d004      	beq.n	8001510 <HAL_ADC_Init+0x1d8>
 8001506:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800150a:	4823      	ldr	r0, [pc, #140]	; (8001598 <HAL_ADC_Init+0x260>)
 800150c:	f7ff fb77 	bl	8000bfe <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	695b      	ldr	r3, [r3, #20]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d00c      	beq.n	8001532 <HAL_ADC_Init+0x1fa>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	695b      	ldr	r3, [r3, #20]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d008      	beq.n	8001532 <HAL_ADC_Init+0x1fa>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	695b      	ldr	r3, [r3, #20]
 8001524:	2b02      	cmp	r3, #2
 8001526:	d004      	beq.n	8001532 <HAL_ADC_Init+0x1fa>
 8001528:	f240 114b 	movw	r1, #331	; 0x14b
 800152c:	481a      	ldr	r0, [pc, #104]	; (8001598 <HAL_ADC_Init+0x260>)
 800152e:	f7ff fb66 	bl	8000bfe <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d009      	beq.n	8001550 <HAL_ADC_Init+0x218>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d004      	beq.n	8001550 <HAL_ADC_Init+0x218>
 8001546:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800154a:	4813      	ldr	r0, [pc, #76]	; (8001598 <HAL_ADC_Init+0x260>)
 800154c:	f7ff fb57 	bl	8000bfe <assert_failed>
  
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001554:	4a11      	ldr	r2, [pc, #68]	; (800159c <HAL_ADC_Init+0x264>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d022      	beq.n	80015a0 <HAL_ADC_Init+0x268>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800155e:	2b00      	cmp	r3, #0
 8001560:	d01e      	beq.n	80015a0 <HAL_ADC_Init+0x268>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001566:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800156a:	d019      	beq.n	80015a0 <HAL_ADC_Init+0x268>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001570:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001574:	d014      	beq.n	80015a0 <HAL_ADC_Init+0x268>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800157a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800157e:	d00f      	beq.n	80015a0 <HAL_ADC_Init+0x268>
 8001580:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8001584:	4804      	ldr	r0, [pc, #16]	; (8001598 <HAL_ADC_Init+0x260>)
 8001586:	f7ff fb3a 	bl	8000bfe <assert_failed>
 800158a:	e009      	b.n	80015a0 <HAL_ADC_Init+0x268>
 800158c:	40012000 	.word	0x40012000
 8001590:	40012100 	.word	0x40012100
 8001594:	40012200 	.word	0x40012200
 8001598:	0800d088 	.word	0x0800d088
 800159c:	0f000001 	.word	0x0f000001
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d109      	bne.n	80015bc <HAL_ADC_Init+0x284>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f7ff f807 	bl	80005bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2200      	movs	r2, #0
 80015b2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c0:	f003 0310 	and.w	r3, r3, #16
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d118      	bne.n	80015fa <HAL_ADC_Init+0x2c2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015cc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80015d0:	f023 0302 	bic.w	r3, r3, #2
 80015d4:	f043 0202 	orr.w	r2, r3, #2
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f000 fad7 	bl	8001b90 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ec:	f023 0303 	bic.w	r3, r3, #3
 80015f0:	f043 0201 	orr.w	r2, r3, #1
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	641a      	str	r2, [r3, #64]	; 0x40
 80015f8:	e001      	b.n	80015fe <HAL_ADC_Init+0x2c6>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001606:	7bfb      	ldrb	r3, [r7, #15]
}
 8001608:	4618      	mov	r0, r3
 800160a:	3710      	adds	r7, #16
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800161c:	2300      	movs	r3, #0
 800161e:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	7e1b      	ldrb	r3, [r3, #24]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d008      	beq.n	800163a <HAL_ADC_Start_DMA+0x2a>
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	7e1b      	ldrb	r3, [r3, #24]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d004      	beq.n	800163a <HAL_ADC_Start_DMA+0x2a>
 8001630:	f240 515a 	movw	r1, #1370	; 0x55a
 8001634:	4887      	ldr	r0, [pc, #540]	; (8001854 <HAL_ADC_Start_DMA+0x244>)
 8001636:	f7ff fae2 	bl	8000bfe <assert_failed>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800163e:	2b00      	cmp	r3, #0
 8001640:	d013      	beq.n	800166a <HAL_ADC_Start_DMA+0x5a>
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001646:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800164a:	d00e      	beq.n	800166a <HAL_ADC_Start_DMA+0x5a>
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001650:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001654:	d009      	beq.n	800166a <HAL_ADC_Start_DMA+0x5a>
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800165a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800165e:	d004      	beq.n	800166a <HAL_ADC_Start_DMA+0x5a>
 8001660:	f240 515b 	movw	r1, #1371	; 0x55b
 8001664:	487b      	ldr	r0, [pc, #492]	; (8001854 <HAL_ADC_Start_DMA+0x244>)
 8001666:	f7ff faca 	bl	8000bfe <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001670:	2b01      	cmp	r3, #1
 8001672:	d101      	bne.n	8001678 <HAL_ADC_Start_DMA+0x68>
 8001674:	2302      	movs	r3, #2
 8001676:	e0e9      	b.n	800184c <HAL_ADC_Start_DMA+0x23c>
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2201      	movs	r2, #1
 800167c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	2b01      	cmp	r3, #1
 800168c:	d018      	beq.n	80016c0 <HAL_ADC_Start_DMA+0xb0>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	689a      	ldr	r2, [r3, #8]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f042 0201 	orr.w	r2, r2, #1
 800169c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800169e:	4b6e      	ldr	r3, [pc, #440]	; (8001858 <HAL_ADC_Start_DMA+0x248>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a6e      	ldr	r2, [pc, #440]	; (800185c <HAL_ADC_Start_DMA+0x24c>)
 80016a4:	fba2 2303 	umull	r2, r3, r2, r3
 80016a8:	0c9a      	lsrs	r2, r3, #18
 80016aa:	4613      	mov	r3, r2
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	4413      	add	r3, r2
 80016b0:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80016b2:	e002      	b.n	80016ba <HAL_ADC_Start_DMA+0xaa>
    {
      counter--;
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	3b01      	subs	r3, #1
 80016b8:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d1f9      	bne.n	80016b4 <HAL_ADC_Start_DMA+0xa4>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016ce:	d107      	bne.n	80016e0 <HAL_ADC_Start_DMA+0xd0>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	689a      	ldr	r2, [r3, #8]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016de:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	f040 80a1 	bne.w	8001832 <HAL_ADC_Start_DMA+0x222>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80016f8:	f023 0301 	bic.w	r3, r3, #1
 80016fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800170e:	2b00      	cmp	r3, #0
 8001710:	d007      	beq.n	8001722 <HAL_ADC_Start_DMA+0x112>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800171a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800172a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800172e:	d106      	bne.n	800173e <HAL_ADC_Start_DMA+0x12e>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001734:	f023 0206 	bic.w	r2, r3, #6
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	645a      	str	r2, [r3, #68]	; 0x44
 800173c:	e002      	b.n	8001744 <HAL_ADC_Start_DMA+0x134>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2200      	movs	r2, #0
 8001742:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2200      	movs	r2, #0
 8001748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800174c:	4b44      	ldr	r3, [pc, #272]	; (8001860 <HAL_ADC_Start_DMA+0x250>)
 800174e:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001754:	4a43      	ldr	r2, [pc, #268]	; (8001864 <HAL_ADC_Start_DMA+0x254>)
 8001756:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800175c:	4a42      	ldr	r2, [pc, #264]	; (8001868 <HAL_ADC_Start_DMA+0x258>)
 800175e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001764:	4a41      	ldr	r2, [pc, #260]	; (800186c <HAL_ADC_Start_DMA+0x25c>)
 8001766:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001770:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	685a      	ldr	r2, [r3, #4]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001780:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	689a      	ldr	r2, [r3, #8]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001790:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	334c      	adds	r3, #76	; 0x4c
 800179c:	4619      	mov	r1, r3
 800179e:	68ba      	ldr	r2, [r7, #8]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f001 f8eb 	bl	800297c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f003 031f 	and.w	r3, r3, #31
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d12a      	bne.n	8001808 <HAL_ADC_Start_DMA+0x1f8>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a2e      	ldr	r2, [pc, #184]	; (8001870 <HAL_ADC_Start_DMA+0x260>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d015      	beq.n	80017e8 <HAL_ADC_Start_DMA+0x1d8>
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a2c      	ldr	r2, [pc, #176]	; (8001874 <HAL_ADC_Start_DMA+0x264>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d105      	bne.n	80017d2 <HAL_ADC_Start_DMA+0x1c2>
 80017c6:	4b26      	ldr	r3, [pc, #152]	; (8001860 <HAL_ADC_Start_DMA+0x250>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f003 031f 	and.w	r3, r3, #31
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d00a      	beq.n	80017e8 <HAL_ADC_Start_DMA+0x1d8>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a28      	ldr	r2, [pc, #160]	; (8001878 <HAL_ADC_Start_DMA+0x268>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d136      	bne.n	800184a <HAL_ADC_Start_DMA+0x23a>
 80017dc:	4b20      	ldr	r3, [pc, #128]	; (8001860 <HAL_ADC_Start_DMA+0x250>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f003 0310 	and.w	r3, r3, #16
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d130      	bne.n	800184a <HAL_ADC_Start_DMA+0x23a>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d129      	bne.n	800184a <HAL_ADC_Start_DMA+0x23a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	689a      	ldr	r2, [r3, #8]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001804:	609a      	str	r2, [r3, #8]
 8001806:	e020      	b.n	800184a <HAL_ADC_Start_DMA+0x23a>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a18      	ldr	r2, [pc, #96]	; (8001870 <HAL_ADC_Start_DMA+0x260>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d11b      	bne.n	800184a <HAL_ADC_Start_DMA+0x23a>
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d114      	bne.n	800184a <HAL_ADC_Start_DMA+0x23a>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	689a      	ldr	r2, [r3, #8]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800182e:	609a      	str	r2, [r3, #8]
 8001830:	e00b      	b.n	800184a <HAL_ADC_Start_DMA+0x23a>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	f043 0210 	orr.w	r2, r3, #16
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001842:	f043 0201 	orr.w	r2, r3, #1
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800184a:	2300      	movs	r3, #0
}
 800184c:	4618      	mov	r0, r3
 800184e:	3718      	adds	r7, #24
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	0800d088 	.word	0x0800d088
 8001858:	20000000 	.word	0x20000000
 800185c:	431bde83 	.word	0x431bde83
 8001860:	40012300 	.word	0x40012300
 8001864:	08001da5 	.word	0x08001da5
 8001868:	08001e5f 	.word	0x08001e5f
 800186c:	08001e7b 	.word	0x08001e7b
 8001870:	40012000 	.word	0x40012000
 8001874:	40012100 	.word	0x40012100
 8001878:	40012200 	.word	0x40012200

0800187c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80018ae:	2300      	movs	r3, #0
 80018b0:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2b12      	cmp	r3, #18
 80018b8:	d909      	bls.n	80018ce <HAL_ADC_ConfigChannel+0x2a>
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a72      	ldr	r2, [pc, #456]	; (8001a88 <HAL_ADC_ConfigChannel+0x1e4>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d004      	beq.n	80018ce <HAL_ADC_ConfigChannel+0x2a>
 80018c4:	f240 618b 	movw	r1, #1675	; 0x68b
 80018c8:	4870      	ldr	r0, [pc, #448]	; (8001a8c <HAL_ADC_ConfigChannel+0x1e8>)
 80018ca:	f7ff f998 	bl	8000bfe <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d003      	beq.n	80018de <HAL_ADC_ConfigChannel+0x3a>
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	2b10      	cmp	r3, #16
 80018dc:	d904      	bls.n	80018e8 <HAL_ADC_ConfigChannel+0x44>
 80018de:	f240 618c 	movw	r1, #1676	; 0x68c
 80018e2:	486a      	ldr	r0, [pc, #424]	; (8001a8c <HAL_ADC_ConfigChannel+0x1e8>)
 80018e4:	f7ff f98b 	bl	8000bfe <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d020      	beq.n	8001932 <HAL_ADC_ConfigChannel+0x8e>
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d01c      	beq.n	8001932 <HAL_ADC_ConfigChannel+0x8e>
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d018      	beq.n	8001932 <HAL_ADC_ConfigChannel+0x8e>
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	2b03      	cmp	r3, #3
 8001906:	d014      	beq.n	8001932 <HAL_ADC_ConfigChannel+0x8e>
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	2b04      	cmp	r3, #4
 800190e:	d010      	beq.n	8001932 <HAL_ADC_ConfigChannel+0x8e>
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	2b05      	cmp	r3, #5
 8001916:	d00c      	beq.n	8001932 <HAL_ADC_ConfigChannel+0x8e>
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	2b06      	cmp	r3, #6
 800191e:	d008      	beq.n	8001932 <HAL_ADC_ConfigChannel+0x8e>
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	2b07      	cmp	r3, #7
 8001926:	d004      	beq.n	8001932 <HAL_ADC_ConfigChannel+0x8e>
 8001928:	f240 618d 	movw	r1, #1677	; 0x68d
 800192c:	4857      	ldr	r0, [pc, #348]	; (8001a8c <HAL_ADC_ConfigChannel+0x1e8>)
 800192e:	f7ff f966 	bl	8000bfe <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001938:	2b01      	cmp	r3, #1
 800193a:	d101      	bne.n	8001940 <HAL_ADC_ConfigChannel+0x9c>
 800193c:	2302      	movs	r3, #2
 800193e:	e118      	b.n	8001b72 <HAL_ADC_ConfigChannel+0x2ce>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2b09      	cmp	r3, #9
 800194e:	d925      	bls.n	800199c <HAL_ADC_ConfigChannel+0xf8>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	68d9      	ldr	r1, [r3, #12]
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	b29b      	uxth	r3, r3
 800195c:	461a      	mov	r2, r3
 800195e:	4613      	mov	r3, r2
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	4413      	add	r3, r2
 8001964:	3b1e      	subs	r3, #30
 8001966:	2207      	movs	r2, #7
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	43da      	mvns	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	400a      	ands	r2, r1
 8001974:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	68d9      	ldr	r1, [r3, #12]
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	689a      	ldr	r2, [r3, #8]
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	b29b      	uxth	r3, r3
 8001986:	4618      	mov	r0, r3
 8001988:	4603      	mov	r3, r0
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	4403      	add	r3, r0
 800198e:	3b1e      	subs	r3, #30
 8001990:	409a      	lsls	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	430a      	orrs	r2, r1
 8001998:	60da      	str	r2, [r3, #12]
 800199a:	e022      	b.n	80019e2 <HAL_ADC_ConfigChannel+0x13e>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6919      	ldr	r1, [r3, #16]
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	461a      	mov	r2, r3
 80019aa:	4613      	mov	r3, r2
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	4413      	add	r3, r2
 80019b0:	2207      	movs	r2, #7
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	43da      	mvns	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	400a      	ands	r2, r1
 80019be:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	6919      	ldr	r1, [r3, #16]
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	689a      	ldr	r2, [r3, #8]
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	4618      	mov	r0, r3
 80019d2:	4603      	mov	r3, r0
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	4403      	add	r3, r0
 80019d8:	409a      	lsls	r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	430a      	orrs	r2, r1
 80019e0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	2b06      	cmp	r3, #6
 80019e8:	d824      	bhi.n	8001a34 <HAL_ADC_ConfigChannel+0x190>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685a      	ldr	r2, [r3, #4]
 80019f4:	4613      	mov	r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	4413      	add	r3, r2
 80019fa:	3b05      	subs	r3, #5
 80019fc:	221f      	movs	r2, #31
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	43da      	mvns	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	400a      	ands	r2, r1
 8001a0a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	4618      	mov	r0, r3
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685a      	ldr	r2, [r3, #4]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	4413      	add	r3, r2
 8001a24:	3b05      	subs	r3, #5
 8001a26:	fa00 f203 	lsl.w	r2, r0, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	635a      	str	r2, [r3, #52]	; 0x34
 8001a32:	e051      	b.n	8001ad8 <HAL_ADC_ConfigChannel+0x234>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	2b0c      	cmp	r3, #12
 8001a3a:	d829      	bhi.n	8001a90 <HAL_ADC_ConfigChannel+0x1ec>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685a      	ldr	r2, [r3, #4]
 8001a46:	4613      	mov	r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	4413      	add	r3, r2
 8001a4c:	3b23      	subs	r3, #35	; 0x23
 8001a4e:	221f      	movs	r2, #31
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	43da      	mvns	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	400a      	ands	r2, r1
 8001a5c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685a      	ldr	r2, [r3, #4]
 8001a70:	4613      	mov	r3, r2
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	4413      	add	r3, r2
 8001a76:	3b23      	subs	r3, #35	; 0x23
 8001a78:	fa00 f203 	lsl.w	r2, r0, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	430a      	orrs	r2, r1
 8001a82:	631a      	str	r2, [r3, #48]	; 0x30
 8001a84:	e028      	b.n	8001ad8 <HAL_ADC_ConfigChannel+0x234>
 8001a86:	bf00      	nop
 8001a88:	10000012 	.word	0x10000012
 8001a8c:	0800d088 	.word	0x0800d088
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685a      	ldr	r2, [r3, #4]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	4413      	add	r3, r2
 8001aa0:	3b41      	subs	r3, #65	; 0x41
 8001aa2:	221f      	movs	r2, #31
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	43da      	mvns	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	400a      	ands	r2, r1
 8001ab0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	4618      	mov	r0, r3
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685a      	ldr	r2, [r3, #4]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	4413      	add	r3, r2
 8001aca:	3b41      	subs	r3, #65	; 0x41
 8001acc:	fa00 f203 	lsl.w	r2, r0, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ad8:	4b28      	ldr	r3, [pc, #160]	; (8001b7c <HAL_ADC_ConfigChannel+0x2d8>)
 8001ada:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a27      	ldr	r2, [pc, #156]	; (8001b80 <HAL_ADC_ConfigChannel+0x2dc>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d10f      	bne.n	8001b06 <HAL_ADC_ConfigChannel+0x262>
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2b12      	cmp	r3, #18
 8001aec:	d10b      	bne.n	8001b06 <HAL_ADC_ConfigChannel+0x262>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a1d      	ldr	r2, [pc, #116]	; (8001b80 <HAL_ADC_ConfigChannel+0x2dc>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d12b      	bne.n	8001b68 <HAL_ADC_ConfigChannel+0x2c4>
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a1b      	ldr	r2, [pc, #108]	; (8001b84 <HAL_ADC_ConfigChannel+0x2e0>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d003      	beq.n	8001b22 <HAL_ADC_ConfigChannel+0x27e>
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2b11      	cmp	r3, #17
 8001b20:	d122      	bne.n	8001b68 <HAL_ADC_ConfigChannel+0x2c4>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a11      	ldr	r2, [pc, #68]	; (8001b84 <HAL_ADC_ConfigChannel+0x2e0>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d111      	bne.n	8001b68 <HAL_ADC_ConfigChannel+0x2c4>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b44:	4b10      	ldr	r3, [pc, #64]	; (8001b88 <HAL_ADC_ConfigChannel+0x2e4>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a10      	ldr	r2, [pc, #64]	; (8001b8c <HAL_ADC_ConfigChannel+0x2e8>)
 8001b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b4e:	0c9a      	lsrs	r2, r3, #18
 8001b50:	4613      	mov	r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	4413      	add	r3, r2
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001b5a:	e002      	b.n	8001b62 <HAL_ADC_ConfigChannel+0x2be>
      {
        counter--;
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d1f9      	bne.n	8001b5c <HAL_ADC_ConfigChannel+0x2b8>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40012300 	.word	0x40012300
 8001b80:	40012000 	.word	0x40012000
 8001b84:	10000012 	.word	0x10000012
 8001b88:	20000000 	.word	0x20000000
 8001b8c:	431bde83 	.word	0x431bde83

08001b90 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b98:	4b7f      	ldr	r3, [pc, #508]	; (8001d98 <ADC_Init+0x208>)
 8001b9a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	685a      	ldr	r2, [r3, #4]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	431a      	orrs	r2, r3
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	685a      	ldr	r2, [r3, #4]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bc4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	6859      	ldr	r1, [r3, #4]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	691b      	ldr	r3, [r3, #16]
 8001bd0:	021a      	lsls	r2, r3, #8
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	685a      	ldr	r2, [r3, #4]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001be8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	6859      	ldr	r1, [r3, #4]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689a      	ldr	r2, [r3, #8]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	689a      	ldr	r2, [r3, #8]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6899      	ldr	r1, [r3, #8]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	68da      	ldr	r2, [r3, #12]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c22:	4a5e      	ldr	r2, [pc, #376]	; (8001d9c <ADC_Init+0x20c>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d022      	beq.n	8001c6e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	689a      	ldr	r2, [r3, #8]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c36:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6899      	ldr	r1, [r3, #8]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	430a      	orrs	r2, r1
 8001c48:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	689a      	ldr	r2, [r3, #8]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	6899      	ldr	r1, [r3, #8]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	e00f      	b.n	8001c8e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	689a      	ldr	r2, [r3, #8]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c8c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f022 0202 	bic.w	r2, r2, #2
 8001c9c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	6899      	ldr	r1, [r3, #8]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	7e1b      	ldrb	r3, [r3, #24]
 8001ca8:	005a      	lsls	r2, r3, #1
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d028      	beq.n	8001d0e <ADC_Init+0x17e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d003      	beq.n	8001ccc <ADC_Init+0x13c>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc8:	2b08      	cmp	r3, #8
 8001cca:	d904      	bls.n	8001cd6 <ADC_Init+0x146>
 8001ccc:	f44f 61f5 	mov.w	r1, #1960	; 0x7a8
 8001cd0:	4833      	ldr	r0, [pc, #204]	; (8001da0 <ADC_Init+0x210>)
 8001cd2:	f7fe ff94 	bl	8000bfe <assert_failed>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	685a      	ldr	r2, [r3, #4]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ce4:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	685a      	ldr	r2, [r3, #4]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001cf4:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	6859      	ldr	r1, [r3, #4]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d00:	3b01      	subs	r3, #1
 8001d02:	035a      	lsls	r2, r3, #13
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	605a      	str	r2, [r3, #4]
 8001d0c:	e007      	b.n	8001d1e <ADC_Init+0x18e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	685a      	ldr	r2, [r3, #4]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d1c:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001d2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	69db      	ldr	r3, [r3, #28]
 8001d38:	3b01      	subs	r3, #1
 8001d3a:	051a      	lsls	r2, r3, #20
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	430a      	orrs	r2, r1
 8001d42:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	689a      	ldr	r2, [r3, #8]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6899      	ldr	r1, [r3, #8]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d60:	025a      	lsls	r2, r3, #9
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	430a      	orrs	r2, r1
 8001d68:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	6899      	ldr	r1, [r3, #8]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	695b      	ldr	r3, [r3, #20]
 8001d84:	029a      	lsls	r2, r3, #10
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	609a      	str	r2, [r3, #8]
}
 8001d8e:	bf00      	nop
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40012300 	.word	0x40012300
 8001d9c:	0f000001 	.word	0x0f000001
 8001da0:	0800d088 	.word	0x0800d088

08001da4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001db0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d13c      	bne.n	8001e38 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d12b      	bne.n	8001e30 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d127      	bne.n	8001e30 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d006      	beq.n	8001dfc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d119      	bne.n	8001e30 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	685a      	ldr	r2, [r3, #4]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f022 0220 	bic.w	r2, r2, #32
 8001e0a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e10:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d105      	bne.n	8001e30 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e28:	f043 0201 	orr.w	r2, r3, #1
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e30:	68f8      	ldr	r0, [r7, #12]
 8001e32:	f7fe fc49 	bl	80006c8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001e36:	e00e      	b.n	8001e56 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3c:	f003 0310 	and.w	r3, r3, #16
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d003      	beq.n	8001e4c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001e44:	68f8      	ldr	r0, [r7, #12]
 8001e46:	f7ff fd23 	bl	8001890 <HAL_ADC_ErrorCallback>
}
 8001e4a:	e004      	b.n	8001e56 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	4798      	blx	r3
}
 8001e56:	bf00      	nop
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b084      	sub	sp, #16
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e6a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001e6c:	68f8      	ldr	r0, [r7, #12]
 8001e6e:	f7ff fd05 	bl	800187c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e72:	bf00      	nop
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b084      	sub	sp, #16
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e86:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2240      	movs	r2, #64	; 0x40
 8001e8c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e92:	f043 0204 	orr.w	r2, r3, #4
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001e9a:	68f8      	ldr	r0, [r7, #12]
 8001e9c:	f7ff fcf8 	bl	8001890 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ea0:	bf00      	nop
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f003 0307 	and.w	r3, r3, #7
 8001eb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eb8:	4b0c      	ldr	r3, [pc, #48]	; (8001eec <__NVIC_SetPriorityGrouping+0x44>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ebe:	68ba      	ldr	r2, [r7, #8]
 8001ec0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ed0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ed8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eda:	4a04      	ldr	r2, [pc, #16]	; (8001eec <__NVIC_SetPriorityGrouping+0x44>)
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	60d3      	str	r3, [r2, #12]
}
 8001ee0:	bf00      	nop
 8001ee2:	3714      	adds	r7, #20
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	e000ed00 	.word	0xe000ed00

08001ef0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ef4:	4b04      	ldr	r3, [pc, #16]	; (8001f08 <__NVIC_GetPriorityGrouping+0x18>)
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	0a1b      	lsrs	r3, r3, #8
 8001efa:	f003 0307 	and.w	r3, r3, #7
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	e000ed00 	.word	0xe000ed00

08001f0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	db0b      	blt.n	8001f36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f1e:	79fb      	ldrb	r3, [r7, #7]
 8001f20:	f003 021f 	and.w	r2, r3, #31
 8001f24:	4907      	ldr	r1, [pc, #28]	; (8001f44 <__NVIC_EnableIRQ+0x38>)
 8001f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2a:	095b      	lsrs	r3, r3, #5
 8001f2c:	2001      	movs	r0, #1
 8001f2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	e000e100 	.word	0xe000e100

08001f48 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	db12      	blt.n	8001f80 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f5a:	79fb      	ldrb	r3, [r7, #7]
 8001f5c:	f003 021f 	and.w	r2, r3, #31
 8001f60:	490a      	ldr	r1, [pc, #40]	; (8001f8c <__NVIC_DisableIRQ+0x44>)
 8001f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f66:	095b      	lsrs	r3, r3, #5
 8001f68:	2001      	movs	r0, #1
 8001f6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f6e:	3320      	adds	r3, #32
 8001f70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001f74:	f3bf 8f4f 	dsb	sy
}
 8001f78:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001f7a:	f3bf 8f6f 	isb	sy
}
 8001f7e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	e000e100 	.word	0xe000e100

08001f90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	6039      	str	r1, [r7, #0]
 8001f9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	db0a      	blt.n	8001fba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	b2da      	uxtb	r2, r3
 8001fa8:	490c      	ldr	r1, [pc, #48]	; (8001fdc <__NVIC_SetPriority+0x4c>)
 8001faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fae:	0112      	lsls	r2, r2, #4
 8001fb0:	b2d2      	uxtb	r2, r2
 8001fb2:	440b      	add	r3, r1
 8001fb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fb8:	e00a      	b.n	8001fd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	b2da      	uxtb	r2, r3
 8001fbe:	4908      	ldr	r1, [pc, #32]	; (8001fe0 <__NVIC_SetPriority+0x50>)
 8001fc0:	79fb      	ldrb	r3, [r7, #7]
 8001fc2:	f003 030f 	and.w	r3, r3, #15
 8001fc6:	3b04      	subs	r3, #4
 8001fc8:	0112      	lsls	r2, r2, #4
 8001fca:	b2d2      	uxtb	r2, r2
 8001fcc:	440b      	add	r3, r1
 8001fce:	761a      	strb	r2, [r3, #24]
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	e000e100 	.word	0xe000e100
 8001fe0:	e000ed00 	.word	0xe000ed00

08001fe4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b089      	sub	sp, #36	; 0x24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	f1c3 0307 	rsb	r3, r3, #7
 8001ffe:	2b04      	cmp	r3, #4
 8002000:	bf28      	it	cs
 8002002:	2304      	movcs	r3, #4
 8002004:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	3304      	adds	r3, #4
 800200a:	2b06      	cmp	r3, #6
 800200c:	d902      	bls.n	8002014 <NVIC_EncodePriority+0x30>
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	3b03      	subs	r3, #3
 8002012:	e000      	b.n	8002016 <NVIC_EncodePriority+0x32>
 8002014:	2300      	movs	r3, #0
 8002016:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002018:	f04f 32ff 	mov.w	r2, #4294967295
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	43da      	mvns	r2, r3
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	401a      	ands	r2, r3
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800202c:	f04f 31ff 	mov.w	r1, #4294967295
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	fa01 f303 	lsl.w	r3, r1, r3
 8002036:	43d9      	mvns	r1, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800203c:	4313      	orrs	r3, r2
         );
}
 800203e:	4618      	mov	r0, r3
 8002040:	3724      	adds	r7, #36	; 0x24
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
	...

0800204c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	3b01      	subs	r3, #1
 8002058:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800205c:	d301      	bcc.n	8002062 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800205e:	2301      	movs	r3, #1
 8002060:	e00f      	b.n	8002082 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002062:	4a0a      	ldr	r2, [pc, #40]	; (800208c <SysTick_Config+0x40>)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	3b01      	subs	r3, #1
 8002068:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800206a:	210f      	movs	r1, #15
 800206c:	f04f 30ff 	mov.w	r0, #4294967295
 8002070:	f7ff ff8e 	bl	8001f90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002074:	4b05      	ldr	r3, [pc, #20]	; (800208c <SysTick_Config+0x40>)
 8002076:	2200      	movs	r2, #0
 8002078:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800207a:	4b04      	ldr	r3, [pc, #16]	; (800208c <SysTick_Config+0x40>)
 800207c:	2207      	movs	r2, #7
 800207e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	e000e010 	.word	0xe000e010

08002090 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b07      	cmp	r3, #7
 800209c:	d00f      	beq.n	80020be <HAL_NVIC_SetPriorityGrouping+0x2e>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2b06      	cmp	r3, #6
 80020a2:	d00c      	beq.n	80020be <HAL_NVIC_SetPriorityGrouping+0x2e>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b05      	cmp	r3, #5
 80020a8:	d009      	beq.n	80020be <HAL_NVIC_SetPriorityGrouping+0x2e>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2b04      	cmp	r3, #4
 80020ae:	d006      	beq.n	80020be <HAL_NVIC_SetPriorityGrouping+0x2e>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b03      	cmp	r3, #3
 80020b4:	d003      	beq.n	80020be <HAL_NVIC_SetPriorityGrouping+0x2e>
 80020b6:	2190      	movs	r1, #144	; 0x90
 80020b8:	4804      	ldr	r0, [pc, #16]	; (80020cc <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80020ba:	f7fe fda0 	bl	8000bfe <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f7ff fef2 	bl	8001ea8 <__NVIC_SetPriorityGrouping>
}
 80020c4:	bf00      	nop
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	0800d0fc 	.word	0x0800d0fc

080020d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
 80020dc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020de:	2300      	movs	r3, #0
 80020e0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2b0f      	cmp	r3, #15
 80020e6:	d903      	bls.n	80020f0 <HAL_NVIC_SetPriority+0x20>
 80020e8:	21a8      	movs	r1, #168	; 0xa8
 80020ea:	480e      	ldr	r0, [pc, #56]	; (8002124 <HAL_NVIC_SetPriority+0x54>)
 80020ec:	f7fe fd87 	bl	8000bfe <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	2b0f      	cmp	r3, #15
 80020f4:	d903      	bls.n	80020fe <HAL_NVIC_SetPriority+0x2e>
 80020f6:	21a9      	movs	r1, #169	; 0xa9
 80020f8:	480a      	ldr	r0, [pc, #40]	; (8002124 <HAL_NVIC_SetPriority+0x54>)
 80020fa:	f7fe fd80 	bl	8000bfe <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020fe:	f7ff fef7 	bl	8001ef0 <__NVIC_GetPriorityGrouping>
 8002102:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	68b9      	ldr	r1, [r7, #8]
 8002108:	6978      	ldr	r0, [r7, #20]
 800210a:	f7ff ff6b 	bl	8001fe4 <NVIC_EncodePriority>
 800210e:	4602      	mov	r2, r0
 8002110:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002114:	4611      	mov	r1, r2
 8002116:	4618      	mov	r0, r3
 8002118:	f7ff ff3a 	bl	8001f90 <__NVIC_SetPriority>
}
 800211c:	bf00      	nop
 800211e:	3718      	adds	r7, #24
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	0800d0fc 	.word	0x0800d0fc

08002128 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	4603      	mov	r3, r0
 8002130:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002136:	2b00      	cmp	r3, #0
 8002138:	da03      	bge.n	8002142 <HAL_NVIC_EnableIRQ+0x1a>
 800213a:	21bc      	movs	r1, #188	; 0xbc
 800213c:	4805      	ldr	r0, [pc, #20]	; (8002154 <HAL_NVIC_EnableIRQ+0x2c>)
 800213e:	f7fe fd5e 	bl	8000bfe <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002146:	4618      	mov	r0, r3
 8002148:	f7ff fee0 	bl	8001f0c <__NVIC_EnableIRQ>
}
 800214c:	bf00      	nop
 800214e:	3708      	adds	r7, #8
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	0800d0fc 	.word	0x0800d0fc

08002158 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	4603      	mov	r3, r0
 8002160:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002166:	2b00      	cmp	r3, #0
 8002168:	da03      	bge.n	8002172 <HAL_NVIC_DisableIRQ+0x1a>
 800216a:	21cc      	movs	r1, #204	; 0xcc
 800216c:	4805      	ldr	r0, [pc, #20]	; (8002184 <HAL_NVIC_DisableIRQ+0x2c>)
 800216e:	f7fe fd46 	bl	8000bfe <assert_failed>
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff fee6 	bl	8001f48 <__NVIC_DisableIRQ>
}
 800217c:	bf00      	nop
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	0800d0fc 	.word	0x0800d0fc

08002188 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f7ff ff5b 	bl	800204c <SysTick_Config>
 8002196:	4603      	mov	r3, r0
}
 8002198:	4618      	mov	r0, r3
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d101      	bne.n	80021b2 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e01e      	b.n	80021f0 <HAL_DAC_Init+0x50>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a10      	ldr	r2, [pc, #64]	; (80021f8 <HAL_DAC_Init+0x58>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d004      	beq.n	80021c6 <HAL_DAC_Init+0x26>
 80021bc:	f240 1117 	movw	r1, #279	; 0x117
 80021c0:	480e      	ldr	r0, [pc, #56]	; (80021fc <HAL_DAC_Init+0x5c>)
 80021c2:	f7fe fd1c 	bl	8000bfe <assert_failed>

  if (hdac->State == HAL_DAC_STATE_RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	791b      	ldrb	r3, [r3, #4]
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d105      	bne.n	80021dc <HAL_DAC_Init+0x3c>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f7fe fab8 	bl	800074c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2202      	movs	r2, #2
 80021e0:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40007400 	.word	0x40007400
 80021fc:	0800d170 	.word	0x0800d170

08002200 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d007      	beq.n	8002220 <HAL_DAC_Start+0x20>
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	2b10      	cmp	r3, #16
 8002214:	d004      	beq.n	8002220 <HAL_DAC_Start+0x20>
 8002216:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 800221a:	4827      	ldr	r0, [pc, #156]	; (80022b8 <HAL_DAC_Start+0xb8>)
 800221c:	f7fe fcef 	bl	8000bfe <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdac);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	795b      	ldrb	r3, [r3, #5]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d101      	bne.n	800222c <HAL_DAC_Start+0x2c>
 8002228:	2302      	movs	r3, #2
 800222a:	e040      	b.n	80022ae <HAL_DAC_Start+0xae>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2202      	movs	r2, #2
 8002236:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6819      	ldr	r1, [r3, #0]
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	f003 0310 	and.w	r3, r3, #16
 8002244:	2201      	movs	r2, #1
 8002246:	409a      	lsls	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	430a      	orrs	r2, r1
 800224e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d10f      	bne.n	8002276 <HAL_DAC_Start+0x76>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002260:	2b3c      	cmp	r3, #60	; 0x3c
 8002262:	d11d      	bne.n	80022a0 <HAL_DAC_Start+0xa0>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	685a      	ldr	r2, [r3, #4]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f042 0201 	orr.w	r2, r2, #1
 8002272:	605a      	str	r2, [r3, #4]
 8002274:	e014      	b.n	80022a0 <HAL_DAC_Start+0xa0>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	f003 0310 	and.w	r3, r3, #16
 8002286:	213c      	movs	r1, #60	; 0x3c
 8002288:	fa01 f303 	lsl.w	r3, r1, r3
 800228c:	429a      	cmp	r2, r3
 800228e:	d107      	bne.n	80022a0 <HAL_DAC_Start+0xa0>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	685a      	ldr	r2, [r3, #4]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f042 0202 	orr.w	r2, r2, #2
 800229e:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	0800d170 	.word	0x0800d170

080022bc <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022d2:	d120      	bne.n	8002316 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022e2:	d118      	bne.n	8002316 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2204      	movs	r2, #4
 80022e8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	f043 0201 	orr.w	r2, r3, #1
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022fe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800230e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f000 f875 	bl	8002400 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002320:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002324:	d120      	bne.n	8002368 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800232c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002330:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002334:	d118      	bne.n	8002368 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2204      	movs	r2, #4
 800233a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	691b      	ldr	r3, [r3, #16]
 8002340:	f043 0202 	orr.w	r2, r3, #2
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002350:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002360:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 f8e6 	bl	8002534 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 8002368:	bf00      	nop
 800236a:	3708      	adds	r7, #8
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
 800237c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800237e:	2300      	movs	r3, #0
 8002380:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d007      	beq.n	8002398 <HAL_DAC_SetValue+0x28>
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	2b10      	cmp	r3, #16
 800238c:	d004      	beq.n	8002398 <HAL_DAC_SetValue+0x28>
 800238e:	f44f 7143 	mov.w	r1, #780	; 0x30c
 8002392:	481a      	ldr	r0, [pc, #104]	; (80023fc <HAL_DAC_SetValue+0x8c>)
 8002394:	f7fe fc33 	bl	8000bfe <assert_failed>
  assert_param(IS_DAC_ALIGN(Alignment));
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00a      	beq.n	80023b4 <HAL_DAC_SetValue+0x44>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2b04      	cmp	r3, #4
 80023a2:	d007      	beq.n	80023b4 <HAL_DAC_SetValue+0x44>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b08      	cmp	r3, #8
 80023a8:	d004      	beq.n	80023b4 <HAL_DAC_SetValue+0x44>
 80023aa:	f240 310d 	movw	r1, #781	; 0x30d
 80023ae:	4813      	ldr	r0, [pc, #76]	; (80023fc <HAL_DAC_SetValue+0x8c>)
 80023b0:	f7fe fc25 	bl	8000bfe <assert_failed>
  assert_param(IS_DAC_DATA(Data));
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d904      	bls.n	80023c8 <HAL_DAC_SetValue+0x58>
 80023be:	f240 310e 	movw	r1, #782	; 0x30e
 80023c2:	480e      	ldr	r0, [pc, #56]	; (80023fc <HAL_DAC_SetValue+0x8c>)
 80023c4:	f7fe fc1b 	bl	8000bfe <assert_failed>

  tmp = (uint32_t)hdac->Instance;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d105      	bne.n	80023e0 <HAL_DAC_SetValue+0x70>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80023d4:	697a      	ldr	r2, [r7, #20]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4413      	add	r3, r2
 80023da:	3308      	adds	r3, #8
 80023dc:	617b      	str	r3, [r7, #20]
 80023de:	e004      	b.n	80023ea <HAL_DAC_SetValue+0x7a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80023e0:	697a      	ldr	r2, [r7, #20]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4413      	add	r3, r2
 80023e6:	3314      	adds	r3, #20
 80023e8:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	461a      	mov	r2, r3
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3718      	adds	r7, #24
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	0800d170 	.word	0x0800d170

08002400 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC parameters */
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d024      	beq.n	8002472 <HAL_DAC_ConfigChannel+0x5e>
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2b24      	cmp	r3, #36	; 0x24
 800242e:	d020      	beq.n	8002472 <HAL_DAC_ConfigChannel+0x5e>
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2b0c      	cmp	r3, #12
 8002436:	d01c      	beq.n	8002472 <HAL_DAC_ConfigChannel+0x5e>
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2b14      	cmp	r3, #20
 800243e:	d018      	beq.n	8002472 <HAL_DAC_ConfigChannel+0x5e>
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2b1c      	cmp	r3, #28
 8002446:	d014      	beq.n	8002472 <HAL_DAC_ConfigChannel+0x5e>
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2b04      	cmp	r3, #4
 800244e:	d010      	beq.n	8002472 <HAL_DAC_ConfigChannel+0x5e>
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2b2c      	cmp	r3, #44	; 0x2c
 8002456:	d00c      	beq.n	8002472 <HAL_DAC_ConfigChannel+0x5e>
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2b34      	cmp	r3, #52	; 0x34
 800245e:	d008      	beq.n	8002472 <HAL_DAC_ConfigChannel+0x5e>
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2b3c      	cmp	r3, #60	; 0x3c
 8002466:	d004      	beq.n	8002472 <HAL_DAC_ConfigChannel+0x5e>
 8002468:	f240 31a6 	movw	r1, #934	; 0x3a6
 800246c:	4830      	ldr	r0, [pc, #192]	; (8002530 <HAL_DAC_ConfigChannel+0x11c>)
 800246e:	f7fe fbc6 	bl	8000bfe <assert_failed>
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d008      	beq.n	800248c <HAL_DAC_ConfigChannel+0x78>
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2b02      	cmp	r3, #2
 8002480:	d004      	beq.n	800248c <HAL_DAC_ConfigChannel+0x78>
 8002482:	f240 31a7 	movw	r1, #935	; 0x3a7
 8002486:	482a      	ldr	r0, [pc, #168]	; (8002530 <HAL_DAC_ConfigChannel+0x11c>)
 8002488:	f7fe fbb9 	bl	8000bfe <assert_failed>
  assert_param(IS_DAC_CHANNEL(Channel));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d007      	beq.n	80024a2 <HAL_DAC_ConfigChannel+0x8e>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2b10      	cmp	r3, #16
 8002496:	d004      	beq.n	80024a2 <HAL_DAC_ConfigChannel+0x8e>
 8002498:	f44f 716a 	mov.w	r1, #936	; 0x3a8
 800249c:	4824      	ldr	r0, [pc, #144]	; (8002530 <HAL_DAC_ConfigChannel+0x11c>)
 800249e:	f7fe fbae 	bl	8000bfe <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdac);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	795b      	ldrb	r3, [r3, #5]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d101      	bne.n	80024ae <HAL_DAC_ConfigChannel+0x9a>
 80024aa:	2302      	movs	r3, #2
 80024ac:	e03c      	b.n	8002528 <HAL_DAC_ConfigChannel+0x114>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2201      	movs	r2, #1
 80024b2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2202      	movs	r2, #2
 80024b8:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f003 0310 	and.w	r3, r3, #16
 80024c8:	f640 72fe 	movw	r2, #4094	; 0xffe
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	43db      	mvns	r3, r3
 80024d2:	697a      	ldr	r2, [r7, #20]
 80024d4:	4013      	ands	r3, r2
 80024d6:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f003 0310 	and.w	r3, r3, #16
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	697a      	ldr	r2, [r7, #20]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	6819      	ldr	r1, [r3, #0]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f003 0310 	and.w	r3, r3, #16
 800250a:	22c0      	movs	r2, #192	; 0xc0
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	43da      	mvns	r2, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	400a      	ands	r2, r1
 8002518:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2201      	movs	r2, #1
 800251e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002526:	2300      	movs	r3, #0
}
 8002528:	4618      	mov	r0, r3
 800252a:	3718      	adds	r7, #24
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	0800d170 	.word	0x0800d170

08002534 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002550:	2300      	movs	r3, #0
 8002552:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002554:	f7fe fee4 	bl	8001320 <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d101      	bne.n	8002564 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e203      	b.n	800296c <HAL_DMA_Init+0x424>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a8b      	ldr	r2, [pc, #556]	; (8002798 <HAL_DMA_Init+0x250>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d04e      	beq.n	800260c <HAL_DMA_Init+0xc4>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a8a      	ldr	r2, [pc, #552]	; (800279c <HAL_DMA_Init+0x254>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d049      	beq.n	800260c <HAL_DMA_Init+0xc4>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a88      	ldr	r2, [pc, #544]	; (80027a0 <HAL_DMA_Init+0x258>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d044      	beq.n	800260c <HAL_DMA_Init+0xc4>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a87      	ldr	r2, [pc, #540]	; (80027a4 <HAL_DMA_Init+0x25c>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d03f      	beq.n	800260c <HAL_DMA_Init+0xc4>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a85      	ldr	r2, [pc, #532]	; (80027a8 <HAL_DMA_Init+0x260>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d03a      	beq.n	800260c <HAL_DMA_Init+0xc4>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a84      	ldr	r2, [pc, #528]	; (80027ac <HAL_DMA_Init+0x264>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d035      	beq.n	800260c <HAL_DMA_Init+0xc4>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a82      	ldr	r2, [pc, #520]	; (80027b0 <HAL_DMA_Init+0x268>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d030      	beq.n	800260c <HAL_DMA_Init+0xc4>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a81      	ldr	r2, [pc, #516]	; (80027b4 <HAL_DMA_Init+0x26c>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d02b      	beq.n	800260c <HAL_DMA_Init+0xc4>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a7f      	ldr	r2, [pc, #508]	; (80027b8 <HAL_DMA_Init+0x270>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d026      	beq.n	800260c <HAL_DMA_Init+0xc4>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a7e      	ldr	r2, [pc, #504]	; (80027bc <HAL_DMA_Init+0x274>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d021      	beq.n	800260c <HAL_DMA_Init+0xc4>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a7c      	ldr	r2, [pc, #496]	; (80027c0 <HAL_DMA_Init+0x278>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d01c      	beq.n	800260c <HAL_DMA_Init+0xc4>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a7b      	ldr	r2, [pc, #492]	; (80027c4 <HAL_DMA_Init+0x27c>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d017      	beq.n	800260c <HAL_DMA_Init+0xc4>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a79      	ldr	r2, [pc, #484]	; (80027c8 <HAL_DMA_Init+0x280>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d012      	beq.n	800260c <HAL_DMA_Init+0xc4>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a78      	ldr	r2, [pc, #480]	; (80027cc <HAL_DMA_Init+0x284>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d00d      	beq.n	800260c <HAL_DMA_Init+0xc4>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a76      	ldr	r2, [pc, #472]	; (80027d0 <HAL_DMA_Init+0x288>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d008      	beq.n	800260c <HAL_DMA_Init+0xc4>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a75      	ldr	r2, [pc, #468]	; (80027d4 <HAL_DMA_Init+0x28c>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d003      	beq.n	800260c <HAL_DMA_Init+0xc4>
 8002604:	21b7      	movs	r1, #183	; 0xb7
 8002606:	4874      	ldr	r0, [pc, #464]	; (80027d8 <HAL_DMA_Init+0x290>)
 8002608:	f7fe faf9 	bl	8000bfe <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d026      	beq.n	8002662 <HAL_DMA_Init+0x11a>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800261c:	d021      	beq.n	8002662 <HAL_DMA_Init+0x11a>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002626:	d01c      	beq.n	8002662 <HAL_DMA_Init+0x11a>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8002630:	d017      	beq.n	8002662 <HAL_DMA_Init+0x11a>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800263a:	d012      	beq.n	8002662 <HAL_DMA_Init+0x11a>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8002644:	d00d      	beq.n	8002662 <HAL_DMA_Init+0x11a>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800264e:	d008      	beq.n	8002662 <HAL_DMA_Init+0x11a>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8002658:	d003      	beq.n	8002662 <HAL_DMA_Init+0x11a>
 800265a:	21b8      	movs	r1, #184	; 0xb8
 800265c:	485e      	ldr	r0, [pc, #376]	; (80027d8 <HAL_DMA_Init+0x290>)
 800265e:	f7fe face 	bl	8000bfe <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00b      	beq.n	8002682 <HAL_DMA_Init+0x13a>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	2b40      	cmp	r3, #64	; 0x40
 8002670:	d007      	beq.n	8002682 <HAL_DMA_Init+0x13a>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	2b80      	cmp	r3, #128	; 0x80
 8002678:	d003      	beq.n	8002682 <HAL_DMA_Init+0x13a>
 800267a:	21b9      	movs	r1, #185	; 0xb9
 800267c:	4856      	ldr	r0, [pc, #344]	; (80027d8 <HAL_DMA_Init+0x290>)
 800267e:	f7fe fabe 	bl	8000bfe <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800268a:	d007      	beq.n	800269c <HAL_DMA_Init+0x154>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d003      	beq.n	800269c <HAL_DMA_Init+0x154>
 8002694:	21ba      	movs	r1, #186	; 0xba
 8002696:	4850      	ldr	r0, [pc, #320]	; (80027d8 <HAL_DMA_Init+0x290>)
 8002698:	f7fe fab1 	bl	8000bfe <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026a4:	d007      	beq.n	80026b6 <HAL_DMA_Init+0x16e>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d003      	beq.n	80026b6 <HAL_DMA_Init+0x16e>
 80026ae:	21bb      	movs	r1, #187	; 0xbb
 80026b0:	4849      	ldr	r0, [pc, #292]	; (80027d8 <HAL_DMA_Init+0x290>)
 80026b2:	f7fe faa4 	bl	8000bfe <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	695b      	ldr	r3, [r3, #20]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00d      	beq.n	80026da <HAL_DMA_Init+0x192>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026c6:	d008      	beq.n	80026da <HAL_DMA_Init+0x192>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	695b      	ldr	r3, [r3, #20]
 80026cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026d0:	d003      	beq.n	80026da <HAL_DMA_Init+0x192>
 80026d2:	21bc      	movs	r1, #188	; 0xbc
 80026d4:	4840      	ldr	r0, [pc, #256]	; (80027d8 <HAL_DMA_Init+0x290>)
 80026d6:	f7fe fa92 	bl	8000bfe <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00d      	beq.n	80026fe <HAL_DMA_Init+0x1b6>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026ea:	d008      	beq.n	80026fe <HAL_DMA_Init+0x1b6>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026f4:	d003      	beq.n	80026fe <HAL_DMA_Init+0x1b6>
 80026f6:	21bd      	movs	r1, #189	; 0xbd
 80026f8:	4837      	ldr	r0, [pc, #220]	; (80027d8 <HAL_DMA_Init+0x290>)
 80026fa:	f7fe fa80 	bl	8000bfe <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	69db      	ldr	r3, [r3, #28]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00c      	beq.n	8002720 <HAL_DMA_Init+0x1d8>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800270e:	d007      	beq.n	8002720 <HAL_DMA_Init+0x1d8>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	69db      	ldr	r3, [r3, #28]
 8002714:	2b20      	cmp	r3, #32
 8002716:	d003      	beq.n	8002720 <HAL_DMA_Init+0x1d8>
 8002718:	21be      	movs	r1, #190	; 0xbe
 800271a:	482f      	ldr	r0, [pc, #188]	; (80027d8 <HAL_DMA_Init+0x290>)
 800271c:	f7fe fa6f 	bl	8000bfe <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d012      	beq.n	800274e <HAL_DMA_Init+0x206>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002730:	d00d      	beq.n	800274e <HAL_DMA_Init+0x206>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a1b      	ldr	r3, [r3, #32]
 8002736:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800273a:	d008      	beq.n	800274e <HAL_DMA_Init+0x206>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a1b      	ldr	r3, [r3, #32]
 8002740:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002744:	d003      	beq.n	800274e <HAL_DMA_Init+0x206>
 8002746:	21bf      	movs	r1, #191	; 0xbf
 8002748:	4823      	ldr	r0, [pc, #140]	; (80027d8 <HAL_DMA_Init+0x290>)
 800274a:	f7fe fa58 	bl	8000bfe <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002752:	2b00      	cmp	r3, #0
 8002754:	d007      	beq.n	8002766 <HAL_DMA_Init+0x21e>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275a:	2b04      	cmp	r3, #4
 800275c:	d003      	beq.n	8002766 <HAL_DMA_Init+0x21e>
 800275e:	21c0      	movs	r1, #192	; 0xc0
 8002760:	481d      	ldr	r0, [pc, #116]	; (80027d8 <HAL_DMA_Init+0x290>)
 8002762:	f7fe fa4c 	bl	8000bfe <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276a:	2b00      	cmp	r3, #0
 800276c:	d064      	beq.n	8002838 <HAL_DMA_Init+0x2f0>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002772:	2b00      	cmp	r3, #0
 8002774:	d032      	beq.n	80027dc <HAL_DMA_Init+0x294>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277a:	2b01      	cmp	r3, #1
 800277c:	d02e      	beq.n	80027dc <HAL_DMA_Init+0x294>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002782:	2b02      	cmp	r3, #2
 8002784:	d02a      	beq.n	80027dc <HAL_DMA_Init+0x294>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278a:	2b03      	cmp	r3, #3
 800278c:	d026      	beq.n	80027dc <HAL_DMA_Init+0x294>
 800278e:	21c5      	movs	r1, #197	; 0xc5
 8002790:	4811      	ldr	r0, [pc, #68]	; (80027d8 <HAL_DMA_Init+0x290>)
 8002792:	f7fe fa34 	bl	8000bfe <assert_failed>
 8002796:	e021      	b.n	80027dc <HAL_DMA_Init+0x294>
 8002798:	40026010 	.word	0x40026010
 800279c:	40026028 	.word	0x40026028
 80027a0:	40026040 	.word	0x40026040
 80027a4:	40026058 	.word	0x40026058
 80027a8:	40026070 	.word	0x40026070
 80027ac:	40026088 	.word	0x40026088
 80027b0:	400260a0 	.word	0x400260a0
 80027b4:	400260b8 	.word	0x400260b8
 80027b8:	40026410 	.word	0x40026410
 80027bc:	40026428 	.word	0x40026428
 80027c0:	40026440 	.word	0x40026440
 80027c4:	40026458 	.word	0x40026458
 80027c8:	40026470 	.word	0x40026470
 80027cc:	40026488 	.word	0x40026488
 80027d0:	400264a0 	.word	0x400264a0
 80027d4:	400264b8 	.word	0x400264b8
 80027d8:	0800d1e4 	.word	0x0800d1e4
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d012      	beq.n	800280a <HAL_DMA_Init+0x2c2>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80027ec:	d00d      	beq.n	800280a <HAL_DMA_Init+0x2c2>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027f6:	d008      	beq.n	800280a <HAL_DMA_Init+0x2c2>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002800:	d003      	beq.n	800280a <HAL_DMA_Init+0x2c2>
 8002802:	21c6      	movs	r1, #198	; 0xc6
 8002804:	485b      	ldr	r0, [pc, #364]	; (8002974 <HAL_DMA_Init+0x42c>)
 8002806:	f7fe f9fa 	bl	8000bfe <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	2b00      	cmp	r3, #0
 8002810:	d012      	beq.n	8002838 <HAL_DMA_Init+0x2f0>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800281a:	d00d      	beq.n	8002838 <HAL_DMA_Init+0x2f0>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002820:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002824:	d008      	beq.n	8002838 <HAL_DMA_Init+0x2f0>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800282e:	d003      	beq.n	8002838 <HAL_DMA_Init+0x2f0>
 8002830:	21c7      	movs	r1, #199	; 0xc7
 8002832:	4850      	ldr	r0, [pc, #320]	; (8002974 <HAL_DMA_Init+0x42c>)
 8002834:	f7fe f9e3 	bl	8000bfe <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2202      	movs	r2, #2
 800283c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f022 0201 	bic.w	r2, r2, #1
 8002856:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002858:	e00f      	b.n	800287a <HAL_DMA_Init+0x332>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800285a:	f7fe fd61 	bl	8001320 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b05      	cmp	r3, #5
 8002866:	d908      	bls.n	800287a <HAL_DMA_Init+0x332>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2220      	movs	r2, #32
 800286c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2203      	movs	r2, #3
 8002872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e078      	b.n	800296c <HAL_DMA_Init+0x424>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1e8      	bne.n	800285a <HAL_DMA_Init+0x312>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002890:	697a      	ldr	r2, [r7, #20]
 8002892:	4b39      	ldr	r3, [pc, #228]	; (8002978 <HAL_DMA_Init+0x430>)
 8002894:	4013      	ands	r3, r2
 8002896:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685a      	ldr	r2, [r3, #4]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028c6:	697a      	ldr	r2, [r7, #20]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d0:	2b04      	cmp	r3, #4
 80028d2:	d107      	bne.n	80028e4 <HAL_DMA_Init+0x39c>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028dc:	4313      	orrs	r3, r2
 80028de:	697a      	ldr	r2, [r7, #20]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	697a      	ldr	r2, [r7, #20]
 80028ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	f023 0307 	bic.w	r3, r3, #7
 80028fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002900:	697a      	ldr	r2, [r7, #20]
 8002902:	4313      	orrs	r3, r2
 8002904:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290a:	2b04      	cmp	r3, #4
 800290c:	d117      	bne.n	800293e <HAL_DMA_Init+0x3f6>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	4313      	orrs	r3, r2
 8002916:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291c:	2b00      	cmp	r3, #0
 800291e:	d00e      	beq.n	800293e <HAL_DMA_Init+0x3f6>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f000 fa7f 	bl	8002e24 <DMA_CheckFifoParam>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d008      	beq.n	800293e <HAL_DMA_Init+0x3f6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2240      	movs	r2, #64	; 0x40
 8002930:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2201      	movs	r2, #1
 8002936:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800293a:	2301      	movs	r3, #1
 800293c:	e016      	b.n	800296c <HAL_DMA_Init+0x424>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 fa36 	bl	8002db8 <DMA_CalcBaseAndBitshift>
 800294c:	4603      	mov	r3, r0
 800294e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002954:	223f      	movs	r2, #63	; 0x3f
 8002956:	409a      	lsls	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	3718      	adds	r7, #24
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	0800d1e4 	.word	0x0800d1e4
 8002978:	f010803f 	.word	0xf010803f

0800297c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
 8002988:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800298a:	2300      	movs	r3, #0
 800298c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002992:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <HAL_DMA_Start_IT+0x26>
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029a0:	d304      	bcc.n	80029ac <HAL_DMA_Start_IT+0x30>
 80029a2:	f240 11cb 	movw	r1, #459	; 0x1cb
 80029a6:	4827      	ldr	r0, [pc, #156]	; (8002a44 <HAL_DMA_Start_IT+0xc8>)
 80029a8:	f7fe f929 	bl	8000bfe <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d101      	bne.n	80029ba <HAL_DMA_Start_IT+0x3e>
 80029b6:	2302      	movs	r3, #2
 80029b8:	e040      	b.n	8002a3c <HAL_DMA_Start_IT+0xc0>
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d12f      	bne.n	8002a2e <HAL_DMA_Start_IT+0xb2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2202      	movs	r2, #2
 80029d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	68b9      	ldr	r1, [r7, #8]
 80029e2:	68f8      	ldr	r0, [r7, #12]
 80029e4:	f000 f9ba 	bl	8002d5c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ec:	223f      	movs	r2, #63	; 0x3f
 80029ee:	409a      	lsls	r2, r3
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 0216 	orr.w	r2, r2, #22
 8002a02:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d007      	beq.n	8002a1c <HAL_DMA_Start_IT+0xa0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f042 0208 	orr.w	r2, r2, #8
 8002a1a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f042 0201 	orr.w	r2, r2, #1
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	e005      	b.n	8002a3a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002a36:	2302      	movs	r3, #2
 8002a38:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002a3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3718      	adds	r7, #24
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	0800d1e4 	.word	0x0800d1e4

08002a48 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b086      	sub	sp, #24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a50:	2300      	movs	r3, #0
 8002a52:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a54:	4b8e      	ldr	r3, [pc, #568]	; (8002c90 <HAL_DMA_IRQHandler+0x248>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a8e      	ldr	r2, [pc, #568]	; (8002c94 <HAL_DMA_IRQHandler+0x24c>)
 8002a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5e:	0a9b      	lsrs	r3, r3, #10
 8002a60:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a66:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a72:	2208      	movs	r2, #8
 8002a74:	409a      	lsls	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d01a      	beq.n	8002ab4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d013      	beq.n	8002ab4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f022 0204 	bic.w	r2, r2, #4
 8002a9a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa0:	2208      	movs	r2, #8
 8002aa2:	409a      	lsls	r2, r3
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aac:	f043 0201 	orr.w	r2, r3, #1
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab8:	2201      	movs	r2, #1
 8002aba:	409a      	lsls	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d012      	beq.n	8002aea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00b      	beq.n	8002aea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	409a      	lsls	r2, r3
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae2:	f043 0202 	orr.w	r2, r3, #2
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aee:	2204      	movs	r2, #4
 8002af0:	409a      	lsls	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	4013      	ands	r3, r2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d012      	beq.n	8002b20 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00b      	beq.n	8002b20 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b0c:	2204      	movs	r2, #4
 8002b0e:	409a      	lsls	r2, r3
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b18:	f043 0204 	orr.w	r2, r3, #4
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b24:	2210      	movs	r2, #16
 8002b26:	409a      	lsls	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d043      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0308 	and.w	r3, r3, #8
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d03c      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b42:	2210      	movs	r2, #16
 8002b44:	409a      	lsls	r2, r3
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d018      	beq.n	8002b8a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d108      	bne.n	8002b78 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d024      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	4798      	blx	r3
 8002b76:	e01f      	b.n	8002bb8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d01b      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	4798      	blx	r3
 8002b88:	e016      	b.n	8002bb8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d107      	bne.n	8002ba8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f022 0208 	bic.w	r2, r2, #8
 8002ba6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d003      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bbc:	2220      	movs	r2, #32
 8002bbe:	409a      	lsls	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f000 808f 	beq.w	8002ce8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0310 	and.w	r3, r3, #16
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f000 8087 	beq.w	8002ce8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bde:	2220      	movs	r2, #32
 8002be0:	409a      	lsls	r2, r3
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b05      	cmp	r3, #5
 8002bf0:	d136      	bne.n	8002c60 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f022 0216 	bic.w	r2, r2, #22
 8002c00:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	695a      	ldr	r2, [r3, #20]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c10:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d103      	bne.n	8002c22 <HAL_DMA_IRQHandler+0x1da>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d007      	beq.n	8002c32 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 0208 	bic.w	r2, r2, #8
 8002c30:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c36:	223f      	movs	r2, #63	; 0x3f
 8002c38:	409a      	lsls	r2, r3
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d07e      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	4798      	blx	r3
        }
        return;
 8002c5e:	e079      	b.n	8002d54 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d01d      	beq.n	8002caa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d10d      	bne.n	8002c98 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d031      	beq.n	8002ce8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	4798      	blx	r3
 8002c8c:	e02c      	b.n	8002ce8 <HAL_DMA_IRQHandler+0x2a0>
 8002c8e:	bf00      	nop
 8002c90:	20000000 	.word	0x20000000
 8002c94:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d023      	beq.n	8002ce8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	4798      	blx	r3
 8002ca8:	e01e      	b.n	8002ce8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d10f      	bne.n	8002cd8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f022 0210 	bic.w	r2, r2, #16
 8002cc6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d003      	beq.n	8002ce8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d032      	beq.n	8002d56 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf4:	f003 0301 	and.w	r3, r3, #1
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d022      	beq.n	8002d42 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2205      	movs	r2, #5
 8002d00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f022 0201 	bic.w	r2, r2, #1
 8002d12:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	3301      	adds	r3, #1
 8002d18:	60bb      	str	r3, [r7, #8]
 8002d1a:	697a      	ldr	r2, [r7, #20]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d307      	bcc.n	8002d30 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1f2      	bne.n	8002d14 <HAL_DMA_IRQHandler+0x2cc>
 8002d2e:	e000      	b.n	8002d32 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002d30:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d005      	beq.n	8002d56 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	4798      	blx	r3
 8002d52:	e000      	b.n	8002d56 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002d54:	bf00      	nop
    }
  }
}
 8002d56:	3718      	adds	r7, #24
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
 8002d68:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d78:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	683a      	ldr	r2, [r7, #0]
 8002d80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	2b40      	cmp	r3, #64	; 0x40
 8002d88:	d108      	bne.n	8002d9c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68ba      	ldr	r2, [r7, #8]
 8002d98:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002d9a:	e007      	b.n	8002dac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68ba      	ldr	r2, [r7, #8]
 8002da2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	60da      	str	r2, [r3, #12]
}
 8002dac:	bf00      	nop
 8002dae:	3714      	adds	r7, #20
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	3b10      	subs	r3, #16
 8002dc8:	4a14      	ldr	r2, [pc, #80]	; (8002e1c <DMA_CalcBaseAndBitshift+0x64>)
 8002dca:	fba2 2303 	umull	r2, r3, r2, r3
 8002dce:	091b      	lsrs	r3, r3, #4
 8002dd0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002dd2:	4a13      	ldr	r2, [pc, #76]	; (8002e20 <DMA_CalcBaseAndBitshift+0x68>)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	461a      	mov	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2b03      	cmp	r3, #3
 8002de4:	d909      	bls.n	8002dfa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002dee:	f023 0303 	bic.w	r3, r3, #3
 8002df2:	1d1a      	adds	r2, r3, #4
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	659a      	str	r2, [r3, #88]	; 0x58
 8002df8:	e007      	b.n	8002e0a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e02:	f023 0303 	bic.w	r3, r3, #3
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3714      	adds	r7, #20
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	aaaaaaab 	.word	0xaaaaaaab
 8002e20:	0800d5a0 	.word	0x0800d5a0

08002e24 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b085      	sub	sp, #20
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e34:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d11f      	bne.n	8002e7e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	2b03      	cmp	r3, #3
 8002e42:	d856      	bhi.n	8002ef2 <DMA_CheckFifoParam+0xce>
 8002e44:	a201      	add	r2, pc, #4	; (adr r2, 8002e4c <DMA_CheckFifoParam+0x28>)
 8002e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e4a:	bf00      	nop
 8002e4c:	08002e5d 	.word	0x08002e5d
 8002e50:	08002e6f 	.word	0x08002e6f
 8002e54:	08002e5d 	.word	0x08002e5d
 8002e58:	08002ef3 	.word	0x08002ef3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d046      	beq.n	8002ef6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e6c:	e043      	b.n	8002ef6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e72:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e76:	d140      	bne.n	8002efa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e7c:	e03d      	b.n	8002efa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e86:	d121      	bne.n	8002ecc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	2b03      	cmp	r3, #3
 8002e8c:	d837      	bhi.n	8002efe <DMA_CheckFifoParam+0xda>
 8002e8e:	a201      	add	r2, pc, #4	; (adr r2, 8002e94 <DMA_CheckFifoParam+0x70>)
 8002e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e94:	08002ea5 	.word	0x08002ea5
 8002e98:	08002eab 	.word	0x08002eab
 8002e9c:	08002ea5 	.word	0x08002ea5
 8002ea0:	08002ebd 	.word	0x08002ebd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ea8:	e030      	b.n	8002f0c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d025      	beq.n	8002f02 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eba:	e022      	b.n	8002f02 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ec4:	d11f      	bne.n	8002f06 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002eca:	e01c      	b.n	8002f06 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d903      	bls.n	8002eda <DMA_CheckFifoParam+0xb6>
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	2b03      	cmp	r3, #3
 8002ed6:	d003      	beq.n	8002ee0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ed8:	e018      	b.n	8002f0c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	73fb      	strb	r3, [r7, #15]
      break;
 8002ede:	e015      	b.n	8002f0c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00e      	beq.n	8002f0a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	73fb      	strb	r3, [r7, #15]
      break;
 8002ef0:	e00b      	b.n	8002f0a <DMA_CheckFifoParam+0xe6>
      break;
 8002ef2:	bf00      	nop
 8002ef4:	e00a      	b.n	8002f0c <DMA_CheckFifoParam+0xe8>
      break;
 8002ef6:	bf00      	nop
 8002ef8:	e008      	b.n	8002f0c <DMA_CheckFifoParam+0xe8>
      break;
 8002efa:	bf00      	nop
 8002efc:	e006      	b.n	8002f0c <DMA_CheckFifoParam+0xe8>
      break;
 8002efe:	bf00      	nop
 8002f00:	e004      	b.n	8002f0c <DMA_CheckFifoParam+0xe8>
      break;
 8002f02:	bf00      	nop
 8002f04:	e002      	b.n	8002f0c <DMA_CheckFifoParam+0xe8>
      break;   
 8002f06:	bf00      	nop
 8002f08:	e000      	b.n	8002f0c <DMA_CheckFifoParam+0xe8>
      break;
 8002f0a:	bf00      	nop
    }
  } 
  
  return status; 
 8002f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3714      	adds	r7, #20
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop

08002f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b088      	sub	sp, #32
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f26:	2300      	movs	r3, #0
 8002f28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a37      	ldr	r2, [pc, #220]	; (8003014 <HAL_GPIO_Init+0xf8>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d01f      	beq.n	8002f7a <HAL_GPIO_Init+0x5e>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a36      	ldr	r2, [pc, #216]	; (8003018 <HAL_GPIO_Init+0xfc>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d01b      	beq.n	8002f7a <HAL_GPIO_Init+0x5e>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a35      	ldr	r2, [pc, #212]	; (800301c <HAL_GPIO_Init+0x100>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d017      	beq.n	8002f7a <HAL_GPIO_Init+0x5e>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a34      	ldr	r2, [pc, #208]	; (8003020 <HAL_GPIO_Init+0x104>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d013      	beq.n	8002f7a <HAL_GPIO_Init+0x5e>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a33      	ldr	r2, [pc, #204]	; (8003024 <HAL_GPIO_Init+0x108>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d00f      	beq.n	8002f7a <HAL_GPIO_Init+0x5e>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a32      	ldr	r2, [pc, #200]	; (8003028 <HAL_GPIO_Init+0x10c>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d00b      	beq.n	8002f7a <HAL_GPIO_Init+0x5e>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a31      	ldr	r2, [pc, #196]	; (800302c <HAL_GPIO_Init+0x110>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d007      	beq.n	8002f7a <HAL_GPIO_Init+0x5e>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a30      	ldr	r2, [pc, #192]	; (8003030 <HAL_GPIO_Init+0x114>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d003      	beq.n	8002f7a <HAL_GPIO_Init+0x5e>
 8002f72:	21ac      	movs	r1, #172	; 0xac
 8002f74:	482f      	ldr	r0, [pc, #188]	; (8003034 <HAL_GPIO_Init+0x118>)
 8002f76:	f7fd fe42 	bl	8000bfe <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d005      	beq.n	8002f90 <HAL_GPIO_Init+0x74>
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	0c1b      	lsrs	r3, r3, #16
 8002f8a:	041b      	lsls	r3, r3, #16
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d003      	beq.n	8002f98 <HAL_GPIO_Init+0x7c>
 8002f90:	21ad      	movs	r1, #173	; 0xad
 8002f92:	4828      	ldr	r0, [pc, #160]	; (8003034 <HAL_GPIO_Init+0x118>)
 8002f94:	f7fd fe33 	bl	8000bfe <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d035      	beq.n	800300c <HAL_GPIO_Init+0xf0>
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d031      	beq.n	800300c <HAL_GPIO_Init+0xf0>
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	2b11      	cmp	r3, #17
 8002fae:	d02d      	beq.n	800300c <HAL_GPIO_Init+0xf0>
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d029      	beq.n	800300c <HAL_GPIO_Init+0xf0>
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	2b12      	cmp	r3, #18
 8002fbe:	d025      	beq.n	800300c <HAL_GPIO_Init+0xf0>
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8002fc8:	d020      	beq.n	800300c <HAL_GPIO_Init+0xf0>
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002fd2:	d01b      	beq.n	800300c <HAL_GPIO_Init+0xf0>
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8002fdc:	d016      	beq.n	800300c <HAL_GPIO_Init+0xf0>
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8002fe6:	d011      	beq.n	800300c <HAL_GPIO_Init+0xf0>
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8002ff0:	d00c      	beq.n	800300c <HAL_GPIO_Init+0xf0>
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8002ffa:	d007      	beq.n	800300c <HAL_GPIO_Init+0xf0>
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	2b03      	cmp	r3, #3
 8003002:	d003      	beq.n	800300c <HAL_GPIO_Init+0xf0>
 8003004:	21ae      	movs	r1, #174	; 0xae
 8003006:	480b      	ldr	r0, [pc, #44]	; (8003034 <HAL_GPIO_Init+0x118>)
 8003008:	f7fd fdf9 	bl	8000bfe <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800300c:	2300      	movs	r3, #0
 800300e:	61fb      	str	r3, [r7, #28]
 8003010:	e289      	b.n	8003526 <HAL_GPIO_Init+0x60a>
 8003012:	bf00      	nop
 8003014:	40020000 	.word	0x40020000
 8003018:	40020400 	.word	0x40020400
 800301c:	40020800 	.word	0x40020800
 8003020:	40020c00 	.word	0x40020c00
 8003024:	40021000 	.word	0x40021000
 8003028:	40021400 	.word	0x40021400
 800302c:	40021800 	.word	0x40021800
 8003030:	40021c00 	.word	0x40021c00
 8003034:	0800d258 	.word	0x0800d258
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003038:	2201      	movs	r2, #1
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	697a      	ldr	r2, [r7, #20]
 8003048:	4013      	ands	r3, r2
 800304a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800304c:	693a      	ldr	r2, [r7, #16]
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	429a      	cmp	r2, r3
 8003052:	f040 8265 	bne.w	8003520 <HAL_GPIO_Init+0x604>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f003 0303 	and.w	r3, r3, #3
 800305e:	2b01      	cmp	r3, #1
 8003060:	d005      	beq.n	800306e <HAL_GPIO_Init+0x152>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800306a:	2b02      	cmp	r3, #2
 800306c:	d144      	bne.n	80030f8 <HAL_GPIO_Init+0x1dc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00f      	beq.n	8003096 <HAL_GPIO_Init+0x17a>
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	2b01      	cmp	r3, #1
 800307c:	d00b      	beq.n	8003096 <HAL_GPIO_Init+0x17a>
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	2b02      	cmp	r3, #2
 8003084:	d007      	beq.n	8003096 <HAL_GPIO_Init+0x17a>
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	2b03      	cmp	r3, #3
 800308c:	d003      	beq.n	8003096 <HAL_GPIO_Init+0x17a>
 800308e:	21c0      	movs	r1, #192	; 0xc0
 8003090:	4831      	ldr	r0, [pc, #196]	; (8003158 <HAL_GPIO_Init+0x23c>)
 8003092:	f7fd fdb4 	bl	8000bfe <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	2203      	movs	r2, #3
 80030a2:	fa02 f303 	lsl.w	r3, r2, r3
 80030a6:	43db      	mvns	r3, r3
 80030a8:	69ba      	ldr	r2, [r7, #24]
 80030aa:	4013      	ands	r3, r2
 80030ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	68da      	ldr	r2, [r3, #12]
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	005b      	lsls	r3, r3, #1
 80030b6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ba:	69ba      	ldr	r2, [r7, #24]
 80030bc:	4313      	orrs	r3, r2
 80030be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030cc:	2201      	movs	r2, #1
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	fa02 f303 	lsl.w	r3, r2, r3
 80030d4:	43db      	mvns	r3, r3
 80030d6:	69ba      	ldr	r2, [r7, #24]
 80030d8:	4013      	ands	r3, r2
 80030da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	091b      	lsrs	r3, r3, #4
 80030e2:	f003 0201 	and.w	r2, r3, #1
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f003 0303 	and.w	r3, r3, #3
 8003100:	2b03      	cmp	r3, #3
 8003102:	d02b      	beq.n	800315c <HAL_GPIO_Init+0x240>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00b      	beq.n	8003124 <HAL_GPIO_Init+0x208>
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d007      	beq.n	8003124 <HAL_GPIO_Init+0x208>
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	2b02      	cmp	r3, #2
 800311a:	d003      	beq.n	8003124 <HAL_GPIO_Init+0x208>
 800311c:	21d1      	movs	r1, #209	; 0xd1
 800311e:	480e      	ldr	r0, [pc, #56]	; (8003158 <HAL_GPIO_Init+0x23c>)
 8003120:	f7fd fd6d 	bl	8000bfe <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	2203      	movs	r2, #3
 8003130:	fa02 f303 	lsl.w	r3, r2, r3
 8003134:	43db      	mvns	r3, r3
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	4013      	ands	r3, r2
 800313a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	689a      	ldr	r2, [r3, #8]
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	fa02 f303 	lsl.w	r3, r2, r3
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	4313      	orrs	r3, r2
 800314c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	60da      	str	r2, [r3, #12]
 8003154:	e002      	b.n	800315c <HAL_GPIO_Init+0x240>
 8003156:	bf00      	nop
 8003158:	0800d258 	.word	0x0800d258
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f003 0303 	and.w	r3, r3, #3
 8003164:	2b02      	cmp	r3, #2
 8003166:	f040 810c 	bne.w	8003382 <HAL_GPIO_Init+0x466>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	2b00      	cmp	r3, #0
 8003170:	f000 80e3 	beq.w	800333a <HAL_GPIO_Init+0x41e>
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	2b09      	cmp	r3, #9
 800317a:	f000 80de 	beq.w	800333a <HAL_GPIO_Init+0x41e>
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	2b00      	cmp	r3, #0
 8003184:	f000 80d9 	beq.w	800333a <HAL_GPIO_Init+0x41e>
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 80d4 	beq.w	800333a <HAL_GPIO_Init+0x41e>
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	2b00      	cmp	r3, #0
 8003198:	f000 80cf 	beq.w	800333a <HAL_GPIO_Init+0x41e>
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f000 80ca 	beq.w	800333a <HAL_GPIO_Init+0x41e>
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	f000 80c5 	beq.w	800333a <HAL_GPIO_Init+0x41e>
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	f000 80c0 	beq.w	800333a <HAL_GPIO_Init+0x41e>
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	2b02      	cmp	r3, #2
 80031c0:	f000 80bb 	beq.w	800333a <HAL_GPIO_Init+0x41e>
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	f000 80b6 	beq.w	800333a <HAL_GPIO_Init+0x41e>
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	f000 80b1 	beq.w	800333a <HAL_GPIO_Init+0x41e>
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	2b03      	cmp	r3, #3
 80031de:	f000 80ac 	beq.w	800333a <HAL_GPIO_Init+0x41e>
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	2b04      	cmp	r3, #4
 80031e8:	f000 80a7 	beq.w	800333a <HAL_GPIO_Init+0x41e>
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	2b04      	cmp	r3, #4
 80031f2:	f000 80a2 	beq.w	800333a <HAL_GPIO_Init+0x41e>
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	2b04      	cmp	r3, #4
 80031fc:	f000 809d 	beq.w	800333a <HAL_GPIO_Init+0x41e>
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	691b      	ldr	r3, [r3, #16]
 8003204:	2b05      	cmp	r3, #5
 8003206:	f000 8098 	beq.w	800333a <HAL_GPIO_Init+0x41e>
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	2b05      	cmp	r3, #5
 8003210:	f000 8093 	beq.w	800333a <HAL_GPIO_Init+0x41e>
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	2b09      	cmp	r3, #9
 800321a:	f000 808e 	beq.w	800333a <HAL_GPIO_Init+0x41e>
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	2b06      	cmp	r3, #6
 8003224:	f000 8089 	beq.w	800333a <HAL_GPIO_Init+0x41e>
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	2b09      	cmp	r3, #9
 800322e:	f000 8084 	beq.w	800333a <HAL_GPIO_Init+0x41e>
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	2b07      	cmp	r3, #7
 8003238:	d07f      	beq.n	800333a <HAL_GPIO_Init+0x41e>
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	2b07      	cmp	r3, #7
 8003240:	d07b      	beq.n	800333a <HAL_GPIO_Init+0x41e>
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	2b07      	cmp	r3, #7
 8003248:	d077      	beq.n	800333a <HAL_GPIO_Init+0x41e>
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	2b08      	cmp	r3, #8
 8003250:	d073      	beq.n	800333a <HAL_GPIO_Init+0x41e>
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	2b08      	cmp	r3, #8
 8003258:	d06f      	beq.n	800333a <HAL_GPIO_Init+0x41e>
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	2b08      	cmp	r3, #8
 8003260:	d06b      	beq.n	800333a <HAL_GPIO_Init+0x41e>
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	2b09      	cmp	r3, #9
 8003268:	d067      	beq.n	800333a <HAL_GPIO_Init+0x41e>
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	2b09      	cmp	r3, #9
 8003270:	d063      	beq.n	800333a <HAL_GPIO_Init+0x41e>
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	2b0a      	cmp	r3, #10
 8003278:	d05f      	beq.n	800333a <HAL_GPIO_Init+0x41e>
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	2b0a      	cmp	r3, #10
 8003280:	d05b      	beq.n	800333a <HAL_GPIO_Init+0x41e>
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	2b0b      	cmp	r3, #11
 8003288:	d057      	beq.n	800333a <HAL_GPIO_Init+0x41e>
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	2b0c      	cmp	r3, #12
 8003290:	d053      	beq.n	800333a <HAL_GPIO_Init+0x41e>
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	2b0c      	cmp	r3, #12
 8003298:	d04f      	beq.n	800333a <HAL_GPIO_Init+0x41e>
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	2b0d      	cmp	r3, #13
 80032a0:	d04b      	beq.n	800333a <HAL_GPIO_Init+0x41e>
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	2b0f      	cmp	r3, #15
 80032a8:	d047      	beq.n	800333a <HAL_GPIO_Init+0x41e>
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	2b05      	cmp	r3, #5
 80032b0:	d043      	beq.n	800333a <HAL_GPIO_Init+0x41e>
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	2b0c      	cmp	r3, #12
 80032b8:	d03f      	beq.n	800333a <HAL_GPIO_Init+0x41e>
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	2b06      	cmp	r3, #6
 80032c0:	d03b      	beq.n	800333a <HAL_GPIO_Init+0x41e>
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	2b03      	cmp	r3, #3
 80032c8:	d037      	beq.n	800333a <HAL_GPIO_Init+0x41e>
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	2b04      	cmp	r3, #4
 80032d0:	d033      	beq.n	800333a <HAL_GPIO_Init+0x41e>
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	2b05      	cmp	r3, #5
 80032d8:	d02f      	beq.n	800333a <HAL_GPIO_Init+0x41e>
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	2b06      	cmp	r3, #6
 80032e0:	d02b      	beq.n	800333a <HAL_GPIO_Init+0x41e>
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	2b06      	cmp	r3, #6
 80032e8:	d027      	beq.n	800333a <HAL_GPIO_Init+0x41e>
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	2b07      	cmp	r3, #7
 80032f0:	d023      	beq.n	800333a <HAL_GPIO_Init+0x41e>
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	2b07      	cmp	r3, #7
 80032f8:	d01f      	beq.n	800333a <HAL_GPIO_Init+0x41e>
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	2b07      	cmp	r3, #7
 8003300:	d01b      	beq.n	800333a <HAL_GPIO_Init+0x41e>
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	2b07      	cmp	r3, #7
 8003308:	d017      	beq.n	800333a <HAL_GPIO_Init+0x41e>
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	2b08      	cmp	r3, #8
 8003310:	d013      	beq.n	800333a <HAL_GPIO_Init+0x41e>
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	2b08      	cmp	r3, #8
 8003318:	d00f      	beq.n	800333a <HAL_GPIO_Init+0x41e>
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	2b09      	cmp	r3, #9
 8003320:	d00b      	beq.n	800333a <HAL_GPIO_Init+0x41e>
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	2b0a      	cmp	r3, #10
 8003328:	d007      	beq.n	800333a <HAL_GPIO_Init+0x41e>
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	2b0a      	cmp	r3, #10
 8003330:	d003      	beq.n	800333a <HAL_GPIO_Init+0x41e>
 8003332:	21de      	movs	r1, #222	; 0xde
 8003334:	4880      	ldr	r0, [pc, #512]	; (8003538 <HAL_GPIO_Init+0x61c>)
 8003336:	f7fd fc62 	bl	8000bfe <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	08da      	lsrs	r2, r3, #3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	3208      	adds	r2, #8
 8003342:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003346:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	f003 0307 	and.w	r3, r3, #7
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	220f      	movs	r2, #15
 8003352:	fa02 f303 	lsl.w	r3, r2, r3
 8003356:	43db      	mvns	r3, r3
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	4013      	ands	r3, r2
 800335c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	691a      	ldr	r2, [r3, #16]
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	f003 0307 	and.w	r3, r3, #7
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	fa02 f303 	lsl.w	r3, r2, r3
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	4313      	orrs	r3, r2
 8003372:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	08da      	lsrs	r2, r3, #3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3208      	adds	r2, #8
 800337c:	69b9      	ldr	r1, [r7, #24]
 800337e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	005b      	lsls	r3, r3, #1
 800338c:	2203      	movs	r2, #3
 800338e:	fa02 f303 	lsl.w	r3, r2, r3
 8003392:	43db      	mvns	r3, r3
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	4013      	ands	r3, r2
 8003398:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f003 0203 	and.w	r2, r3, #3
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	fa02 f303 	lsl.w	r3, r2, r3
 80033aa:	69ba      	ldr	r2, [r7, #24]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f000 80ae 	beq.w	8003520 <HAL_GPIO_Init+0x604>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033c4:	2300      	movs	r3, #0
 80033c6:	60fb      	str	r3, [r7, #12]
 80033c8:	4b5c      	ldr	r3, [pc, #368]	; (800353c <HAL_GPIO_Init+0x620>)
 80033ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033cc:	4a5b      	ldr	r2, [pc, #364]	; (800353c <HAL_GPIO_Init+0x620>)
 80033ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033d2:	6453      	str	r3, [r2, #68]	; 0x44
 80033d4:	4b59      	ldr	r3, [pc, #356]	; (800353c <HAL_GPIO_Init+0x620>)
 80033d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033dc:	60fb      	str	r3, [r7, #12]
 80033de:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033e0:	4a57      	ldr	r2, [pc, #348]	; (8003540 <HAL_GPIO_Init+0x624>)
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	089b      	lsrs	r3, r3, #2
 80033e6:	3302      	adds	r3, #2
 80033e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	f003 0303 	and.w	r3, r3, #3
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	220f      	movs	r2, #15
 80033f8:	fa02 f303 	lsl.w	r3, r2, r3
 80033fc:	43db      	mvns	r3, r3
 80033fe:	69ba      	ldr	r2, [r7, #24]
 8003400:	4013      	ands	r3, r2
 8003402:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a4f      	ldr	r2, [pc, #316]	; (8003544 <HAL_GPIO_Init+0x628>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d025      	beq.n	8003458 <HAL_GPIO_Init+0x53c>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a4e      	ldr	r2, [pc, #312]	; (8003548 <HAL_GPIO_Init+0x62c>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d01f      	beq.n	8003454 <HAL_GPIO_Init+0x538>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a4d      	ldr	r2, [pc, #308]	; (800354c <HAL_GPIO_Init+0x630>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d019      	beq.n	8003450 <HAL_GPIO_Init+0x534>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a4c      	ldr	r2, [pc, #304]	; (8003550 <HAL_GPIO_Init+0x634>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d013      	beq.n	800344c <HAL_GPIO_Init+0x530>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a4b      	ldr	r2, [pc, #300]	; (8003554 <HAL_GPIO_Init+0x638>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d00d      	beq.n	8003448 <HAL_GPIO_Init+0x52c>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a4a      	ldr	r2, [pc, #296]	; (8003558 <HAL_GPIO_Init+0x63c>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d007      	beq.n	8003444 <HAL_GPIO_Init+0x528>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a49      	ldr	r2, [pc, #292]	; (800355c <HAL_GPIO_Init+0x640>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d101      	bne.n	8003440 <HAL_GPIO_Init+0x524>
 800343c:	2306      	movs	r3, #6
 800343e:	e00c      	b.n	800345a <HAL_GPIO_Init+0x53e>
 8003440:	2307      	movs	r3, #7
 8003442:	e00a      	b.n	800345a <HAL_GPIO_Init+0x53e>
 8003444:	2305      	movs	r3, #5
 8003446:	e008      	b.n	800345a <HAL_GPIO_Init+0x53e>
 8003448:	2304      	movs	r3, #4
 800344a:	e006      	b.n	800345a <HAL_GPIO_Init+0x53e>
 800344c:	2303      	movs	r3, #3
 800344e:	e004      	b.n	800345a <HAL_GPIO_Init+0x53e>
 8003450:	2302      	movs	r3, #2
 8003452:	e002      	b.n	800345a <HAL_GPIO_Init+0x53e>
 8003454:	2301      	movs	r3, #1
 8003456:	e000      	b.n	800345a <HAL_GPIO_Init+0x53e>
 8003458:	2300      	movs	r3, #0
 800345a:	69fa      	ldr	r2, [r7, #28]
 800345c:	f002 0203 	and.w	r2, r2, #3
 8003460:	0092      	lsls	r2, r2, #2
 8003462:	4093      	lsls	r3, r2
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	4313      	orrs	r3, r2
 8003468:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800346a:	4935      	ldr	r1, [pc, #212]	; (8003540 <HAL_GPIO_Init+0x624>)
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	089b      	lsrs	r3, r3, #2
 8003470:	3302      	adds	r3, #2
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003478:	4b39      	ldr	r3, [pc, #228]	; (8003560 <HAL_GPIO_Init+0x644>)
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	43db      	mvns	r3, r3
 8003482:	69ba      	ldr	r2, [r7, #24]
 8003484:	4013      	ands	r3, r2
 8003486:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d003      	beq.n	800349c <HAL_GPIO_Init+0x580>
        {
          temp |= iocurrent;
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	4313      	orrs	r3, r2
 800349a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800349c:	4a30      	ldr	r2, [pc, #192]	; (8003560 <HAL_GPIO_Init+0x644>)
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034a2:	4b2f      	ldr	r3, [pc, #188]	; (8003560 <HAL_GPIO_Init+0x644>)
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	43db      	mvns	r3, r3
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	4013      	ands	r3, r2
 80034b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d003      	beq.n	80034c6 <HAL_GPIO_Init+0x5aa>
        {
          temp |= iocurrent;
 80034be:	69ba      	ldr	r2, [r7, #24]
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034c6:	4a26      	ldr	r2, [pc, #152]	; (8003560 <HAL_GPIO_Init+0x644>)
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80034cc:	4b24      	ldr	r3, [pc, #144]	; (8003560 <HAL_GPIO_Init+0x644>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	43db      	mvns	r3, r3
 80034d6:	69ba      	ldr	r2, [r7, #24]
 80034d8:	4013      	ands	r3, r2
 80034da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d003      	beq.n	80034f0 <HAL_GPIO_Init+0x5d4>
        {
          temp |= iocurrent;
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034f0:	4a1b      	ldr	r2, [pc, #108]	; (8003560 <HAL_GPIO_Init+0x644>)
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034f6:	4b1a      	ldr	r3, [pc, #104]	; (8003560 <HAL_GPIO_Init+0x644>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	43db      	mvns	r3, r3
 8003500:	69ba      	ldr	r2, [r7, #24]
 8003502:	4013      	ands	r3, r2
 8003504:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d003      	beq.n	800351a <HAL_GPIO_Init+0x5fe>
        {
          temp |= iocurrent;
 8003512:	69ba      	ldr	r2, [r7, #24]
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	4313      	orrs	r3, r2
 8003518:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800351a:	4a11      	ldr	r2, [pc, #68]	; (8003560 <HAL_GPIO_Init+0x644>)
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	3301      	adds	r3, #1
 8003524:	61fb      	str	r3, [r7, #28]
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	2b0f      	cmp	r3, #15
 800352a:	f67f ad85 	bls.w	8003038 <HAL_GPIO_Init+0x11c>
      }
    }
  }
}
 800352e:	bf00      	nop
 8003530:	bf00      	nop
 8003532:	3720      	adds	r7, #32
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	0800d258 	.word	0x0800d258
 800353c:	40023800 	.word	0x40023800
 8003540:	40013800 	.word	0x40013800
 8003544:	40020000 	.word	0x40020000
 8003548:	40020400 	.word	0x40020400
 800354c:	40020800 	.word	0x40020800
 8003550:	40020c00 	.word	0x40020c00
 8003554:	40021000 	.word	0x40021000
 8003558:	40021400 	.word	0x40021400
 800355c:	40021800 	.word	0x40021800
 8003560:	40013c00 	.word	0x40013c00

08003564 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	460b      	mov	r3, r1
 800356e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003570:	887b      	ldrh	r3, [r7, #2]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d004      	beq.n	8003580 <HAL_GPIO_ReadPin+0x1c>
 8003576:	887b      	ldrh	r3, [r7, #2]
 8003578:	0c1b      	lsrs	r3, r3, #16
 800357a:	041b      	lsls	r3, r3, #16
 800357c:	2b00      	cmp	r3, #0
 800357e:	d004      	beq.n	800358a <HAL_GPIO_ReadPin+0x26>
 8003580:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8003584:	4809      	ldr	r0, [pc, #36]	; (80035ac <HAL_GPIO_ReadPin+0x48>)
 8003586:	f7fd fb3a 	bl	8000bfe <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	691a      	ldr	r2, [r3, #16]
 800358e:	887b      	ldrh	r3, [r7, #2]
 8003590:	4013      	ands	r3, r2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d002      	beq.n	800359c <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 8003596:	2301      	movs	r3, #1
 8003598:	73fb      	strb	r3, [r7, #15]
 800359a:	e001      	b.n	80035a0 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800359c:	2300      	movs	r3, #0
 800359e:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	0800d258 	.word	0x0800d258

080035b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	460b      	mov	r3, r1
 80035ba:	807b      	strh	r3, [r7, #2]
 80035bc:	4613      	mov	r3, r2
 80035be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80035c0:	887b      	ldrh	r3, [r7, #2]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d004      	beq.n	80035d0 <HAL_GPIO_WritePin+0x20>
 80035c6:	887b      	ldrh	r3, [r7, #2]
 80035c8:	0c1b      	lsrs	r3, r3, #16
 80035ca:	041b      	lsls	r3, r3, #16
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d004      	beq.n	80035da <HAL_GPIO_WritePin+0x2a>
 80035d0:	f240 119d 	movw	r1, #413	; 0x19d
 80035d4:	480e      	ldr	r0, [pc, #56]	; (8003610 <HAL_GPIO_WritePin+0x60>)
 80035d6:	f7fd fb12 	bl	8000bfe <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80035da:	787b      	ldrb	r3, [r7, #1]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d007      	beq.n	80035f0 <HAL_GPIO_WritePin+0x40>
 80035e0:	787b      	ldrb	r3, [r7, #1]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d004      	beq.n	80035f0 <HAL_GPIO_WritePin+0x40>
 80035e6:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 80035ea:	4809      	ldr	r0, [pc, #36]	; (8003610 <HAL_GPIO_WritePin+0x60>)
 80035ec:	f7fd fb07 	bl	8000bfe <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80035f0:	787b      	ldrb	r3, [r7, #1]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d003      	beq.n	80035fe <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035f6:	887a      	ldrh	r2, [r7, #2]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035fc:	e003      	b.n	8003606 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035fe:	887b      	ldrh	r3, [r7, #2]
 8003600:	041a      	lsls	r2, r3, #16
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	619a      	str	r2, [r3, #24]
}
 8003606:	bf00      	nop
 8003608:	3708      	adds	r7, #8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	0800d258 	.word	0x0800d258

08003614 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	4603      	mov	r3, r0
 800361c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800361e:	4b08      	ldr	r3, [pc, #32]	; (8003640 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003620:	695a      	ldr	r2, [r3, #20]
 8003622:	88fb      	ldrh	r3, [r7, #6]
 8003624:	4013      	ands	r3, r2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d006      	beq.n	8003638 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800362a:	4a05      	ldr	r2, [pc, #20]	; (8003640 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800362c:	88fb      	ldrh	r3, [r7, #6]
 800362e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003630:	88fb      	ldrh	r3, [r7, #6]
 8003632:	4618      	mov	r0, r3
 8003634:	f7fd fbfe 	bl	8000e34 <HAL_GPIO_EXTI_Callback>
  }
}
 8003638:	bf00      	nop
 800363a:	3708      	adds	r7, #8
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	40013c00 	.word	0x40013c00

08003644 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d101      	bne.n	8003658 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e18c      	b.n	8003972 <HAL_RCC_ClockConfig+0x32e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d003      	beq.n	8003668 <HAL_RCC_ClockConfig+0x24>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2b0f      	cmp	r3, #15
 8003666:	d904      	bls.n	8003672 <HAL_RCC_ClockConfig+0x2e>
 8003668:	f240 215a 	movw	r1, #602	; 0x25a
 800366c:	4887      	ldr	r0, [pc, #540]	; (800388c <HAL_RCC_ClockConfig+0x248>)
 800366e:	f7fd fac6 	bl	8000bfe <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d031      	beq.n	80036dc <HAL_RCC_ClockConfig+0x98>
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d02e      	beq.n	80036dc <HAL_RCC_ClockConfig+0x98>
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	2b02      	cmp	r3, #2
 8003682:	d02b      	beq.n	80036dc <HAL_RCC_ClockConfig+0x98>
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	2b03      	cmp	r3, #3
 8003688:	d028      	beq.n	80036dc <HAL_RCC_ClockConfig+0x98>
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	2b04      	cmp	r3, #4
 800368e:	d025      	beq.n	80036dc <HAL_RCC_ClockConfig+0x98>
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	2b05      	cmp	r3, #5
 8003694:	d022      	beq.n	80036dc <HAL_RCC_ClockConfig+0x98>
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	2b06      	cmp	r3, #6
 800369a:	d01f      	beq.n	80036dc <HAL_RCC_ClockConfig+0x98>
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	2b07      	cmp	r3, #7
 80036a0:	d01c      	beq.n	80036dc <HAL_RCC_ClockConfig+0x98>
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	2b08      	cmp	r3, #8
 80036a6:	d019      	beq.n	80036dc <HAL_RCC_ClockConfig+0x98>
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	2b09      	cmp	r3, #9
 80036ac:	d016      	beq.n	80036dc <HAL_RCC_ClockConfig+0x98>
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	2b0a      	cmp	r3, #10
 80036b2:	d013      	beq.n	80036dc <HAL_RCC_ClockConfig+0x98>
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	2b0b      	cmp	r3, #11
 80036b8:	d010      	beq.n	80036dc <HAL_RCC_ClockConfig+0x98>
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	2b0c      	cmp	r3, #12
 80036be:	d00d      	beq.n	80036dc <HAL_RCC_ClockConfig+0x98>
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	2b0d      	cmp	r3, #13
 80036c4:	d00a      	beq.n	80036dc <HAL_RCC_ClockConfig+0x98>
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	2b0e      	cmp	r3, #14
 80036ca:	d007      	beq.n	80036dc <HAL_RCC_ClockConfig+0x98>
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	2b0f      	cmp	r3, #15
 80036d0:	d004      	beq.n	80036dc <HAL_RCC_ClockConfig+0x98>
 80036d2:	f240 215b 	movw	r1, #603	; 0x25b
 80036d6:	486d      	ldr	r0, [pc, #436]	; (800388c <HAL_RCC_ClockConfig+0x248>)
 80036d8:	f7fd fa91 	bl	8000bfe <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036dc:	4b6c      	ldr	r3, [pc, #432]	; (8003890 <HAL_RCC_ClockConfig+0x24c>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 030f 	and.w	r3, r3, #15
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d90c      	bls.n	8003704 <HAL_RCC_ClockConfig+0xc0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ea:	4b69      	ldr	r3, [pc, #420]	; (8003890 <HAL_RCC_ClockConfig+0x24c>)
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	b2d2      	uxtb	r2, r2
 80036f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036f2:	4b67      	ldr	r3, [pc, #412]	; (8003890 <HAL_RCC_ClockConfig+0x24c>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 030f 	and.w	r3, r3, #15
 80036fa:	683a      	ldr	r2, [r7, #0]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d001      	beq.n	8003704 <HAL_RCC_ClockConfig+0xc0>
    {
      return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e136      	b.n	8003972 <HAL_RCC_ClockConfig+0x32e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d049      	beq.n	80037a4 <HAL_RCC_ClockConfig+0x160>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0304 	and.w	r3, r3, #4
 8003718:	2b00      	cmp	r3, #0
 800371a:	d005      	beq.n	8003728 <HAL_RCC_ClockConfig+0xe4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800371c:	4b5d      	ldr	r3, [pc, #372]	; (8003894 <HAL_RCC_ClockConfig+0x250>)
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	4a5c      	ldr	r2, [pc, #368]	; (8003894 <HAL_RCC_ClockConfig+0x250>)
 8003722:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003726:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0308 	and.w	r3, r3, #8
 8003730:	2b00      	cmp	r3, #0
 8003732:	d005      	beq.n	8003740 <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003734:	4b57      	ldr	r3, [pc, #348]	; (8003894 <HAL_RCC_ClockConfig+0x250>)
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	4a56      	ldr	r2, [pc, #344]	; (8003894 <HAL_RCC_ClockConfig+0x250>)
 800373a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800373e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d024      	beq.n	8003792 <HAL_RCC_ClockConfig+0x14e>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	2b80      	cmp	r3, #128	; 0x80
 800374e:	d020      	beq.n	8003792 <HAL_RCC_ClockConfig+0x14e>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	2b90      	cmp	r3, #144	; 0x90
 8003756:	d01c      	beq.n	8003792 <HAL_RCC_ClockConfig+0x14e>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	2ba0      	cmp	r3, #160	; 0xa0
 800375e:	d018      	beq.n	8003792 <HAL_RCC_ClockConfig+0x14e>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	2bb0      	cmp	r3, #176	; 0xb0
 8003766:	d014      	beq.n	8003792 <HAL_RCC_ClockConfig+0x14e>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	2bc0      	cmp	r3, #192	; 0xc0
 800376e:	d010      	beq.n	8003792 <HAL_RCC_ClockConfig+0x14e>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	2bd0      	cmp	r3, #208	; 0xd0
 8003776:	d00c      	beq.n	8003792 <HAL_RCC_ClockConfig+0x14e>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	2be0      	cmp	r3, #224	; 0xe0
 800377e:	d008      	beq.n	8003792 <HAL_RCC_ClockConfig+0x14e>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	2bf0      	cmp	r3, #240	; 0xf0
 8003786:	d004      	beq.n	8003792 <HAL_RCC_ClockConfig+0x14e>
 8003788:	f240 217e 	movw	r1, #638	; 0x27e
 800378c:	483f      	ldr	r0, [pc, #252]	; (800388c <HAL_RCC_ClockConfig+0x248>)
 800378e:	f7fd fa36 	bl	8000bfe <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003792:	4b40      	ldr	r3, [pc, #256]	; (8003894 <HAL_RCC_ClockConfig+0x250>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	493d      	ldr	r1, [pc, #244]	; (8003894 <HAL_RCC_ClockConfig+0x250>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0301 	and.w	r3, r3, #1
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d059      	beq.n	8003864 <HAL_RCC_ClockConfig+0x220>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d010      	beq.n	80037da <HAL_RCC_ClockConfig+0x196>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d00c      	beq.n	80037da <HAL_RCC_ClockConfig+0x196>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d008      	beq.n	80037da <HAL_RCC_ClockConfig+0x196>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	2b03      	cmp	r3, #3
 80037ce:	d004      	beq.n	80037da <HAL_RCC_ClockConfig+0x196>
 80037d0:	f240 2185 	movw	r1, #645	; 0x285
 80037d4:	482d      	ldr	r0, [pc, #180]	; (800388c <HAL_RCC_ClockConfig+0x248>)
 80037d6:	f7fd fa12 	bl	8000bfe <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d107      	bne.n	80037f2 <HAL_RCC_ClockConfig+0x1ae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037e2:	4b2c      	ldr	r3, [pc, #176]	; (8003894 <HAL_RCC_ClockConfig+0x250>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d119      	bne.n	8003822 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e0bf      	b.n	8003972 <HAL_RCC_ClockConfig+0x32e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d003      	beq.n	8003802 <HAL_RCC_ClockConfig+0x1be>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037fe:	2b03      	cmp	r3, #3
 8003800:	d107      	bne.n	8003812 <HAL_RCC_ClockConfig+0x1ce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003802:	4b24      	ldr	r3, [pc, #144]	; (8003894 <HAL_RCC_ClockConfig+0x250>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d109      	bne.n	8003822 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e0af      	b.n	8003972 <HAL_RCC_ClockConfig+0x32e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003812:	4b20      	ldr	r3, [pc, #128]	; (8003894 <HAL_RCC_ClockConfig+0x250>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e0a7      	b.n	8003972 <HAL_RCC_ClockConfig+0x32e>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003822:	4b1c      	ldr	r3, [pc, #112]	; (8003894 <HAL_RCC_ClockConfig+0x250>)
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f023 0203 	bic.w	r2, r3, #3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	4919      	ldr	r1, [pc, #100]	; (8003894 <HAL_RCC_ClockConfig+0x250>)
 8003830:	4313      	orrs	r3, r2
 8003832:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003834:	f7fd fd74 	bl	8001320 <HAL_GetTick>
 8003838:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800383a:	e00a      	b.n	8003852 <HAL_RCC_ClockConfig+0x20e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800383c:	f7fd fd70 	bl	8001320 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	f241 3288 	movw	r2, #5000	; 0x1388
 800384a:	4293      	cmp	r3, r2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_ClockConfig+0x20e>
      {
        return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e08f      	b.n	8003972 <HAL_RCC_ClockConfig+0x32e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003852:	4b10      	ldr	r3, [pc, #64]	; (8003894 <HAL_RCC_ClockConfig+0x250>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f003 020c 	and.w	r2, r3, #12
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	429a      	cmp	r2, r3
 8003862:	d1eb      	bne.n	800383c <HAL_RCC_ClockConfig+0x1f8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003864:	4b0a      	ldr	r3, [pc, #40]	; (8003890 <HAL_RCC_ClockConfig+0x24c>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 030f 	and.w	r3, r3, #15
 800386c:	683a      	ldr	r2, [r7, #0]
 800386e:	429a      	cmp	r2, r3
 8003870:	d212      	bcs.n	8003898 <HAL_RCC_ClockConfig+0x254>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003872:	4b07      	ldr	r3, [pc, #28]	; (8003890 <HAL_RCC_ClockConfig+0x24c>)
 8003874:	683a      	ldr	r2, [r7, #0]
 8003876:	b2d2      	uxtb	r2, r2
 8003878:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800387a:	4b05      	ldr	r3, [pc, #20]	; (8003890 <HAL_RCC_ClockConfig+0x24c>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 030f 	and.w	r3, r3, #15
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	429a      	cmp	r2, r3
 8003886:	d007      	beq.n	8003898 <HAL_RCC_ClockConfig+0x254>
    {
      return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e072      	b.n	8003972 <HAL_RCC_ClockConfig+0x32e>
 800388c:	0800d2cc 	.word	0x0800d2cc
 8003890:	40023c00 	.word	0x40023c00
 8003894:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0304 	and.w	r3, r3, #4
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d025      	beq.n	80038f0 <HAL_RCC_ClockConfig+0x2ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d018      	beq.n	80038de <HAL_RCC_ClockConfig+0x29a>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038b4:	d013      	beq.n	80038de <HAL_RCC_ClockConfig+0x29a>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80038be:	d00e      	beq.n	80038de <HAL_RCC_ClockConfig+0x29a>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80038c8:	d009      	beq.n	80038de <HAL_RCC_ClockConfig+0x29a>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80038d2:	d004      	beq.n	80038de <HAL_RCC_ClockConfig+0x29a>
 80038d4:	f240 21c3 	movw	r1, #707	; 0x2c3
 80038d8:	4828      	ldr	r0, [pc, #160]	; (800397c <HAL_RCC_ClockConfig+0x338>)
 80038da:	f7fd f990 	bl	8000bfe <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038de:	4b28      	ldr	r3, [pc, #160]	; (8003980 <HAL_RCC_ClockConfig+0x33c>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	4925      	ldr	r1, [pc, #148]	; (8003980 <HAL_RCC_ClockConfig+0x33c>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0308 	and.w	r3, r3, #8
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d026      	beq.n	800394a <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d018      	beq.n	8003936 <HAL_RCC_ClockConfig+0x2f2>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800390c:	d013      	beq.n	8003936 <HAL_RCC_ClockConfig+0x2f2>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003916:	d00e      	beq.n	8003936 <HAL_RCC_ClockConfig+0x2f2>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003920:	d009      	beq.n	8003936 <HAL_RCC_ClockConfig+0x2f2>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800392a:	d004      	beq.n	8003936 <HAL_RCC_ClockConfig+0x2f2>
 800392c:	f240 21ca 	movw	r1, #714	; 0x2ca
 8003930:	4812      	ldr	r0, [pc, #72]	; (800397c <HAL_RCC_ClockConfig+0x338>)
 8003932:	f7fd f964 	bl	8000bfe <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003936:	4b12      	ldr	r3, [pc, #72]	; (8003980 <HAL_RCC_ClockConfig+0x33c>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	00db      	lsls	r3, r3, #3
 8003944:	490e      	ldr	r1, [pc, #56]	; (8003980 <HAL_RCC_ClockConfig+0x33c>)
 8003946:	4313      	orrs	r3, r2
 8003948:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800394a:	f000 f855 	bl	80039f8 <HAL_RCC_GetSysClockFreq>
 800394e:	4602      	mov	r2, r0
 8003950:	4b0b      	ldr	r3, [pc, #44]	; (8003980 <HAL_RCC_ClockConfig+0x33c>)
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	091b      	lsrs	r3, r3, #4
 8003956:	f003 030f 	and.w	r3, r3, #15
 800395a:	490a      	ldr	r1, [pc, #40]	; (8003984 <HAL_RCC_ClockConfig+0x340>)
 800395c:	5ccb      	ldrb	r3, [r1, r3]
 800395e:	fa22 f303 	lsr.w	r3, r2, r3
 8003962:	4a09      	ldr	r2, [pc, #36]	; (8003988 <HAL_RCC_ClockConfig+0x344>)
 8003964:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003966:	4b09      	ldr	r3, [pc, #36]	; (800398c <HAL_RCC_ClockConfig+0x348>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4618      	mov	r0, r3
 800396c:	f7fd fc94 	bl	8001298 <HAL_InitTick>

  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3710      	adds	r7, #16
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	0800d2cc 	.word	0x0800d2cc
 8003980:	40023800 	.word	0x40023800
 8003984:	0800d588 	.word	0x0800d588
 8003988:	20000000 	.word	0x20000000
 800398c:	20000004 	.word	0x20000004

08003990 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003990:	b480      	push	{r7}
 8003992:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003994:	4b03      	ldr	r3, [pc, #12]	; (80039a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003996:	681b      	ldr	r3, [r3, #0]
}
 8003998:	4618      	mov	r0, r3
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	20000000 	.word	0x20000000

080039a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80039ac:	f7ff fff0 	bl	8003990 <HAL_RCC_GetHCLKFreq>
 80039b0:	4602      	mov	r2, r0
 80039b2:	4b05      	ldr	r3, [pc, #20]	; (80039c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	0a9b      	lsrs	r3, r3, #10
 80039b8:	f003 0307 	and.w	r3, r3, #7
 80039bc:	4903      	ldr	r1, [pc, #12]	; (80039cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80039be:	5ccb      	ldrb	r3, [r1, r3]
 80039c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	40023800 	.word	0x40023800
 80039cc:	0800d598 	.word	0x0800d598

080039d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80039d4:	f7ff ffdc 	bl	8003990 <HAL_RCC_GetHCLKFreq>
 80039d8:	4602      	mov	r2, r0
 80039da:	4b05      	ldr	r3, [pc, #20]	; (80039f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	0b5b      	lsrs	r3, r3, #13
 80039e0:	f003 0307 	and.w	r3, r3, #7
 80039e4:	4903      	ldr	r1, [pc, #12]	; (80039f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039e6:	5ccb      	ldrb	r3, [r1, r3]
 80039e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	40023800 	.word	0x40023800
 80039f4:	0800d598 	.word	0x0800d598

080039f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039fc:	b0ae      	sub	sp, #184	; 0xb8
 80039fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003a00:	2300      	movs	r3, #0
 8003a02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003a06:	2300      	movs	r3, #0
 8003a08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003a12:	2300      	movs	r3, #0
 8003a14:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a1e:	4bcb      	ldr	r3, [pc, #812]	; (8003d4c <HAL_RCC_GetSysClockFreq+0x354>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f003 030c 	and.w	r3, r3, #12
 8003a26:	2b0c      	cmp	r3, #12
 8003a28:	f200 8206 	bhi.w	8003e38 <HAL_RCC_GetSysClockFreq+0x440>
 8003a2c:	a201      	add	r2, pc, #4	; (adr r2, 8003a34 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a32:	bf00      	nop
 8003a34:	08003a69 	.word	0x08003a69
 8003a38:	08003e39 	.word	0x08003e39
 8003a3c:	08003e39 	.word	0x08003e39
 8003a40:	08003e39 	.word	0x08003e39
 8003a44:	08003a71 	.word	0x08003a71
 8003a48:	08003e39 	.word	0x08003e39
 8003a4c:	08003e39 	.word	0x08003e39
 8003a50:	08003e39 	.word	0x08003e39
 8003a54:	08003a79 	.word	0x08003a79
 8003a58:	08003e39 	.word	0x08003e39
 8003a5c:	08003e39 	.word	0x08003e39
 8003a60:	08003e39 	.word	0x08003e39
 8003a64:	08003c69 	.word	0x08003c69
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a68:	4bb9      	ldr	r3, [pc, #740]	; (8003d50 <HAL_RCC_GetSysClockFreq+0x358>)
 8003a6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003a6e:	e1e7      	b.n	8003e40 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a70:	4bb8      	ldr	r3, [pc, #736]	; (8003d54 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003a72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003a76:	e1e3      	b.n	8003e40 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a78:	4bb4      	ldr	r3, [pc, #720]	; (8003d4c <HAL_RCC_GetSysClockFreq+0x354>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a84:	4bb1      	ldr	r3, [pc, #708]	; (8003d4c <HAL_RCC_GetSysClockFreq+0x354>)
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d071      	beq.n	8003b74 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a90:	4bae      	ldr	r3, [pc, #696]	; (8003d4c <HAL_RCC_GetSysClockFreq+0x354>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	099b      	lsrs	r3, r3, #6
 8003a96:	2200      	movs	r2, #0
 8003a98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003a9c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003aa0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003aa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aa8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003aac:	2300      	movs	r3, #0
 8003aae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003ab2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003ab6:	4622      	mov	r2, r4
 8003ab8:	462b      	mov	r3, r5
 8003aba:	f04f 0000 	mov.w	r0, #0
 8003abe:	f04f 0100 	mov.w	r1, #0
 8003ac2:	0159      	lsls	r1, r3, #5
 8003ac4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ac8:	0150      	lsls	r0, r2, #5
 8003aca:	4602      	mov	r2, r0
 8003acc:	460b      	mov	r3, r1
 8003ace:	4621      	mov	r1, r4
 8003ad0:	1a51      	subs	r1, r2, r1
 8003ad2:	6439      	str	r1, [r7, #64]	; 0x40
 8003ad4:	4629      	mov	r1, r5
 8003ad6:	eb63 0301 	sbc.w	r3, r3, r1
 8003ada:	647b      	str	r3, [r7, #68]	; 0x44
 8003adc:	f04f 0200 	mov.w	r2, #0
 8003ae0:	f04f 0300 	mov.w	r3, #0
 8003ae4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003ae8:	4649      	mov	r1, r9
 8003aea:	018b      	lsls	r3, r1, #6
 8003aec:	4641      	mov	r1, r8
 8003aee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003af2:	4641      	mov	r1, r8
 8003af4:	018a      	lsls	r2, r1, #6
 8003af6:	4641      	mov	r1, r8
 8003af8:	1a51      	subs	r1, r2, r1
 8003afa:	63b9      	str	r1, [r7, #56]	; 0x38
 8003afc:	4649      	mov	r1, r9
 8003afe:	eb63 0301 	sbc.w	r3, r3, r1
 8003b02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b04:	f04f 0200 	mov.w	r2, #0
 8003b08:	f04f 0300 	mov.w	r3, #0
 8003b0c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003b10:	4649      	mov	r1, r9
 8003b12:	00cb      	lsls	r3, r1, #3
 8003b14:	4641      	mov	r1, r8
 8003b16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b1a:	4641      	mov	r1, r8
 8003b1c:	00ca      	lsls	r2, r1, #3
 8003b1e:	4610      	mov	r0, r2
 8003b20:	4619      	mov	r1, r3
 8003b22:	4603      	mov	r3, r0
 8003b24:	4622      	mov	r2, r4
 8003b26:	189b      	adds	r3, r3, r2
 8003b28:	633b      	str	r3, [r7, #48]	; 0x30
 8003b2a:	462b      	mov	r3, r5
 8003b2c:	460a      	mov	r2, r1
 8003b2e:	eb42 0303 	adc.w	r3, r2, r3
 8003b32:	637b      	str	r3, [r7, #52]	; 0x34
 8003b34:	f04f 0200 	mov.w	r2, #0
 8003b38:	f04f 0300 	mov.w	r3, #0
 8003b3c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003b40:	4629      	mov	r1, r5
 8003b42:	024b      	lsls	r3, r1, #9
 8003b44:	4621      	mov	r1, r4
 8003b46:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b4a:	4621      	mov	r1, r4
 8003b4c:	024a      	lsls	r2, r1, #9
 8003b4e:	4610      	mov	r0, r2
 8003b50:	4619      	mov	r1, r3
 8003b52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b56:	2200      	movs	r2, #0
 8003b58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003b5c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003b60:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003b64:	f7fc fb56 	bl	8000214 <__aeabi_uldivmod>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b72:	e067      	b.n	8003c44 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b74:	4b75      	ldr	r3, [pc, #468]	; (8003d4c <HAL_RCC_GetSysClockFreq+0x354>)
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	099b      	lsrs	r3, r3, #6
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b80:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003b84:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003b88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b8e:	2300      	movs	r3, #0
 8003b90:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003b92:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003b96:	4622      	mov	r2, r4
 8003b98:	462b      	mov	r3, r5
 8003b9a:	f04f 0000 	mov.w	r0, #0
 8003b9e:	f04f 0100 	mov.w	r1, #0
 8003ba2:	0159      	lsls	r1, r3, #5
 8003ba4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ba8:	0150      	lsls	r0, r2, #5
 8003baa:	4602      	mov	r2, r0
 8003bac:	460b      	mov	r3, r1
 8003bae:	4621      	mov	r1, r4
 8003bb0:	1a51      	subs	r1, r2, r1
 8003bb2:	62b9      	str	r1, [r7, #40]	; 0x28
 8003bb4:	4629      	mov	r1, r5
 8003bb6:	eb63 0301 	sbc.w	r3, r3, r1
 8003bba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bbc:	f04f 0200 	mov.w	r2, #0
 8003bc0:	f04f 0300 	mov.w	r3, #0
 8003bc4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003bc8:	4649      	mov	r1, r9
 8003bca:	018b      	lsls	r3, r1, #6
 8003bcc:	4641      	mov	r1, r8
 8003bce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003bd2:	4641      	mov	r1, r8
 8003bd4:	018a      	lsls	r2, r1, #6
 8003bd6:	4641      	mov	r1, r8
 8003bd8:	ebb2 0a01 	subs.w	sl, r2, r1
 8003bdc:	4649      	mov	r1, r9
 8003bde:	eb63 0b01 	sbc.w	fp, r3, r1
 8003be2:	f04f 0200 	mov.w	r2, #0
 8003be6:	f04f 0300 	mov.w	r3, #0
 8003bea:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003bee:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003bf2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bf6:	4692      	mov	sl, r2
 8003bf8:	469b      	mov	fp, r3
 8003bfa:	4623      	mov	r3, r4
 8003bfc:	eb1a 0303 	adds.w	r3, sl, r3
 8003c00:	623b      	str	r3, [r7, #32]
 8003c02:	462b      	mov	r3, r5
 8003c04:	eb4b 0303 	adc.w	r3, fp, r3
 8003c08:	627b      	str	r3, [r7, #36]	; 0x24
 8003c0a:	f04f 0200 	mov.w	r2, #0
 8003c0e:	f04f 0300 	mov.w	r3, #0
 8003c12:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003c16:	4629      	mov	r1, r5
 8003c18:	028b      	lsls	r3, r1, #10
 8003c1a:	4621      	mov	r1, r4
 8003c1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c20:	4621      	mov	r1, r4
 8003c22:	028a      	lsls	r2, r1, #10
 8003c24:	4610      	mov	r0, r2
 8003c26:	4619      	mov	r1, r3
 8003c28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	673b      	str	r3, [r7, #112]	; 0x70
 8003c30:	677a      	str	r2, [r7, #116]	; 0x74
 8003c32:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003c36:	f7fc faed 	bl	8000214 <__aeabi_uldivmod>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	4613      	mov	r3, r2
 8003c40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c44:	4b41      	ldr	r3, [pc, #260]	; (8003d4c <HAL_RCC_GetSysClockFreq+0x354>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	0c1b      	lsrs	r3, r3, #16
 8003c4a:	f003 0303 	and.w	r3, r3, #3
 8003c4e:	3301      	adds	r3, #1
 8003c50:	005b      	lsls	r3, r3, #1
 8003c52:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003c56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003c66:	e0eb      	b.n	8003e40 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c68:	4b38      	ldr	r3, [pc, #224]	; (8003d4c <HAL_RCC_GetSysClockFreq+0x354>)
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c74:	4b35      	ldr	r3, [pc, #212]	; (8003d4c <HAL_RCC_GetSysClockFreq+0x354>)
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d06b      	beq.n	8003d58 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c80:	4b32      	ldr	r3, [pc, #200]	; (8003d4c <HAL_RCC_GetSysClockFreq+0x354>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	099b      	lsrs	r3, r3, #6
 8003c86:	2200      	movs	r2, #0
 8003c88:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c8a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003c8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c92:	663b      	str	r3, [r7, #96]	; 0x60
 8003c94:	2300      	movs	r3, #0
 8003c96:	667b      	str	r3, [r7, #100]	; 0x64
 8003c98:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003c9c:	4622      	mov	r2, r4
 8003c9e:	462b      	mov	r3, r5
 8003ca0:	f04f 0000 	mov.w	r0, #0
 8003ca4:	f04f 0100 	mov.w	r1, #0
 8003ca8:	0159      	lsls	r1, r3, #5
 8003caa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cae:	0150      	lsls	r0, r2, #5
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	4621      	mov	r1, r4
 8003cb6:	1a51      	subs	r1, r2, r1
 8003cb8:	61b9      	str	r1, [r7, #24]
 8003cba:	4629      	mov	r1, r5
 8003cbc:	eb63 0301 	sbc.w	r3, r3, r1
 8003cc0:	61fb      	str	r3, [r7, #28]
 8003cc2:	f04f 0200 	mov.w	r2, #0
 8003cc6:	f04f 0300 	mov.w	r3, #0
 8003cca:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003cce:	4659      	mov	r1, fp
 8003cd0:	018b      	lsls	r3, r1, #6
 8003cd2:	4651      	mov	r1, sl
 8003cd4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cd8:	4651      	mov	r1, sl
 8003cda:	018a      	lsls	r2, r1, #6
 8003cdc:	4651      	mov	r1, sl
 8003cde:	ebb2 0801 	subs.w	r8, r2, r1
 8003ce2:	4659      	mov	r1, fp
 8003ce4:	eb63 0901 	sbc.w	r9, r3, r1
 8003ce8:	f04f 0200 	mov.w	r2, #0
 8003cec:	f04f 0300 	mov.w	r3, #0
 8003cf0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cf4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003cf8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cfc:	4690      	mov	r8, r2
 8003cfe:	4699      	mov	r9, r3
 8003d00:	4623      	mov	r3, r4
 8003d02:	eb18 0303 	adds.w	r3, r8, r3
 8003d06:	613b      	str	r3, [r7, #16]
 8003d08:	462b      	mov	r3, r5
 8003d0a:	eb49 0303 	adc.w	r3, r9, r3
 8003d0e:	617b      	str	r3, [r7, #20]
 8003d10:	f04f 0200 	mov.w	r2, #0
 8003d14:	f04f 0300 	mov.w	r3, #0
 8003d18:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003d1c:	4629      	mov	r1, r5
 8003d1e:	024b      	lsls	r3, r1, #9
 8003d20:	4621      	mov	r1, r4
 8003d22:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d26:	4621      	mov	r1, r4
 8003d28:	024a      	lsls	r2, r1, #9
 8003d2a:	4610      	mov	r0, r2
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d32:	2200      	movs	r2, #0
 8003d34:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d36:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003d38:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003d3c:	f7fc fa6a 	bl	8000214 <__aeabi_uldivmod>
 8003d40:	4602      	mov	r2, r0
 8003d42:	460b      	mov	r3, r1
 8003d44:	4613      	mov	r3, r2
 8003d46:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d4a:	e065      	b.n	8003e18 <HAL_RCC_GetSysClockFreq+0x420>
 8003d4c:	40023800 	.word	0x40023800
 8003d50:	00f42400 	.word	0x00f42400
 8003d54:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d58:	4b3d      	ldr	r3, [pc, #244]	; (8003e50 <HAL_RCC_GetSysClockFreq+0x458>)
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	099b      	lsrs	r3, r3, #6
 8003d5e:	2200      	movs	r2, #0
 8003d60:	4618      	mov	r0, r3
 8003d62:	4611      	mov	r1, r2
 8003d64:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d68:	653b      	str	r3, [r7, #80]	; 0x50
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	657b      	str	r3, [r7, #84]	; 0x54
 8003d6e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003d72:	4642      	mov	r2, r8
 8003d74:	464b      	mov	r3, r9
 8003d76:	f04f 0000 	mov.w	r0, #0
 8003d7a:	f04f 0100 	mov.w	r1, #0
 8003d7e:	0159      	lsls	r1, r3, #5
 8003d80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d84:	0150      	lsls	r0, r2, #5
 8003d86:	4602      	mov	r2, r0
 8003d88:	460b      	mov	r3, r1
 8003d8a:	4641      	mov	r1, r8
 8003d8c:	1a51      	subs	r1, r2, r1
 8003d8e:	60b9      	str	r1, [r7, #8]
 8003d90:	4649      	mov	r1, r9
 8003d92:	eb63 0301 	sbc.w	r3, r3, r1
 8003d96:	60fb      	str	r3, [r7, #12]
 8003d98:	f04f 0200 	mov.w	r2, #0
 8003d9c:	f04f 0300 	mov.w	r3, #0
 8003da0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003da4:	4659      	mov	r1, fp
 8003da6:	018b      	lsls	r3, r1, #6
 8003da8:	4651      	mov	r1, sl
 8003daa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003dae:	4651      	mov	r1, sl
 8003db0:	018a      	lsls	r2, r1, #6
 8003db2:	4651      	mov	r1, sl
 8003db4:	1a54      	subs	r4, r2, r1
 8003db6:	4659      	mov	r1, fp
 8003db8:	eb63 0501 	sbc.w	r5, r3, r1
 8003dbc:	f04f 0200 	mov.w	r2, #0
 8003dc0:	f04f 0300 	mov.w	r3, #0
 8003dc4:	00eb      	lsls	r3, r5, #3
 8003dc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dca:	00e2      	lsls	r2, r4, #3
 8003dcc:	4614      	mov	r4, r2
 8003dce:	461d      	mov	r5, r3
 8003dd0:	4643      	mov	r3, r8
 8003dd2:	18e3      	adds	r3, r4, r3
 8003dd4:	603b      	str	r3, [r7, #0]
 8003dd6:	464b      	mov	r3, r9
 8003dd8:	eb45 0303 	adc.w	r3, r5, r3
 8003ddc:	607b      	str	r3, [r7, #4]
 8003dde:	f04f 0200 	mov.w	r2, #0
 8003de2:	f04f 0300 	mov.w	r3, #0
 8003de6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003dea:	4629      	mov	r1, r5
 8003dec:	028b      	lsls	r3, r1, #10
 8003dee:	4621      	mov	r1, r4
 8003df0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003df4:	4621      	mov	r1, r4
 8003df6:	028a      	lsls	r2, r1, #10
 8003df8:	4610      	mov	r0, r2
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e00:	2200      	movs	r2, #0
 8003e02:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e04:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003e06:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003e0a:	f7fc fa03 	bl	8000214 <__aeabi_uldivmod>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	460b      	mov	r3, r1
 8003e12:	4613      	mov	r3, r2
 8003e14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003e18:	4b0d      	ldr	r3, [pc, #52]	; (8003e50 <HAL_RCC_GetSysClockFreq+0x458>)
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	0f1b      	lsrs	r3, r3, #28
 8003e1e:	f003 0307 	and.w	r3, r3, #7
 8003e22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003e26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003e2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003e36:	e003      	b.n	8003e40 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e38:	4b06      	ldr	r3, [pc, #24]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003e3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003e3e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e40:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	37b8      	adds	r7, #184	; 0xb8
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e4e:	bf00      	nop
 8003e50:	40023800 	.word	0x40023800
 8003e54:	00f42400 	.word	0x00f42400

08003e58 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b086      	sub	sp, #24
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d101      	bne.n	8003e6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e347      	b.n	80044fa <HAL_RCC_OscConfig+0x6a2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2b0f      	cmp	r3, #15
 8003e70:	d904      	bls.n	8003e7c <HAL_RCC_OscConfig+0x24>
 8003e72:	f44f 6151 	mov.w	r1, #3344	; 0xd10
 8003e76:	4893      	ldr	r0, [pc, #588]	; (80040c4 <HAL_RCC_OscConfig+0x26c>)
 8003e78:	f7fc fec1 	bl	8000bfe <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0301 	and.w	r3, r3, #1
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f000 8096 	beq.w	8003fb6 <HAL_RCC_OscConfig+0x15e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00e      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x58>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e9a:	d009      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x58>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ea4:	d004      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x58>
 8003ea6:	f640 5115 	movw	r1, #3349	; 0xd15
 8003eaa:	4886      	ldr	r0, [pc, #536]	; (80040c4 <HAL_RCC_OscConfig+0x26c>)
 8003eac:	f7fc fea7 	bl	8000bfe <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003eb0:	4b85      	ldr	r3, [pc, #532]	; (80040c8 <HAL_RCC_OscConfig+0x270>)
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f003 030c 	and.w	r3, r3, #12
 8003eb8:	2b04      	cmp	r3, #4
 8003eba:	d019      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003ebc:	4b82      	ldr	r3, [pc, #520]	; (80040c8 <HAL_RCC_OscConfig+0x270>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003ec4:	2b08      	cmp	r3, #8
 8003ec6:	d106      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x7e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003ec8:	4b7f      	ldr	r3, [pc, #508]	; (80040c8 <HAL_RCC_OscConfig+0x270>)
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ed0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ed4:	d00c      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ed6:	4b7c      	ldr	r3, [pc, #496]	; (80040c8 <HAL_RCC_OscConfig+0x270>)
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003ede:	2b0c      	cmp	r3, #12
 8003ee0:	d112      	bne.n	8003f08 <HAL_RCC_OscConfig+0xb0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ee2:	4b79      	ldr	r3, [pc, #484]	; (80040c8 <HAL_RCC_OscConfig+0x270>)
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003eee:	d10b      	bne.n	8003f08 <HAL_RCC_OscConfig+0xb0>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ef0:	4b75      	ldr	r3, [pc, #468]	; (80040c8 <HAL_RCC_OscConfig+0x270>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d05b      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x15c>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d157      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x15c>
      {
        return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e2f8      	b.n	80044fa <HAL_RCC_OscConfig+0x6a2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f10:	d106      	bne.n	8003f20 <HAL_RCC_OscConfig+0xc8>
 8003f12:	4b6d      	ldr	r3, [pc, #436]	; (80040c8 <HAL_RCC_OscConfig+0x270>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a6c      	ldr	r2, [pc, #432]	; (80040c8 <HAL_RCC_OscConfig+0x270>)
 8003f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f1c:	6013      	str	r3, [r2, #0]
 8003f1e:	e01d      	b.n	8003f5c <HAL_RCC_OscConfig+0x104>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f28:	d10c      	bne.n	8003f44 <HAL_RCC_OscConfig+0xec>
 8003f2a:	4b67      	ldr	r3, [pc, #412]	; (80040c8 <HAL_RCC_OscConfig+0x270>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a66      	ldr	r2, [pc, #408]	; (80040c8 <HAL_RCC_OscConfig+0x270>)
 8003f30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f34:	6013      	str	r3, [r2, #0]
 8003f36:	4b64      	ldr	r3, [pc, #400]	; (80040c8 <HAL_RCC_OscConfig+0x270>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a63      	ldr	r2, [pc, #396]	; (80040c8 <HAL_RCC_OscConfig+0x270>)
 8003f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f40:	6013      	str	r3, [r2, #0]
 8003f42:	e00b      	b.n	8003f5c <HAL_RCC_OscConfig+0x104>
 8003f44:	4b60      	ldr	r3, [pc, #384]	; (80040c8 <HAL_RCC_OscConfig+0x270>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a5f      	ldr	r2, [pc, #380]	; (80040c8 <HAL_RCC_OscConfig+0x270>)
 8003f4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f4e:	6013      	str	r3, [r2, #0]
 8003f50:	4b5d      	ldr	r3, [pc, #372]	; (80040c8 <HAL_RCC_OscConfig+0x270>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a5c      	ldr	r2, [pc, #368]	; (80040c8 <HAL_RCC_OscConfig+0x270>)
 8003f56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d013      	beq.n	8003f8c <HAL_RCC_OscConfig+0x134>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f64:	f7fd f9dc 	bl	8001320 <HAL_GetTick>
 8003f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f6a:	e008      	b.n	8003f7e <HAL_RCC_OscConfig+0x126>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f6c:	f7fd f9d8 	bl	8001320 <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b64      	cmp	r3, #100	; 0x64
 8003f78:	d901      	bls.n	8003f7e <HAL_RCC_OscConfig+0x126>
          {
            return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e2bd      	b.n	80044fa <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f7e:	4b52      	ldr	r3, [pc, #328]	; (80040c8 <HAL_RCC_OscConfig+0x270>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d0f0      	beq.n	8003f6c <HAL_RCC_OscConfig+0x114>
 8003f8a:	e014      	b.n	8003fb6 <HAL_RCC_OscConfig+0x15e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f8c:	f7fd f9c8 	bl	8001320 <HAL_GetTick>
 8003f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f92:	e008      	b.n	8003fa6 <HAL_RCC_OscConfig+0x14e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f94:	f7fd f9c4 	bl	8001320 <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	2b64      	cmp	r3, #100	; 0x64
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e2a9      	b.n	80044fa <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fa6:	4b48      	ldr	r3, [pc, #288]	; (80040c8 <HAL_RCC_OscConfig+0x270>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1f0      	bne.n	8003f94 <HAL_RCC_OscConfig+0x13c>
 8003fb2:	e000      	b.n	8003fb6 <HAL_RCC_OscConfig+0x15e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0302 	and.w	r3, r3, #2
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	f000 808c 	beq.w	80040dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d008      	beq.n	8003fde <HAL_RCC_OscConfig+0x186>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d004      	beq.n	8003fde <HAL_RCC_OscConfig+0x186>
 8003fd4:	f640 514d 	movw	r1, #3405	; 0xd4d
 8003fd8:	483a      	ldr	r0, [pc, #232]	; (80040c4 <HAL_RCC_OscConfig+0x26c>)
 8003fda:	f7fc fe10 	bl	8000bfe <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	2b1f      	cmp	r3, #31
 8003fe4:	d904      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x198>
 8003fe6:	f640 514e 	movw	r1, #3406	; 0xd4e
 8003fea:	4836      	ldr	r0, [pc, #216]	; (80040c4 <HAL_RCC_OscConfig+0x26c>)
 8003fec:	f7fc fe07 	bl	8000bfe <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003ff0:	4b35      	ldr	r3, [pc, #212]	; (80040c8 <HAL_RCC_OscConfig+0x270>)
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f003 030c 	and.w	r3, r3, #12
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d017      	beq.n	800402c <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003ffc:	4b32      	ldr	r3, [pc, #200]	; (80040c8 <HAL_RCC_OscConfig+0x270>)
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004004:	2b08      	cmp	r3, #8
 8004006:	d105      	bne.n	8004014 <HAL_RCC_OscConfig+0x1bc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004008:	4b2f      	ldr	r3, [pc, #188]	; (80040c8 <HAL_RCC_OscConfig+0x270>)
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00b      	beq.n	800402c <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004014:	4b2c      	ldr	r3, [pc, #176]	; (80040c8 <HAL_RCC_OscConfig+0x270>)
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800401c:	2b0c      	cmp	r3, #12
 800401e:	d11c      	bne.n	800405a <HAL_RCC_OscConfig+0x202>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004020:	4b29      	ldr	r3, [pc, #164]	; (80040c8 <HAL_RCC_OscConfig+0x270>)
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d116      	bne.n	800405a <HAL_RCC_OscConfig+0x202>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800402c:	4b26      	ldr	r3, [pc, #152]	; (80040c8 <HAL_RCC_OscConfig+0x270>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0302 	and.w	r3, r3, #2
 8004034:	2b00      	cmp	r3, #0
 8004036:	d005      	beq.n	8004044 <HAL_RCC_OscConfig+0x1ec>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d001      	beq.n	8004044 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e25a      	b.n	80044fa <HAL_RCC_OscConfig+0x6a2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004044:	4b20      	ldr	r3, [pc, #128]	; (80040c8 <HAL_RCC_OscConfig+0x270>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	00db      	lsls	r3, r3, #3
 8004052:	491d      	ldr	r1, [pc, #116]	; (80040c8 <HAL_RCC_OscConfig+0x270>)
 8004054:	4313      	orrs	r3, r2
 8004056:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004058:	e040      	b.n	80040dc <HAL_RCC_OscConfig+0x284>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d020      	beq.n	80040a4 <HAL_RCC_OscConfig+0x24c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004062:	4b1a      	ldr	r3, [pc, #104]	; (80040cc <HAL_RCC_OscConfig+0x274>)
 8004064:	2201      	movs	r2, #1
 8004066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004068:	f7fd f95a 	bl	8001320 <HAL_GetTick>
 800406c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800406e:	e008      	b.n	8004082 <HAL_RCC_OscConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004070:	f7fd f956 	bl	8001320 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	2b02      	cmp	r3, #2
 800407c:	d901      	bls.n	8004082 <HAL_RCC_OscConfig+0x22a>
          {
            return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e23b      	b.n	80044fa <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004082:	4b11      	ldr	r3, [pc, #68]	; (80040c8 <HAL_RCC_OscConfig+0x270>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d0f0      	beq.n	8004070 <HAL_RCC_OscConfig+0x218>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800408e:	4b0e      	ldr	r3, [pc, #56]	; (80040c8 <HAL_RCC_OscConfig+0x270>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	00db      	lsls	r3, r3, #3
 800409c:	490a      	ldr	r1, [pc, #40]	; (80040c8 <HAL_RCC_OscConfig+0x270>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	600b      	str	r3, [r1, #0]
 80040a2:	e01b      	b.n	80040dc <HAL_RCC_OscConfig+0x284>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040a4:	4b09      	ldr	r3, [pc, #36]	; (80040cc <HAL_RCC_OscConfig+0x274>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040aa:	f7fd f939 	bl	8001320 <HAL_GetTick>
 80040ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040b0:	e00e      	b.n	80040d0 <HAL_RCC_OscConfig+0x278>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040b2:	f7fd f935 	bl	8001320 <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d907      	bls.n	80040d0 <HAL_RCC_OscConfig+0x278>
          {
            return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e21a      	b.n	80044fa <HAL_RCC_OscConfig+0x6a2>
 80040c4:	0800d340 	.word	0x0800d340
 80040c8:	40023800 	.word	0x40023800
 80040cc:	42470000 	.word	0x42470000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040d0:	4b74      	ldr	r3, [pc, #464]	; (80042a4 <HAL_RCC_OscConfig+0x44c>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0302 	and.w	r3, r3, #2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1ea      	bne.n	80040b2 <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0308 	and.w	r3, r3, #8
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d03d      	beq.n	8004164 <HAL_RCC_OscConfig+0x30c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	695b      	ldr	r3, [r3, #20]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d008      	beq.n	8004102 <HAL_RCC_OscConfig+0x2aa>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	695b      	ldr	r3, [r3, #20]
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d004      	beq.n	8004102 <HAL_RCC_OscConfig+0x2aa>
 80040f8:	f640 5194 	movw	r1, #3476	; 0xd94
 80040fc:	486a      	ldr	r0, [pc, #424]	; (80042a8 <HAL_RCC_OscConfig+0x450>)
 80040fe:	f7fc fd7e 	bl	8000bfe <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d016      	beq.n	8004138 <HAL_RCC_OscConfig+0x2e0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800410a:	4b68      	ldr	r3, [pc, #416]	; (80042ac <HAL_RCC_OscConfig+0x454>)
 800410c:	2201      	movs	r2, #1
 800410e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004110:	f7fd f906 	bl	8001320 <HAL_GetTick>
 8004114:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004116:	e008      	b.n	800412a <HAL_RCC_OscConfig+0x2d2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004118:	f7fd f902 	bl	8001320 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	2b02      	cmp	r3, #2
 8004124:	d901      	bls.n	800412a <HAL_RCC_OscConfig+0x2d2>
        {
          return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e1e7      	b.n	80044fa <HAL_RCC_OscConfig+0x6a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800412a:	4b5e      	ldr	r3, [pc, #376]	; (80042a4 <HAL_RCC_OscConfig+0x44c>)
 800412c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d0f0      	beq.n	8004118 <HAL_RCC_OscConfig+0x2c0>
 8004136:	e015      	b.n	8004164 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004138:	4b5c      	ldr	r3, [pc, #368]	; (80042ac <HAL_RCC_OscConfig+0x454>)
 800413a:	2200      	movs	r2, #0
 800413c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800413e:	f7fd f8ef 	bl	8001320 <HAL_GetTick>
 8004142:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004144:	e008      	b.n	8004158 <HAL_RCC_OscConfig+0x300>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004146:	f7fd f8eb 	bl	8001320 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	2b02      	cmp	r3, #2
 8004152:	d901      	bls.n	8004158 <HAL_RCC_OscConfig+0x300>
        {
          return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e1d0      	b.n	80044fa <HAL_RCC_OscConfig+0x6a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004158:	4b52      	ldr	r3, [pc, #328]	; (80042a4 <HAL_RCC_OscConfig+0x44c>)
 800415a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800415c:	f003 0302 	and.w	r3, r3, #2
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1f0      	bne.n	8004146 <HAL_RCC_OscConfig+0x2ee>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0304 	and.w	r3, r3, #4
 800416c:	2b00      	cmp	r3, #0
 800416e:	f000 80b0 	beq.w	80042d2 <HAL_RCC_OscConfig+0x47a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004172:	2300      	movs	r3, #0
 8004174:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00c      	beq.n	8004198 <HAL_RCC_OscConfig+0x340>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d008      	beq.n	8004198 <HAL_RCC_OscConfig+0x340>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	2b05      	cmp	r3, #5
 800418c:	d004      	beq.n	8004198 <HAL_RCC_OscConfig+0x340>
 800418e:	f44f 615c 	mov.w	r1, #3520	; 0xdc0
 8004192:	4845      	ldr	r0, [pc, #276]	; (80042a8 <HAL_RCC_OscConfig+0x450>)
 8004194:	f7fc fd33 	bl	8000bfe <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004198:	4b42      	ldr	r3, [pc, #264]	; (80042a4 <HAL_RCC_OscConfig+0x44c>)
 800419a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d10f      	bne.n	80041c4 <HAL_RCC_OscConfig+0x36c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041a4:	2300      	movs	r3, #0
 80041a6:	60bb      	str	r3, [r7, #8]
 80041a8:	4b3e      	ldr	r3, [pc, #248]	; (80042a4 <HAL_RCC_OscConfig+0x44c>)
 80041aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ac:	4a3d      	ldr	r2, [pc, #244]	; (80042a4 <HAL_RCC_OscConfig+0x44c>)
 80041ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041b2:	6413      	str	r3, [r2, #64]	; 0x40
 80041b4:	4b3b      	ldr	r3, [pc, #236]	; (80042a4 <HAL_RCC_OscConfig+0x44c>)
 80041b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041bc:	60bb      	str	r3, [r7, #8]
 80041be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041c0:	2301      	movs	r3, #1
 80041c2:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041c4:	4b3a      	ldr	r3, [pc, #232]	; (80042b0 <HAL_RCC_OscConfig+0x458>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d118      	bne.n	8004202 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041d0:	4b37      	ldr	r3, [pc, #220]	; (80042b0 <HAL_RCC_OscConfig+0x458>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a36      	ldr	r2, [pc, #216]	; (80042b0 <HAL_RCC_OscConfig+0x458>)
 80041d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041dc:	f7fd f8a0 	bl	8001320 <HAL_GetTick>
 80041e0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041e2:	e008      	b.n	80041f6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041e4:	f7fd f89c 	bl	8001320 <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d901      	bls.n	80041f6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e181      	b.n	80044fa <HAL_RCC_OscConfig+0x6a2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041f6:	4b2e      	ldr	r3, [pc, #184]	; (80042b0 <HAL_RCC_OscConfig+0x458>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d0f0      	beq.n	80041e4 <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d106      	bne.n	8004218 <HAL_RCC_OscConfig+0x3c0>
 800420a:	4b26      	ldr	r3, [pc, #152]	; (80042a4 <HAL_RCC_OscConfig+0x44c>)
 800420c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800420e:	4a25      	ldr	r2, [pc, #148]	; (80042a4 <HAL_RCC_OscConfig+0x44c>)
 8004210:	f043 0301 	orr.w	r3, r3, #1
 8004214:	6713      	str	r3, [r2, #112]	; 0x70
 8004216:	e01c      	b.n	8004252 <HAL_RCC_OscConfig+0x3fa>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	2b05      	cmp	r3, #5
 800421e:	d10c      	bne.n	800423a <HAL_RCC_OscConfig+0x3e2>
 8004220:	4b20      	ldr	r3, [pc, #128]	; (80042a4 <HAL_RCC_OscConfig+0x44c>)
 8004222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004224:	4a1f      	ldr	r2, [pc, #124]	; (80042a4 <HAL_RCC_OscConfig+0x44c>)
 8004226:	f043 0304 	orr.w	r3, r3, #4
 800422a:	6713      	str	r3, [r2, #112]	; 0x70
 800422c:	4b1d      	ldr	r3, [pc, #116]	; (80042a4 <HAL_RCC_OscConfig+0x44c>)
 800422e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004230:	4a1c      	ldr	r2, [pc, #112]	; (80042a4 <HAL_RCC_OscConfig+0x44c>)
 8004232:	f043 0301 	orr.w	r3, r3, #1
 8004236:	6713      	str	r3, [r2, #112]	; 0x70
 8004238:	e00b      	b.n	8004252 <HAL_RCC_OscConfig+0x3fa>
 800423a:	4b1a      	ldr	r3, [pc, #104]	; (80042a4 <HAL_RCC_OscConfig+0x44c>)
 800423c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800423e:	4a19      	ldr	r2, [pc, #100]	; (80042a4 <HAL_RCC_OscConfig+0x44c>)
 8004240:	f023 0301 	bic.w	r3, r3, #1
 8004244:	6713      	str	r3, [r2, #112]	; 0x70
 8004246:	4b17      	ldr	r3, [pc, #92]	; (80042a4 <HAL_RCC_OscConfig+0x44c>)
 8004248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800424a:	4a16      	ldr	r2, [pc, #88]	; (80042a4 <HAL_RCC_OscConfig+0x44c>)
 800424c:	f023 0304 	bic.w	r3, r3, #4
 8004250:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d015      	beq.n	8004286 <HAL_RCC_OscConfig+0x42e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800425a:	f7fd f861 	bl	8001320 <HAL_GetTick>
 800425e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004260:	e00a      	b.n	8004278 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004262:	f7fd f85d 	bl	8001320 <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004270:	4293      	cmp	r3, r2
 8004272:	d901      	bls.n	8004278 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e140      	b.n	80044fa <HAL_RCC_OscConfig+0x6a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004278:	4b0a      	ldr	r3, [pc, #40]	; (80042a4 <HAL_RCC_OscConfig+0x44c>)
 800427a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427c:	f003 0302 	and.w	r3, r3, #2
 8004280:	2b00      	cmp	r3, #0
 8004282:	d0ee      	beq.n	8004262 <HAL_RCC_OscConfig+0x40a>
 8004284:	e01c      	b.n	80042c0 <HAL_RCC_OscConfig+0x468>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004286:	f7fd f84b 	bl	8001320 <HAL_GetTick>
 800428a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800428c:	e012      	b.n	80042b4 <HAL_RCC_OscConfig+0x45c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800428e:	f7fd f847 	bl	8001320 <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	f241 3288 	movw	r2, #5000	; 0x1388
 800429c:	4293      	cmp	r3, r2
 800429e:	d909      	bls.n	80042b4 <HAL_RCC_OscConfig+0x45c>
        {
          return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	e12a      	b.n	80044fa <HAL_RCC_OscConfig+0x6a2>
 80042a4:	40023800 	.word	0x40023800
 80042a8:	0800d340 	.word	0x0800d340
 80042ac:	42470e80 	.word	0x42470e80
 80042b0:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042b4:	4b93      	ldr	r3, [pc, #588]	; (8004504 <HAL_RCC_OscConfig+0x6ac>)
 80042b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b8:	f003 0302 	and.w	r3, r3, #2
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d1e6      	bne.n	800428e <HAL_RCC_OscConfig+0x436>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042c0:	7dfb      	ldrb	r3, [r7, #23]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d105      	bne.n	80042d2 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042c6:	4b8f      	ldr	r3, [pc, #572]	; (8004504 <HAL_RCC_OscConfig+0x6ac>)
 80042c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ca:	4a8e      	ldr	r2, [pc, #568]	; (8004504 <HAL_RCC_OscConfig+0x6ac>)
 80042cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00c      	beq.n	80042f4 <HAL_RCC_OscConfig+0x49c>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d008      	beq.n	80042f4 <HAL_RCC_OscConfig+0x49c>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	699b      	ldr	r3, [r3, #24]
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d004      	beq.n	80042f4 <HAL_RCC_OscConfig+0x49c>
 80042ea:	f640 6103 	movw	r1, #3587	; 0xe03
 80042ee:	4886      	ldr	r0, [pc, #536]	; (8004508 <HAL_RCC_OscConfig+0x6b0>)
 80042f0:	f7fc fc85 	bl	8000bfe <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f000 80fd 	beq.w	80044f8 <HAL_RCC_OscConfig+0x6a0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042fe:	4b81      	ldr	r3, [pc, #516]	; (8004504 <HAL_RCC_OscConfig+0x6ac>)
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f003 030c 	and.w	r3, r3, #12
 8004306:	2b08      	cmp	r3, #8
 8004308:	f000 80b6 	beq.w	8004478 <HAL_RCC_OscConfig+0x620>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	699b      	ldr	r3, [r3, #24]
 8004310:	2b02      	cmp	r3, #2
 8004312:	f040 809a 	bne.w	800444a <HAL_RCC_OscConfig+0x5f2>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	69db      	ldr	r3, [r3, #28]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d009      	beq.n	8004332 <HAL_RCC_OscConfig+0x4da>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	69db      	ldr	r3, [r3, #28]
 8004322:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004326:	d004      	beq.n	8004332 <HAL_RCC_OscConfig+0x4da>
 8004328:	f640 610c 	movw	r1, #3596	; 0xe0c
 800432c:	4876      	ldr	r0, [pc, #472]	; (8004508 <HAL_RCC_OscConfig+0x6b0>)
 800432e:	f7fc fc66 	bl	8000bfe <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	2b3f      	cmp	r3, #63	; 0x3f
 8004338:	d904      	bls.n	8004344 <HAL_RCC_OscConfig+0x4ec>
 800433a:	f640 610d 	movw	r1, #3597	; 0xe0d
 800433e:	4872      	ldr	r0, [pc, #456]	; (8004508 <HAL_RCC_OscConfig+0x6b0>)
 8004340:	f7fc fc5d 	bl	8000bfe <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004348:	2b31      	cmp	r3, #49	; 0x31
 800434a:	d904      	bls.n	8004356 <HAL_RCC_OscConfig+0x4fe>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004350:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8004354:	d904      	bls.n	8004360 <HAL_RCC_OscConfig+0x508>
 8004356:	f640 610e 	movw	r1, #3598	; 0xe0e
 800435a:	486b      	ldr	r0, [pc, #428]	; (8004508 <HAL_RCC_OscConfig+0x6b0>)
 800435c:	f7fc fc4f 	bl	8000bfe <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004364:	2b02      	cmp	r3, #2
 8004366:	d010      	beq.n	800438a <HAL_RCC_OscConfig+0x532>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800436c:	2b04      	cmp	r3, #4
 800436e:	d00c      	beq.n	800438a <HAL_RCC_OscConfig+0x532>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004374:	2b06      	cmp	r3, #6
 8004376:	d008      	beq.n	800438a <HAL_RCC_OscConfig+0x532>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437c:	2b08      	cmp	r3, #8
 800437e:	d004      	beq.n	800438a <HAL_RCC_OscConfig+0x532>
 8004380:	f640 610f 	movw	r1, #3599	; 0xe0f
 8004384:	4860      	ldr	r0, [pc, #384]	; (8004508 <HAL_RCC_OscConfig+0x6b0>)
 8004386:	f7fc fc3a 	bl	8000bfe <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438e:	2b01      	cmp	r3, #1
 8004390:	d903      	bls.n	800439a <HAL_RCC_OscConfig+0x542>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004396:	2b0f      	cmp	r3, #15
 8004398:	d904      	bls.n	80043a4 <HAL_RCC_OscConfig+0x54c>
 800439a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800439e:	485a      	ldr	r0, [pc, #360]	; (8004508 <HAL_RCC_OscConfig+0x6b0>)
 80043a0:	f7fc fc2d 	bl	8000bfe <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d903      	bls.n	80043b4 <HAL_RCC_OscConfig+0x55c>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b0:	2b07      	cmp	r3, #7
 80043b2:	d904      	bls.n	80043be <HAL_RCC_OscConfig+0x566>
 80043b4:	f640 6111 	movw	r1, #3601	; 0xe11
 80043b8:	4853      	ldr	r0, [pc, #332]	; (8004508 <HAL_RCC_OscConfig+0x6b0>)
 80043ba:	f7fc fc20 	bl	8000bfe <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043be:	4b53      	ldr	r3, [pc, #332]	; (800450c <HAL_RCC_OscConfig+0x6b4>)
 80043c0:	2200      	movs	r2, #0
 80043c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c4:	f7fc ffac 	bl	8001320 <HAL_GetTick>
 80043c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ca:	e008      	b.n	80043de <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043cc:	f7fc ffa8 	bl	8001320 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d901      	bls.n	80043de <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e08d      	b.n	80044fa <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043de:	4b49      	ldr	r3, [pc, #292]	; (8004504 <HAL_RCC_OscConfig+0x6ac>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1f0      	bne.n	80043cc <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	69da      	ldr	r2, [r3, #28]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a1b      	ldr	r3, [r3, #32]
 80043f2:	431a      	orrs	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f8:	019b      	lsls	r3, r3, #6
 80043fa:	431a      	orrs	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004400:	085b      	lsrs	r3, r3, #1
 8004402:	3b01      	subs	r3, #1
 8004404:	041b      	lsls	r3, r3, #16
 8004406:	431a      	orrs	r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440c:	061b      	lsls	r3, r3, #24
 800440e:	431a      	orrs	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004414:	071b      	lsls	r3, r3, #28
 8004416:	493b      	ldr	r1, [pc, #236]	; (8004504 <HAL_RCC_OscConfig+0x6ac>)
 8004418:	4313      	orrs	r3, r2
 800441a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800441c:	4b3b      	ldr	r3, [pc, #236]	; (800450c <HAL_RCC_OscConfig+0x6b4>)
 800441e:	2201      	movs	r2, #1
 8004420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004422:	f7fc ff7d 	bl	8001320 <HAL_GetTick>
 8004426:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004428:	e008      	b.n	800443c <HAL_RCC_OscConfig+0x5e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800442a:	f7fc ff79 	bl	8001320 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	2b02      	cmp	r3, #2
 8004436:	d901      	bls.n	800443c <HAL_RCC_OscConfig+0x5e4>
          {
            return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e05e      	b.n	80044fa <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800443c:	4b31      	ldr	r3, [pc, #196]	; (8004504 <HAL_RCC_OscConfig+0x6ac>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d0f0      	beq.n	800442a <HAL_RCC_OscConfig+0x5d2>
 8004448:	e056      	b.n	80044f8 <HAL_RCC_OscConfig+0x6a0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800444a:	4b30      	ldr	r3, [pc, #192]	; (800450c <HAL_RCC_OscConfig+0x6b4>)
 800444c:	2200      	movs	r2, #0
 800444e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004450:	f7fc ff66 	bl	8001320 <HAL_GetTick>
 8004454:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004456:	e008      	b.n	800446a <HAL_RCC_OscConfig+0x612>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004458:	f7fc ff62 	bl	8001320 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b02      	cmp	r3, #2
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0x612>
          {
            return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e047      	b.n	80044fa <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800446a:	4b26      	ldr	r3, [pc, #152]	; (8004504 <HAL_RCC_OscConfig+0x6ac>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1f0      	bne.n	8004458 <HAL_RCC_OscConfig+0x600>
 8004476:	e03f      	b.n	80044f8 <HAL_RCC_OscConfig+0x6a0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	2b01      	cmp	r3, #1
 800447e:	d101      	bne.n	8004484 <HAL_RCC_OscConfig+0x62c>
      {
        return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e03a      	b.n	80044fa <HAL_RCC_OscConfig+0x6a2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004484:	4b1f      	ldr	r3, [pc, #124]	; (8004504 <HAL_RCC_OscConfig+0x6ac>)
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	699b      	ldr	r3, [r3, #24]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d030      	beq.n	80044f4 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800449c:	429a      	cmp	r2, r3
 800449e:	d129      	bne.n	80044f4 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d122      	bne.n	80044f4 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80044b4:	4013      	ands	r3, r2
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80044ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044bc:	4293      	cmp	r3, r2
 80044be:	d119      	bne.n	80044f4 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ca:	085b      	lsrs	r3, r3, #1
 80044cc:	3b01      	subs	r3, #1
 80044ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d10f      	bne.n	80044f4 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d107      	bne.n	80044f4 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ee:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d001      	beq.n	80044f8 <HAL_RCC_OscConfig+0x6a0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e000      	b.n	80044fa <HAL_RCC_OscConfig+0x6a2>
        }
      }
    }
  }
  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3718      	adds	r7, #24
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	40023800 	.word	0x40023800
 8004508:	0800d340 	.word	0x0800d340
 800450c:	42470060 	.word	0x42470060

08004510 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e184      	b.n	800482c <HAL_SPI_Init+0x31c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a72      	ldr	r2, [pc, #456]	; (80046f0 <HAL_SPI_Init+0x1e0>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d013      	beq.n	8004554 <HAL_SPI_Init+0x44>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a70      	ldr	r2, [pc, #448]	; (80046f4 <HAL_SPI_Init+0x1e4>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d00e      	beq.n	8004554 <HAL_SPI_Init+0x44>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a6f      	ldr	r2, [pc, #444]	; (80046f8 <HAL_SPI_Init+0x1e8>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d009      	beq.n	8004554 <HAL_SPI_Init+0x44>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a6d      	ldr	r2, [pc, #436]	; (80046fc <HAL_SPI_Init+0x1ec>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d004      	beq.n	8004554 <HAL_SPI_Init+0x44>
 800454a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800454e:	486c      	ldr	r0, [pc, #432]	; (8004700 <HAL_SPI_Init+0x1f0>)
 8004550:	f7fc fb55 	bl	8000bfe <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d009      	beq.n	8004570 <HAL_SPI_Init+0x60>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004564:	d004      	beq.n	8004570 <HAL_SPI_Init+0x60>
 8004566:	f240 1141 	movw	r1, #321	; 0x141
 800456a:	4865      	ldr	r0, [pc, #404]	; (8004700 <HAL_SPI_Init+0x1f0>)
 800456c:	f7fc fb47 	bl	8000bfe <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d00e      	beq.n	8004596 <HAL_SPI_Init+0x86>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004580:	d009      	beq.n	8004596 <HAL_SPI_Init+0x86>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800458a:	d004      	beq.n	8004596 <HAL_SPI_Init+0x86>
 800458c:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8004590:	485b      	ldr	r0, [pc, #364]	; (8004700 <HAL_SPI_Init+0x1f0>)
 8004592:	f7fc fb34 	bl	8000bfe <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800459e:	d008      	beq.n	80045b2 <HAL_SPI_Init+0xa2>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d004      	beq.n	80045b2 <HAL_SPI_Init+0xa2>
 80045a8:	f240 1143 	movw	r1, #323	; 0x143
 80045ac:	4854      	ldr	r0, [pc, #336]	; (8004700 <HAL_SPI_Init+0x1f0>)
 80045ae:	f7fc fb26 	bl	8000bfe <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	699b      	ldr	r3, [r3, #24]
 80045b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045ba:	d00d      	beq.n	80045d8 <HAL_SPI_Init+0xc8>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d009      	beq.n	80045d8 <HAL_SPI_Init+0xc8>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80045cc:	d004      	beq.n	80045d8 <HAL_SPI_Init+0xc8>
 80045ce:	f44f 71a2 	mov.w	r1, #324	; 0x144
 80045d2:	484b      	ldr	r0, [pc, #300]	; (8004700 <HAL_SPI_Init+0x1f0>)
 80045d4:	f7fc fb13 	bl	8000bfe <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	69db      	ldr	r3, [r3, #28]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d020      	beq.n	8004622 <HAL_SPI_Init+0x112>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	69db      	ldr	r3, [r3, #28]
 80045e4:	2b08      	cmp	r3, #8
 80045e6:	d01c      	beq.n	8004622 <HAL_SPI_Init+0x112>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	69db      	ldr	r3, [r3, #28]
 80045ec:	2b10      	cmp	r3, #16
 80045ee:	d018      	beq.n	8004622 <HAL_SPI_Init+0x112>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	69db      	ldr	r3, [r3, #28]
 80045f4:	2b18      	cmp	r3, #24
 80045f6:	d014      	beq.n	8004622 <HAL_SPI_Init+0x112>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	69db      	ldr	r3, [r3, #28]
 80045fc:	2b20      	cmp	r3, #32
 80045fe:	d010      	beq.n	8004622 <HAL_SPI_Init+0x112>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	69db      	ldr	r3, [r3, #28]
 8004604:	2b28      	cmp	r3, #40	; 0x28
 8004606:	d00c      	beq.n	8004622 <HAL_SPI_Init+0x112>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	69db      	ldr	r3, [r3, #28]
 800460c:	2b30      	cmp	r3, #48	; 0x30
 800460e:	d008      	beq.n	8004622 <HAL_SPI_Init+0x112>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	69db      	ldr	r3, [r3, #28]
 8004614:	2b38      	cmp	r3, #56	; 0x38
 8004616:	d004      	beq.n	8004622 <HAL_SPI_Init+0x112>
 8004618:	f240 1145 	movw	r1, #325	; 0x145
 800461c:	4838      	ldr	r0, [pc, #224]	; (8004700 <HAL_SPI_Init+0x1f0>)
 800461e:	f7fc faee 	bl	8000bfe <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d008      	beq.n	800463c <HAL_SPI_Init+0x12c>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a1b      	ldr	r3, [r3, #32]
 800462e:	2b80      	cmp	r3, #128	; 0x80
 8004630:	d004      	beq.n	800463c <HAL_SPI_Init+0x12c>
 8004632:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8004636:	4832      	ldr	r0, [pc, #200]	; (8004700 <HAL_SPI_Init+0x1f0>)
 8004638:	f7fc fae1 	bl	8000bfe <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004640:	2b00      	cmp	r3, #0
 8004642:	d008      	beq.n	8004656 <HAL_SPI_Init+0x146>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004648:	2b10      	cmp	r3, #16
 800464a:	d004      	beq.n	8004656 <HAL_SPI_Init+0x146>
 800464c:	f240 1147 	movw	r1, #327	; 0x147
 8004650:	482b      	ldr	r0, [pc, #172]	; (8004700 <HAL_SPI_Init+0x1f0>)
 8004652:	f7fc fad4 	bl	8000bfe <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465a:	2b00      	cmp	r3, #0
 800465c:	d152      	bne.n	8004704 <HAL_SPI_Init+0x1f4>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d008      	beq.n	8004678 <HAL_SPI_Init+0x168>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	2b02      	cmp	r3, #2
 800466c:	d004      	beq.n	8004678 <HAL_SPI_Init+0x168>
 800466e:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8004672:	4823      	ldr	r0, [pc, #140]	; (8004700 <HAL_SPI_Init+0x1f0>)
 8004674:	f7fc fac3 	bl	8000bfe <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	695b      	ldr	r3, [r3, #20]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d008      	beq.n	8004692 <HAL_SPI_Init+0x182>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	695b      	ldr	r3, [r3, #20]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d004      	beq.n	8004692 <HAL_SPI_Init+0x182>
 8004688:	f240 114b 	movw	r1, #331	; 0x14b
 800468c:	481c      	ldr	r0, [pc, #112]	; (8004700 <HAL_SPI_Init+0x1f0>)
 800468e:	f7fc fab6 	bl	8000bfe <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800469a:	d125      	bne.n	80046e8 <HAL_SPI_Init+0x1d8>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	69db      	ldr	r3, [r3, #28]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d05a      	beq.n	800475a <HAL_SPI_Init+0x24a>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	69db      	ldr	r3, [r3, #28]
 80046a8:	2b08      	cmp	r3, #8
 80046aa:	d056      	beq.n	800475a <HAL_SPI_Init+0x24a>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	69db      	ldr	r3, [r3, #28]
 80046b0:	2b10      	cmp	r3, #16
 80046b2:	d052      	beq.n	800475a <HAL_SPI_Init+0x24a>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	69db      	ldr	r3, [r3, #28]
 80046b8:	2b18      	cmp	r3, #24
 80046ba:	d04e      	beq.n	800475a <HAL_SPI_Init+0x24a>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	69db      	ldr	r3, [r3, #28]
 80046c0:	2b20      	cmp	r3, #32
 80046c2:	d04a      	beq.n	800475a <HAL_SPI_Init+0x24a>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	69db      	ldr	r3, [r3, #28]
 80046c8:	2b28      	cmp	r3, #40	; 0x28
 80046ca:	d046      	beq.n	800475a <HAL_SPI_Init+0x24a>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	69db      	ldr	r3, [r3, #28]
 80046d0:	2b30      	cmp	r3, #48	; 0x30
 80046d2:	d042      	beq.n	800475a <HAL_SPI_Init+0x24a>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	69db      	ldr	r3, [r3, #28]
 80046d8:	2b38      	cmp	r3, #56	; 0x38
 80046da:	d03e      	beq.n	800475a <HAL_SPI_Init+0x24a>
 80046dc:	f240 114f 	movw	r1, #335	; 0x14f
 80046e0:	4807      	ldr	r0, [pc, #28]	; (8004700 <HAL_SPI_Init+0x1f0>)
 80046e2:	f7fc fa8c 	bl	8000bfe <assert_failed>
 80046e6:	e038      	b.n	800475a <HAL_SPI_Init+0x24a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	61da      	str	r2, [r3, #28]
 80046ee:	e034      	b.n	800475a <HAL_SPI_Init+0x24a>
 80046f0:	40013000 	.word	0x40013000
 80046f4:	40003800 	.word	0x40003800
 80046f8:	40003c00 	.word	0x40003c00
 80046fc:	40013400 	.word	0x40013400
 8004700:	0800d3b4 	.word	0x0800d3b4
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	69db      	ldr	r3, [r3, #28]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d020      	beq.n	800474e <HAL_SPI_Init+0x23e>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	69db      	ldr	r3, [r3, #28]
 8004710:	2b08      	cmp	r3, #8
 8004712:	d01c      	beq.n	800474e <HAL_SPI_Init+0x23e>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	69db      	ldr	r3, [r3, #28]
 8004718:	2b10      	cmp	r3, #16
 800471a:	d018      	beq.n	800474e <HAL_SPI_Init+0x23e>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	69db      	ldr	r3, [r3, #28]
 8004720:	2b18      	cmp	r3, #24
 8004722:	d014      	beq.n	800474e <HAL_SPI_Init+0x23e>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	69db      	ldr	r3, [r3, #28]
 8004728:	2b20      	cmp	r3, #32
 800472a:	d010      	beq.n	800474e <HAL_SPI_Init+0x23e>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	69db      	ldr	r3, [r3, #28]
 8004730:	2b28      	cmp	r3, #40	; 0x28
 8004732:	d00c      	beq.n	800474e <HAL_SPI_Init+0x23e>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	69db      	ldr	r3, [r3, #28]
 8004738:	2b30      	cmp	r3, #48	; 0x30
 800473a:	d008      	beq.n	800474e <HAL_SPI_Init+0x23e>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	69db      	ldr	r3, [r3, #28]
 8004740:	2b38      	cmp	r3, #56	; 0x38
 8004742:	d004      	beq.n	800474e <HAL_SPI_Init+0x23e>
 8004744:	f240 1159 	movw	r1, #345	; 0x159
 8004748:	483a      	ldr	r0, [pc, #232]	; (8004834 <HAL_SPI_Init+0x324>)
 800474a:	f7fc fa58 	bl	8000bfe <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004766:	b2db      	uxtb	r3, r3
 8004768:	2b00      	cmp	r3, #0
 800476a:	d106      	bne.n	800477a <HAL_SPI_Init+0x26a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f7fc fa83 	bl	8000c80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2202      	movs	r2, #2
 800477e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004790:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80047a2:	431a      	orrs	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047ac:	431a      	orrs	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	f003 0302 	and.w	r3, r3, #2
 80047b6:	431a      	orrs	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	695b      	ldr	r3, [r3, #20]
 80047bc:	f003 0301 	and.w	r3, r3, #1
 80047c0:	431a      	orrs	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	699b      	ldr	r3, [r3, #24]
 80047c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047ca:	431a      	orrs	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	69db      	ldr	r3, [r3, #28]
 80047d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047d4:	431a      	orrs	r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047de:	ea42 0103 	orr.w	r1, r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	430a      	orrs	r2, r1
 80047f0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	0c1b      	lsrs	r3, r3, #16
 80047f8:	f003 0104 	and.w	r1, r3, #4
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004800:	f003 0210 	and.w	r2, r3, #16
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	430a      	orrs	r2, r1
 800480a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	69da      	ldr	r2, [r3, #28]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800481a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2201      	movs	r2, #1
 8004826:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3708      	adds	r7, #8
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	0800d3b4 	.word	0x0800d3b4

08004838 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b08c      	sub	sp, #48	; 0x30
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]
 8004844:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004846:	2301      	movs	r3, #1
 8004848:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800484a:	2300      	movs	r3, #0
 800484c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d004      	beq.n	8004862 <HAL_SPI_TransmitReceive+0x2a>
 8004858:	f240 417c 	movw	r1, #1148	; 0x47c
 800485c:	4884      	ldr	r0, [pc, #528]	; (8004a70 <HAL_SPI_TransmitReceive+0x238>)
 800485e:	f7fc f9ce 	bl	8000bfe <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004868:	2b01      	cmp	r3, #1
 800486a:	d101      	bne.n	8004870 <HAL_SPI_TransmitReceive+0x38>
 800486c:	2302      	movs	r3, #2
 800486e:	e18d      	b.n	8004b8c <HAL_SPI_TransmitReceive+0x354>
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004878:	f7fc fd52 	bl	8001320 <HAL_GetTick>
 800487c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004884:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800488e:	887b      	ldrh	r3, [r7, #2]
 8004890:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004892:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004896:	2b01      	cmp	r3, #1
 8004898:	d00f      	beq.n	80048ba <HAL_SPI_TransmitReceive+0x82>
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048a0:	d107      	bne.n	80048b2 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d103      	bne.n	80048b2 <HAL_SPI_TransmitReceive+0x7a>
 80048aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80048ae:	2b04      	cmp	r3, #4
 80048b0:	d003      	beq.n	80048ba <HAL_SPI_TransmitReceive+0x82>
  {
    errorcode = HAL_BUSY;
 80048b2:	2302      	movs	r3, #2
 80048b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80048b8:	e15e      	b.n	8004b78 <HAL_SPI_TransmitReceive+0x340>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d005      	beq.n	80048cc <HAL_SPI_TransmitReceive+0x94>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d002      	beq.n	80048cc <HAL_SPI_TransmitReceive+0x94>
 80048c6:	887b      	ldrh	r3, [r7, #2]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d103      	bne.n	80048d4 <HAL_SPI_TransmitReceive+0x9c>
  {
    errorcode = HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80048d2:	e151      	b.n	8004b78 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	2b04      	cmp	r3, #4
 80048de:	d003      	beq.n	80048e8 <HAL_SPI_TransmitReceive+0xb0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2205      	movs	r2, #5
 80048e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2200      	movs	r2, #0
 80048ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	887a      	ldrh	r2, [r7, #2]
 80048f8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	887a      	ldrh	r2, [r7, #2]
 80048fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	68ba      	ldr	r2, [r7, #8]
 8004904:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	887a      	ldrh	r2, [r7, #2]
 800490a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	887a      	ldrh	r2, [r7, #2]
 8004910:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2200      	movs	r2, #0
 8004916:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2200      	movs	r2, #0
 800491c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004928:	2b40      	cmp	r3, #64	; 0x40
 800492a:	d007      	beq.n	800493c <HAL_SPI_TransmitReceive+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800493a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004944:	d178      	bne.n	8004a38 <HAL_SPI_TransmitReceive+0x200>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d002      	beq.n	8004954 <HAL_SPI_TransmitReceive+0x11c>
 800494e:	8b7b      	ldrh	r3, [r7, #26]
 8004950:	2b01      	cmp	r3, #1
 8004952:	d166      	bne.n	8004a22 <HAL_SPI_TransmitReceive+0x1ea>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004958:	881a      	ldrh	r2, [r3, #0]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004964:	1c9a      	adds	r2, r3, #2
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800496e:	b29b      	uxth	r3, r3
 8004970:	3b01      	subs	r3, #1
 8004972:	b29a      	uxth	r2, r3
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004978:	e053      	b.n	8004a22 <HAL_SPI_TransmitReceive+0x1ea>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f003 0302 	and.w	r3, r3, #2
 8004984:	2b02      	cmp	r3, #2
 8004986:	d11b      	bne.n	80049c0 <HAL_SPI_TransmitReceive+0x188>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800498c:	b29b      	uxth	r3, r3
 800498e:	2b00      	cmp	r3, #0
 8004990:	d016      	beq.n	80049c0 <HAL_SPI_TransmitReceive+0x188>
 8004992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004994:	2b01      	cmp	r3, #1
 8004996:	d113      	bne.n	80049c0 <HAL_SPI_TransmitReceive+0x188>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800499c:	881a      	ldrh	r2, [r3, #0]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a8:	1c9a      	adds	r2, r3, #2
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	3b01      	subs	r3, #1
 80049b6:	b29a      	uxth	r2, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80049bc:	2300      	movs	r3, #0
 80049be:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d119      	bne.n	8004a02 <HAL_SPI_TransmitReceive+0x1ca>
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d014      	beq.n	8004a02 <HAL_SPI_TransmitReceive+0x1ca>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68da      	ldr	r2, [r3, #12]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e2:	b292      	uxth	r2, r2
 80049e4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ea:	1c9a      	adds	r2, r3, #2
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	3b01      	subs	r3, #1
 80049f8:	b29a      	uxth	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80049fe:	2301      	movs	r3, #1
 8004a00:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004a02:	f7fc fc8d 	bl	8001320 <HAL_GetTick>
 8004a06:	4602      	mov	r2, r0
 8004a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d807      	bhi.n	8004a22 <HAL_SPI_TransmitReceive+0x1ea>
 8004a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a18:	d003      	beq.n	8004a22 <HAL_SPI_TransmitReceive+0x1ea>
      {
        errorcode = HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004a20:	e0aa      	b.n	8004b78 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d1a6      	bne.n	800497a <HAL_SPI_TransmitReceive+0x142>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1a1      	bne.n	800497a <HAL_SPI_TransmitReceive+0x142>
 8004a36:	e07f      	b.n	8004b38 <HAL_SPI_TransmitReceive+0x300>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d002      	beq.n	8004a46 <HAL_SPI_TransmitReceive+0x20e>
 8004a40:	8b7b      	ldrh	r3, [r7, #26]
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d16e      	bne.n	8004b24 <HAL_SPI_TransmitReceive+0x2ec>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	330c      	adds	r3, #12
 8004a50:	7812      	ldrb	r2, [r2, #0]
 8004a52:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a58:	1c5a      	adds	r2, r3, #1
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	3b01      	subs	r3, #1
 8004a66:	b29a      	uxth	r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a6c:	e05a      	b.n	8004b24 <HAL_SPI_TransmitReceive+0x2ec>
 8004a6e:	bf00      	nop
 8004a70:	0800d3b4 	.word	0x0800d3b4
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d11c      	bne.n	8004abc <HAL_SPI_TransmitReceive+0x284>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d017      	beq.n	8004abc <HAL_SPI_TransmitReceive+0x284>
 8004a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d114      	bne.n	8004abc <HAL_SPI_TransmitReceive+0x284>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	330c      	adds	r3, #12
 8004a9c:	7812      	ldrb	r2, [r2, #0]
 8004a9e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa4:	1c5a      	adds	r2, r3, #1
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	3b01      	subs	r3, #1
 8004ab2:	b29a      	uxth	r2, r3
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d119      	bne.n	8004afe <HAL_SPI_TransmitReceive+0x2c6>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d014      	beq.n	8004afe <HAL_SPI_TransmitReceive+0x2c6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68da      	ldr	r2, [r3, #12]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ade:	b2d2      	uxtb	r2, r2
 8004ae0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae6:	1c5a      	adds	r2, r3, #1
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	3b01      	subs	r3, #1
 8004af4:	b29a      	uxth	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004afa:	2301      	movs	r3, #1
 8004afc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004afe:	f7fc fc0f 	bl	8001320 <HAL_GetTick>
 8004b02:	4602      	mov	r2, r0
 8004b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d803      	bhi.n	8004b16 <HAL_SPI_TransmitReceive+0x2de>
 8004b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b14:	d102      	bne.n	8004b1c <HAL_SPI_TransmitReceive+0x2e4>
 8004b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d103      	bne.n	8004b24 <HAL_SPI_TransmitReceive+0x2ec>
      {
        errorcode = HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004b22:	e029      	b.n	8004b78 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1a2      	bne.n	8004a74 <HAL_SPI_TransmitReceive+0x23c>
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d19d      	bne.n	8004a74 <HAL_SPI_TransmitReceive+0x23c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b3a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	f000 f8b1 	bl	8004ca4 <SPI_EndRxTxTransaction>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d006      	beq.n	8004b56 <HAL_SPI_TransmitReceive+0x31e>
  {
    errorcode = HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2220      	movs	r2, #32
 8004b52:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004b54:	e010      	b.n	8004b78 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d10b      	bne.n	8004b76 <HAL_SPI_TransmitReceive+0x33e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b5e:	2300      	movs	r3, #0
 8004b60:	617b      	str	r3, [r7, #20]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	617b      	str	r3, [r7, #20]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	617b      	str	r3, [r7, #20]
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	e000      	b.n	8004b78 <HAL_SPI_TransmitReceive+0x340>
  }

error :
 8004b76:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004b88:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3730      	adds	r7, #48	; 0x30
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b088      	sub	sp, #32
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	603b      	str	r3, [r7, #0]
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ba4:	f7fc fbbc 	bl	8001320 <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bac:	1a9b      	subs	r3, r3, r2
 8004bae:	683a      	ldr	r2, [r7, #0]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004bb4:	f7fc fbb4 	bl	8001320 <HAL_GetTick>
 8004bb8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004bba:	4b39      	ldr	r3, [pc, #228]	; (8004ca0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	015b      	lsls	r3, r3, #5
 8004bc0:	0d1b      	lsrs	r3, r3, #20
 8004bc2:	69fa      	ldr	r2, [r7, #28]
 8004bc4:	fb02 f303 	mul.w	r3, r2, r3
 8004bc8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bca:	e054      	b.n	8004c76 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd2:	d050      	beq.n	8004c76 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004bd4:	f7fc fba4 	bl	8001320 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	69fa      	ldr	r2, [r7, #28]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d902      	bls.n	8004bea <SPI_WaitFlagStateUntilTimeout+0x56>
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d13d      	bne.n	8004c66 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	685a      	ldr	r2, [r3, #4]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004bf8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c02:	d111      	bne.n	8004c28 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c0c:	d004      	beq.n	8004c18 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c16:	d107      	bne.n	8004c28 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c30:	d10f      	bne.n	8004c52 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c40:	601a      	str	r2, [r3, #0]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2201      	movs	r2, #1
 8004c56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e017      	b.n	8004c96 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d101      	bne.n	8004c70 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	3b01      	subs	r3, #1
 8004c74:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	689a      	ldr	r2, [r3, #8]
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	4013      	ands	r3, r2
 8004c80:	68ba      	ldr	r2, [r7, #8]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	bf0c      	ite	eq
 8004c86:	2301      	moveq	r3, #1
 8004c88:	2300      	movne	r3, #0
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	79fb      	ldrb	r3, [r7, #7]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d19b      	bne.n	8004bcc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3720      	adds	r7, #32
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	20000000 	.word	0x20000000

08004ca4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b088      	sub	sp, #32
 8004ca8:	af02      	add	r7, sp, #8
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004cb0:	4b1b      	ldr	r3, [pc, #108]	; (8004d20 <SPI_EndRxTxTransaction+0x7c>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a1b      	ldr	r2, [pc, #108]	; (8004d24 <SPI_EndRxTxTransaction+0x80>)
 8004cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cba:	0d5b      	lsrs	r3, r3, #21
 8004cbc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004cc0:	fb02 f303 	mul.w	r3, r2, r3
 8004cc4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cce:	d112      	bne.n	8004cf6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	9300      	str	r3, [sp, #0]
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	2180      	movs	r1, #128	; 0x80
 8004cda:	68f8      	ldr	r0, [r7, #12]
 8004cdc:	f7ff ff5a 	bl	8004b94 <SPI_WaitFlagStateUntilTimeout>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d016      	beq.n	8004d14 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cea:	f043 0220 	orr.w	r2, r3, #32
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e00f      	b.n	8004d16 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d00a      	beq.n	8004d12 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d0c:	2b80      	cmp	r3, #128	; 0x80
 8004d0e:	d0f2      	beq.n	8004cf6 <SPI_EndRxTxTransaction+0x52>
 8004d10:	e000      	b.n	8004d14 <SPI_EndRxTxTransaction+0x70>
        break;
 8004d12:	bf00      	nop
  }

  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3718      	adds	r7, #24
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	20000000 	.word	0x20000000
 8004d24:	165e9f81 	.word	0x165e9f81

08004d28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d101      	bne.n	8004d3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e0c5      	b.n	8004ec6 <HAL_TIM_Base_Init+0x19e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a64      	ldr	r2, [pc, #400]	; (8004ed0 <HAL_TIM_Base_Init+0x1a8>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d045      	beq.n	8004dd0 <HAL_TIM_Base_Init+0xa8>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d4c:	d040      	beq.n	8004dd0 <HAL_TIM_Base_Init+0xa8>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a60      	ldr	r2, [pc, #384]	; (8004ed4 <HAL_TIM_Base_Init+0x1ac>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d03b      	beq.n	8004dd0 <HAL_TIM_Base_Init+0xa8>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a5e      	ldr	r2, [pc, #376]	; (8004ed8 <HAL_TIM_Base_Init+0x1b0>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d036      	beq.n	8004dd0 <HAL_TIM_Base_Init+0xa8>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a5d      	ldr	r2, [pc, #372]	; (8004edc <HAL_TIM_Base_Init+0x1b4>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d031      	beq.n	8004dd0 <HAL_TIM_Base_Init+0xa8>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a5b      	ldr	r2, [pc, #364]	; (8004ee0 <HAL_TIM_Base_Init+0x1b8>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d02c      	beq.n	8004dd0 <HAL_TIM_Base_Init+0xa8>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a5a      	ldr	r2, [pc, #360]	; (8004ee4 <HAL_TIM_Base_Init+0x1bc>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d027      	beq.n	8004dd0 <HAL_TIM_Base_Init+0xa8>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a58      	ldr	r2, [pc, #352]	; (8004ee8 <HAL_TIM_Base_Init+0x1c0>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d022      	beq.n	8004dd0 <HAL_TIM_Base_Init+0xa8>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a57      	ldr	r2, [pc, #348]	; (8004eec <HAL_TIM_Base_Init+0x1c4>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d01d      	beq.n	8004dd0 <HAL_TIM_Base_Init+0xa8>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a55      	ldr	r2, [pc, #340]	; (8004ef0 <HAL_TIM_Base_Init+0x1c8>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d018      	beq.n	8004dd0 <HAL_TIM_Base_Init+0xa8>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a54      	ldr	r2, [pc, #336]	; (8004ef4 <HAL_TIM_Base_Init+0x1cc>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d013      	beq.n	8004dd0 <HAL_TIM_Base_Init+0xa8>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a52      	ldr	r2, [pc, #328]	; (8004ef8 <HAL_TIM_Base_Init+0x1d0>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d00e      	beq.n	8004dd0 <HAL_TIM_Base_Init+0xa8>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a51      	ldr	r2, [pc, #324]	; (8004efc <HAL_TIM_Base_Init+0x1d4>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d009      	beq.n	8004dd0 <HAL_TIM_Base_Init+0xa8>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a4f      	ldr	r2, [pc, #316]	; (8004f00 <HAL_TIM_Base_Init+0x1d8>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d004      	beq.n	8004dd0 <HAL_TIM_Base_Init+0xa8>
 8004dc6:	f240 1113 	movw	r1, #275	; 0x113
 8004dca:	484e      	ldr	r0, [pc, #312]	; (8004f04 <HAL_TIM_Base_Init+0x1dc>)
 8004dcc:	f7fb ff17 	bl	8000bfe <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d014      	beq.n	8004e02 <HAL_TIM_Base_Init+0xda>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	2b10      	cmp	r3, #16
 8004dde:	d010      	beq.n	8004e02 <HAL_TIM_Base_Init+0xda>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	2b20      	cmp	r3, #32
 8004de6:	d00c      	beq.n	8004e02 <HAL_TIM_Base_Init+0xda>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	2b40      	cmp	r3, #64	; 0x40
 8004dee:	d008      	beq.n	8004e02 <HAL_TIM_Base_Init+0xda>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	2b60      	cmp	r3, #96	; 0x60
 8004df6:	d004      	beq.n	8004e02 <HAL_TIM_Base_Init+0xda>
 8004df8:	f44f 718a 	mov.w	r1, #276	; 0x114
 8004dfc:	4841      	ldr	r0, [pc, #260]	; (8004f04 <HAL_TIM_Base_Init+0x1dc>)
 8004dfe:	f7fb fefe 	bl	8000bfe <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d00e      	beq.n	8004e28 <HAL_TIM_Base_Init+0x100>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e12:	d009      	beq.n	8004e28 <HAL_TIM_Base_Init+0x100>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	691b      	ldr	r3, [r3, #16]
 8004e18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e1c:	d004      	beq.n	8004e28 <HAL_TIM_Base_Init+0x100>
 8004e1e:	f240 1115 	movw	r1, #277	; 0x115
 8004e22:	4838      	ldr	r0, [pc, #224]	; (8004f04 <HAL_TIM_Base_Init+0x1dc>)
 8004e24:	f7fb feeb 	bl	8000bfe <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	699b      	ldr	r3, [r3, #24]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d008      	beq.n	8004e42 <HAL_TIM_Base_Init+0x11a>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	699b      	ldr	r3, [r3, #24]
 8004e34:	2b80      	cmp	r3, #128	; 0x80
 8004e36:	d004      	beq.n	8004e42 <HAL_TIM_Base_Init+0x11a>
 8004e38:	f44f 718b 	mov.w	r1, #278	; 0x116
 8004e3c:	4831      	ldr	r0, [pc, #196]	; (8004f04 <HAL_TIM_Base_Init+0x1dc>)
 8004e3e:	f7fb fede 	bl	8000bfe <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d106      	bne.n	8004e5c <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f7fc f938 	bl	80010cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2202      	movs	r2, #2
 8004e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	3304      	adds	r3, #4
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	4610      	mov	r0, r2
 8004e70:	f000 fa40 	bl	80052f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3708      	adds	r7, #8
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	40010000 	.word	0x40010000
 8004ed4:	40000400 	.word	0x40000400
 8004ed8:	40000800 	.word	0x40000800
 8004edc:	40000c00 	.word	0x40000c00
 8004ee0:	40001000 	.word	0x40001000
 8004ee4:	40001400 	.word	0x40001400
 8004ee8:	40010400 	.word	0x40010400
 8004eec:	40014000 	.word	0x40014000
 8004ef0:	40014400 	.word	0x40014400
 8004ef4:	40014800 	.word	0x40014800
 8004ef8:	40001800 	.word	0x40001800
 8004efc:	40001c00 	.word	0x40001c00
 8004f00:	40002000 	.word	0x40002000
 8004f04:	0800d428 	.word	0x0800d428

08004f08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a51      	ldr	r2, [pc, #324]	; (800505c <HAL_TIM_Base_Start_IT+0x154>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d045      	beq.n	8004fa6 <HAL_TIM_Base_Start_IT+0x9e>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f22:	d040      	beq.n	8004fa6 <HAL_TIM_Base_Start_IT+0x9e>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a4d      	ldr	r2, [pc, #308]	; (8005060 <HAL_TIM_Base_Start_IT+0x158>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d03b      	beq.n	8004fa6 <HAL_TIM_Base_Start_IT+0x9e>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a4c      	ldr	r2, [pc, #304]	; (8005064 <HAL_TIM_Base_Start_IT+0x15c>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d036      	beq.n	8004fa6 <HAL_TIM_Base_Start_IT+0x9e>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a4a      	ldr	r2, [pc, #296]	; (8005068 <HAL_TIM_Base_Start_IT+0x160>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d031      	beq.n	8004fa6 <HAL_TIM_Base_Start_IT+0x9e>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a49      	ldr	r2, [pc, #292]	; (800506c <HAL_TIM_Base_Start_IT+0x164>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d02c      	beq.n	8004fa6 <HAL_TIM_Base_Start_IT+0x9e>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a47      	ldr	r2, [pc, #284]	; (8005070 <HAL_TIM_Base_Start_IT+0x168>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d027      	beq.n	8004fa6 <HAL_TIM_Base_Start_IT+0x9e>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a46      	ldr	r2, [pc, #280]	; (8005074 <HAL_TIM_Base_Start_IT+0x16c>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d022      	beq.n	8004fa6 <HAL_TIM_Base_Start_IT+0x9e>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a44      	ldr	r2, [pc, #272]	; (8005078 <HAL_TIM_Base_Start_IT+0x170>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d01d      	beq.n	8004fa6 <HAL_TIM_Base_Start_IT+0x9e>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a43      	ldr	r2, [pc, #268]	; (800507c <HAL_TIM_Base_Start_IT+0x174>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d018      	beq.n	8004fa6 <HAL_TIM_Base_Start_IT+0x9e>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a41      	ldr	r2, [pc, #260]	; (8005080 <HAL_TIM_Base_Start_IT+0x178>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d013      	beq.n	8004fa6 <HAL_TIM_Base_Start_IT+0x9e>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a40      	ldr	r2, [pc, #256]	; (8005084 <HAL_TIM_Base_Start_IT+0x17c>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d00e      	beq.n	8004fa6 <HAL_TIM_Base_Start_IT+0x9e>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a3e      	ldr	r2, [pc, #248]	; (8005088 <HAL_TIM_Base_Start_IT+0x180>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d009      	beq.n	8004fa6 <HAL_TIM_Base_Start_IT+0x9e>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a3d      	ldr	r2, [pc, #244]	; (800508c <HAL_TIM_Base_Start_IT+0x184>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d004      	beq.n	8004fa6 <HAL_TIM_Base_Start_IT+0x9e>
 8004f9c:	f240 11cf 	movw	r1, #463	; 0x1cf
 8004fa0:	483b      	ldr	r0, [pc, #236]	; (8005090 <HAL_TIM_Base_Start_IT+0x188>)
 8004fa2:	f7fb fe2c 	bl	8000bfe <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d001      	beq.n	8004fb6 <HAL_TIM_Base_Start_IT+0xae>
  {
    return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e04e      	b.n	8005054 <HAL_TIM_Base_Start_IT+0x14c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2202      	movs	r2, #2
 8004fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68da      	ldr	r2, [r3, #12]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f042 0201 	orr.w	r2, r2, #1
 8004fcc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a22      	ldr	r2, [pc, #136]	; (800505c <HAL_TIM_Base_Start_IT+0x154>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d022      	beq.n	800501e <HAL_TIM_Base_Start_IT+0x116>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fe0:	d01d      	beq.n	800501e <HAL_TIM_Base_Start_IT+0x116>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a1e      	ldr	r2, [pc, #120]	; (8005060 <HAL_TIM_Base_Start_IT+0x158>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d018      	beq.n	800501e <HAL_TIM_Base_Start_IT+0x116>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a1c      	ldr	r2, [pc, #112]	; (8005064 <HAL_TIM_Base_Start_IT+0x15c>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d013      	beq.n	800501e <HAL_TIM_Base_Start_IT+0x116>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a1b      	ldr	r2, [pc, #108]	; (8005068 <HAL_TIM_Base_Start_IT+0x160>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d00e      	beq.n	800501e <HAL_TIM_Base_Start_IT+0x116>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a1b      	ldr	r2, [pc, #108]	; (8005074 <HAL_TIM_Base_Start_IT+0x16c>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d009      	beq.n	800501e <HAL_TIM_Base_Start_IT+0x116>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a1a      	ldr	r2, [pc, #104]	; (8005078 <HAL_TIM_Base_Start_IT+0x170>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d004      	beq.n	800501e <HAL_TIM_Base_Start_IT+0x116>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a1a      	ldr	r2, [pc, #104]	; (8005084 <HAL_TIM_Base_Start_IT+0x17c>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d111      	bne.n	8005042 <HAL_TIM_Base_Start_IT+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	f003 0307 	and.w	r3, r3, #7
 8005028:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2b06      	cmp	r3, #6
 800502e:	d010      	beq.n	8005052 <HAL_TIM_Base_Start_IT+0x14a>
    {
      __HAL_TIM_ENABLE(htim);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f042 0201 	orr.w	r2, r2, #1
 800503e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005040:	e007      	b.n	8005052 <HAL_TIM_Base_Start_IT+0x14a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f042 0201 	orr.w	r2, r2, #1
 8005050:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005052:	2300      	movs	r3, #0
}
 8005054:	4618      	mov	r0, r3
 8005056:	3710      	adds	r7, #16
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}
 800505c:	40010000 	.word	0x40010000
 8005060:	40000400 	.word	0x40000400
 8005064:	40000800 	.word	0x40000800
 8005068:	40000c00 	.word	0x40000c00
 800506c:	40001000 	.word	0x40001000
 8005070:	40001400 	.word	0x40001400
 8005074:	40010400 	.word	0x40010400
 8005078:	40014000 	.word	0x40014000
 800507c:	40014400 	.word	0x40014400
 8005080:	40014800 	.word	0x40014800
 8005084:	40001800 	.word	0x40001800
 8005088:	40001c00 	.word	0x40001c00
 800508c:	40002000 	.word	0x40002000
 8005090:	0800d428 	.word	0x0800d428

08005094 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	f003 0302 	and.w	r3, r3, #2
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d122      	bne.n	80050f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	f003 0302 	and.w	r3, r3, #2
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d11b      	bne.n	80050f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f06f 0202 	mvn.w	r2, #2
 80050c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2201      	movs	r2, #1
 80050c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	f003 0303 	and.w	r3, r3, #3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d003      	beq.n	80050de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 f8ee 	bl	80052b8 <HAL_TIM_IC_CaptureCallback>
 80050dc:	e005      	b.n	80050ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 f8e0 	bl	80052a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f000 f8f1 	bl	80052cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	f003 0304 	and.w	r3, r3, #4
 80050fa:	2b04      	cmp	r3, #4
 80050fc:	d122      	bne.n	8005144 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	f003 0304 	and.w	r3, r3, #4
 8005108:	2b04      	cmp	r3, #4
 800510a:	d11b      	bne.n	8005144 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f06f 0204 	mvn.w	r2, #4
 8005114:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2202      	movs	r2, #2
 800511a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	699b      	ldr	r3, [r3, #24]
 8005122:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005126:	2b00      	cmp	r3, #0
 8005128:	d003      	beq.n	8005132 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 f8c4 	bl	80052b8 <HAL_TIM_IC_CaptureCallback>
 8005130:	e005      	b.n	800513e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 f8b6 	bl	80052a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f000 f8c7 	bl	80052cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	f003 0308 	and.w	r3, r3, #8
 800514e:	2b08      	cmp	r3, #8
 8005150:	d122      	bne.n	8005198 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	f003 0308 	and.w	r3, r3, #8
 800515c:	2b08      	cmp	r3, #8
 800515e:	d11b      	bne.n	8005198 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f06f 0208 	mvn.w	r2, #8
 8005168:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2204      	movs	r2, #4
 800516e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	69db      	ldr	r3, [r3, #28]
 8005176:	f003 0303 	and.w	r3, r3, #3
 800517a:	2b00      	cmp	r3, #0
 800517c:	d003      	beq.n	8005186 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 f89a 	bl	80052b8 <HAL_TIM_IC_CaptureCallback>
 8005184:	e005      	b.n	8005192 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 f88c 	bl	80052a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f000 f89d 	bl	80052cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	f003 0310 	and.w	r3, r3, #16
 80051a2:	2b10      	cmp	r3, #16
 80051a4:	d122      	bne.n	80051ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	f003 0310 	and.w	r3, r3, #16
 80051b0:	2b10      	cmp	r3, #16
 80051b2:	d11b      	bne.n	80051ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f06f 0210 	mvn.w	r2, #16
 80051bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2208      	movs	r2, #8
 80051c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	69db      	ldr	r3, [r3, #28]
 80051ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d003      	beq.n	80051da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 f870 	bl	80052b8 <HAL_TIM_IC_CaptureCallback>
 80051d8:	e005      	b.n	80051e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 f862 	bl	80052a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 f873 	bl	80052cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	f003 0301 	and.w	r3, r3, #1
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d10e      	bne.n	8005218 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	f003 0301 	and.w	r3, r3, #1
 8005204:	2b01      	cmp	r3, #1
 8005206:	d107      	bne.n	8005218 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f06f 0201 	mvn.w	r2, #1
 8005210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f7fb fdee 	bl	8000df4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005222:	2b80      	cmp	r3, #128	; 0x80
 8005224:	d10e      	bne.n	8005244 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005230:	2b80      	cmp	r3, #128	; 0x80
 8005232:	d107      	bne.n	8005244 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800523c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 f9e0 	bl	8005604 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800524e:	2b40      	cmp	r3, #64	; 0x40
 8005250:	d10e      	bne.n	8005270 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800525c:	2b40      	cmp	r3, #64	; 0x40
 800525e:	d107      	bne.n	8005270 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 f838 	bl	80052e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	f003 0320 	and.w	r3, r3, #32
 800527a:	2b20      	cmp	r3, #32
 800527c:	d10e      	bne.n	800529c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	f003 0320 	and.w	r3, r3, #32
 8005288:	2b20      	cmp	r3, #32
 800528a:	d107      	bne.n	800529c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f06f 0220 	mvn.w	r2, #32
 8005294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 f9aa 	bl	80055f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800529c:	bf00      	nop
 800529e:	3708      	adds	r7, #8
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052ac:	bf00      	nop
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052c0:	bf00      	nop
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052d4:	bf00      	nop
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052e8:	bf00      	nop
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a40      	ldr	r2, [pc, #256]	; (8005408 <TIM_Base_SetConfig+0x114>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d013      	beq.n	8005334 <TIM_Base_SetConfig+0x40>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005312:	d00f      	beq.n	8005334 <TIM_Base_SetConfig+0x40>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a3d      	ldr	r2, [pc, #244]	; (800540c <TIM_Base_SetConfig+0x118>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d00b      	beq.n	8005334 <TIM_Base_SetConfig+0x40>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a3c      	ldr	r2, [pc, #240]	; (8005410 <TIM_Base_SetConfig+0x11c>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d007      	beq.n	8005334 <TIM_Base_SetConfig+0x40>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a3b      	ldr	r2, [pc, #236]	; (8005414 <TIM_Base_SetConfig+0x120>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d003      	beq.n	8005334 <TIM_Base_SetConfig+0x40>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a3a      	ldr	r2, [pc, #232]	; (8005418 <TIM_Base_SetConfig+0x124>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d108      	bne.n	8005346 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800533a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	4313      	orrs	r3, r2
 8005344:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a2f      	ldr	r2, [pc, #188]	; (8005408 <TIM_Base_SetConfig+0x114>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d02b      	beq.n	80053a6 <TIM_Base_SetConfig+0xb2>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005354:	d027      	beq.n	80053a6 <TIM_Base_SetConfig+0xb2>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a2c      	ldr	r2, [pc, #176]	; (800540c <TIM_Base_SetConfig+0x118>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d023      	beq.n	80053a6 <TIM_Base_SetConfig+0xb2>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a2b      	ldr	r2, [pc, #172]	; (8005410 <TIM_Base_SetConfig+0x11c>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d01f      	beq.n	80053a6 <TIM_Base_SetConfig+0xb2>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a2a      	ldr	r2, [pc, #168]	; (8005414 <TIM_Base_SetConfig+0x120>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d01b      	beq.n	80053a6 <TIM_Base_SetConfig+0xb2>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a29      	ldr	r2, [pc, #164]	; (8005418 <TIM_Base_SetConfig+0x124>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d017      	beq.n	80053a6 <TIM_Base_SetConfig+0xb2>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a28      	ldr	r2, [pc, #160]	; (800541c <TIM_Base_SetConfig+0x128>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d013      	beq.n	80053a6 <TIM_Base_SetConfig+0xb2>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a27      	ldr	r2, [pc, #156]	; (8005420 <TIM_Base_SetConfig+0x12c>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d00f      	beq.n	80053a6 <TIM_Base_SetConfig+0xb2>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a26      	ldr	r2, [pc, #152]	; (8005424 <TIM_Base_SetConfig+0x130>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d00b      	beq.n	80053a6 <TIM_Base_SetConfig+0xb2>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a25      	ldr	r2, [pc, #148]	; (8005428 <TIM_Base_SetConfig+0x134>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d007      	beq.n	80053a6 <TIM_Base_SetConfig+0xb2>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a24      	ldr	r2, [pc, #144]	; (800542c <TIM_Base_SetConfig+0x138>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d003      	beq.n	80053a6 <TIM_Base_SetConfig+0xb2>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a23      	ldr	r2, [pc, #140]	; (8005430 <TIM_Base_SetConfig+0x13c>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d108      	bne.n	80053b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	689a      	ldr	r2, [r3, #8]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a0a      	ldr	r2, [pc, #40]	; (8005408 <TIM_Base_SetConfig+0x114>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d003      	beq.n	80053ec <TIM_Base_SetConfig+0xf8>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a0c      	ldr	r2, [pc, #48]	; (8005418 <TIM_Base_SetConfig+0x124>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d103      	bne.n	80053f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	691a      	ldr	r2, [r3, #16]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	615a      	str	r2, [r3, #20]
}
 80053fa:	bf00      	nop
 80053fc:	3714      	adds	r7, #20
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr
 8005406:	bf00      	nop
 8005408:	40010000 	.word	0x40010000
 800540c:	40000400 	.word	0x40000400
 8005410:	40000800 	.word	0x40000800
 8005414:	40000c00 	.word	0x40000c00
 8005418:	40010400 	.word	0x40010400
 800541c:	40014000 	.word	0x40014000
 8005420:	40014400 	.word	0x40014400
 8005424:	40014800 	.word	0x40014800
 8005428:	40001800 	.word	0x40001800
 800542c:	40001c00 	.word	0x40001c00
 8005430:	40002000 	.word	0x40002000

08005434 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a61      	ldr	r2, [pc, #388]	; (80055c8 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d027      	beq.n	8005498 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005450:	d022      	beq.n	8005498 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a5d      	ldr	r2, [pc, #372]	; (80055cc <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d01d      	beq.n	8005498 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a5b      	ldr	r2, [pc, #364]	; (80055d0 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d018      	beq.n	8005498 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a5a      	ldr	r2, [pc, #360]	; (80055d4 <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d013      	beq.n	8005498 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a58      	ldr	r2, [pc, #352]	; (80055d8 <HAL_TIMEx_MasterConfigSynchronization+0x1a4>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d00e      	beq.n	8005498 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a57      	ldr	r2, [pc, #348]	; (80055dc <HAL_TIMEx_MasterConfigSynchronization+0x1a8>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d009      	beq.n	8005498 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a55      	ldr	r2, [pc, #340]	; (80055e0 <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d004      	beq.n	8005498 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800548e:	f240 71b1 	movw	r1, #1969	; 0x7b1
 8005492:	4854      	ldr	r0, [pc, #336]	; (80055e4 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 8005494:	f7fb fbb3 	bl	8000bfe <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d020      	beq.n	80054e2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2b10      	cmp	r3, #16
 80054a6:	d01c      	beq.n	80054e2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2b20      	cmp	r3, #32
 80054ae:	d018      	beq.n	80054e2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2b30      	cmp	r3, #48	; 0x30
 80054b6:	d014      	beq.n	80054e2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2b40      	cmp	r3, #64	; 0x40
 80054be:	d010      	beq.n	80054e2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2b50      	cmp	r3, #80	; 0x50
 80054c6:	d00c      	beq.n	80054e2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2b60      	cmp	r3, #96	; 0x60
 80054ce:	d008      	beq.n	80054e2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2b70      	cmp	r3, #112	; 0x70
 80054d6:	d004      	beq.n	80054e2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80054d8:	f240 71b2 	movw	r1, #1970	; 0x7b2
 80054dc:	4841      	ldr	r0, [pc, #260]	; (80055e4 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 80054de:	f7fb fb8e 	bl	8000bfe <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	2b80      	cmp	r3, #128	; 0x80
 80054e8:	d008      	beq.n	80054fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d004      	beq.n	80054fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80054f2:	f240 71b3 	movw	r1, #1971	; 0x7b3
 80054f6:	483b      	ldr	r0, [pc, #236]	; (80055e4 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 80054f8:	f7fb fb81 	bl	8000bfe <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005502:	2b01      	cmp	r3, #1
 8005504:	d101      	bne.n	800550a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005506:	2302      	movs	r3, #2
 8005508:	e05a      	b.n	80055c0 <HAL_TIMEx_MasterConfigSynchronization+0x18c>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2201      	movs	r2, #1
 800550e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2202      	movs	r2, #2
 8005516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005530:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	4313      	orrs	r3, r2
 800553a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a1f      	ldr	r2, [pc, #124]	; (80055c8 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d022      	beq.n	8005594 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005556:	d01d      	beq.n	8005594 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a1b      	ldr	r2, [pc, #108]	; (80055cc <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d018      	beq.n	8005594 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a1a      	ldr	r2, [pc, #104]	; (80055d0 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d013      	beq.n	8005594 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a18      	ldr	r2, [pc, #96]	; (80055d4 <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d00e      	beq.n	8005594 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a19      	ldr	r2, [pc, #100]	; (80055e0 <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d009      	beq.n	8005594 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a18      	ldr	r2, [pc, #96]	; (80055e8 <HAL_TIMEx_MasterConfigSynchronization+0x1b4>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d004      	beq.n	8005594 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a17      	ldr	r2, [pc, #92]	; (80055ec <HAL_TIMEx_MasterConfigSynchronization+0x1b8>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d10c      	bne.n	80055ae <HAL_TIMEx_MasterConfigSynchronization+0x17a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800559a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	68ba      	ldr	r2, [r7, #8]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68ba      	ldr	r2, [r7, #8]
 80055ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2201      	movs	r2, #1
 80055b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055be:	2300      	movs	r3, #0
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3710      	adds	r7, #16
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	40010000 	.word	0x40010000
 80055cc:	40000400 	.word	0x40000400
 80055d0:	40000800 	.word	0x40000800
 80055d4:	40000c00 	.word	0x40000c00
 80055d8:	40001000 	.word	0x40001000
 80055dc:	40001400 	.word	0x40001400
 80055e0:	40010400 	.word	0x40010400
 80055e4:	0800d49c 	.word	0x0800d49c
 80055e8:	40014000 	.word	0x40014000
 80055ec:	40001800 	.word	0x40001800

080055f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055f8:	bf00      	nop
 80055fa:	370c      	adds	r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800560c:	bf00      	nop
 800560e:	370c      	adds	r7, #12
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b082      	sub	sp, #8
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d101      	bne.n	800562a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e0be      	b.n	80057a8 <HAL_UART_Init+0x190>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	699b      	ldr	r3, [r3, #24]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d03b      	beq.n	80056aa <HAL_UART_Init+0x92>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a5e      	ldr	r2, [pc, #376]	; (80057b0 <HAL_UART_Init+0x198>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d01d      	beq.n	8005678 <HAL_UART_Init+0x60>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a5c      	ldr	r2, [pc, #368]	; (80057b4 <HAL_UART_Init+0x19c>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d018      	beq.n	8005678 <HAL_UART_Init+0x60>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a5b      	ldr	r2, [pc, #364]	; (80057b8 <HAL_UART_Init+0x1a0>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d013      	beq.n	8005678 <HAL_UART_Init+0x60>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a59      	ldr	r2, [pc, #356]	; (80057bc <HAL_UART_Init+0x1a4>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d00e      	beq.n	8005678 <HAL_UART_Init+0x60>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a58      	ldr	r2, [pc, #352]	; (80057c0 <HAL_UART_Init+0x1a8>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d009      	beq.n	8005678 <HAL_UART_Init+0x60>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a56      	ldr	r2, [pc, #344]	; (80057c4 <HAL_UART_Init+0x1ac>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d004      	beq.n	8005678 <HAL_UART_Init+0x60>
 800566e:	f240 1173 	movw	r1, #371	; 0x173
 8005672:	4855      	ldr	r0, [pc, #340]	; (80057c8 <HAL_UART_Init+0x1b0>)
 8005674:	f7fb fac3 	bl	8000bfe <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	699b      	ldr	r3, [r3, #24]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d037      	beq.n	80056f0 <HAL_UART_Init+0xd8>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	699b      	ldr	r3, [r3, #24]
 8005684:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005688:	d032      	beq.n	80056f0 <HAL_UART_Init+0xd8>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005692:	d02d      	beq.n	80056f0 <HAL_UART_Init+0xd8>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	699b      	ldr	r3, [r3, #24]
 8005698:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800569c:	d028      	beq.n	80056f0 <HAL_UART_Init+0xd8>
 800569e:	f44f 71ba 	mov.w	r1, #372	; 0x174
 80056a2:	4849      	ldr	r0, [pc, #292]	; (80057c8 <HAL_UART_Init+0x1b0>)
 80056a4:	f7fb faab 	bl	8000bfe <assert_failed>
 80056a8:	e022      	b.n	80056f0 <HAL_UART_Init+0xd8>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a40      	ldr	r2, [pc, #256]	; (80057b0 <HAL_UART_Init+0x198>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d01d      	beq.n	80056f0 <HAL_UART_Init+0xd8>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a3e      	ldr	r2, [pc, #248]	; (80057b4 <HAL_UART_Init+0x19c>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d018      	beq.n	80056f0 <HAL_UART_Init+0xd8>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a3d      	ldr	r2, [pc, #244]	; (80057b8 <HAL_UART_Init+0x1a0>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d013      	beq.n	80056f0 <HAL_UART_Init+0xd8>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a3b      	ldr	r2, [pc, #236]	; (80057bc <HAL_UART_Init+0x1a4>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d00e      	beq.n	80056f0 <HAL_UART_Init+0xd8>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a3a      	ldr	r2, [pc, #232]	; (80057c0 <HAL_UART_Init+0x1a8>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d009      	beq.n	80056f0 <HAL_UART_Init+0xd8>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a38      	ldr	r2, [pc, #224]	; (80057c4 <HAL_UART_Init+0x1ac>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d004      	beq.n	80056f0 <HAL_UART_Init+0xd8>
 80056e6:	f44f 71bc 	mov.w	r1, #376	; 0x178
 80056ea:	4837      	ldr	r0, [pc, #220]	; (80057c8 <HAL_UART_Init+0x1b0>)
 80056ec:	f7fb fa87 	bl	8000bfe <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d009      	beq.n	800570c <HAL_UART_Init+0xf4>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005700:	d004      	beq.n	800570c <HAL_UART_Init+0xf4>
 8005702:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8005706:	4830      	ldr	r0, [pc, #192]	; (80057c8 <HAL_UART_Init+0x1b0>)
 8005708:	f7fb fa79 	bl	8000bfe <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	69db      	ldr	r3, [r3, #28]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d009      	beq.n	8005728 <HAL_UART_Init+0x110>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	69db      	ldr	r3, [r3, #28]
 8005718:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800571c:	d004      	beq.n	8005728 <HAL_UART_Init+0x110>
 800571e:	f240 117b 	movw	r1, #379	; 0x17b
 8005722:	4829      	ldr	r0, [pc, #164]	; (80057c8 <HAL_UART_Init+0x1b0>)
 8005724:	f7fb fa6b 	bl	8000bfe <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800572e:	b2db      	uxtb	r3, r3
 8005730:	2b00      	cmp	r3, #0
 8005732:	d106      	bne.n	8005742 <HAL_UART_Init+0x12a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f7fb fd17 	bl	8001170 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2224      	movs	r2, #36	; 0x24
 8005746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	68da      	ldr	r2, [r3, #12]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005758:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 f836 	bl	80057cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	691a      	ldr	r2, [r3, #16]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800576e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	695a      	ldr	r2, [r3, #20]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800577e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68da      	ldr	r2, [r3, #12]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800578e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2220      	movs	r2, #32
 800579a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2220      	movs	r2, #32
 80057a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3708      	adds	r7, #8
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	40011000 	.word	0x40011000
 80057b4:	40004400 	.word	0x40004400
 80057b8:	40004800 	.word	0x40004800
 80057bc:	40004c00 	.word	0x40004c00
 80057c0:	40005000 	.word	0x40005000
 80057c4:	40011400 	.word	0x40011400
 80057c8:	0800d510 	.word	0x0800d510

080057cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057d0:	b0c0      	sub	sp, #256	; 0x100
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80057d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057dc:	685a      	ldr	r2, [r3, #4]
 80057de:	4bcf      	ldr	r3, [pc, #828]	; (8005b1c <UART_SetConfig+0x350>)
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d904      	bls.n	80057ee <UART_SetConfig+0x22>
 80057e4:	f640 6161 	movw	r1, #3681	; 0xe61
 80057e8:	48cd      	ldr	r0, [pc, #820]	; (8005b20 <UART_SetConfig+0x354>)
 80057ea:	f7fb fa08 	bl	8000bfe <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80057ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d00a      	beq.n	800580e <UART_SetConfig+0x42>
 80057f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005802:	d004      	beq.n	800580e <UART_SetConfig+0x42>
 8005804:	f640 6162 	movw	r1, #3682	; 0xe62
 8005808:	48c5      	ldr	r0, [pc, #788]	; (8005b20 <UART_SetConfig+0x354>)
 800580a:	f7fb f9f8 	bl	8000bfe <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800580e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005812:	691b      	ldr	r3, [r3, #16]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d010      	beq.n	800583a <UART_SetConfig+0x6e>
 8005818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005822:	d00a      	beq.n	800583a <UART_SetConfig+0x6e>
 8005824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800582e:	d004      	beq.n	800583a <UART_SetConfig+0x6e>
 8005830:	f640 6163 	movw	r1, #3683	; 0xe63
 8005834:	48ba      	ldr	r0, [pc, #744]	; (8005b20 <UART_SetConfig+0x354>)
 8005836:	f7fb f9e2 	bl	8000bfe <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800583a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800583e:	695a      	ldr	r2, [r3, #20]
 8005840:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8005844:	4013      	ands	r3, r2
 8005846:	2b00      	cmp	r3, #0
 8005848:	d104      	bne.n	8005854 <UART_SetConfig+0x88>
 800584a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800584e:	695b      	ldr	r3, [r3, #20]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d104      	bne.n	800585e <UART_SetConfig+0x92>
 8005854:	f640 6164 	movw	r1, #3684	; 0xe64
 8005858:	48b1      	ldr	r0, [pc, #708]	; (8005b20 <UART_SetConfig+0x354>)
 800585a:	f7fb f9d0 	bl	8000bfe <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800585e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800586a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800586e:	68d9      	ldr	r1, [r3, #12]
 8005870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	ea40 0301 	orr.w	r3, r0, r1
 800587a:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800587c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005880:	689a      	ldr	r2, [r3, #8]
 8005882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	431a      	orrs	r2, r3
 800588a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800588e:	695b      	ldr	r3, [r3, #20]
 8005890:	431a      	orrs	r2, r3
 8005892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005896:	69db      	ldr	r3, [r3, #28]
 8005898:	4313      	orrs	r3, r2
 800589a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800589e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80058aa:	f021 010c 	bic.w	r1, r1, #12
 80058ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80058b8:	430b      	orrs	r3, r1
 80058ba:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80058bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	695b      	ldr	r3, [r3, #20]
 80058c4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80058c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058cc:	6999      	ldr	r1, [r3, #24]
 80058ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	ea40 0301 	orr.w	r3, r0, r1
 80058d8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80058da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	4b90      	ldr	r3, [pc, #576]	; (8005b24 <UART_SetConfig+0x358>)
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d005      	beq.n	80058f2 <UART_SetConfig+0x126>
 80058e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	4b8e      	ldr	r3, [pc, #568]	; (8005b28 <UART_SetConfig+0x35c>)
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d104      	bne.n	80058fc <UART_SetConfig+0x130>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80058f2:	f7fe f86d 	bl	80039d0 <HAL_RCC_GetPCLK2Freq>
 80058f6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80058fa:	e003      	b.n	8005904 <UART_SetConfig+0x138>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80058fc:	f7fe f854 	bl	80039a8 <HAL_RCC_GetPCLK1Freq>
 8005900:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005908:	69db      	ldr	r3, [r3, #28]
 800590a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800590e:	f040 810f 	bne.w	8005b30 <UART_SetConfig+0x364>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005912:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005916:	2200      	movs	r2, #0
 8005918:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800591c:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005920:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005924:	4622      	mov	r2, r4
 8005926:	462b      	mov	r3, r5
 8005928:	1891      	adds	r1, r2, r2
 800592a:	65b9      	str	r1, [r7, #88]	; 0x58
 800592c:	415b      	adcs	r3, r3
 800592e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005930:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005934:	4621      	mov	r1, r4
 8005936:	eb12 0801 	adds.w	r8, r2, r1
 800593a:	4629      	mov	r1, r5
 800593c:	eb43 0901 	adc.w	r9, r3, r1
 8005940:	f04f 0200 	mov.w	r2, #0
 8005944:	f04f 0300 	mov.w	r3, #0
 8005948:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800594c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005950:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005954:	4690      	mov	r8, r2
 8005956:	4699      	mov	r9, r3
 8005958:	4623      	mov	r3, r4
 800595a:	eb18 0303 	adds.w	r3, r8, r3
 800595e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005962:	462b      	mov	r3, r5
 8005964:	eb49 0303 	adc.w	r3, r9, r3
 8005968:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800596c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005978:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800597c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005980:	460b      	mov	r3, r1
 8005982:	18db      	adds	r3, r3, r3
 8005984:	653b      	str	r3, [r7, #80]	; 0x50
 8005986:	4613      	mov	r3, r2
 8005988:	eb42 0303 	adc.w	r3, r2, r3
 800598c:	657b      	str	r3, [r7, #84]	; 0x54
 800598e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005992:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005996:	f7fa fc3d 	bl	8000214 <__aeabi_uldivmod>
 800599a:	4602      	mov	r2, r0
 800599c:	460b      	mov	r3, r1
 800599e:	4b63      	ldr	r3, [pc, #396]	; (8005b2c <UART_SetConfig+0x360>)
 80059a0:	fba3 2302 	umull	r2, r3, r3, r2
 80059a4:	095b      	lsrs	r3, r3, #5
 80059a6:	011c      	lsls	r4, r3, #4
 80059a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059ac:	2200      	movs	r2, #0
 80059ae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80059b2:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80059b6:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80059ba:	4642      	mov	r2, r8
 80059bc:	464b      	mov	r3, r9
 80059be:	1891      	adds	r1, r2, r2
 80059c0:	64b9      	str	r1, [r7, #72]	; 0x48
 80059c2:	415b      	adcs	r3, r3
 80059c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059c6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80059ca:	4641      	mov	r1, r8
 80059cc:	eb12 0a01 	adds.w	sl, r2, r1
 80059d0:	4649      	mov	r1, r9
 80059d2:	eb43 0b01 	adc.w	fp, r3, r1
 80059d6:	f04f 0200 	mov.w	r2, #0
 80059da:	f04f 0300 	mov.w	r3, #0
 80059de:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80059e2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80059e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059ea:	4692      	mov	sl, r2
 80059ec:	469b      	mov	fp, r3
 80059ee:	4643      	mov	r3, r8
 80059f0:	eb1a 0303 	adds.w	r3, sl, r3
 80059f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80059f8:	464b      	mov	r3, r9
 80059fa:	eb4b 0303 	adc.w	r3, fp, r3
 80059fe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a0e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005a12:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005a16:	460b      	mov	r3, r1
 8005a18:	18db      	adds	r3, r3, r3
 8005a1a:	643b      	str	r3, [r7, #64]	; 0x40
 8005a1c:	4613      	mov	r3, r2
 8005a1e:	eb42 0303 	adc.w	r3, r2, r3
 8005a22:	647b      	str	r3, [r7, #68]	; 0x44
 8005a24:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005a28:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005a2c:	f7fa fbf2 	bl	8000214 <__aeabi_uldivmod>
 8005a30:	4602      	mov	r2, r0
 8005a32:	460b      	mov	r3, r1
 8005a34:	4611      	mov	r1, r2
 8005a36:	4b3d      	ldr	r3, [pc, #244]	; (8005b2c <UART_SetConfig+0x360>)
 8005a38:	fba3 2301 	umull	r2, r3, r3, r1
 8005a3c:	095b      	lsrs	r3, r3, #5
 8005a3e:	2264      	movs	r2, #100	; 0x64
 8005a40:	fb02 f303 	mul.w	r3, r2, r3
 8005a44:	1acb      	subs	r3, r1, r3
 8005a46:	00db      	lsls	r3, r3, #3
 8005a48:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005a4c:	4b37      	ldr	r3, [pc, #220]	; (8005b2c <UART_SetConfig+0x360>)
 8005a4e:	fba3 2302 	umull	r2, r3, r3, r2
 8005a52:	095b      	lsrs	r3, r3, #5
 8005a54:	005b      	lsls	r3, r3, #1
 8005a56:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a5a:	441c      	add	r4, r3
 8005a5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a60:	2200      	movs	r2, #0
 8005a62:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a66:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005a6a:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005a6e:	4642      	mov	r2, r8
 8005a70:	464b      	mov	r3, r9
 8005a72:	1891      	adds	r1, r2, r2
 8005a74:	63b9      	str	r1, [r7, #56]	; 0x38
 8005a76:	415b      	adcs	r3, r3
 8005a78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a7a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005a7e:	4641      	mov	r1, r8
 8005a80:	1851      	adds	r1, r2, r1
 8005a82:	6339      	str	r1, [r7, #48]	; 0x30
 8005a84:	4649      	mov	r1, r9
 8005a86:	414b      	adcs	r3, r1
 8005a88:	637b      	str	r3, [r7, #52]	; 0x34
 8005a8a:	f04f 0200 	mov.w	r2, #0
 8005a8e:	f04f 0300 	mov.w	r3, #0
 8005a92:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005a96:	4659      	mov	r1, fp
 8005a98:	00cb      	lsls	r3, r1, #3
 8005a9a:	4651      	mov	r1, sl
 8005a9c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005aa0:	4651      	mov	r1, sl
 8005aa2:	00ca      	lsls	r2, r1, #3
 8005aa4:	4610      	mov	r0, r2
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	4642      	mov	r2, r8
 8005aac:	189b      	adds	r3, r3, r2
 8005aae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ab2:	464b      	mov	r3, r9
 8005ab4:	460a      	mov	r2, r1
 8005ab6:	eb42 0303 	adc.w	r3, r2, r3
 8005aba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005aca:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005ace:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005ad2:	460b      	mov	r3, r1
 8005ad4:	18db      	adds	r3, r3, r3
 8005ad6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ad8:	4613      	mov	r3, r2
 8005ada:	eb42 0303 	adc.w	r3, r2, r3
 8005ade:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ae0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005ae4:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005ae8:	f7fa fb94 	bl	8000214 <__aeabi_uldivmod>
 8005aec:	4602      	mov	r2, r0
 8005aee:	460b      	mov	r3, r1
 8005af0:	4b0e      	ldr	r3, [pc, #56]	; (8005b2c <UART_SetConfig+0x360>)
 8005af2:	fba3 1302 	umull	r1, r3, r3, r2
 8005af6:	095b      	lsrs	r3, r3, #5
 8005af8:	2164      	movs	r1, #100	; 0x64
 8005afa:	fb01 f303 	mul.w	r3, r1, r3
 8005afe:	1ad3      	subs	r3, r2, r3
 8005b00:	00db      	lsls	r3, r3, #3
 8005b02:	3332      	adds	r3, #50	; 0x32
 8005b04:	4a09      	ldr	r2, [pc, #36]	; (8005b2c <UART_SetConfig+0x360>)
 8005b06:	fba2 2303 	umull	r2, r3, r2, r3
 8005b0a:	095b      	lsrs	r3, r3, #5
 8005b0c:	f003 0207 	and.w	r2, r3, #7
 8005b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4422      	add	r2, r4
 8005b18:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b1a:	e108      	b.n	8005d2e <UART_SetConfig+0x562>
 8005b1c:	00a037a0 	.word	0x00a037a0
 8005b20:	0800d510 	.word	0x0800d510
 8005b24:	40011000 	.word	0x40011000
 8005b28:	40011400 	.word	0x40011400
 8005b2c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b34:	2200      	movs	r2, #0
 8005b36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005b3a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005b3e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005b42:	4642      	mov	r2, r8
 8005b44:	464b      	mov	r3, r9
 8005b46:	1891      	adds	r1, r2, r2
 8005b48:	6239      	str	r1, [r7, #32]
 8005b4a:	415b      	adcs	r3, r3
 8005b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b52:	4641      	mov	r1, r8
 8005b54:	1854      	adds	r4, r2, r1
 8005b56:	4649      	mov	r1, r9
 8005b58:	eb43 0501 	adc.w	r5, r3, r1
 8005b5c:	f04f 0200 	mov.w	r2, #0
 8005b60:	f04f 0300 	mov.w	r3, #0
 8005b64:	00eb      	lsls	r3, r5, #3
 8005b66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b6a:	00e2      	lsls	r2, r4, #3
 8005b6c:	4614      	mov	r4, r2
 8005b6e:	461d      	mov	r5, r3
 8005b70:	4643      	mov	r3, r8
 8005b72:	18e3      	adds	r3, r4, r3
 8005b74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005b78:	464b      	mov	r3, r9
 8005b7a:	eb45 0303 	adc.w	r3, r5, r3
 8005b7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005b8e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005b92:	f04f 0200 	mov.w	r2, #0
 8005b96:	f04f 0300 	mov.w	r3, #0
 8005b9a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005b9e:	4629      	mov	r1, r5
 8005ba0:	008b      	lsls	r3, r1, #2
 8005ba2:	4621      	mov	r1, r4
 8005ba4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ba8:	4621      	mov	r1, r4
 8005baa:	008a      	lsls	r2, r1, #2
 8005bac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005bb0:	f7fa fb30 	bl	8000214 <__aeabi_uldivmod>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	460b      	mov	r3, r1
 8005bb8:	4b60      	ldr	r3, [pc, #384]	; (8005d3c <UART_SetConfig+0x570>)
 8005bba:	fba3 2302 	umull	r2, r3, r3, r2
 8005bbe:	095b      	lsrs	r3, r3, #5
 8005bc0:	011c      	lsls	r4, r3, #4
 8005bc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005bcc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005bd0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005bd4:	4642      	mov	r2, r8
 8005bd6:	464b      	mov	r3, r9
 8005bd8:	1891      	adds	r1, r2, r2
 8005bda:	61b9      	str	r1, [r7, #24]
 8005bdc:	415b      	adcs	r3, r3
 8005bde:	61fb      	str	r3, [r7, #28]
 8005be0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005be4:	4641      	mov	r1, r8
 8005be6:	1851      	adds	r1, r2, r1
 8005be8:	6139      	str	r1, [r7, #16]
 8005bea:	4649      	mov	r1, r9
 8005bec:	414b      	adcs	r3, r1
 8005bee:	617b      	str	r3, [r7, #20]
 8005bf0:	f04f 0200 	mov.w	r2, #0
 8005bf4:	f04f 0300 	mov.w	r3, #0
 8005bf8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005bfc:	4659      	mov	r1, fp
 8005bfe:	00cb      	lsls	r3, r1, #3
 8005c00:	4651      	mov	r1, sl
 8005c02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c06:	4651      	mov	r1, sl
 8005c08:	00ca      	lsls	r2, r1, #3
 8005c0a:	4610      	mov	r0, r2
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	4603      	mov	r3, r0
 8005c10:	4642      	mov	r2, r8
 8005c12:	189b      	adds	r3, r3, r2
 8005c14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c18:	464b      	mov	r3, r9
 8005c1a:	460a      	mov	r2, r1
 8005c1c:	eb42 0303 	adc.w	r3, r2, r3
 8005c20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c2e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005c30:	f04f 0200 	mov.w	r2, #0
 8005c34:	f04f 0300 	mov.w	r3, #0
 8005c38:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005c3c:	4649      	mov	r1, r9
 8005c3e:	008b      	lsls	r3, r1, #2
 8005c40:	4641      	mov	r1, r8
 8005c42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c46:	4641      	mov	r1, r8
 8005c48:	008a      	lsls	r2, r1, #2
 8005c4a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005c4e:	f7fa fae1 	bl	8000214 <__aeabi_uldivmod>
 8005c52:	4602      	mov	r2, r0
 8005c54:	460b      	mov	r3, r1
 8005c56:	4b39      	ldr	r3, [pc, #228]	; (8005d3c <UART_SetConfig+0x570>)
 8005c58:	fba3 1302 	umull	r1, r3, r3, r2
 8005c5c:	095b      	lsrs	r3, r3, #5
 8005c5e:	2164      	movs	r1, #100	; 0x64
 8005c60:	fb01 f303 	mul.w	r3, r1, r3
 8005c64:	1ad3      	subs	r3, r2, r3
 8005c66:	011b      	lsls	r3, r3, #4
 8005c68:	3332      	adds	r3, #50	; 0x32
 8005c6a:	4a34      	ldr	r2, [pc, #208]	; (8005d3c <UART_SetConfig+0x570>)
 8005c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c70:	095b      	lsrs	r3, r3, #5
 8005c72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c76:	441c      	add	r4, r3
 8005c78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	673b      	str	r3, [r7, #112]	; 0x70
 8005c80:	677a      	str	r2, [r7, #116]	; 0x74
 8005c82:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005c86:	4642      	mov	r2, r8
 8005c88:	464b      	mov	r3, r9
 8005c8a:	1891      	adds	r1, r2, r2
 8005c8c:	60b9      	str	r1, [r7, #8]
 8005c8e:	415b      	adcs	r3, r3
 8005c90:	60fb      	str	r3, [r7, #12]
 8005c92:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c96:	4641      	mov	r1, r8
 8005c98:	1851      	adds	r1, r2, r1
 8005c9a:	6039      	str	r1, [r7, #0]
 8005c9c:	4649      	mov	r1, r9
 8005c9e:	414b      	adcs	r3, r1
 8005ca0:	607b      	str	r3, [r7, #4]
 8005ca2:	f04f 0200 	mov.w	r2, #0
 8005ca6:	f04f 0300 	mov.w	r3, #0
 8005caa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005cae:	4659      	mov	r1, fp
 8005cb0:	00cb      	lsls	r3, r1, #3
 8005cb2:	4651      	mov	r1, sl
 8005cb4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cb8:	4651      	mov	r1, sl
 8005cba:	00ca      	lsls	r2, r1, #3
 8005cbc:	4610      	mov	r0, r2
 8005cbe:	4619      	mov	r1, r3
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	4642      	mov	r2, r8
 8005cc4:	189b      	adds	r3, r3, r2
 8005cc6:	66bb      	str	r3, [r7, #104]	; 0x68
 8005cc8:	464b      	mov	r3, r9
 8005cca:	460a      	mov	r2, r1
 8005ccc:	eb42 0303 	adc.w	r3, r2, r3
 8005cd0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	663b      	str	r3, [r7, #96]	; 0x60
 8005cdc:	667a      	str	r2, [r7, #100]	; 0x64
 8005cde:	f04f 0200 	mov.w	r2, #0
 8005ce2:	f04f 0300 	mov.w	r3, #0
 8005ce6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005cea:	4649      	mov	r1, r9
 8005cec:	008b      	lsls	r3, r1, #2
 8005cee:	4641      	mov	r1, r8
 8005cf0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cf4:	4641      	mov	r1, r8
 8005cf6:	008a      	lsls	r2, r1, #2
 8005cf8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005cfc:	f7fa fa8a 	bl	8000214 <__aeabi_uldivmod>
 8005d00:	4602      	mov	r2, r0
 8005d02:	460b      	mov	r3, r1
 8005d04:	4b0d      	ldr	r3, [pc, #52]	; (8005d3c <UART_SetConfig+0x570>)
 8005d06:	fba3 1302 	umull	r1, r3, r3, r2
 8005d0a:	095b      	lsrs	r3, r3, #5
 8005d0c:	2164      	movs	r1, #100	; 0x64
 8005d0e:	fb01 f303 	mul.w	r3, r1, r3
 8005d12:	1ad3      	subs	r3, r2, r3
 8005d14:	011b      	lsls	r3, r3, #4
 8005d16:	3332      	adds	r3, #50	; 0x32
 8005d18:	4a08      	ldr	r2, [pc, #32]	; (8005d3c <UART_SetConfig+0x570>)
 8005d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d1e:	095b      	lsrs	r3, r3, #5
 8005d20:	f003 020f 	and.w	r2, r3, #15
 8005d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4422      	add	r2, r4
 8005d2c:	609a      	str	r2, [r3, #8]
}
 8005d2e:	bf00      	nop
 8005d30:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005d34:	46bd      	mov	sp, r7
 8005d36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d3a:	bf00      	nop
 8005d3c:	51eb851f 	.word	0x51eb851f

08005d40 <APPL_AckErrorInd>:
 \brief    The function is called when an error state was acknowledged by the master

*////////////////////////////////////////////////////////////////////////////////////////

void    APPL_AckErrorInd(UINT16 stateTrans)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	4603      	mov	r3, r0
 8005d48:	80fb      	strh	r3, [r7, #6]

}
 8005d4a:	bf00      	nop
 8005d4c:	370c      	adds	r7, #12
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr

08005d56 <APPL_StartMailboxHandler>:
            until a value unequal NOERROR_INWORK is returned

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 APPL_StartMailboxHandler(void)
{
 8005d56:	b480      	push	{r7}
 8005d58:	af00      	add	r7, sp, #0
    return ALSTATUSCODE_NOERROR;
 8005d5a:	2300      	movs	r3, #0
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr

08005d66 <APPL_StopMailboxHandler>:
             the state transition.

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 APPL_StopMailboxHandler(void)
{
 8005d66:	b480      	push	{r7}
 8005d68:	af00      	add	r7, sp, #0
    return ALSTATUSCODE_NOERROR;
 8005d6a:	2300      	movs	r3, #0
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr

08005d76 <APPL_StartInputHandler>:
           the state transition immediately, in that case the application need to be complete 
           the transition by calling ECAT_StateChange.
*////////////////////////////////////////////////////////////////////////////////////////

UINT16 APPL_StartInputHandler(UINT16 *pIntMask)
{
 8005d76:	b480      	push	{r7}
 8005d78:	b083      	sub	sp, #12
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
    return ALSTATUSCODE_NOERROR;
 8005d7e:	2300      	movs	r3, #0
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <APPL_StopInputHandler>:
             the state transition.

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 APPL_StopInputHandler(void)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	af00      	add	r7, sp, #0
    return ALSTATUSCODE_NOERROR;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <APPL_StartOutputHandler>:
           the state transition immediately, in that case the application need to be complete 
           the transition by calling ECAT_StateChange.
*////////////////////////////////////////////////////////////////////////////////////////

UINT16 APPL_StartOutputHandler(void)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	af00      	add	r7, sp, #0
    return ALSTATUSCODE_NOERROR;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <APPL_StopOutputHandler>:
             the state transition.

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 APPL_StopOutputHandler(void)
{
 8005dac:	b480      	push	{r7}
 8005dae:	af00      	add	r7, sp, #0
    return ALSTATUSCODE_NOERROR;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <APPL_GenerateMapping>:

\brief    This function calculates the process data sizes from the actual SM-PDO-Assign
            and PDO mapping
*////////////////////////////////////////////////////////////////////////////////////////
UINT16 APPL_GenerateMapping(UINT16 *pInputSize,UINT16 *pOutputSize)
{
 8005dbc:	b590      	push	{r4, r7, lr}
 8005dbe:	b089      	sub	sp, #36	; 0x24
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	6039      	str	r1, [r7, #0]
    UINT16 result = ALSTATUSCODE_NOERROR;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	83fb      	strh	r3, [r7, #30]
    UINT16 InputSize = 0;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	83bb      	strh	r3, [r7, #28]
    UINT16 OutputSize = 0;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	837b      	strh	r3, [r7, #26]

#if COE_SUPPORTED
    UINT16 PDOAssignEntryCnt = 0;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	833b      	strh	r3, [r7, #24]
    OBJCONST TOBJECT OBJMEM * pPDO = NULL;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	613b      	str	r3, [r7, #16]
    UINT16 PDOSubindex0 = 0;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	81fb      	strh	r3, [r7, #14]
    UINT32 *pPDOEntry = NULL;
 8005dde:	2300      	movs	r3, #0
 8005de0:	60bb      	str	r3, [r7, #8]
    UINT16 PDOEntryCnt = 0;
 8005de2:	2300      	movs	r3, #0
 8005de4:	82fb      	strh	r3, [r7, #22]
   
    /*Scan object 0x1C12 RXPDO assign*/
    for(PDOAssignEntryCnt = 0; PDOAssignEntryCnt < sRxPDOassign.u16SubIndex0; PDOAssignEntryCnt++)
 8005de6:	2300      	movs	r3, #0
 8005de8:	833b      	strh	r3, [r7, #24]
 8005dea:	e039      	b.n	8005e60 <APPL_GenerateMapping+0xa4>
    {
        pPDO = OBJ_GetObjectHandle(sRxPDOassign.aEntries[PDOAssignEntryCnt]);
 8005dec:	8b3b      	ldrh	r3, [r7, #24]
 8005dee:	4a4b      	ldr	r2, [pc, #300]	; (8005f1c <APPL_GenerateMapping+0x160>)
 8005df0:	005b      	lsls	r3, r3, #1
 8005df2:	4413      	add	r3, r2
 8005df4:	885b      	ldrh	r3, [r3, #2]
 8005df6:	4618      	mov	r0, r3
 8005df8:	f004 fbec 	bl	800a5d4 <OBJ_GetObjectHandle>
 8005dfc:	6138      	str	r0, [r7, #16]
        if(pPDO != NULL)
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d025      	beq.n	8005e50 <APPL_GenerateMapping+0x94>
        {
            PDOSubindex0 = *((UINT16 *)pPDO->pVarPtr);
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	699b      	ldr	r3, [r3, #24]
 8005e08:	881b      	ldrh	r3, [r3, #0]
 8005e0a:	81fb      	strh	r3, [r7, #14]
            for(PDOEntryCnt = 0; PDOEntryCnt < PDOSubindex0; PDOEntryCnt++)
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	82fb      	strh	r3, [r7, #22]
 8005e10:	e019      	b.n	8005e46 <APPL_GenerateMapping+0x8a>
            {
                pPDOEntry = (UINT32 *)((UINT8 *)pPDO->pVarPtr + (OBJ_GetEntryOffset((PDOEntryCnt+1),pPDO)>>3));    //goto PDO entry
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	699c      	ldr	r4, [r3, #24]
 8005e16:	8afb      	ldrh	r3, [r7, #22]
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	6939      	ldr	r1, [r7, #16]
 8005e20:	4618      	mov	r0, r3
 8005e22:	f004 fe59 	bl	800aad8 <OBJ_GetEntryOffset>
 8005e26:	4603      	mov	r3, r0
 8005e28:	08db      	lsrs	r3, r3, #3
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	4423      	add	r3, r4
 8005e2e:	60bb      	str	r3, [r7, #8]
                // we increment the expected output size depending on the mapped Entry
                OutputSize += (UINT16) ((*pPDOEntry) & 0xFF);
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	b29a      	uxth	r2, r3
 8005e3a:	8b7b      	ldrh	r3, [r7, #26]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	837b      	strh	r3, [r7, #26]
            for(PDOEntryCnt = 0; PDOEntryCnt < PDOSubindex0; PDOEntryCnt++)
 8005e40:	8afb      	ldrh	r3, [r7, #22]
 8005e42:	3301      	adds	r3, #1
 8005e44:	82fb      	strh	r3, [r7, #22]
 8005e46:	8afa      	ldrh	r2, [r7, #22]
 8005e48:	89fb      	ldrh	r3, [r7, #14]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d3e1      	bcc.n	8005e12 <APPL_GenerateMapping+0x56>
 8005e4e:	e004      	b.n	8005e5a <APPL_GenerateMapping+0x9e>
            }
        }
        else
        {
            /*assigned PDO was not found in object dictionary. return invalid mapping*/
            OutputSize = 0;
 8005e50:	2300      	movs	r3, #0
 8005e52:	837b      	strh	r3, [r7, #26]
            result = ALSTATUSCODE_INVALIDOUTPUTMAPPING;
 8005e54:	2325      	movs	r3, #37	; 0x25
 8005e56:	83fb      	strh	r3, [r7, #30]
            break;
 8005e58:	e007      	b.n	8005e6a <APPL_GenerateMapping+0xae>
    for(PDOAssignEntryCnt = 0; PDOAssignEntryCnt < sRxPDOassign.u16SubIndex0; PDOAssignEntryCnt++)
 8005e5a:	8b3b      	ldrh	r3, [r7, #24]
 8005e5c:	3301      	adds	r3, #1
 8005e5e:	833b      	strh	r3, [r7, #24]
 8005e60:	4b2e      	ldr	r3, [pc, #184]	; (8005f1c <APPL_GenerateMapping+0x160>)
 8005e62:	881b      	ldrh	r3, [r3, #0]
 8005e64:	8b3a      	ldrh	r2, [r7, #24]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d3c0      	bcc.n	8005dec <APPL_GenerateMapping+0x30>
        }
    }

    OutputSize = (OutputSize + 7) >> 3;
 8005e6a:	8b7b      	ldrh	r3, [r7, #26]
 8005e6c:	3307      	adds	r3, #7
 8005e6e:	10db      	asrs	r3, r3, #3
 8005e70:	837b      	strh	r3, [r7, #26]

    if(result == 0)
 8005e72:	8bfb      	ldrh	r3, [r7, #30]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d141      	bne.n	8005efc <APPL_GenerateMapping+0x140>
    {
        /*Scan Object 0x1C13 TXPDO assign*/
        for(PDOAssignEntryCnt = 0; PDOAssignEntryCnt < sTxPDOassign.u16SubIndex0; PDOAssignEntryCnt++)
 8005e78:	2300      	movs	r3, #0
 8005e7a:	833b      	strh	r3, [r7, #24]
 8005e7c:	e039      	b.n	8005ef2 <APPL_GenerateMapping+0x136>
        {
            pPDO = OBJ_GetObjectHandle(sTxPDOassign.aEntries[PDOAssignEntryCnt]);
 8005e7e:	8b3b      	ldrh	r3, [r7, #24]
 8005e80:	4a27      	ldr	r2, [pc, #156]	; (8005f20 <APPL_GenerateMapping+0x164>)
 8005e82:	005b      	lsls	r3, r3, #1
 8005e84:	4413      	add	r3, r2
 8005e86:	885b      	ldrh	r3, [r3, #2]
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f004 fba3 	bl	800a5d4 <OBJ_GetObjectHandle>
 8005e8e:	6138      	str	r0, [r7, #16]
            if(pPDO != NULL)
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d025      	beq.n	8005ee2 <APPL_GenerateMapping+0x126>
            {
                PDOSubindex0 = *((UINT16 *)pPDO->pVarPtr);
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	699b      	ldr	r3, [r3, #24]
 8005e9a:	881b      	ldrh	r3, [r3, #0]
 8005e9c:	81fb      	strh	r3, [r7, #14]
                for(PDOEntryCnt = 0; PDOEntryCnt < PDOSubindex0; PDOEntryCnt++)
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	82fb      	strh	r3, [r7, #22]
 8005ea2:	e019      	b.n	8005ed8 <APPL_GenerateMapping+0x11c>
                {
                    pPDOEntry = (UINT32 *)((UINT8 *)pPDO->pVarPtr + (OBJ_GetEntryOffset((PDOEntryCnt+1),pPDO)>>3));    //goto PDO entry
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	699c      	ldr	r4, [r3, #24]
 8005ea8:	8afb      	ldrh	r3, [r7, #22]
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	3301      	adds	r3, #1
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	6939      	ldr	r1, [r7, #16]
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f004 fe10 	bl	800aad8 <OBJ_GetEntryOffset>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	08db      	lsrs	r3, r3, #3
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	4423      	add	r3, r4
 8005ec0:	60bb      	str	r3, [r7, #8]
                    // we increment the expected output size depending on the mapped Entry
                    InputSize += (UINT16) ((*pPDOEntry) & 0xFF);
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	b29a      	uxth	r2, r3
 8005ecc:	8bbb      	ldrh	r3, [r7, #28]
 8005ece:	4413      	add	r3, r2
 8005ed0:	83bb      	strh	r3, [r7, #28]
                for(PDOEntryCnt = 0; PDOEntryCnt < PDOSubindex0; PDOEntryCnt++)
 8005ed2:	8afb      	ldrh	r3, [r7, #22]
 8005ed4:	3301      	adds	r3, #1
 8005ed6:	82fb      	strh	r3, [r7, #22]
 8005ed8:	8afa      	ldrh	r2, [r7, #22]
 8005eda:	89fb      	ldrh	r3, [r7, #14]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d3e1      	bcc.n	8005ea4 <APPL_GenerateMapping+0xe8>
 8005ee0:	e004      	b.n	8005eec <APPL_GenerateMapping+0x130>
                }
            }
            else
            {
                /*assigned PDO was not found in object dictionary. return invalid mapping*/
                InputSize = 0;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	83bb      	strh	r3, [r7, #28]
                result = ALSTATUSCODE_INVALIDINPUTMAPPING;
 8005ee6:	2324      	movs	r3, #36	; 0x24
 8005ee8:	83fb      	strh	r3, [r7, #30]
                break;
 8005eea:	e007      	b.n	8005efc <APPL_GenerateMapping+0x140>
        for(PDOAssignEntryCnt = 0; PDOAssignEntryCnt < sTxPDOassign.u16SubIndex0; PDOAssignEntryCnt++)
 8005eec:	8b3b      	ldrh	r3, [r7, #24]
 8005eee:	3301      	adds	r3, #1
 8005ef0:	833b      	strh	r3, [r7, #24]
 8005ef2:	4b0b      	ldr	r3, [pc, #44]	; (8005f20 <APPL_GenerateMapping+0x164>)
 8005ef4:	881b      	ldrh	r3, [r3, #0]
 8005ef6:	8b3a      	ldrh	r2, [r7, #24]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d3c0      	bcc.n	8005e7e <APPL_GenerateMapping+0xc2>
            }
        }
    }
    InputSize = (InputSize + 7) >> 3;
 8005efc:	8bbb      	ldrh	r3, [r7, #28]
 8005efe:	3307      	adds	r3, #7
 8005f00:	10db      	asrs	r3, r3, #3
 8005f02:	83bb      	strh	r3, [r7, #28]
#else
    #warning "Define 'InputSize' and 'OutputSize'."
#endif
#endif

    *pInputSize = InputSize;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	8bba      	ldrh	r2, [r7, #28]
 8005f08:	801a      	strh	r2, [r3, #0]
    *pOutputSize = OutputSize;
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	8b7a      	ldrh	r2, [r7, #26]
 8005f0e:	801a      	strh	r2, [r3, #0]
    return result;
 8005f10:	8bfb      	ldrh	r3, [r7, #30]
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3724      	adds	r7, #36	; 0x24
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd90      	pop	{r4, r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	20000030 	.word	0x20000030
 8005f20:	20000034 	.word	0x20000034

08005f24 <APPL_InputMapping>:

\brief      This function will copies the inputs from the local memory to the ESC memory
            to the hardware
*////////////////////////////////////////////////////////////////////////////////////////
void APPL_InputMapping(UINT16* pData)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
#if _WIN32
   #pragma message ("Warning: Implement input (Slave -> Master) mapping")
#else
    #warning "Implement input (Slave -> Master) mapping"

	MEMCPY((UINT8 *)pData, &(((UINT8 *)&DIChannel0x6000)[2]), SIZEOF(DIChannel0x6000)-2);
 8005f2c:	4b05      	ldr	r3, [pc, #20]	; (8005f44 <APPL_InputMapping+0x20>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	461a      	mov	r2, r3
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	601a      	str	r2, [r3, #0]
#endif
}
 8005f36:	bf00      	nop
 8005f38:	370c      	adds	r7, #12
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr
 8005f42:	bf00      	nop
 8005f44:	2000003a 	.word	0x2000003a

08005f48 <APPL_OutputMapping>:

\brief    This function will copies the outputs from the ESC memory to the local memory
            to the hardware
*////////////////////////////////////////////////////////////////////////////////////////
void APPL_OutputMapping(UINT16* pData)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
#if _WIN32
   #pragma message ("Warning: Implement output (Master -> Slave) mapping")
#else
    #warning "Implement output (Master -> Slave) mapping"

	MEMCPY(&(((UINT8 *)&DOChannels0x7000)[2]), (UINT8 *)pData, SIZEOF(DOChannels0x7000)-2);
 8005f50:	4a04      	ldr	r2, [pc, #16]	; (8005f64 <APPL_OutputMapping+0x1c>)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	6013      	str	r3, [r2, #0]
#endif
}
 8005f58:	bf00      	nop
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr
 8005f64:	20000042 	.word	0x20000042

08005f68 <APPL_Application>:
/**
\brief    This function will called from the synchronisation ISR 
            or from the mainloop if no synchronisation is supported
*////////////////////////////////////////////////////////////////////////////////////////
void APPL_Application(void)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	af00      	add	r7, sp, #0
#if _WIN32
   #pragma message ("Warning: Implement the slave application")
#else
    #warning "Implement the slave application"

	DIChannel0x6000.BTN = userBtn1Bit;
 8005f6c:	4b24      	ldr	r3, [pc, #144]	; (8006000 <APPL_Application+0x98>)
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	b29a      	uxth	r2, r3
 8005f72:	4b24      	ldr	r3, [pc, #144]	; (8006004 <APPL_Application+0x9c>)
 8005f74:	805a      	strh	r2, [r3, #2]
	DIChannel0x6000.ADCVal = adcVal;
 8005f76:	4b24      	ldr	r3, [pc, #144]	; (8006008 <APPL_Application+0xa0>)
 8005f78:	881b      	ldrh	r3, [r3, #0]
 8005f7a:	b29a      	uxth	r2, r3
 8005f7c:	4b21      	ldr	r3, [pc, #132]	; (8006004 <APPL_Application+0x9c>)
 8005f7e:	809a      	strh	r2, [r3, #4]

	if (DOChannels0x7000.LED1 == 0x0001)
 8005f80:	4b22      	ldr	r3, [pc, #136]	; (800600c <APPL_Application+0xa4>)
 8005f82:	789b      	ldrb	r3, [r3, #2]
 8005f84:	f003 0301 	and.w	r3, r3, #1
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d005      	beq.n	8005f9a <APPL_Application+0x32>
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8005f8e:	2201      	movs	r2, #1
 8005f90:	2101      	movs	r1, #1
 8005f92:	481f      	ldr	r0, [pc, #124]	; (8006010 <APPL_Application+0xa8>)
 8005f94:	f7fd fb0c 	bl	80035b0 <HAL_GPIO_WritePin>
 8005f98:	e004      	b.n	8005fa4 <APPL_Application+0x3c>
	else
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	2101      	movs	r1, #1
 8005f9e:	481c      	ldr	r0, [pc, #112]	; (8006010 <APPL_Application+0xa8>)
 8005fa0:	f7fd fb06 	bl	80035b0 <HAL_GPIO_WritePin>

	if (DOChannels0x7000.LED2 == 0x0001)
 8005fa4:	4b19      	ldr	r3, [pc, #100]	; (800600c <APPL_Application+0xa4>)
 8005fa6:	789b      	ldrb	r3, [r3, #2]
 8005fa8:	f003 0302 	and.w	r3, r3, #2
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d005      	beq.n	8005fbe <APPL_Application+0x56>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	2180      	movs	r1, #128	; 0x80
 8005fb6:	4816      	ldr	r0, [pc, #88]	; (8006010 <APPL_Application+0xa8>)
 8005fb8:	f7fd fafa 	bl	80035b0 <HAL_GPIO_WritePin>
 8005fbc:	e004      	b.n	8005fc8 <APPL_Application+0x60>
	else
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	2180      	movs	r1, #128	; 0x80
 8005fc2:	4813      	ldr	r0, [pc, #76]	; (8006010 <APPL_Application+0xa8>)
 8005fc4:	f7fd faf4 	bl	80035b0 <HAL_GPIO_WritePin>

	if (DOChannels0x7000.LED3 == 0x0001)
 8005fc8:	4b10      	ldr	r3, [pc, #64]	; (800600c <APPL_Application+0xa4>)
 8005fca:	789b      	ldrb	r3, [r3, #2]
 8005fcc:	f003 0304 	and.w	r3, r3, #4
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d006      	beq.n	8005fe4 <APPL_Application+0x7c>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005fdc:	480c      	ldr	r0, [pc, #48]	; (8006010 <APPL_Application+0xa8>)
 8005fde:	f7fd fae7 	bl	80035b0 <HAL_GPIO_WritePin>
 8005fe2:	e005      	b.n	8005ff0 <APPL_Application+0x88>
	else
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005fea:	4809      	ldr	r0, [pc, #36]	; (8006010 <APPL_Application+0xa8>)
 8005fec:	f7fd fae0 	bl	80035b0 <HAL_GPIO_WritePin>

	dac_setVal( DOChannels0x7000.DACVal );
 8005ff0:	4b06      	ldr	r3, [pc, #24]	; (800600c <APPL_Application+0xa4>)
 8005ff2:	889b      	ldrh	r3, [r3, #4]
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f7fa fbf5 	bl	80007e4 <dac_setVal>

#endif
}
 8005ffa:	bf00      	nop
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	2000050c 	.word	0x2000050c
 8006004:	20000038 	.word	0x20000038
 8006008:	20000498 	.word	0x20000498
 800600c:	20000040 	.word	0x20000040
 8006010:	40020400 	.word	0x40020400

08006014 <COE_GetObjectDictionary>:
/**

 \brief    returns the pointer to the object dictionary
*////////////////////////////////////////////////////////////////////////////////////////
OBJCONST TOBJECT OBJMEM * COE_GetObjectDictionary(void)
{
 8006014:	b480      	push	{r7}
 8006016:	af00      	add	r7, sp, #0
    return (OBJCONST TOBJECT OBJMEM *) ObjDicList;
 8006018:	4b03      	ldr	r3, [pc, #12]	; (8006028 <COE_GetObjectDictionary+0x14>)
 800601a:	681b      	ldr	r3, [r3, #0]
}
 800601c:	4618      	mov	r0, r3
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop
 8006028:	200005b0 	.word	0x200005b0

0800602c <COE_ObjInit>:
/**
 \brief     This function initialize the several objects
*////////////////////////////////////////////////////////////////////////////////////////

void COE_ObjInit(void)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b082      	sub	sp, #8
 8006030:	af00      	add	r7, sp, #0

    /* initialize the Sync Manager Output parameter object 0x1C32 */

    sSyncManOutPar.subindex0         = 32;
 8006032:	4b34      	ldr	r3, [pc, #208]	; (8006104 <COE_ObjInit+0xd8>)
 8006034:	2220      	movs	r2, #32
 8006036:	801a      	strh	r2, [r3, #0]
      from the master to switch between ECAT FreeRun and ECAT Synchron Mode
        if the slave supports both modes,
        in DC mode (selected by the DC registers) this value will be overwritten
        with SYNCTYPE_DCSYNC0 or SYNCTYPE_DCSYNC1 */
     /*default mode is ECAT Synchron Mode */
    sSyncManOutPar.u16SyncType     = SYNCTYPE_FREERUN;
 8006038:	4b32      	ldr	r3, [pc, #200]	; (8006104 <COE_ObjInit+0xd8>)
 800603a:	2200      	movs	r2, #0
 800603c:	805a      	strh	r2, [r3, #2]
    /* subindex 2 contains the cycle time of the application,
       in ECAT FreeRun mode it could be used for a timer interrupt to run the application,
        in ECAT Synchron mode it could be written from the master with its local cycle time
        that the slave can check if this cycle time is supported,
        in DC Mode this value will be overwritten with the DC cycle time register */
    sSyncManOutPar.u32CycleTime     = 0;
 800603e:	4b31      	ldr	r3, [pc, #196]	; (8006104 <COE_ObjInit+0xd8>)
 8006040:	2200      	movs	r2, #0
 8006042:	605a      	str	r2, [r3, #4]
    /* only for DC Mode important: the subindex 3 contains the time shift between the
       SYNC0 (SYNC1) signal and when the outputs are put to the hardware to allow the
        master a very exactly calculation of delay times*/
    sSyncManOutPar.u32ShiftTime     = 0;
 8006044:	4b2f      	ldr	r3, [pc, #188]	; (8006104 <COE_ObjInit+0xd8>)
 8006046:	2200      	movs	r2, #0
 8006048:	609a      	str	r2, [r3, #8]

    /* the subindex 4 contains the supported synchronization types */

    sSyncManOutPar.u16SyncTypesSupported    = SYNCTYPE_FREERUNSUPP            /* ECAT FreeRun Mode is supported */
 800604a:	4b2e      	ldr	r3, [pc, #184]	; (8006104 <COE_ObjInit+0xd8>)
 800604c:	f244 021f 	movw	r2, #16415	; 0x401f
 8006050:	819a      	strh	r2, [r3, #12]

    /* subindex 5 contains the minimum cycle time the slave is able to support,
       will be calculated dynamically because it depends on the connected modules
        (in this example we will make an online measurement in the ESC Interrupt Routine).
        For the sample application this value is set to MIN_PD_CYCLE_TIME */
    sSyncManOutPar.u32MinCycleTime = MIN_PD_CYCLE_TIME;
 8006052:	4b2c      	ldr	r3, [pc, #176]	; (8006104 <COE_ObjInit+0xd8>)
 8006054:	4a2c      	ldr	r2, [pc, #176]	; (8006108 <COE_ObjInit+0xdc>)
 8006056:	611a      	str	r2, [r3, #16]
    /* only for DC Mode important: subindex 6 contains the minimum delay time the slave
       needs after receiving the SM2-event before the SYNC0(SYNC1) can be received without delays
       will be calculated dynamically because it depends on the connected modules
        (in this example we will make an online measurement in the ESC Interrupt Routine) */
    sSyncManOutPar.u32CalcAndCopyTime = (PD_OUTPUT_CALC_AND_COPY_TIME);
 8006058:	4b2a      	ldr	r3, [pc, #168]	; (8006104 <COE_ObjInit+0xd8>)
 800605a:	2200      	movs	r2, #0
 800605c:	615a      	str	r2, [r3, #20]

    /*subindex 8: trigger cycle time measurement*/
    sSyncManOutPar.u16GetCycleTime = 0;
 800605e:	4b29      	ldr	r3, [pc, #164]	; (8006104 <COE_ObjInit+0xd8>)
 8006060:	2200      	movs	r2, #0
 8006062:	839a      	strh	r2, [r3, #28]

    /*subindex 9: time from start driving outputs until outputs are valid*/
    sSyncManOutPar.u32DelayTime = (PD_OUTPUT_DELAY_TIME);
 8006064:	4b27      	ldr	r3, [pc, #156]	; (8006104 <COE_ObjInit+0xd8>)
 8006066:	2200      	movs	r2, #0
 8006068:	621a      	str	r2, [r3, #32]

    /*subindex 32: indicates if a synchronisation error has occurred*/
    sSyncManOutPar.u8SyncError = 0;
 800606a:	4b26      	ldr	r3, [pc, #152]	; (8006104 <COE_ObjInit+0xd8>)
 800606c:	2200      	movs	r2, #0
 800606e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

/*ECATCHANGE_START(V5.11) ECAT4*/
    /* initialize the Sync Manager Input parameter object 0x1C33 */
    sSyncManInPar.subindex0         = 32;
 8006072:	4b26      	ldr	r3, [pc, #152]	; (800610c <COE_ObjInit+0xe0>)
 8006074:	2220      	movs	r2, #32
 8006076:	801a      	strh	r2, [r3, #0]
    /* default mode is ECAT Synchron Mode, if output size > 0 the inputs are updated with the SM2-event */
    sSyncManInPar.u16SyncType         = SYNCTYPE_FREERUN;
 8006078:	4b24      	ldr	r3, [pc, #144]	; (800610c <COE_ObjInit+0xe0>)
 800607a:	2200      	movs	r2, #0
 800607c:	805a      	strh	r2, [r3, #2]

    /* subindex 2: same as 0x1C32:02 */
    sSyncManInPar.u32CycleTime     = sSyncManOutPar.u32CycleTime;
 800607e:	4b21      	ldr	r3, [pc, #132]	; (8006104 <COE_ObjInit+0xd8>)
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	4a22      	ldr	r2, [pc, #136]	; (800610c <COE_ObjInit+0xe0>)
 8006084:	6053      	str	r3, [r2, #4]
    /* only for DC Mode important: subindex 3 contains the time shift between the
       SYNC0 (SYNC1) signal and when the inputs are got to the hardware to allow the
        master a very exactly calculation of delay times,
       will be calculated dynamically because it depends on the connected modules
        (in this example we will make an online measurement in the ESC Interrupt Routine) */
    sSyncManInPar.u32ShiftTime     = 0;
 8006086:	4b21      	ldr	r3, [pc, #132]	; (800610c <COE_ObjInit+0xe0>)
 8006088:	2200      	movs	r2, #0
 800608a:	609a      	str	r2, [r3, #8]
    /* subindex 4: same as 0x1C32:04 */
    sSyncManInPar.u16SyncTypesSupported    = sSyncManOutPar.u16SyncTypesSupported;
 800608c:	4b1d      	ldr	r3, [pc, #116]	; (8006104 <COE_ObjInit+0xd8>)
 800608e:	899a      	ldrh	r2, [r3, #12]
 8006090:	4b1e      	ldr	r3, [pc, #120]	; (800610c <COE_ObjInit+0xe0>)
 8006092:	819a      	strh	r2, [r3, #12]

    /* subindex 5: same as 0x1C32:05 */
    sSyncManInPar.u32MinCycleTime = MIN_PD_CYCLE_TIME;
 8006094:	4b1d      	ldr	r3, [pc, #116]	; (800610c <COE_ObjInit+0xe0>)
 8006096:	4a1c      	ldr	r2, [pc, #112]	; (8006108 <COE_ObjInit+0xdc>)
 8006098:	611a      	str	r2, [r3, #16]
    /* subindex 6: delay read inputs, calculation and copy to SM buffer*/
    sSyncManInPar.u32CalcAndCopyTime = (PD_INPUT_CALC_AND_COPY_TIME);
 800609a:	4b1c      	ldr	r3, [pc, #112]	; (800610c <COE_ObjInit+0xe0>)
 800609c:	2200      	movs	r2, #0
 800609e:	615a      	str	r2, [r3, #20]
    /*subindex 8: trigger cycle time measurement*/
    sSyncManInPar.u16GetCycleTime = 0;
 80060a0:	4b1a      	ldr	r3, [pc, #104]	; (800610c <COE_ObjInit+0xe0>)
 80060a2:	2200      	movs	r2, #0
 80060a4:	839a      	strh	r2, [r3, #28]
    /*subindex 9: delay to prepare input latch*/
    sSyncManInPar.u32DelayTime = (PD_INPUT_DELAY_TIME);
 80060a6:	4b19      	ldr	r3, [pc, #100]	; (800610c <COE_ObjInit+0xe0>)
 80060a8:	2200      	movs	r2, #0
 80060aa:	621a      	str	r2, [r3, #32]

    /*subindex 32: incremented if a synchronisation error has occurred*/
    sSyncManInPar.u8SyncError = 0;
 80060ac:	4b17      	ldr	r3, [pc, #92]	; (800610c <COE_ObjInit+0xe0>)
 80060ae:	2200      	movs	r2, #0
 80060b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
/*ECATCHANGE_END(V5.11) ECAT4*/

    /*Indicate no user specified Sync mode*/
    bSyncSetByUser = FALSE;
 80060b4:	4b16      	ldr	r3, [pc, #88]	; (8006110 <COE_ObjInit+0xe4>)
 80060b6:	2200      	movs	r2, #0
 80060b8:	701a      	strb	r2, [r3, #0]

    {
    UINT16 result = COE_ObjDictionaryInit();
 80060ba:	f000 f931 	bl	8006320 <COE_ObjDictionaryInit>
 80060be:	4603      	mov	r3, r0
 80060c0:	80fb      	strh	r3, [r7, #6]
    if(result != 0)
 80060c2:	88fb      	ldrh	r3, [r7, #6]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d001      	beq.n	80060cc <COE_ObjInit+0xa0>
    {
        /*clear already linked objects*/
        COE_ClearObjDictionary();
 80060c8:	f000 f8e8 	bl	800629c <COE_ClearObjDictionary>
    }
    }

    u8PendingSdo = 0;
 80060cc:	4b11      	ldr	r3, [pc, #68]	; (8006114 <COE_ObjInit+0xe8>)
 80060ce:	2200      	movs	r2, #0
 80060d0:	701a      	strb	r2, [r3, #0]
    bStoreCompleteAccess = FALSE;
 80060d2:	4b11      	ldr	r3, [pc, #68]	; (8006118 <COE_ObjInit+0xec>)
 80060d4:	2200      	movs	r2, #0
 80060d6:	701a      	strb	r2, [r3, #0]
    u16StoreIndex   =   0;
 80060d8:	4b10      	ldr	r3, [pc, #64]	; (800611c <COE_ObjInit+0xf0>)
 80060da:	2200      	movs	r2, #0
 80060dc:	801a      	strh	r2, [r3, #0]
    u8StoreSubindex = 0;
 80060de:	4b10      	ldr	r3, [pc, #64]	; (8006120 <COE_ObjInit+0xf4>)
 80060e0:	2200      	movs	r2, #0
 80060e2:	701a      	strb	r2, [r3, #0]
    u32StoreDataSize = 0;
 80060e4:	4b0f      	ldr	r3, [pc, #60]	; (8006124 <COE_ObjInit+0xf8>)
 80060e6:	2200      	movs	r2, #0
 80060e8:	601a      	str	r2, [r3, #0]
    pStoreData = NULL;
 80060ea:	4b0f      	ldr	r3, [pc, #60]	; (8006128 <COE_ObjInit+0xfc>)
 80060ec:	2200      	movs	r2, #0
 80060ee:	601a      	str	r2, [r3, #0]
    pSdoPendFunc    = NULL;
 80060f0:	4b0e      	ldr	r3, [pc, #56]	; (800612c <COE_ObjInit+0x100>)
 80060f2:	2200      	movs	r2, #0
 80060f4:	601a      	str	r2, [r3, #0]

    pSdoSegData = NULL;
 80060f6:	4b0e      	ldr	r3, [pc, #56]	; (8006130 <COE_ObjInit+0x104>)
 80060f8:	2200      	movs	r2, #0
 80060fa:	601a      	str	r2, [r3, #0]
}
 80060fc:	bf00      	nop
 80060fe:	3708      	adds	r7, #8
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}
 8006104:	20000b08 	.word	0x20000b08
 8006108:	0007a120 	.word	0x0007a120
 800610c:	20000b4c 	.word	0x20000b4c
 8006110:	20000b01 	.word	0x20000b01
 8006114:	20000b90 	.word	0x20000b90
 8006118:	20000b91 	.word	0x20000b91
 800611c:	20000b94 	.word	0x20000b94
 8006120:	20000b92 	.word	0x20000b92
 8006124:	20000b98 	.word	0x20000b98
 8006128:	20000b9c 	.word	0x20000b9c
 800612c:	20000ba0 	.word	0x20000ba0
 8006130:	20000bb4 	.word	0x20000bb4

08006134 <COE_AddObjectToDic>:
            ALSTATUSCODE_XX add object failed

 \brief    This function adds an object to the object dictionary
 *////////////////////////////////////////////////////////////////////////////////////////
UINT16 COE_AddObjectToDic(TOBJECT OBJMEM * pNewObjEntry)
{
 8006134:	b480      	push	{r7}
 8006136:	b085      	sub	sp, #20
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
    if(pNewObjEntry != NULL)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d062      	beq.n	8006208 <COE_AddObjectToDic+0xd4>
    {
        if(ObjDicList == NULL)
 8006142:	4b35      	ldr	r3, [pc, #212]	; (8006218 <COE_AddObjectToDic+0xe4>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d10c      	bne.n	8006164 <COE_AddObjectToDic+0x30>
        {
            /* Object dictionary is empty */
            ObjDicList = pNewObjEntry;
 800614a:	4a33      	ldr	r2, [pc, #204]	; (8006218 <COE_AddObjectToDic+0xe4>)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6013      	str	r3, [r2, #0]
            ObjDicList->pNext = NULL;
 8006150:	4b31      	ldr	r3, [pc, #196]	; (8006218 <COE_AddObjectToDic+0xe4>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2200      	movs	r2, #0
 8006156:	605a      	str	r2, [r3, #4]
            ObjDicList->pPrev = NULL;
 8006158:	4b2f      	ldr	r3, [pc, #188]	; (8006218 <COE_AddObjectToDic+0xe4>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2200      	movs	r2, #0
 800615e:	601a      	str	r2, [r3, #0]
            return 0;
 8006160:	2300      	movs	r3, #0
 8006162:	e052      	b.n	800620a <COE_AddObjectToDic+0xd6>
        }
        else if(ObjDicList->Index > pNewObjEntry->Index)
 8006164:	4b2c      	ldr	r3, [pc, #176]	; (8006218 <COE_AddObjectToDic+0xe4>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	891a      	ldrh	r2, [r3, #8]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	891b      	ldrh	r3, [r3, #8]
 800616e:	429a      	cmp	r2, r3
 8006170:	d90f      	bls.n	8006192 <COE_AddObjectToDic+0x5e>
        {
            /*insert new object dictionary head*/
            pNewObjEntry->pPrev = NULL;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	601a      	str	r2, [r3, #0]
            pNewObjEntry->pNext = ObjDicList;
 8006178:	4b27      	ldr	r3, [pc, #156]	; (8006218 <COE_AddObjectToDic+0xe4>)
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	605a      	str	r2, [r3, #4]
            ObjDicList->pPrev = pNewObjEntry;
 8006180:	4b25      	ldr	r3, [pc, #148]	; (8006218 <COE_AddObjectToDic+0xe4>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	601a      	str	r2, [r3, #0]
            ObjDicList = pNewObjEntry;
 8006188:	4a23      	ldr	r2, [pc, #140]	; (8006218 <COE_AddObjectToDic+0xe4>)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6013      	str	r3, [r2, #0]
            return 0;
 800618e:	2300      	movs	r3, #0
 8006190:	e03b      	b.n	800620a <COE_AddObjectToDic+0xd6>
        }
        else
        {
            TOBJECT    OBJMEM * pDicEntry = ObjDicList;
 8006192:	4b21      	ldr	r3, [pc, #132]	; (8006218 <COE_AddObjectToDic+0xe4>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	60fb      	str	r3, [r7, #12]
            while(pDicEntry != NULL)
 8006198:	e033      	b.n	8006202 <COE_AddObjectToDic+0xce>
            {
                if(pDicEntry->Index == pNewObjEntry->Index)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	891a      	ldrh	r2, [r3, #8]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	891b      	ldrh	r3, [r3, #8]
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d101      	bne.n	80061aa <COE_AddObjectToDic+0x76>
                {
                    /*object already exists in object dictionary*/
                    return ALSTATUSCODE_UNSPECIFIEDERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	e02f      	b.n	800620a <COE_AddObjectToDic+0xd6>
                }
                else if(pDicEntry->Index > pNewObjEntry->Index)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	891a      	ldrh	r2, [r3, #8]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	891b      	ldrh	r3, [r3, #8]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d913      	bls.n	80061de <COE_AddObjectToDic+0xaa>
                {
                    pNewObjEntry->pPrev = pDicEntry->pPrev;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	601a      	str	r2, [r3, #0]
                    pNewObjEntry->pNext = pDicEntry;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	68fa      	ldr	r2, [r7, #12]
 80061c2:	605a      	str	r2, [r3, #4]

                    if(pDicEntry->pPrev != NULL)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d003      	beq.n	80061d4 <COE_AddObjectToDic+0xa0>
                        pDicEntry->pPrev->pNext = pNewObjEntry;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	605a      	str	r2, [r3, #4]

                    pDicEntry->pPrev = pNewObjEntry;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	601a      	str	r2, [r3, #0]

                    return 0;
 80061da:	2300      	movs	r3, #0
 80061dc:	e015      	b.n	800620a <COE_AddObjectToDic+0xd6>
                }
                else if(pDicEntry->pNext == NULL)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d10a      	bne.n	80061fc <COE_AddObjectToDic+0xc8>
                {
                    /*Last entry reached => add object to list tail*/
                    pDicEntry->pNext = pNewObjEntry;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	605a      	str	r2, [r3, #4]
                    pNewObjEntry->pPrev = pDicEntry;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	68fa      	ldr	r2, [r7, #12]
 80061f0:	601a      	str	r2, [r3, #0]
                    pNewObjEntry->pNext = NULL;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	605a      	str	r2, [r3, #4]
                    return 0;
 80061f8:	2300      	movs	r3, #0
 80061fa:	e006      	b.n	800620a <COE_AddObjectToDic+0xd6>
                }
                else
                {
                    /*The new object index is smaller than the current index. Get next object handle.*/
                    pDicEntry = pDicEntry->pNext;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	60fb      	str	r3, [r7, #12]
            while(pDicEntry != NULL)
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d1c8      	bne.n	800619a <COE_AddObjectToDic+0x66>
                }
            }
        }
    }
    return ALSTATUSCODE_UNSPECIFIEDERROR;
 8006208:	2301      	movs	r3, #1
}
 800620a:	4618      	mov	r0, r3
 800620c:	3714      	adds	r7, #20
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr
 8006216:	bf00      	nop
 8006218:	200005b0 	.word	0x200005b0

0800621c <COE_RemoveDicEntry>:
/**

 \brief    This function removes an object to the object dictionary
*////////////////////////////////////////////////////////////////////////////////////////
void COE_RemoveDicEntry(UINT16 index)
{
 800621c:	b480      	push	{r7}
 800621e:	b087      	sub	sp, #28
 8006220:	af00      	add	r7, sp, #0
 8006222:	4603      	mov	r3, r0
 8006224:	80fb      	strh	r3, [r7, #6]
    TOBJECT    OBJMEM * pDicEntry = ObjDicList;
 8006226:	4b1c      	ldr	r3, [pc, #112]	; (8006298 <COE_RemoveDicEntry+0x7c>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	617b      	str	r3, [r7, #20]

    while(pDicEntry != NULL)
 800622c:	e02a      	b.n	8006284 <COE_RemoveDicEntry+0x68>
    {
        if(pDicEntry->Index == index)
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	891b      	ldrh	r3, [r3, #8]
 8006232:	88fa      	ldrh	r2, [r7, #6]
 8006234:	429a      	cmp	r2, r3
 8006236:	d122      	bne.n	800627e <COE_RemoveDicEntry+0x62>
        {
            TOBJECT OBJMEM *pPrevEntry = pDicEntry->pPrev;
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	613b      	str	r3, [r7, #16]
            TOBJECT OBJMEM *pNextEntry = pDicEntry->pNext;
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	60fb      	str	r3, [r7, #12]

            if(pPrevEntry != NULL)
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d002      	beq.n	8006250 <COE_RemoveDicEntry+0x34>
                pPrevEntry->pNext = pNextEntry;
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	605a      	str	r2, [r3, #4]

            if(pNextEntry != NULL)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d002      	beq.n	800625c <COE_RemoveDicEntry+0x40>
                pNextEntry->pPrev = pPrevEntry;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	693a      	ldr	r2, [r7, #16]
 800625a:	601a      	str	r2, [r3, #0]

            pDicEntry->pPrev = NULL;
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	2200      	movs	r2, #0
 8006260:	601a      	str	r2, [r3, #0]
            pDicEntry->pNext = NULL;
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	2200      	movs	r2, #0
 8006266:	605a      	str	r2, [r3, #4]
            /*Update Object dictionary pointer if list head was removed*/
            if(pDicEntry->Index == ObjDicList->Index)
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	891a      	ldrh	r2, [r3, #8]
 800626c:	4b0a      	ldr	r3, [pc, #40]	; (8006298 <COE_RemoveDicEntry+0x7c>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	891b      	ldrh	r3, [r3, #8]
 8006272:	429a      	cmp	r2, r3
 8006274:	d10a      	bne.n	800628c <COE_RemoveDicEntry+0x70>
            {
                ObjDicList = pNextEntry;
 8006276:	4a08      	ldr	r2, [pc, #32]	; (8006298 <COE_RemoveDicEntry+0x7c>)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6013      	str	r3, [r2, #0]
            }
            return;
 800627c:	e006      	b.n	800628c <COE_RemoveDicEntry+0x70>
        }

        pDicEntry = pDicEntry->pNext;
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	617b      	str	r3, [r7, #20]
    while(pDicEntry != NULL)
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d1d1      	bne.n	800622e <COE_RemoveDicEntry+0x12>
 800628a:	e000      	b.n	800628e <COE_RemoveDicEntry+0x72>
            return;
 800628c:	bf00      	nop
    }
}
 800628e:	371c      	adds	r7, #28
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr
 8006298:	200005b0 	.word	0x200005b0

0800629c <COE_ClearObjDictionary>:
/**

 \brief    This function clear the object dictionary
*////////////////////////////////////////////////////////////////////////////////////////
void COE_ClearObjDictionary(void)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b082      	sub	sp, #8
 80062a0:	af00      	add	r7, sp, #0
    TOBJECT OBJMEM * pObjEntry = (TOBJECT OBJMEM *) ObjDicList;
 80062a2:	4b0d      	ldr	r3, [pc, #52]	; (80062d8 <COE_ClearObjDictionary+0x3c>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	607b      	str	r3, [r7, #4]
    UINT16 Index = 0;
 80062a8:	2300      	movs	r3, #0
 80062aa:	807b      	strh	r3, [r7, #2]

    while(pObjEntry != NULL)
 80062ac:	e009      	b.n	80062c2 <COE_ClearObjDictionary+0x26>
    {
        Index = pObjEntry->Index;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	891b      	ldrh	r3, [r3, #8]
 80062b2:	807b      	strh	r3, [r7, #2]
        pObjEntry = pObjEntry->pNext;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	607b      	str	r3, [r7, #4]

        COE_RemoveDicEntry(Index);
 80062ba:	887b      	ldrh	r3, [r7, #2]
 80062bc:	4618      	mov	r0, r3
 80062be:	f7ff ffad 	bl	800621c <COE_RemoveDicEntry>
    while(pObjEntry != NULL)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d1f2      	bne.n	80062ae <COE_ClearObjDictionary+0x12>
    }
    ObjDicList = NULL;
 80062c8:	4b03      	ldr	r3, [pc, #12]	; (80062d8 <COE_ClearObjDictionary+0x3c>)
 80062ca:	2200      	movs	r2, #0
 80062cc:	601a      	str	r2, [r3, #0]
}
 80062ce:	bf00      	nop
 80062d0:	3708      	adds	r7, #8
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	200005b0 	.word	0x200005b0

080062dc <AddObjectsToObjDictionary>:


UINT16 AddObjectsToObjDictionary(TOBJECT OBJMEM * pObjEntry)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
    UINT16 result = 0;
 80062e4:	2300      	movs	r3, #0
 80062e6:	81fb      	strh	r3, [r7, #14]
    TOBJECT OBJMEM * pEntry = (TOBJECT OBJMEM *)pObjEntry;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	60bb      	str	r3, [r7, #8]

    while(pEntry->Index != 0xFFFF)
 80062ec:	e00c      	b.n	8006308 <AddObjectsToObjDictionary+0x2c>
    {
        result = COE_AddObjectToDic(pEntry);
 80062ee:	68b8      	ldr	r0, [r7, #8]
 80062f0:	f7ff ff20 	bl	8006134 <COE_AddObjectToDic>
 80062f4:	4603      	mov	r3, r0
 80062f6:	81fb      	strh	r3, [r7, #14]

        if(result != 0)
 80062f8:	89fb      	ldrh	r3, [r7, #14]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d001      	beq.n	8006302 <AddObjectsToObjDictionary+0x26>
            return result;
 80062fe:	89fb      	ldrh	r3, [r7, #14]
 8006300:	e009      	b.n	8006316 <AddObjectsToObjDictionary+0x3a>

        pEntry++;
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	3328      	adds	r3, #40	; 0x28
 8006306:	60bb      	str	r3, [r7, #8]
    while(pEntry->Index != 0xFFFF)
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	891b      	ldrh	r3, [r3, #8]
 800630c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006310:	4293      	cmp	r3, r2
 8006312:	d1ec      	bne.n	80062ee <AddObjectsToObjDictionary+0x12>
    }

    return result;
 8006314:	89fb      	ldrh	r3, [r7, #14]

}
 8006316:	4618      	mov	r0, r3
 8006318:	3710      	adds	r7, #16
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
	...

08006320 <COE_ObjDictionaryInit>:
            ALSTATUSCODE_XX create object dictionary failed

 \brief    This function initialize the object dictionary
*////////////////////////////////////////////////////////////////////////////////////////
UINT16 COE_ObjDictionaryInit(void)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b082      	sub	sp, #8
 8006324:	af00      	add	r7, sp, #0
    UINT16 result = 0;
 8006326:	2300      	movs	r3, #0
 8006328:	80fb      	strh	r3, [r7, #6]

    /*Reset object dictionary pointer*/
    ObjDicList = NULL;
 800632a:	4b0b      	ldr	r3, [pc, #44]	; (8006358 <COE_ObjDictionaryInit+0x38>)
 800632c:	2200      	movs	r2, #0
 800632e:	601a      	str	r2, [r3, #0]

    result = AddObjectsToObjDictionary((TOBJECT OBJMEM *) GenObjDic);
 8006330:	480a      	ldr	r0, [pc, #40]	; (800635c <COE_ObjDictionaryInit+0x3c>)
 8006332:	f7ff ffd3 	bl	80062dc <AddObjectsToObjDictionary>
 8006336:	4603      	mov	r3, r0
 8006338:	80fb      	strh	r3, [r7, #6]

    if(result != 0)
 800633a:	88fb      	ldrh	r3, [r7, #6]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d001      	beq.n	8006344 <COE_ObjDictionaryInit+0x24>
        return result;
 8006340:	88fb      	ldrh	r3, [r7, #6]
 8006342:	e005      	b.n	8006350 <COE_ObjDictionaryInit+0x30>
    if(ApplicationObjDic != NULL)
    {
        result = AddObjectsToObjDictionary((TOBJECT OBJMEM *) ApplicationObjDic);
 8006344:	4806      	ldr	r0, [pc, #24]	; (8006360 <COE_ObjDictionaryInit+0x40>)
 8006346:	f7ff ffc9 	bl	80062dc <AddObjectsToObjDictionary>
 800634a:	4603      	mov	r3, r0
 800634c:	80fb      	strh	r3, [r7, #6]
    }

    return result;
 800634e:	88fb      	ldrh	r3, [r7, #6]
}
 8006350:	4618      	mov	r0, r3
 8006352:	3708      	adds	r7, #8
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	200005b0 	.word	0x200005b0
 800635c:	2000019c 	.word	0x2000019c
 8006360:	20000048 	.word	0x20000048

08006364 <COE_Main>:
 \brief    is called for background calculations which should not influence the
             ECAT_Application in synchronous modes
*////////////////////////////////////////////////////////////////////////////////////////

void COE_Main(void)
{
 8006364:	b5b0      	push	{r4, r5, r7, lr}
 8006366:	b084      	sub	sp, #16
 8006368:	af02      	add	r7, sp, #8
     UINT8 abort = 0;
 800636a:	2300      	movs	r3, #0
 800636c:	71fb      	strb	r3, [r7, #7]
    if(pSdoPendFunc != NULL)
 800636e:	4b2b      	ldr	r3, [pc, #172]	; (800641c <COE_Main+0xb8>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d04e      	beq.n	8006414 <COE_Main+0xb0>
    {
        abort = pSdoPendFunc(u16StoreIndex,u8StoreSubindex,u32StoreDataSize,pStoreData,bStoreCompleteAccess);
 8006376:	4b29      	ldr	r3, [pc, #164]	; (800641c <COE_Main+0xb8>)
 8006378:	681c      	ldr	r4, [r3, #0]
 800637a:	4b29      	ldr	r3, [pc, #164]	; (8006420 <COE_Main+0xbc>)
 800637c:	8818      	ldrh	r0, [r3, #0]
 800637e:	4b29      	ldr	r3, [pc, #164]	; (8006424 <COE_Main+0xc0>)
 8006380:	7819      	ldrb	r1, [r3, #0]
 8006382:	4b29      	ldr	r3, [pc, #164]	; (8006428 <COE_Main+0xc4>)
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	4b29      	ldr	r3, [pc, #164]	; (800642c <COE_Main+0xc8>)
 8006388:	681d      	ldr	r5, [r3, #0]
 800638a:	4b29      	ldr	r3, [pc, #164]	; (8006430 <COE_Main+0xcc>)
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	9300      	str	r3, [sp, #0]
 8006390:	462b      	mov	r3, r5
 8006392:	47a0      	blx	r4
 8006394:	4603      	mov	r3, r0
 8006396:	71fb      	strb	r3, [r7, #7]

        if(abort != ABORTIDX_WORKING)
 8006398:	79fb      	ldrb	r3, [r7, #7]
 800639a:	2bff      	cmp	r3, #255	; 0xff
 800639c:	d03a      	beq.n	8006414 <COE_Main+0xb0>
        {
            switch(u8PendingSdo)
 800639e:	4b25      	ldr	r3, [pc, #148]	; (8006434 <COE_Main+0xd0>)
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	2b04      	cmp	r3, #4
 80063a4:	dc21      	bgt.n	80063ea <COE_Main+0x86>
 80063a6:	2b03      	cmp	r3, #3
 80063a8:	da16      	bge.n	80063d8 <COE_Main+0x74>
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d00d      	beq.n	80063ca <COE_Main+0x66>
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	d11b      	bne.n	80063ea <COE_Main+0x86>
            {
                case SDO_PENDING_SEG_WRITE:
                    if(pSdoSegData)
 80063b2:	4b21      	ldr	r3, [pc, #132]	; (8006438 <COE_Main+0xd4>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d007      	beq.n	80063ca <COE_Main+0x66>
                    {
                        /* the allocated buffer can be released */
                        FREEMEM( (UINT16 VARMEM *) pSdoSegData );
 80063ba:	4b1f      	ldr	r3, [pc, #124]	; (8006438 <COE_Main+0xd4>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4618      	mov	r0, r3
 80063c0:	f006 fd2a 	bl	800ce18 <free>
                        pSdoSegData = NULL;
 80063c4:	4b1c      	ldr	r3, [pc, #112]	; (8006438 <COE_Main+0xd4>)
 80063c6:	2200      	movs	r2, #0
 80063c8:	601a      	str	r2, [r3, #0]
                    }
                case SDO_PENDING_WRITE:
                     /*send SDO Download Response*/
                    SDOS_SdoRes(abort, 0, NULL);
 80063ca:	79fb      	ldrb	r3, [r7, #7]
 80063cc:	2200      	movs	r2, #0
 80063ce:	2100      	movs	r1, #0
 80063d0:	4618      	mov	r0, r3
 80063d2:	f006 fa63 	bl	800c89c <SDOS_SdoRes>
                break;
 80063d6:	e008      	b.n	80063ea <COE_Main+0x86>

                case SDO_PENDING_SEG_READ:
                case SDO_PENDING_READ:
                    /* send SDO upload response */
                      SDOS_SdoRes(abort, u32StoreDataSize, pStoreData);
 80063d8:	4b13      	ldr	r3, [pc, #76]	; (8006428 <COE_Main+0xc4>)
 80063da:	6819      	ldr	r1, [r3, #0]
 80063dc:	4b13      	ldr	r3, [pc, #76]	; (800642c <COE_Main+0xc8>)
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	79fb      	ldrb	r3, [r7, #7]
 80063e2:	4618      	mov	r0, r3
 80063e4:	f006 fa5a 	bl	800c89c <SDOS_SdoRes>
                    break;
 80063e8:	bf00      	nop

            }

            u8PendingSdo = 0;
 80063ea:	4b12      	ldr	r3, [pc, #72]	; (8006434 <COE_Main+0xd0>)
 80063ec:	2200      	movs	r2, #0
 80063ee:	701a      	strb	r2, [r3, #0]
            u16StoreIndex = 0;
 80063f0:	4b0b      	ldr	r3, [pc, #44]	; (8006420 <COE_Main+0xbc>)
 80063f2:	2200      	movs	r2, #0
 80063f4:	801a      	strh	r2, [r3, #0]
            u8StoreSubindex = 0;
 80063f6:	4b0b      	ldr	r3, [pc, #44]	; (8006424 <COE_Main+0xc0>)
 80063f8:	2200      	movs	r2, #0
 80063fa:	701a      	strb	r2, [r3, #0]
            u32StoreDataSize = 0;
 80063fc:	4b0a      	ldr	r3, [pc, #40]	; (8006428 <COE_Main+0xc4>)
 80063fe:	2200      	movs	r2, #0
 8006400:	601a      	str	r2, [r3, #0]
            pStoreData = NULL;
 8006402:	4b0a      	ldr	r3, [pc, #40]	; (800642c <COE_Main+0xc8>)
 8006404:	2200      	movs	r2, #0
 8006406:	601a      	str	r2, [r3, #0]
            bStoreCompleteAccess = 0;
 8006408:	4b09      	ldr	r3, [pc, #36]	; (8006430 <COE_Main+0xcc>)
 800640a:	2200      	movs	r2, #0
 800640c:	701a      	strb	r2, [r3, #0]
            pSdoPendFunc = NULL;
 800640e:	4b03      	ldr	r3, [pc, #12]	; (800641c <COE_Main+0xb8>)
 8006410:	2200      	movs	r2, #0
 8006412:	601a      	str	r2, [r3, #0]
        }
    }
}
 8006414:	bf00      	nop
 8006416:	3708      	adds	r7, #8
 8006418:	46bd      	mov	sp, r7
 800641a:	bdb0      	pop	{r4, r5, r7, pc}
 800641c:	20000ba0 	.word	0x20000ba0
 8006420:	20000b94 	.word	0x20000b94
 8006424:	20000b92 	.word	0x20000b92
 8006428:	20000b98 	.word	0x20000b98
 800642c:	20000b9c 	.word	0x20000b9c
 8006430:	20000b91 	.word	0x20000b91
 8006434:	20000b90 	.word	0x20000b90
 8006438:	20000bb4 	.word	0x20000bb4

0800643c <PDO_InputMapping>:
/**
\brief      This function will copies the inputs from the local memory to the ESC memory
            to the hardware
*////////////////////////////////////////////////////////////////////////////////////////
void PDO_InputMapping(void)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	af00      	add	r7, sp, #0
    APPL_InputMapping((UINT16*)aPdInputData);
 8006440:	4806      	ldr	r0, [pc, #24]	; (800645c <PDO_InputMapping+0x20>)
 8006442:	f7ff fd6f 	bl	8005f24 <APPL_InputMapping>
    HW_EscWriteIsr(((MEM_ADDR *) aPdInputData), nEscAddrInputData, nPdInputSize );
 8006446:	4b06      	ldr	r3, [pc, #24]	; (8006460 <PDO_InputMapping+0x24>)
 8006448:	881b      	ldrh	r3, [r3, #0]
 800644a:	4a06      	ldr	r2, [pc, #24]	; (8006464 <PDO_InputMapping+0x28>)
 800644c:	8812      	ldrh	r2, [r2, #0]
 800644e:	4619      	mov	r1, r3
 8006450:	4802      	ldr	r0, [pc, #8]	; (800645c <PDO_InputMapping+0x20>)
 8006452:	f003 f846 	bl	80094e2 <HW_EscWriteIsr>
}
 8006456:	bf00      	nop
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	20000604 	.word	0x20000604
 8006460:	200006b8 	.word	0x200006b8
 8006464:	200006aa 	.word	0x200006aa

08006468 <PDO_OutputMapping>:
\brief    This function will copies the outputs from the ESC memory to the local memory
          to the hardware. This function is only called in case of an SM2 
          (output process data) event.
*////////////////////////////////////////////////////////////////////////////////////////
void PDO_OutputMapping(void)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	af00      	add	r7, sp, #0

    HW_EscReadIsr(((MEM_ADDR *)aPdOutputData), nEscAddrOutputData, nPdOutputSize );
 800646c:	4b06      	ldr	r3, [pc, #24]	; (8006488 <PDO_OutputMapping+0x20>)
 800646e:	881b      	ldrh	r3, [r3, #0]
 8006470:	4a06      	ldr	r2, [pc, #24]	; (800648c <PDO_OutputMapping+0x24>)
 8006472:	8812      	ldrh	r2, [r2, #0]
 8006474:	4619      	mov	r1, r3
 8006476:	4806      	ldr	r0, [pc, #24]	; (8006490 <PDO_OutputMapping+0x28>)
 8006478:	f002 ffd6 	bl	8009428 <HW_EscReadIsr>

    APPL_OutputMapping((UINT16*) aPdOutputData);
 800647c:	4804      	ldr	r0, [pc, #16]	; (8006490 <PDO_OutputMapping+0x28>)
 800647e:	f7ff fd63 	bl	8005f48 <APPL_OutputMapping>
}
 8006482:	bf00      	nop
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	200006b6 	.word	0x200006b6
 800648c:	200006ac 	.word	0x200006ac
 8006490:	200005c0 	.word	0x200005c0

08006494 <ECAT_CheckTimer>:
 \brief interrupts. In this case a local timer register is checked every ECAT_Main cycle
 \brief and the function is triggered if 1 ms is elapsed
 *////////////////////////////////////////////////////////////////////////////////////////

void ECAT_CheckTimer(void)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	af00      	add	r7, sp, #0
    if(sSyncManOutPar.u32CycleTime == 0)
 8006498:	4b0f      	ldr	r3, [pc, #60]	; (80064d8 <ECAT_CheckTimer+0x44>)
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d105      	bne.n	80064ac <ECAT_CheckTimer+0x18>
    {
        u16BusCycleCntMs++;
 80064a0:	4b0e      	ldr	r3, [pc, #56]	; (80064dc <ECAT_CheckTimer+0x48>)
 80064a2:	881b      	ldrh	r3, [r3, #0]
 80064a4:	3301      	adds	r3, #1
 80064a6:	b29a      	uxth	r2, r3
 80064a8:	4b0c      	ldr	r3, [pc, #48]	; (80064dc <ECAT_CheckTimer+0x48>)
 80064aa:	801a      	strh	r2, [r3, #0]
    }

    /*decrement the state transition timeout counter*/
    if(bEcatWaitForAlControlRes &&  (EsmTimeoutCounter > 0))
 80064ac:	4b0c      	ldr	r3, [pc, #48]	; (80064e0 <ECAT_CheckTimer+0x4c>)
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d00d      	beq.n	80064d0 <ECAT_CheckTimer+0x3c>
 80064b4:	4b0b      	ldr	r3, [pc, #44]	; (80064e4 <ECAT_CheckTimer+0x50>)
 80064b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	dd08      	ble.n	80064d0 <ECAT_CheckTimer+0x3c>
    {
        EsmTimeoutCounter--;
 80064be:	4b09      	ldr	r3, [pc, #36]	; (80064e4 <ECAT_CheckTimer+0x50>)
 80064c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	3b01      	subs	r3, #1
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	b21a      	sxth	r2, r3
 80064cc:	4b05      	ldr	r3, [pc, #20]	; (80064e4 <ECAT_CheckTimer+0x50>)
 80064ce:	801a      	strh	r2, [r3, #0]
    }



    DC_CheckWatchdog();
 80064d0:	f002 fc56 	bl	8008d80 <DC_CheckWatchdog>
}
 80064d4:	bf00      	nop
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	20000b08 	.word	0x20000b08
 80064dc:	200005b4 	.word	0x200005b4
 80064e0:	200006a7 	.word	0x200006a7
 80064e4:	20000686 	.word	0x20000686

080064e8 <HandleBusCycleCalculation>:
/////////////////////////////////////////////////////////////////////////////////////////
/**
 \brief    This function is called from the PDI_Isr and is used to calculate the bus cycle time 
  *////////////////////////////////////////////////////////////////////////////////////////
void HandleBusCycleCalculation(void)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
    /*calculate the cycle time if device is in SM Sync mode and Cycle time was not calculated yet*/
    if ( !bDcSyncActive && bEscIntEnabled)
 80064ee:	4b23      	ldr	r3, [pc, #140]	; (800657c <HandleBusCycleCalculation+0x94>)
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d13e      	bne.n	8006574 <HandleBusCycleCalculation+0x8c>
 80064f6:	4b22      	ldr	r3, [pc, #136]	; (8006580 <HandleBusCycleCalculation+0x98>)
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d03a      	beq.n	8006574 <HandleBusCycleCalculation+0x8c>
    {
        BOOL bTiggerCalcCycleTime = FALSE;
 80064fe:	2300      	movs	r3, #0
 8006500:	73fb      	strb	r3, [r7, #15]

        if(sSyncManOutPar.u16GetCycleTime == 1)
 8006502:	4b20      	ldr	r3, [pc, #128]	; (8006584 <HandleBusCycleCalculation+0x9c>)
 8006504:	8b9b      	ldrh	r3, [r3, #28]
 8006506:	2b01      	cmp	r3, #1
 8006508:	d101      	bne.n	800650e <HandleBusCycleCalculation+0x26>
            bTiggerCalcCycleTime = TRUE;
 800650a:	2301      	movs	r3, #1
 800650c:	73fb      	strb	r3, [r7, #15]
        if(bTiggerCalcCycleTime)
 800650e:	7bfb      	ldrb	r3, [r7, #15]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d017      	beq.n	8006544 <HandleBusCycleCalculation+0x5c>
        {
            /*get bus cycle time triggered */
            sSyncManOutPar.u32CycleTime = 0;
 8006514:	4b1b      	ldr	r3, [pc, #108]	; (8006584 <HandleBusCycleCalculation+0x9c>)
 8006516:	2200      	movs	r2, #0
 8006518:	605a      	str	r2, [r3, #4]
            sSyncManOutPar.u16GetCycleTime = 0;
 800651a:	4b1a      	ldr	r3, [pc, #104]	; (8006584 <HandleBusCycleCalculation+0x9c>)
 800651c:	2200      	movs	r2, #0
 800651e:	839a      	strh	r2, [r3, #28]

            sSyncManInPar.u32CycleTime  = 0;
 8006520:	4b19      	ldr	r3, [pc, #100]	; (8006588 <HandleBusCycleCalculation+0xa0>)
 8006522:	2200      	movs	r2, #0
 8006524:	605a      	str	r2, [r3, #4]
            sSyncManInPar.u16GetCycleTime = 0;
 8006526:	4b18      	ldr	r3, [pc, #96]	; (8006588 <HandleBusCycleCalculation+0xa0>)
 8006528:	2200      	movs	r2, #0
 800652a:	839a      	strh	r2, [r3, #28]
            
            u16BusCycleCntMs = 0;
 800652c:	4b17      	ldr	r3, [pc, #92]	; (800658c <HandleBusCycleCalculation+0xa4>)
 800652e:	2200      	movs	r2, #0
 8006530:	801a      	strh	r2, [r3, #0]
            bCycleTimeMeasurementStarted = TRUE;
 8006532:	4b17      	ldr	r3, [pc, #92]	; (8006590 <HandleBusCycleCalculation+0xa8>)
 8006534:	2201      	movs	r2, #1
 8006536:	701a      	strb	r2, [r3, #0]
            StartTimerCnt = (UINT32) HW_GetTimer();
 8006538:	f7fa fc30 	bl	8000d9c <timer_Get_Value>
 800653c:	4603      	mov	r3, r0
 800653e:	4a15      	ldr	r2, [pc, #84]	; (8006594 <HandleBusCycleCalculation+0xac>)
 8006540:	6013      	str	r3, [r2, #0]
/*ECATCHANGE_END(V5.11) ECAT3*/
            /* CiA402 Motion controller cycle time is only set if DC Synchronisation is active*/
            }
        }
    }
}
 8006542:	e017      	b.n	8006574 <HandleBusCycleCalculation+0x8c>
            if(bCycleTimeMeasurementStarted == TRUE)
 8006544:	4b12      	ldr	r3, [pc, #72]	; (8006590 <HandleBusCycleCalculation+0xa8>)
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	2b01      	cmp	r3, #1
 800654a:	d113      	bne.n	8006574 <HandleBusCycleCalculation+0x8c>
                UINT32 CurTimerCnt = (UINT32)HW_GetTimer();
 800654c:	f7fa fc26 	bl	8000d9c <timer_Get_Value>
 8006550:	60b8      	str	r0, [r7, #8]
                UINT32 CalcCycleTime = 0;
 8006552:	2300      	movs	r3, #0
 8006554:	607b      	str	r3, [r7, #4]
                sSyncManOutPar.u32CycleTime = CalcCycleTime;
 8006556:	4a0b      	ldr	r2, [pc, #44]	; (8006584 <HandleBusCycleCalculation+0x9c>)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6053      	str	r3, [r2, #4]
                sSyncManInPar.u32CycleTime  = CalcCycleTime;
 800655c:	4a0a      	ldr	r2, [pc, #40]	; (8006588 <HandleBusCycleCalculation+0xa0>)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6053      	str	r3, [r2, #4]
                u16BusCycleCntMs = 0;
 8006562:	4b0a      	ldr	r3, [pc, #40]	; (800658c <HandleBusCycleCalculation+0xa4>)
 8006564:	2200      	movs	r2, #0
 8006566:	801a      	strh	r2, [r3, #0]
                StartTimerCnt = 0;
 8006568:	4b0a      	ldr	r3, [pc, #40]	; (8006594 <HandleBusCycleCalculation+0xac>)
 800656a:	2200      	movs	r2, #0
 800656c:	601a      	str	r2, [r3, #0]
                bCycleTimeMeasurementStarted = FALSE;
 800656e:	4b08      	ldr	r3, [pc, #32]	; (8006590 <HandleBusCycleCalculation+0xa8>)
 8006570:	2200      	movs	r2, #0
 8006572:	701a      	strb	r2, [r3, #0]
}
 8006574:	bf00      	nop
 8006576:	3710      	adds	r7, #16
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}
 800657c:	20000684 	.word	0x20000684
 8006580:	200006a0 	.word	0x200006a0
 8006584:	20000b08 	.word	0x20000b08
 8006588:	20000b4c 	.word	0x20000b4c
 800658c:	200005b4 	.word	0x200005b4
 8006590:	200005bc 	.word	0x200005bc
 8006594:	200005b8 	.word	0x200005b8

08006598 <PDI_Isr>:
/*ECATCHANGE_END(V5.11) ECAT6*/

void PDI_Isr(void)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
    if(bEscIntEnabled)
 800659e:	4b46      	ldr	r3, [pc, #280]	; (80066b8 <PDI_Isr+0x120>)
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	f000 8084 	beq.w	80066b0 <PDI_Isr+0x118>
    {
        /* get the AL event register */
        UINT16  ALEvent = HW_GetALEventRegister_Isr();
 80065a8:	f002 ff06 	bl	80093b8 <HW_GetALEventRegister_Isr>
 80065ac:	4603      	mov	r3, r0
 80065ae:	80fb      	strh	r3, [r7, #6]
        ALEvent = SWAPWORD(ALEvent);

        if ( ALEvent & PROCESS_OUTPUT_EVENT )
 80065b0:	88fb      	ldrh	r3, [r7, #6]
 80065b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d034      	beq.n	8006624 <PDI_Isr+0x8c>
        {
            if(bDcRunning && bDcSyncActive)
 80065ba:	4b40      	ldr	r3, [pc, #256]	; (80066bc <PDI_Isr+0x124>)
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d006      	beq.n	80065d0 <PDI_Isr+0x38>
 80065c2:	4b3f      	ldr	r3, [pc, #252]	; (80066c0 <PDI_Isr+0x128>)
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d002      	beq.n	80065d0 <PDI_Isr+0x38>
            {
                /* Reset SM/Sync0 counter. Will be incremented on every Sync0 event*/
                u16SmSync0Counter = 0;
 80065ca:	4b3e      	ldr	r3, [pc, #248]	; (80066c4 <PDI_Isr+0x12c>)
 80065cc:	2200      	movs	r2, #0
 80065ce:	801a      	strh	r2, [r3, #0]
            }
            if(sSyncManOutPar.u16SmEventMissedCounter > 0)
 80065d0:	4b3d      	ldr	r3, [pc, #244]	; (80066c8 <PDI_Isr+0x130>)
 80065d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d005      	beq.n	80065e4 <PDI_Isr+0x4c>
                sSyncManOutPar.u16SmEventMissedCounter--;
 80065d8:	4b3b      	ldr	r3, [pc, #236]	; (80066c8 <PDI_Isr+0x130>)
 80065da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065dc:	3b01      	subs	r3, #1
 80065de:	b29a      	uxth	r2, r3
 80065e0:	4b39      	ldr	r3, [pc, #228]	; (80066c8 <PDI_Isr+0x130>)
 80065e2:	851a      	strh	r2, [r3, #40]	; 0x28


/*ECATCHANGE_START(V5.11) ECAT6*/
            //calculate the bus cycle time if required
            HandleBusCycleCalculation();
 80065e4:	f7ff ff80 	bl	80064e8 <HandleBusCycleCalculation>
/*ECATCHANGE_END(V5.11) ECAT6*/

        /* Outputs were updated, set flag for watchdog monitoring */
        bEcatFirstOutputsReceived = TRUE;
 80065e8:	4b38      	ldr	r3, [pc, #224]	; (80066cc <PDI_Isr+0x134>)
 80065ea:	2201      	movs	r2, #1
 80065ec:	701a      	strb	r2, [r3, #0]


        /*
            handle output process data event
        */
        if ( bEcatOutputUpdateRunning )
 80065ee:	4b38      	ldr	r3, [pc, #224]	; (80066d0 <PDI_Isr+0x138>)
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d002      	beq.n	80065fc <PDI_Isr+0x64>
        {
            /* slave is in OP, update the outputs */
            PDO_OutputMapping();
 80065f6:	f7ff ff37 	bl	8006468 <PDO_OutputMapping>
 80065fa:	e013      	b.n	8006624 <PDI_Isr+0x8c>
        }
        else
        {
            /* Just acknowledge the process data event in the INIT,PreOP and SafeOP state */
            HW_EscReadWordIsr(u16dummy,nEscAddrOutputData);
 80065fc:	4b35      	ldr	r3, [pc, #212]	; (80066d4 <PDI_Isr+0x13c>)
 80065fe:	881b      	ldrh	r3, [r3, #0]
 8006600:	2202      	movs	r2, #2
 8006602:	4619      	mov	r1, r3
 8006604:	4834      	ldr	r0, [pc, #208]	; (80066d8 <PDI_Isr+0x140>)
 8006606:	f002 ff0f 	bl	8009428 <HW_EscReadIsr>
            HW_EscReadWordIsr(u16dummy,(nEscAddrOutputData+nPdOutputSize-2));
 800660a:	4b32      	ldr	r3, [pc, #200]	; (80066d4 <PDI_Isr+0x13c>)
 800660c:	881a      	ldrh	r2, [r3, #0]
 800660e:	4b33      	ldr	r3, [pc, #204]	; (80066dc <PDI_Isr+0x144>)
 8006610:	881b      	ldrh	r3, [r3, #0]
 8006612:	4413      	add	r3, r2
 8006614:	b29b      	uxth	r3, r3
 8006616:	3b02      	subs	r3, #2
 8006618:	b29b      	uxth	r3, r3
 800661a:	2202      	movs	r2, #2
 800661c:	4619      	mov	r1, r3
 800661e:	482e      	ldr	r0, [pc, #184]	; (80066d8 <PDI_Isr+0x140>)
 8006620:	f002 ff02 	bl	8009428 <HW_EscReadIsr>
        }
        }

/*ECATCHANGE_START(V5.11) ECAT4*/
        if (( ALEvent & PROCESS_INPUT_EVENT ) && (nPdOutputSize == 0))
 8006624:	88fb      	ldrh	r3, [r7, #6]
 8006626:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800662a:	2b00      	cmp	r3, #0
 800662c:	d005      	beq.n	800663a <PDI_Isr+0xa2>
 800662e:	4b2b      	ldr	r3, [pc, #172]	; (80066dc <PDI_Isr+0x144>)
 8006630:	881b      	ldrh	r3, [r3, #0]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d101      	bne.n	800663a <PDI_Isr+0xa2>
        {
            //calculate the bus cycle time if required
            HandleBusCycleCalculation();
 8006636:	f7ff ff57 	bl	80064e8 <HandleBusCycleCalculation>
/*ECATCHANGE_END(V5.11) ECAT4*/

        /*
            Call ECAT_Application() in SM Sync mode
        */
        if (sSyncManOutPar.u16SyncType == SYNCTYPE_SM_SYNCHRON)
 800663a:	4b23      	ldr	r3, [pc, #140]	; (80066c8 <PDI_Isr+0x130>)
 800663c:	885b      	ldrh	r3, [r3, #2]
 800663e:	2b01      	cmp	r3, #1
 8006640:	d101      	bne.n	8006646 <PDI_Isr+0xae>
        {
            /* The Application is synchronized to process data Sync Manager event*/
            ECAT_Application();
 8006642:	f000 f99b 	bl	800697c <ECAT_Application>
        }

    if ( bEcatInputUpdateRunning 
 8006646:	4b26      	ldr	r3, [pc, #152]	; (80066e0 <PDI_Isr+0x148>)
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d009      	beq.n	8006662 <PDI_Isr+0xca>
/*ECATCHANGE_START(V5.11) ESM7*/
       && ((sSyncManInPar.u16SyncType == SYNCTYPE_SM_SYNCHRON) || (sSyncManInPar.u16SyncType == SYNCTYPE_SM2_SYNCHRON))
 800664e:	4b25      	ldr	r3, [pc, #148]	; (80066e4 <PDI_Isr+0x14c>)
 8006650:	885b      	ldrh	r3, [r3, #2]
 8006652:	2b01      	cmp	r3, #1
 8006654:	d003      	beq.n	800665e <PDI_Isr+0xc6>
 8006656:	4b23      	ldr	r3, [pc, #140]	; (80066e4 <PDI_Isr+0x14c>)
 8006658:	885b      	ldrh	r3, [r3, #2]
 800665a:	2b22      	cmp	r3, #34	; 0x22
 800665c:	d101      	bne.n	8006662 <PDI_Isr+0xca>
/*ECATCHANGE_END(V5.11) ESM7*/
        )
    {
        /* EtherCAT slave is at least in SAFE-OPERATIONAL, update inputs */
        PDO_InputMapping();
 800665e:	f7ff feed 	bl	800643c <PDO_InputMapping>

    /*
      Check if cycle exceed
    */
    /*if next SM event was triggered during runtime increment cycle exceed counter*/
    ALEvent = HW_GetALEventRegister_Isr();
 8006662:	f002 fea9 	bl	80093b8 <HW_GetALEventRegister_Isr>
 8006666:	4603      	mov	r3, r0
 8006668:	80fb      	strh	r3, [r7, #6]
    ALEvent = SWAPWORD(ALEvent);

    if ( ALEvent & PROCESS_OUTPUT_EVENT )
 800666a:	88fb      	ldrh	r3, [r7, #6]
 800666c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006670:	2b00      	cmp	r3, #0
 8006672:	d01d      	beq.n	80066b0 <PDI_Isr+0x118>
    {
        sSyncManOutPar.u16CycleExceededCounter++;
 8006674:	4b14      	ldr	r3, [pc, #80]	; (80066c8 <PDI_Isr+0x130>)
 8006676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006678:	3301      	adds	r3, #1
 800667a:	b29a      	uxth	r2, r3
 800667c:	4b12      	ldr	r3, [pc, #72]	; (80066c8 <PDI_Isr+0x130>)
 800667e:	855a      	strh	r2, [r3, #42]	; 0x2a
        sSyncManInPar.u16CycleExceededCounter = sSyncManOutPar.u16CycleExceededCounter;
 8006680:	4b11      	ldr	r3, [pc, #68]	; (80066c8 <PDI_Isr+0x130>)
 8006682:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8006684:	4b17      	ldr	r3, [pc, #92]	; (80066e4 <PDI_Isr+0x14c>)
 8006686:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Acknowledge the process data event*/
            HW_EscReadWordIsr(u16dummy,nEscAddrOutputData);
 8006688:	4b12      	ldr	r3, [pc, #72]	; (80066d4 <PDI_Isr+0x13c>)
 800668a:	881b      	ldrh	r3, [r3, #0]
 800668c:	2202      	movs	r2, #2
 800668e:	4619      	mov	r1, r3
 8006690:	4811      	ldr	r0, [pc, #68]	; (80066d8 <PDI_Isr+0x140>)
 8006692:	f002 fec9 	bl	8009428 <HW_EscReadIsr>
            HW_EscReadWordIsr(u16dummy,(nEscAddrOutputData+nPdOutputSize-2));
 8006696:	4b0f      	ldr	r3, [pc, #60]	; (80066d4 <PDI_Isr+0x13c>)
 8006698:	881a      	ldrh	r2, [r3, #0]
 800669a:	4b10      	ldr	r3, [pc, #64]	; (80066dc <PDI_Isr+0x144>)
 800669c:	881b      	ldrh	r3, [r3, #0]
 800669e:	4413      	add	r3, r2
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	3b02      	subs	r3, #2
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	2202      	movs	r2, #2
 80066a8:	4619      	mov	r1, r3
 80066aa:	480b      	ldr	r0, [pc, #44]	; (80066d8 <PDI_Isr+0x140>)
 80066ac:	f002 febc 	bl	8009428 <HW_EscReadIsr>
    }
    } //if(bEscIntEnabled)
}
 80066b0:	bf00      	nop
 80066b2:	3708      	adds	r7, #8
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}
 80066b8:	200006a0 	.word	0x200006a0
 80066bc:	20000688 	.word	0x20000688
 80066c0:	20000684 	.word	0x20000684
 80066c4:	2000068a 	.word	0x2000068a
 80066c8:	20000b08 	.word	0x20000b08
 80066cc:	20000682 	.word	0x20000682
 80066d0:	20000680 	.word	0x20000680
 80066d4:	200006b6 	.word	0x200006b6
 80066d8:	200006bc 	.word	0x200006bc
 80066dc:	200006ac 	.word	0x200006ac
 80066e0:	20000681 	.word	0x20000681
 80066e4:	20000b4c 	.word	0x20000b4c

080066e8 <Sync0_Isr>:

void Sync0_Isr(void)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b082      	sub	sp, #8
 80066ec:	af00      	add	r7, sp, #0
     Sync0WdCounter = 0;
 80066ee:	4b45      	ldr	r3, [pc, #276]	; (8006804 <Sync0_Isr+0x11c>)
 80066f0:	2200      	movs	r2, #0
 80066f2:	801a      	strh	r2, [r3, #0]

    if(bDcSyncActive)
 80066f4:	4b44      	ldr	r3, [pc, #272]	; (8006808 <Sync0_Isr+0x120>)
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d07f      	beq.n	80067fc <Sync0_Isr+0x114>
    {

        if ( bEcatInputUpdateRunning )
 80066fc:	4b43      	ldr	r3, [pc, #268]	; (800680c <Sync0_Isr+0x124>)
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d005      	beq.n	8006710 <Sync0_Isr+0x28>
        {
            LatchInputSync0Counter++;
 8006704:	4b42      	ldr	r3, [pc, #264]	; (8006810 <Sync0_Isr+0x128>)
 8006706:	881b      	ldrh	r3, [r3, #0]
 8006708:	3301      	adds	r3, #1
 800670a:	b29a      	uxth	r2, r3
 800670c:	4b40      	ldr	r3, [pc, #256]	; (8006810 <Sync0_Isr+0x128>)
 800670e:	801a      	strh	r2, [r3, #0]
        }

/*ECATCHANGE_START(V5.11) ECAT4*/
        if(u16SmSync0Value > 0)
 8006710:	4b40      	ldr	r3, [pc, #256]	; (8006814 <Sync0_Isr+0x12c>)
 8006712:	881b      	ldrh	r3, [r3, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d04e      	beq.n	80067b6 <Sync0_Isr+0xce>
        {
           /* Check if Sm-Sync sequence is invalid */
           if (u16SmSync0Counter > u16SmSync0Value)
 8006718:	4b3f      	ldr	r3, [pc, #252]	; (8006818 <Sync0_Isr+0x130>)
 800671a:	881a      	ldrh	r2, [r3, #0]
 800671c:	4b3d      	ldr	r3, [pc, #244]	; (8006814 <Sync0_Isr+0x12c>)
 800671e:	881b      	ldrh	r3, [r3, #0]
 8006720:	429a      	cmp	r2, r3
 8006722:	d923      	bls.n	800676c <Sync0_Isr+0x84>
           {
              /*ECATCHANGE_START(V5.11) COE3*/
              if ((nPdOutputSize > 0) && (sSyncManOutPar.u16SmEventMissedCounter <= sErrorSettings.u16SyncErrorCounterLimit))
 8006724:	4b3d      	ldr	r3, [pc, #244]	; (800681c <Sync0_Isr+0x134>)
 8006726:	881b      	ldrh	r3, [r3, #0]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d00b      	beq.n	8006744 <Sync0_Isr+0x5c>
 800672c:	4b3c      	ldr	r3, [pc, #240]	; (8006820 <Sync0_Isr+0x138>)
 800672e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006730:	4b3c      	ldr	r3, [pc, #240]	; (8006824 <Sync0_Isr+0x13c>)
 8006732:	891b      	ldrh	r3, [r3, #8]
 8006734:	429a      	cmp	r2, r3
 8006736:	d805      	bhi.n	8006744 <Sync0_Isr+0x5c>
              {
                 /*ECATCHANGE_END(V5.11) COE3*/
                 sSyncManOutPar.u16SmEventMissedCounter = sSyncManOutPar.u16SmEventMissedCounter + 3;
 8006738:	4b39      	ldr	r3, [pc, #228]	; (8006820 <Sync0_Isr+0x138>)
 800673a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800673c:	3303      	adds	r3, #3
 800673e:	b29a      	uxth	r2, r3
 8006740:	4b37      	ldr	r3, [pc, #220]	; (8006820 <Sync0_Isr+0x138>)
 8006742:	851a      	strh	r2, [r3, #40]	; 0x28
              }

/*ECATCHANGE_START(V5.11) COE3*/
           if ((nPdInputSize > 0) && (nPdOutputSize == 0) && (sSyncManInPar.u16SmEventMissedCounter <= sErrorSettings.u16SyncErrorCounterLimit))
 8006744:	4b38      	ldr	r3, [pc, #224]	; (8006828 <Sync0_Isr+0x140>)
 8006746:	881b      	ldrh	r3, [r3, #0]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d00f      	beq.n	800676c <Sync0_Isr+0x84>
 800674c:	4b33      	ldr	r3, [pc, #204]	; (800681c <Sync0_Isr+0x134>)
 800674e:	881b      	ldrh	r3, [r3, #0]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d10b      	bne.n	800676c <Sync0_Isr+0x84>
 8006754:	4b35      	ldr	r3, [pc, #212]	; (800682c <Sync0_Isr+0x144>)
 8006756:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006758:	4b32      	ldr	r3, [pc, #200]	; (8006824 <Sync0_Isr+0x13c>)
 800675a:	891b      	ldrh	r3, [r3, #8]
 800675c:	429a      	cmp	r2, r3
 800675e:	d805      	bhi.n	800676c <Sync0_Isr+0x84>
           {
/*ECATCHANGE_END(V5.11) COE3*/
               sSyncManInPar.u16SmEventMissedCounter = sSyncManInPar.u16SmEventMissedCounter + 3;
 8006760:	4b32      	ldr	r3, [pc, #200]	; (800682c <Sync0_Isr+0x144>)
 8006762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006764:	3303      	adds	r3, #3
 8006766:	b29a      	uxth	r2, r3
 8006768:	4b30      	ldr	r3, [pc, #192]	; (800682c <Sync0_Isr+0x144>)
 800676a:	851a      	strh	r2, [r3, #40]	; 0x28
           }

           } // if (u16SmSync0Counter > u16SmSync0Value)

           
           if ((nPdOutputSize == 0) && (nPdInputSize > 0))
 800676c:	4b2b      	ldr	r3, [pc, #172]	; (800681c <Sync0_Isr+0x134>)
 800676e:	881b      	ldrh	r3, [r3, #0]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d11a      	bne.n	80067aa <Sync0_Isr+0xc2>
 8006774:	4b2c      	ldr	r3, [pc, #176]	; (8006828 <Sync0_Isr+0x140>)
 8006776:	881b      	ldrh	r3, [r3, #0]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d016      	beq.n	80067aa <Sync0_Isr+0xc2>
           {
              /* Input only with DC, check if the last input data was read*/
              UINT16  ALEvent = HW_GetALEventRegister_Isr();
 800677c:	f002 fe1c 	bl	80093b8 <HW_GetALEventRegister_Isr>
 8006780:	4603      	mov	r3, r0
 8006782:	80fb      	strh	r3, [r7, #6]
              ALEvent = SWAPWORD(ALEvent);

              if ((ALEvent & PROCESS_INPUT_EVENT) == 0)
 8006784:	88fb      	ldrh	r3, [r7, #6]
 8006786:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800678a:	2b00      	cmp	r3, #0
 800678c:	d106      	bne.n	800679c <Sync0_Isr+0xb4>
              {
                 /* no input data was read by the master, increment the sm missed counter*/
                 u16SmSync0Counter++;
 800678e:	4b22      	ldr	r3, [pc, #136]	; (8006818 <Sync0_Isr+0x130>)
 8006790:	881b      	ldrh	r3, [r3, #0]
 8006792:	3301      	adds	r3, #1
 8006794:	b29a      	uxth	r2, r3
 8006796:	4b20      	ldr	r3, [pc, #128]	; (8006818 <Sync0_Isr+0x130>)
 8006798:	801a      	strh	r2, [r3, #0]
           {
 800679a:	e00c      	b.n	80067b6 <Sync0_Isr+0xce>
              }
              else
              {
                 /* Reset SM/Sync0 counter*/
                 u16SmSync0Counter = 0;
 800679c:	4b1e      	ldr	r3, [pc, #120]	; (8006818 <Sync0_Isr+0x130>)
 800679e:	2200      	movs	r2, #0
 80067a0:	801a      	strh	r2, [r3, #0]

                 sSyncManInPar.u16SmEventMissedCounter = 0;
 80067a2:	4b22      	ldr	r3, [pc, #136]	; (800682c <Sync0_Isr+0x144>)
 80067a4:	2200      	movs	r2, #0
 80067a6:	851a      	strh	r2, [r3, #40]	; 0x28
           {
 80067a8:	e005      	b.n	80067b6 <Sync0_Isr+0xce>

              }
           }
           else
           {
              u16SmSync0Counter++;
 80067aa:	4b1b      	ldr	r3, [pc, #108]	; (8006818 <Sync0_Isr+0x130>)
 80067ac:	881b      	ldrh	r3, [r3, #0]
 80067ae:	3301      	adds	r3, #1
 80067b0:	b29a      	uxth	r2, r3
 80067b2:	4b19      	ldr	r3, [pc, #100]	; (8006818 <Sync0_Isr+0x130>)
 80067b4:	801a      	strh	r2, [r3, #0]
           }
        }//SM -Sync monitoring enabled
/*ECATCHANGE_END(V5.11) ECAT4*/


        if(!bEscIntEnabled && bEcatOutputUpdateRunning)
 80067b6:	4b1e      	ldr	r3, [pc, #120]	; (8006830 <Sync0_Isr+0x148>)
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d105      	bne.n	80067ca <Sync0_Isr+0xe2>
 80067be:	4b1d      	ldr	r3, [pc, #116]	; (8006834 <Sync0_Isr+0x14c>)
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d001      	beq.n	80067ca <Sync0_Isr+0xe2>
        {
            /* Output mapping was not done by the PDI ISR */
            PDO_OutputMapping();
 80067c6:	f7ff fe4f 	bl	8006468 <PDO_OutputMapping>
        }

        /* Application is synchronized to SYNC0 event*/
        ECAT_Application();
 80067ca:	f000 f8d7 	bl	800697c <ECAT_Application>

        if ( bEcatInputUpdateRunning 
 80067ce:	4b0f      	ldr	r3, [pc, #60]	; (800680c <Sync0_Isr+0x124>)
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d012      	beq.n	80067fc <Sync0_Isr+0x114>
           && (LatchInputSync0Value > 0) && (LatchInputSync0Value == LatchInputSync0Counter) ) /* Inputs shall be latched on a specific Sync0 event */
 80067d6:	4b18      	ldr	r3, [pc, #96]	; (8006838 <Sync0_Isr+0x150>)
 80067d8:	881b      	ldrh	r3, [r3, #0]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d00e      	beq.n	80067fc <Sync0_Isr+0x114>
 80067de:	4b16      	ldr	r3, [pc, #88]	; (8006838 <Sync0_Isr+0x150>)
 80067e0:	881a      	ldrh	r2, [r3, #0]
 80067e2:	4b0b      	ldr	r3, [pc, #44]	; (8006810 <Sync0_Isr+0x128>)
 80067e4:	881b      	ldrh	r3, [r3, #0]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d108      	bne.n	80067fc <Sync0_Isr+0x114>
        {
            /* EtherCAT slave is at least in SAFE-OPERATIONAL, update inputs */
            PDO_InputMapping();
 80067ea:	f7ff fe27 	bl	800643c <PDO_InputMapping>

            if(LatchInputSync0Value == 1)
 80067ee:	4b12      	ldr	r3, [pc, #72]	; (8006838 <Sync0_Isr+0x150>)
 80067f0:	881b      	ldrh	r3, [r3, #0]
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d102      	bne.n	80067fc <Sync0_Isr+0x114>
            {
                /* if inputs are latched on every Sync0 event (otherwise the counter is reset on the next Sync1 event) */
                LatchInputSync0Counter = 0;
 80067f6:	4b06      	ldr	r3, [pc, #24]	; (8006810 <Sync0_Isr+0x128>)
 80067f8:	2200      	movs	r2, #0
 80067fa:	801a      	strh	r2, [r3, #0]
            }
        }

    }
}
 80067fc:	bf00      	nop
 80067fe:	3708      	adds	r7, #8
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}
 8006804:	20000694 	.word	0x20000694
 8006808:	20000684 	.word	0x20000684
 800680c:	20000681 	.word	0x20000681
 8006810:	2000069e 	.word	0x2000069e
 8006814:	2000068c 	.word	0x2000068c
 8006818:	2000068a 	.word	0x2000068a
 800681c:	200006ac 	.word	0x200006ac
 8006820:	20000b08 	.word	0x20000b08
 8006824:	20000354 	.word	0x20000354
 8006828:	200006aa 	.word	0x200006aa
 800682c:	20000b4c 	.word	0x20000b4c
 8006830:	200006a0 	.word	0x200006a0
 8006834:	20000680 	.word	0x20000680
 8006838:	2000069c 	.word	0x2000069c

0800683c <Sync1_Isr>:

void Sync1_Isr(void)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	af00      	add	r7, sp, #0
    Sync1WdCounter = 0;
 8006840:	4b0a      	ldr	r3, [pc, #40]	; (800686c <Sync1_Isr+0x30>)
 8006842:	2200      	movs	r2, #0
 8006844:	801a      	strh	r2, [r3, #0]

        if ( bEcatInputUpdateRunning 
 8006846:	4b0a      	ldr	r3, [pc, #40]	; (8006870 <Sync1_Isr+0x34>)
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d009      	beq.n	8006862 <Sync1_Isr+0x26>
            && (sSyncManInPar.u16SyncType == SYNCTYPE_DCSYNC1)
 800684e:	4b09      	ldr	r3, [pc, #36]	; (8006874 <Sync1_Isr+0x38>)
 8006850:	885b      	ldrh	r3, [r3, #2]
 8006852:	2b03      	cmp	r3, #3
 8006854:	d105      	bne.n	8006862 <Sync1_Isr+0x26>
            && (LatchInputSync0Value == 0)) /* Inputs are latched on Sync1 (LatchInputSync0Value == 0), if LatchInputSync0Value > 0 inputs are latched with Sync0 */
 8006856:	4b08      	ldr	r3, [pc, #32]	; (8006878 <Sync1_Isr+0x3c>)
 8006858:	881b      	ldrh	r3, [r3, #0]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d101      	bne.n	8006862 <Sync1_Isr+0x26>
        {
            /* EtherCAT slave is at least in SAFE-OPERATIONAL, update inputs */
            PDO_InputMapping();
 800685e:	f7ff fded 	bl	800643c <PDO_InputMapping>
        }

        /* Reset Sync0 latch counter (to start next Sync0 latch cycle) */
        LatchInputSync0Counter = 0;
 8006862:	4b06      	ldr	r3, [pc, #24]	; (800687c <Sync1_Isr+0x40>)
 8006864:	2200      	movs	r2, #0
 8006866:	801a      	strh	r2, [r3, #0]
}
 8006868:	bf00      	nop
 800686a:	bd80      	pop	{r7, pc}
 800686c:	20000698 	.word	0x20000698
 8006870:	20000681 	.word	0x20000681
 8006874:	20000b4c 	.word	0x20000b4c
 8006878:	2000069c 	.word	0x2000069c
 800687c:	2000069e 	.word	0x2000069e

08006880 <MainInit>:
 \brief    This function initialize the EtherCAT Sample Code

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 MainInit(void)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b082      	sub	sp, #8
 8006884:	af00      	add	r7, sp, #0
    UINT16 Error = 0;
 8006886:	2300      	movs	r3, #0
 8006888:	80fb      	strh	r3, [r7, #6]
    SET_EEPROM_PTR
#endif
/*ECATCHANGE_END(V5.11) EEPROM1*/

    /* initialize the EtherCAT Slave Interface */
    ECAT_Init();
 800688a:	f002 fb59 	bl	8008f40 <ECAT_Init>
    /* initialize the objects */
    COE_ObjInit();
 800688e:	f7ff fbcd 	bl	800602c <COE_ObjInit>


    /*Timer initialization*/
    u16BusCycleCntMs = 0;
 8006892:	4b08      	ldr	r3, [pc, #32]	; (80068b4 <MainInit+0x34>)
 8006894:	2200      	movs	r2, #0
 8006896:	801a      	strh	r2, [r3, #0]
    StartTimerCnt = 0;
 8006898:	4b07      	ldr	r3, [pc, #28]	; (80068b8 <MainInit+0x38>)
 800689a:	2200      	movs	r2, #0
 800689c:	601a      	str	r2, [r3, #0]
    bCycleTimeMeasurementStarted = FALSE;
 800689e:	4b07      	ldr	r3, [pc, #28]	; (80068bc <MainInit+0x3c>)
 80068a0:	2200      	movs	r2, #0
 80068a2:	701a      	strb	r2, [r3, #0]

    /*indicate that the slave stack initialization finished*/
    bInitFinished = TRUE;
 80068a4:	4b06      	ldr	r3, [pc, #24]	; (80068c0 <MainInit+0x40>)
 80068a6:	2201      	movs	r2, #1
 80068a8:	701a      	strb	r2, [r3, #0]

/*Application Init need to be called from the application layer*/
     return Error;
 80068aa:	88fb      	ldrh	r3, [r7, #6]
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3708      	adds	r7, #8
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	200005b4 	.word	0x200005b4
 80068b8:	200005b8 	.word	0x200005b8
 80068bc:	200005bc 	.word	0x200005bc
 80068c0:	20000648 	.word	0x20000648

080068c4 <MainLoop>:
 \brief    This function shall be called cyclically from main

*////////////////////////////////////////////////////////////////////////////////////////

void MainLoop(void)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b082      	sub	sp, #8
 80068c8:	af00      	add	r7, sp, #0
    /*return if initialization not finished */
    if(bInitFinished == FALSE)
 80068ca:	4b25      	ldr	r3, [pc, #148]	; (8006960 <MainLoop+0x9c>)
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d041      	beq.n	8006956 <MainLoop+0x92>

        /* FreeRun-Mode:  bEscIntEnabled = FALSE, bDcSyncActive = FALSE
           Synchron-Mode: bEscIntEnabled = TRUE, bDcSyncActive = FALSE
           DC-Mode:       bEscIntEnabled = TRUE, bDcSyncActive = TRUE */
        if (
            (!bEscIntEnabled || !bEcatFirstOutputsReceived)     /* SM-Synchronous, but not SM-event received */
 80068d2:	4b24      	ldr	r3, [pc, #144]	; (8006964 <MainLoop+0xa0>)
 80068d4:	781b      	ldrb	r3, [r3, #0]
        if (
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d003      	beq.n	80068e2 <MainLoop+0x1e>
            (!bEscIntEnabled || !bEcatFirstOutputsReceived)     /* SM-Synchronous, but not SM-event received */
 80068da:	4b23      	ldr	r3, [pc, #140]	; (8006968 <MainLoop+0xa4>)
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d132      	bne.n	8006948 <MainLoop+0x84>
          && !bDcSyncActive                                               /* DC-Synchronous */
 80068e2:	4b22      	ldr	r3, [pc, #136]	; (800696c <MainLoop+0xa8>)
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d12e      	bne.n	8006948 <MainLoop+0x84>
               from the ESC interrupt routine (in mcihw.c or spihw.c),
               in ECAT Synchron Mode it should be additionally checked, if the SM-event is received
               at least once (bEcatFirstOutputsReceived = 1), otherwise no interrupt is generated
               and the function ECAT_Application has to be called here (with interrupts disabled,
               because the SM-event could be generated while executing ECAT_Application) */
            if ( !bEscIntEnabled )
 80068ea:	4b1e      	ldr	r3, [pc, #120]	; (8006964 <MainLoop+0xa0>)
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d11e      	bne.n	8006930 <MainLoop+0x6c>
            {
                /* application is running in ECAT FreeRun Mode,
                   first we have to check, if outputs were received */
                UINT16 ALEvent = HW_GetALEventRegister();
 80068f2:	f002 fd57 	bl	80093a4 <HW_GetALEventRegister>
 80068f6:	4603      	mov	r3, r0
 80068f8:	80fb      	strh	r3, [r7, #6]
                ALEvent = SWAPWORD(ALEvent);

                if ( ALEvent & PROCESS_OUTPUT_EVENT )
 80068fa:	88fb      	ldrh	r3, [r7, #6]
 80068fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006900:	2b00      	cmp	r3, #0
 8006902:	d009      	beq.n	8006918 <MainLoop+0x54>
                {
                    /* set the flag for the state machine behaviour */
                    bEcatFirstOutputsReceived = TRUE;
 8006904:	4b18      	ldr	r3, [pc, #96]	; (8006968 <MainLoop+0xa4>)
 8006906:	2201      	movs	r2, #1
 8006908:	701a      	strb	r2, [r3, #0]
                    if ( bEcatOutputUpdateRunning )
 800690a:	4b19      	ldr	r3, [pc, #100]	; (8006970 <MainLoop+0xac>)
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d00e      	beq.n	8006930 <MainLoop+0x6c>
                    {
                        /* update the outputs */
                        PDO_OutputMapping();
 8006912:	f7ff fda9 	bl	8006468 <PDO_OutputMapping>
 8006916:	e00b      	b.n	8006930 <MainLoop+0x6c>
                    }
                }
                else if ( nPdOutputSize == 0 )
 8006918:	4b16      	ldr	r3, [pc, #88]	; (8006974 <MainLoop+0xb0>)
 800691a:	881b      	ldrh	r3, [r3, #0]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d107      	bne.n	8006930 <MainLoop+0x6c>
                {
                    /* if no outputs are transmitted, the watchdog must be reset, when the inputs were read */
                    if ( ALEvent & PROCESS_INPUT_EVENT )
 8006920:	88fb      	ldrh	r3, [r7, #6]
 8006922:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006926:	2b00      	cmp	r3, #0
 8006928:	d002      	beq.n	8006930 <MainLoop+0x6c>
                    {
                        /* Outputs were updated, set flag for watchdog monitoring */
                        bEcatFirstOutputsReceived = TRUE;
 800692a:	4b0f      	ldr	r3, [pc, #60]	; (8006968 <MainLoop+0xa4>)
 800692c:	2201      	movs	r2, #1
 800692e:	701a      	strb	r2, [r3, #0]
                    }
                }
            }

            DISABLE_ESC_INT();
 8006930:	f7fa fa50 	bl	8000dd4 <disable_Irq_Sync0_Sync1>
            ECAT_Application();
 8006934:	f000 f822 	bl	800697c <ECAT_Application>

            if ( bEcatInputUpdateRunning )
 8006938:	4b0f      	ldr	r3, [pc, #60]	; (8006978 <MainLoop+0xb4>)
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d001      	beq.n	8006944 <MainLoop+0x80>
            {
                /* EtherCAT slave is at least in SAFE-OPERATIONAL, update inputs */
                PDO_InputMapping();
 8006940:	f7ff fd7c 	bl	800643c <PDO_InputMapping>
            }
            ENABLE_ESC_INT();
 8006944:	f7fa fa36 	bl	8000db4 <enable_Irq_Sync0_Sync1>
        }


        /* call EtherCAT functions */
        ECAT_Main();
 8006948:	f002 fba4 	bl	8009094 <ECAT_Main>

        /* call lower prior application part */
       COE_Main();
 800694c:	f7ff fd0a 	bl	8006364 <COE_Main>
       CheckIfEcatError();
 8006950:	f002 faa4 	bl	8008e9c <CheckIfEcatError>
 8006954:	e000      	b.n	8006958 <MainLoop+0x94>
        return;
 8006956:	bf00      	nop

}
 8006958:	3708      	adds	r7, #8
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop
 8006960:	20000648 	.word	0x20000648
 8006964:	200006a0 	.word	0x200006a0
 8006968:	20000682 	.word	0x20000682
 800696c:	20000684 	.word	0x20000684
 8006970:	20000680 	.word	0x20000680
 8006974:	200006ac 	.word	0x200006ac
 8006978:	20000681 	.word	0x20000681

0800697c <ECAT_Application>:
/**
 \brief    ECAT_Application (prev. SSC versions "COE_Application")
 this function calculates and the physical process signals and triggers the input mapping
*////////////////////////////////////////////////////////////////////////////////////////
void ECAT_Application(void)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	af00      	add	r7, sp, #0
    {
        APPL_Application();
 8006980:	f7ff faf2 	bl	8005f68 <APPL_Application>
    }
/* PDO Input mapping is called from the specific trigger ISR */
}
 8006984:	bf00      	nop
 8006986:	bd80      	pop	{r7, pc}

08006988 <COE_Init>:

 \brief    This function intialize the CoE Interface.
*////////////////////////////////////////////////////////////////////////////////////////

void COE_Init(void)
{
 8006988:	b480      	push	{r7}
 800698a:	af00      	add	r7, sp, #0
    pCoeSendStored = 0;
 800698c:	4b05      	ldr	r3, [pc, #20]	; (80069a4 <COE_Init+0x1c>)
 800698e:	2200      	movs	r2, #0
 8006990:	601a      	str	r2, [r3, #0]
    nSdoInfoFragmentsLeft = 0;
 8006992:	4b05      	ldr	r3, [pc, #20]	; (80069a8 <COE_Init+0x20>)
 8006994:	2200      	movs	r2, #0
 8006996:	801a      	strh	r2, [r3, #0]
}
 8006998:	bf00      	nop
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr
 80069a2:	bf00      	nop
 80069a4:	2000064c 	.word	0x2000064c
 80069a8:	20000bb8 	.word	0x20000bb8

080069ac <COE_ServiceInd>:
 \brief    This function is called when a CoE (CAN application layer over EtherCAT) service is received from
             the master.
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 COE_ServiceInd(TCOEMBX MBXMEM *pCoeMbx)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
    UINT8 result = 0;
 80069b4:	2300      	movs	r3, #0
 80069b6:	73fb      	strb	r3, [r7, #15]

    switch ((pCoeMbx->CoeHeader & COEHEADER_COESERVICEMASK) >> COEHEADER_COESERVICESHIFT)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	88db      	ldrh	r3, [r3, #6]
 80069bc:	0b1b      	lsrs	r3, r3, #12
 80069be:	b29b      	uxth	r3, r3
 80069c0:	3b01      	subs	r3, #1
 80069c2:	2b07      	cmp	r3, #7
 80069c4:	d821      	bhi.n	8006a0a <COE_ServiceInd+0x5e>
 80069c6:	a201      	add	r2, pc, #4	; (adr r2, 80069cc <COE_ServiceInd+0x20>)
 80069c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069cc:	08006a05 	.word	0x08006a05
 80069d0:	080069ed 	.word	0x080069ed
 80069d4:	08006a05 	.word	0x08006a05
 80069d8:	08006a05 	.word	0x08006a05
 80069dc:	08006a05 	.word	0x08006a05
 80069e0:	08006a05 	.word	0x08006a05
 80069e4:	08006a05 	.word	0x08006a05
 80069e8:	080069f9 	.word	0x080069f9
    {
    case COESERVICE_SDOREQUEST:
        /* SDO-Request received, call SDOS_SdoInd to process the SDO-Request
           if an existing SDO-Stack shall be used, the corresponding function
            should be called */
        result = SDOS_SdoInd( (TINITSDOMBX MBXMEM *) pCoeMbx );
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f005 fca1 	bl	800c334 <SDOS_SdoInd>
 80069f2:	4603      	mov	r3, r0
 80069f4:	73fb      	strb	r3, [r7, #15]
        break;
 80069f6:	e00b      	b.n	8006a10 <COE_ServiceInd+0x64>

    case COESERVICE_SDOINFO:
        /* SDO-Information Request received, call SDOS_SdoInfoInd to process the SDO-Request */
        result = SDOS_SdoInfoInd( (TSDOINFORMATION MBXMEM *) pCoeMbx );
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f005 ffdd 	bl	800c9b8 <SDOS_SdoInfoInd>
 80069fe:	4603      	mov	r3, r0
 8006a00:	73fb      	strb	r3, [r7, #15]
        /*NOERROR_INWORK is never returned by SDOS_SdoInfoInd() => delete return code handling*/
        break;
 8006a02:	e005      	b.n	8006a10 <COE_ServiceInd+0x64>
    case COESERVICE_TXPDO:
    case COESERVICE_RXPDO:
    case COESERVICE_TXPDOREMREQ:
    case COESERVICE_RXPDOREMREQ:
        /* these CoE services are not supported yet */
        result = MBXERR_SERVICENOTSUPPORTED;
 8006a04:	2304      	movs	r3, #4
 8006a06:	73fb      	strb	r3, [r7, #15]
        break;
 8006a08:	e002      	b.n	8006a10 <COE_ServiceInd+0x64>

    default:
        result = MBXERR_INVALIDHEADER;
 8006a0a:	2305      	movs	r3, #5
 8006a0c:	73fb      	strb	r3, [r7, #15]
        break;
 8006a0e:	bf00      	nop
    }
    return result;
 8006a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3710      	adds	r7, #16
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop

08006a1c <COE_ContinueInd>:
*////////////////////////////////////////////////////////////////////////////////////////

/*ECATCHANGE_START(V5.11) COE4*/
UINT8 COE_ContinueInd(TMBX MBXMEM * pMbx)
/*ECATCHANGE_END(V5.11) COE4*/
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
    if (pCoeSendStored)
 8006a24:	4b12      	ldr	r3, [pc, #72]	; (8006a70 <COE_ContinueInd+0x54>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d009      	beq.n	8006a40 <COE_ContinueInd+0x24>
    {
        /* send the stored CoE service which could not be sent before */
        MBX_MailboxSendReq(pCoeSendStored, 0);
 8006a2c:	4b10      	ldr	r3, [pc, #64]	; (8006a70 <COE_ContinueInd+0x54>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	2100      	movs	r1, #0
 8006a32:	4618      	mov	r0, r3
 8006a34:	f003 fbfa 	bl	800a22c <MBX_MailboxSendReq>
        pCoeSendStored = 0;
 8006a38:	4b0d      	ldr	r3, [pc, #52]	; (8006a70 <COE_ContinueInd+0x54>)
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	601a      	str	r2, [r3, #0]
 8006a3e:	e012      	b.n	8006a66 <COE_ContinueInd+0x4a>
    }
    else
    {
        /* send the next fragment of the last CoE service (only for SDO-Information possible) */
        /* in mailbox queue mode pMbx is always 0, so a mailbox buffer shall be get */
        pMbx = (TMBX MBXMEM *) APPL_AllocMailboxBuffer(SIZEOF(TMBX));
 8006a40:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006a44:	f006 f9e0 	bl	800ce08 <malloc>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	607b      	str	r3, [r7, #4]
        /* it shall be checked if a valid pointer was returned */
/*ECATCHANGE_START(V5.11) COE4*/
        if (pMbx == NULL)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d101      	bne.n	8006a56 <COE_ContinueInd+0x3a>
        {
            return MBXERR_NOMOREMEMORY;
 8006a52:	2307      	movs	r3, #7
 8006a54:	e008      	b.n	8006a68 <COE_ContinueInd+0x4c>
        }
        else
/*ECATCHANGE_END(V5.11) COE4*/
        {
            /* copy the stored SDO-Info-Header in the request */
            MBXMEMCPY(pMbx, aSdoInfoHeader, SDO_INFO_HEADER_BYTE_SIZE);
 8006a56:	220e      	movs	r2, #14
 8006a58:	4906      	ldr	r1, [pc, #24]	; (8006a74 <COE_ContinueInd+0x58>)
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f006 f9f4 	bl	800ce48 <memcpy>
            /* call SDOS_SdoInfoInd to generate and send the next fragment */
            SDOS_SdoInfoInd( (TSDOINFORMATION MBXMEM *) pMbx );
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f005 ffa9 	bl	800c9b8 <SDOS_SdoInfoInd>
        }
    }

    return 0;
 8006a66:	2300      	movs	r3, #0
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3708      	adds	r7, #8
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}
 8006a70:	2000064c 	.word	0x2000064c
 8006a74:	20000ba4 	.word	0x20000ba4

08006a78 <EOE_ServiceInd>:
 \brief    This function is called when a EoE (Ethernet over EtherCAT) service is received from
             the master.
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 EOE_ServiceInd(TMBX MBXMEM *pMbx)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b088      	sub	sp, #32
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
    UINT16 result = 0;
 8006a80:	2300      	movs	r3, #0
 8006a82:	83bb      	strh	r3, [r7, #28]
    ETHERCAT_EOE_HEADER MBXMEM * pEoe = (ETHERCAT_EOE_HEADER MBXMEM *) pMbx->Data;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	3306      	adds	r3, #6
 8006a88:	61bb      	str	r3, [r7, #24]
    ETHERCAT_EOE_INIT MBXMEM * pEoeInit;
    UINT16 mbxSize = SWAPWORD(pMbx->MbxHeader.Length);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	881b      	ldrh	r3, [r3, #0]
 8006a8e:	82fb      	strh	r3, [r7, #22]
    UINT16 expSize = ETHERCAT_EOE_HEADER_LEN;
 8006a90:	2304      	movs	r3, #4
 8006a92:	83fb      	strh	r3, [r7, #30]

    /* check, if mailbox header is correct for EoE */
    if ( mbxSize >= ETHERCAT_EOE_HEADER_LEN)
 8006a94:	8afb      	ldrh	r3, [r7, #22]
 8006a96:	2b03      	cmp	r3, #3
 8006a98:	f240 8199 	bls.w	8006dce <EOE_ServiceInd+0x356>
    {
        /* enough bytes were received, check EoE service */
        switch ( SWAPWORD(pEoe->Flags1) & EOEHEADER_TYPE )
 8006a9c:	69bb      	ldr	r3, [r7, #24]
 8006a9e:	881b      	ldrh	r3, [r3, #0]
 8006aa0:	f003 030f 	and.w	r3, r3, #15
 8006aa4:	2b06      	cmp	r3, #6
 8006aa6:	f000 8178 	beq.w	8006d9a <EOE_ServiceInd+0x322>
 8006aaa:	2b06      	cmp	r3, #6
 8006aac:	f300 8185 	bgt.w	8006dba <EOE_ServiceInd+0x342>
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d003      	beq.n	8006abc <EOE_ServiceInd+0x44>
 8006ab4:	2b02      	cmp	r3, #2
 8006ab6:	f000 80fd 	beq.w	8006cb4 <EOE_ServiceInd+0x23c>
 8006aba:	e17e      	b.n	8006dba <EOE_ServiceInd+0x342>
        {
        case EOE_TYPE_FRAME_FRAG:
            /* EoE fragment received, check fragment number, the fragments are expected one after another
               and u8ReceiveFragmentNo stores the next expected fragmentNo to be received */
            if ( (SWAPWORD(pEoe->Flags2) & EOEHEADER_FRAGMENT) != u8ReceiveFragmentNo )
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	885b      	ldrh	r3, [r3, #2]
 8006ac0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ac4:	4a93      	ldr	r2, [pc, #588]	; (8006d14 <EOE_ServiceInd+0x29c>)
 8006ac6:	7812      	ldrb	r2, [r2, #0]
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d01a      	beq.n	8006b02 <EOE_ServiceInd+0x8a>
            {
                /* wrong fragment received, that means fragments got lost, we have to check if fragments
                   of an old Ethernet frame are still stored in the buffer pEthernetReceiveFrame */
                if ( u8ReceiveFragmentNo != 0 )
 8006acc:	4b91      	ldr	r3, [pc, #580]	; (8006d14 <EOE_ServiceInd+0x29c>)
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d00e      	beq.n	8006af2 <EOE_ServiceInd+0x7a>
                {
                    /* expected fragmentNo was unequal 0, that means fragments of an old Ethernet frame were stored,
                       so we have to free the old buffer (because the old Ethernet frame was not received completely) */
                    /* for the PIC18 (Eva-Board demo) there is only one buffer for an Ethernet frame available,
                       for all other microcontroller we have to free the buffer here to dynamic memory handling */
                    if (pEthernetReceiveFrame != NULL)
 8006ad4:	4b90      	ldr	r3, [pc, #576]	; (8006d18 <EOE_ServiceInd+0x2a0>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d007      	beq.n	8006aec <EOE_ServiceInd+0x74>
                    {
                        FREEMEM((MEM_ADDR MBXMEM *) pEthernetReceiveFrame);
 8006adc:	4b8e      	ldr	r3, [pc, #568]	; (8006d18 <EOE_ServiceInd+0x2a0>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f006 f999 	bl	800ce18 <free>
                        pEthernetReceiveFrame = NULL;
 8006ae6:	4b8c      	ldr	r3, [pc, #560]	; (8006d18 <EOE_ServiceInd+0x2a0>)
 8006ae8:	2200      	movs	r2, #0
 8006aea:	601a      	str	r2, [r3, #0]
                    }
                    /* next fragment which will be accepted is a the beginning of a new EoE frame (fragmentNo=0) */
                    u8ReceiveFragmentNo = 0;
 8006aec:	4b89      	ldr	r3, [pc, #548]	; (8006d14 <EOE_ServiceInd+0x29c>)
 8006aee:	2200      	movs	r2, #0
 8006af0:	701a      	strb	r2, [r3, #0]
                }

                /* ignore fragment if it is not the beginning of a new EoE frame */
                if ( SWAPWORD(pEoe->Flags2) & EOEHEADER_FRAGMENT )
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	885b      	ldrh	r3, [r3, #2]
 8006af6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d001      	beq.n	8006b02 <EOE_ServiceInd+0x8a>
                    /* fragmentNo != 0 -> ignore */
                    return 0;
 8006afe:	2300      	movs	r3, #0
 8006b00:	e172      	b.n	8006de8 <EOE_ServiceInd+0x370>
            }

            if ( u8ReceiveFragmentNo == 0 )
 8006b02:	4b84      	ldr	r3, [pc, #528]	; (8006d14 <EOE_ServiceInd+0x29c>)
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d131      	bne.n	8006b6e <EOE_ServiceInd+0xf6>
            {
                /* fragmentNo = 0, the fragment is the beginning of a new frame, get buffer for the whole Ethernet frame */
                u16EthernetReceiveSize = ((SWAPWORD(pEoe->Flags2) & EOEHEADER_OFFSETBUFFER) >> EOEHEADERSHIFT_OFFSETBUFFER) << 5;    // * 32
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	885b      	ldrh	r3, [r3, #2]
 8006b0e:	119b      	asrs	r3, r3, #6
 8006b10:	015b      	lsls	r3, r3, #5
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8006b18:	b29a      	uxth	r2, r3
 8006b1a:	4b80      	ldr	r3, [pc, #512]	; (8006d1c <EOE_ServiceInd+0x2a4>)
 8006b1c:	801a      	strh	r2, [r3, #0]
                /* for the PIC18 (Eva-Board demo) there is only one buffer for an Ethernet frame available,
                   for all other microcontroller we have to get a buffer from the dynamic memory handling */

                if (pEthernetReceiveFrame != NULL)
 8006b1e:	4b7e      	ldr	r3, [pc, #504]	; (8006d18 <EOE_ServiceInd+0x2a0>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d007      	beq.n	8006b36 <EOE_ServiceInd+0xbe>
                {
                    FREEMEM((MEM_ADDR MBXMEM *) pEthernetReceiveFrame);
 8006b26:	4b7c      	ldr	r3, [pc, #496]	; (8006d18 <EOE_ServiceInd+0x2a0>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f006 f974 	bl	800ce18 <free>
                    pEthernetReceiveFrame = NULL;
 8006b30:	4b79      	ldr	r3, [pc, #484]	; (8006d18 <EOE_ServiceInd+0x2a0>)
 8006b32:	2200      	movs	r2, #0
 8006b34:	601a      	str	r2, [r3, #0]
                }

                pEthernetReceiveFrame = (MEM_ADDR MBXMEM *) ALLOCMEM( u16EthernetReceiveSize );
 8006b36:	4b79      	ldr	r3, [pc, #484]	; (8006d1c <EOE_ServiceInd+0x2a4>)
 8006b38:	881b      	ldrh	r3, [r3, #0]
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f006 f964 	bl	800ce08 <malloc>
 8006b40:	4603      	mov	r3, r0
 8006b42:	461a      	mov	r2, r3
 8006b44:	4b74      	ldr	r3, [pc, #464]	; (8006d18 <EOE_ServiceInd+0x2a0>)
 8006b46:	601a      	str	r2, [r3, #0]
                if ( pEthernetReceiveFrame == NULL )
 8006b48:	4b73      	ldr	r3, [pc, #460]	; (8006d18 <EOE_ServiceInd+0x2a0>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d101      	bne.n	8006b54 <EOE_ServiceInd+0xdc>
                    return MBXERR_NOMOREMEMORY;
 8006b50:	2307      	movs	r3, #7
 8006b52:	e149      	b.n	8006de8 <EOE_ServiceInd+0x370>

                /* u16EthernetReceiveOffset stores the actual offset of the Ethernet frame,
                   where the next fragment is copied to */
                u16EthernetReceiveOffset = 0;
 8006b54:	4b72      	ldr	r3, [pc, #456]	; (8006d20 <EOE_ServiceInd+0x2a8>)
 8006b56:	2200      	movs	r2, #0
 8006b58:	801a      	strh	r2, [r3, #0]
                /* store the frameNo, which has to be the same for all fragments of the whole Ethernet frame */
                u16ReceiveFrameNo = SWAPWORD(pEoe->Flags2) & EOEHEADER_FRAMENO;
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	885b      	ldrh	r3, [r3, #2]
 8006b5e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006b62:	f023 030f 	bic.w	r3, r3, #15
 8006b66:	b29a      	uxth	r2, r3
 8006b68:	4b6e      	ldr	r3, [pc, #440]	; (8006d24 <EOE_ServiceInd+0x2ac>)
 8006b6a:	801a      	strh	r2, [r3, #0]
 8006b6c:	e031      	b.n	8006bd2 <EOE_ServiceInd+0x15a>
            }
            else
            {
                /* fragment > 0, the next correct fragment is received,
                   get the offset of the fragment inside the Ethernet frame */
                UINT16 offset = ((SWAPWORD(pEoe->Flags2) & EOEHEADER_OFFSETBUFFER) >> EOEHEADERSHIFT_OFFSETBUFFER) << 5;    // * 32
 8006b6e:	69bb      	ldr	r3, [r7, #24]
 8006b70:	885b      	ldrh	r3, [r3, #2]
 8006b72:	119b      	asrs	r3, r3, #6
 8006b74:	015b      	lsls	r3, r3, #5
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8006b7c:	81fb      	strh	r3, [r7, #14]
                /* get the sent frameNo */
                UINT16 frameNo = SWAPWORD(pEoe->Flags2) & EOEHEADER_FRAMENO;
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	885b      	ldrh	r3, [r3, #2]
 8006b82:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006b86:	f023 030f 	bic.w	r3, r3, #15
 8006b8a:	81bb      	strh	r3, [r7, #12]

                /* check if offset is correct and frameNo match to the expected values */
                if ( offset != u16EthernetReceiveOffset || frameNo != u16ReceiveFrameNo )
 8006b8c:	4b64      	ldr	r3, [pc, #400]	; (8006d20 <EOE_ServiceInd+0x2a8>)
 8006b8e:	881b      	ldrh	r3, [r3, #0]
 8006b90:	89fa      	ldrh	r2, [r7, #14]
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d104      	bne.n	8006ba0 <EOE_ServiceInd+0x128>
 8006b96:	4b63      	ldr	r3, [pc, #396]	; (8006d24 <EOE_ServiceInd+0x2ac>)
 8006b98:	881b      	ldrh	r3, [r3, #0]
 8006b9a:	89ba      	ldrh	r2, [r7, #12]
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d018      	beq.n	8006bd2 <EOE_ServiceInd+0x15a>
                {
                    /* wrong offset or wrong frameNo -> free buffer, ignore fragment */
                    if (pEthernetReceiveFrame != NULL)
 8006ba0:	4b5d      	ldr	r3, [pc, #372]	; (8006d18 <EOE_ServiceInd+0x2a0>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d007      	beq.n	8006bb8 <EOE_ServiceInd+0x140>
                    {
                        FREEMEM((MEM_ADDR MBXMEM *) pEthernetReceiveFrame);
 8006ba8:	4b5b      	ldr	r3, [pc, #364]	; (8006d18 <EOE_ServiceInd+0x2a0>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4618      	mov	r0, r3
 8006bae:	f006 f933 	bl	800ce18 <free>
                        pEthernetReceiveFrame = NULL;
 8006bb2:	4b59      	ldr	r3, [pc, #356]	; (8006d18 <EOE_ServiceInd+0x2a0>)
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	601a      	str	r2, [r3, #0]
                    }
                    if(pMbx != NULL)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d004      	beq.n	8006bc8 <EOE_ServiceInd+0x150>
                    {
                        /*free mailbox buffer*/
                        APPL_FreeMailboxBuffer(pMbx);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f006 f92a 	bl	800ce18 <free>
                        pMbx = NULL;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	607b      	str	r3, [r7, #4]
                    }

                    /* next fragment which will be accepted is a the beginning of a new EoE frame (fragmentNo=0) */
                    u8ReceiveFragmentNo = 0;
 8006bc8:	4b52      	ldr	r3, [pc, #328]	; (8006d14 <EOE_ServiceInd+0x29c>)
 8006bca:	2200      	movs	r2, #0
 8006bcc:	701a      	strb	r2, [r3, #0]
                    return 0;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	e10a      	b.n	8006de8 <EOE_ServiceInd+0x370>
                }
            }

            /* subtract the EoE header from the mailbox data size to get the size of the fragment */
            mbxSize -= 4;
 8006bd2:	8afb      	ldrh	r3, [r7, #22]
 8006bd4:	3b04      	subs	r3, #4
 8006bd6:	82fb      	strh	r3, [r7, #22]
            /* check if new fragment fits in the allocated buffer (u16EthernetReceiveSize stores the size
               of the whole Ethernet frame) */
            if ( (u16EthernetReceiveOffset + mbxSize) <= u16EthernetReceiveSize )
 8006bd8:	4b51      	ldr	r3, [pc, #324]	; (8006d20 <EOE_ServiceInd+0x2a8>)
 8006bda:	881b      	ldrh	r3, [r3, #0]
 8006bdc:	461a      	mov	r2, r3
 8006bde:	8afb      	ldrh	r3, [r7, #22]
 8006be0:	4413      	add	r3, r2
 8006be2:	4a4e      	ldr	r2, [pc, #312]	; (8006d1c <EOE_ServiceInd+0x2a4>)
 8006be4:	8812      	ldrh	r2, [r2, #0]
 8006be6:	4293      	cmp	r3, r2
 8006be8:	dc1e      	bgt.n	8006c28 <EOE_ServiceInd+0x1b0>
            {
                /* fragment fits in buffer, copy fragment data */

                MBXMEMCPY(&((UINT8*)pEthernetReceiveFrame)[u16EthernetReceiveOffset],&pEoe[1], mbxSize);
 8006bea:	4b4b      	ldr	r3, [pc, #300]	; (8006d18 <EOE_ServiceInd+0x2a0>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a4c      	ldr	r2, [pc, #304]	; (8006d20 <EOE_ServiceInd+0x2a8>)
 8006bf0:	8812      	ldrh	r2, [r2, #0]
 8006bf2:	1898      	adds	r0, r3, r2
 8006bf4:	69bb      	ldr	r3, [r7, #24]
 8006bf6:	3304      	adds	r3, #4
 8006bf8:	8afa      	ldrh	r2, [r7, #22]
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	f006 f924 	bl	800ce48 <memcpy>

                /* increment the offset, where the next fragment has to be stored */

                u16EthernetReceiveOffset += mbxSize;
 8006c00:	4b47      	ldr	r3, [pc, #284]	; (8006d20 <EOE_ServiceInd+0x2a8>)
 8006c02:	881a      	ldrh	r2, [r3, #0]
 8006c04:	8afb      	ldrh	r3, [r7, #22]
 8006c06:	4413      	add	r3, r2
 8006c08:	b29a      	uxth	r2, r3
 8006c0a:	4b45      	ldr	r3, [pc, #276]	; (8006d20 <EOE_ServiceInd+0x2a8>)
 8006c0c:	801a      	strh	r2, [r3, #0]
                /* increment the expected fragmentNo */
                u8ReceiveFragmentNo++;
 8006c0e:	4b41      	ldr	r3, [pc, #260]	; (8006d14 <EOE_ServiceInd+0x29c>)
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	3301      	adds	r3, #1
 8006c14:	b2da      	uxtb	r2, r3
 8006c16:	4b3f      	ldr	r3, [pc, #252]	; (8006d14 <EOE_ServiceInd+0x29c>)
 8006c18:	701a      	strb	r2, [r3, #0]
                /* next fragment which will be accepted is a the beginning of a new EoE frame (fragmentNo=0) */
                u8ReceiveFragmentNo = 0;
                return 0;
            }

            if ( SWAPWORD(pEoe->Flags1) & EOEHEADER_LASTFRAGMENT )
 8006c1a:	69bb      	ldr	r3, [r7, #24]
 8006c1c:	881b      	ldrh	r3, [r3, #0]
 8006c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d03c      	beq.n	8006ca0 <EOE_ServiceInd+0x228>
 8006c26:	e018      	b.n	8006c5a <EOE_ServiceInd+0x1e2>
                if (pEthernetReceiveFrame != NULL)
 8006c28:	4b3b      	ldr	r3, [pc, #236]	; (8006d18 <EOE_ServiceInd+0x2a0>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d007      	beq.n	8006c40 <EOE_ServiceInd+0x1c8>
                    FREEMEM((MEM_ADDR MBXMEM *) pEthernetReceiveFrame);
 8006c30:	4b39      	ldr	r3, [pc, #228]	; (8006d18 <EOE_ServiceInd+0x2a0>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4618      	mov	r0, r3
 8006c36:	f006 f8ef 	bl	800ce18 <free>
                    pEthernetReceiveFrame = NULL;
 8006c3a:	4b37      	ldr	r3, [pc, #220]	; (8006d18 <EOE_ServiceInd+0x2a0>)
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	601a      	str	r2, [r3, #0]
                if(pMbx != NULL)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d004      	beq.n	8006c50 <EOE_ServiceInd+0x1d8>
                    APPL_FreeMailboxBuffer(pMbx);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f006 f8e6 	bl	800ce18 <free>
                    pMbx = NULL;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	607b      	str	r3, [r7, #4]
                u8ReceiveFragmentNo = 0;
 8006c50:	4b30      	ldr	r3, [pc, #192]	; (8006d14 <EOE_ServiceInd+0x29c>)
 8006c52:	2200      	movs	r2, #0
 8006c54:	701a      	strb	r2, [r3, #0]
                return 0;
 8006c56:	2300      	movs	r3, #0
 8006c58:	e0c6      	b.n	8006de8 <EOE_ServiceInd+0x370>
            {
                /* Ethernet frame is completely received */
                if ( SWAPWORD(pEoe->Flags1) & EOEHEADER_TIMESTAMPAPPENDED )
 8006c5a:	69bb      	ldr	r3, [r7, #24]
 8006c5c:	881b      	ldrh	r3, [r3, #0]
 8006c5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d005      	beq.n	8006c72 <EOE_ServiceInd+0x1fa>
                {
                    /* time stamp appended, ignore time stamp (only for gateways), u16EthernetReceiveOffset holds
                       the length of the received Ethernet frame, subtract the size of the time stamp */
                    u16EthernetReceiveOffset -= 4;
 8006c66:	4b2e      	ldr	r3, [pc, #184]	; (8006d20 <EOE_ServiceInd+0x2a8>)
 8006c68:	881b      	ldrh	r3, [r3, #0]
 8006c6a:	3b04      	subs	r3, #4
 8006c6c:	b29a      	uxth	r2, r3
 8006c6e:	4b2c      	ldr	r3, [pc, #176]	; (8006d20 <EOE_ServiceInd+0x2a8>)
 8006c70:	801a      	strh	r2, [r3, #0]
                }

                /* call application function with the received frame and size */
                EOEAPPL_ReceiveFrameInd((UINT8 *) pEthernetReceiveFrame, u16EthernetReceiveOffset );
 8006c72:	4b29      	ldr	r3, [pc, #164]	; (8006d18 <EOE_ServiceInd+0x2a0>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a2a      	ldr	r2, [pc, #168]	; (8006d20 <EOE_ServiceInd+0x2a8>)
 8006c78:	8812      	ldrh	r2, [r2, #0]
 8006c7a:	4611      	mov	r1, r2
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f002 fcaf 	bl	80095e0 <EOEAPPL_ReceiveFrameInd>
                /* next fragment which will be accepted is a the beginning of a new EoE frame (fragmentNo=0) */
                u8ReceiveFragmentNo = 0;
 8006c82:	4b24      	ldr	r3, [pc, #144]	; (8006d14 <EOE_ServiceInd+0x29c>)
 8006c84:	2200      	movs	r2, #0
 8006c86:	701a      	strb	r2, [r3, #0]

                // Ethernet frame was forwarded free receive buffer 
                if (pEthernetReceiveFrame != NULL)
 8006c88:	4b23      	ldr	r3, [pc, #140]	; (8006d18 <EOE_ServiceInd+0x2a0>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d007      	beq.n	8006ca0 <EOE_ServiceInd+0x228>
                {
                    FREEMEM((MEM_ADDR MBXMEM *) pEthernetReceiveFrame);
 8006c90:	4b21      	ldr	r3, [pc, #132]	; (8006d18 <EOE_ServiceInd+0x2a0>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4618      	mov	r0, r3
 8006c96:	f006 f8bf 	bl	800ce18 <free>
                    pEthernetReceiveFrame = NULL;
 8006c9a:	4b1f      	ldr	r3, [pc, #124]	; (8006d18 <EOE_ServiceInd+0x2a0>)
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	601a      	str	r2, [r3, #0]
                }
            }

            if(pMbx != NULL)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d004      	beq.n	8006cb0 <EOE_ServiceInd+0x238>
            {
                /*free mailbox buffer*/
                APPL_FreeMailboxBuffer(pMbx);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f006 f8b6 	bl	800ce18 <free>
                pMbx = NULL;
 8006cac:	2300      	movs	r3, #0
 8006cae:	607b      	str	r3, [r7, #4]
            }

            return 0;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	e099      	b.n	8006de8 <EOE_ServiceInd+0x370>

        case EOE_TYPE_INIT_REQ:
            /* EoE datagram with IP settings received */
            pEoeInit = (ETHERCAT_EOE_INIT MBXMEM *) &pEoe[1];
 8006cb4:	69bb      	ldr	r3, [r7, #24]
 8006cb6:	3304      	adds	r3, #4
 8006cb8:	613b      	str	r3, [r7, #16]
            if ( SWAPWORD(pEoeInit->Flags1) & EOEINIT_CONTAINSMACADDR )
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	881b      	ldrh	r3, [r3, #0]
 8006cbe:	f003 0301 	and.w	r3, r3, #1
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d008      	beq.n	8006cd8 <EOE_ServiceInd+0x260>
            {
                /* EoE datagram contains MAC Address, so the MAC Address is expected (6 bytes) */
                expSize += 6;
 8006cc6:	8bfb      	ldrh	r3, [r7, #30]
 8006cc8:	3306      	adds	r3, #6
 8006cca:	83fb      	strh	r3, [r7, #30]
                /* check if enough bytes were received */
                if ( mbxSize < expSize )
 8006ccc:	8afa      	ldrh	r2, [r7, #22]
 8006cce:	8bfb      	ldrh	r3, [r7, #30]
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d201      	bcs.n	8006cd8 <EOE_ServiceInd+0x260>
                    return MBXERR_SIZETOOSHORT;
 8006cd4:	2306      	movs	r3, #6
 8006cd6:	e087      	b.n	8006de8 <EOE_ServiceInd+0x370>
            }
            if ( SWAPWORD(pEoeInit->Flags1) & EOEINIT_CONTAINSIPADDR )
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	881b      	ldrh	r3, [r3, #0]
 8006cdc:	f003 0302 	and.w	r3, r3, #2
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d008      	beq.n	8006cf6 <EOE_ServiceInd+0x27e>
            {
                /* EoE datagram contains IP Address, so the IP Address is expected (4 bytes) */
                expSize += 4;
 8006ce4:	8bfb      	ldrh	r3, [r7, #30]
 8006ce6:	3304      	adds	r3, #4
 8006ce8:	83fb      	strh	r3, [r7, #30]
                /* check if enough bytes were received */
                if ( mbxSize < expSize )
 8006cea:	8afa      	ldrh	r2, [r7, #22]
 8006cec:	8bfb      	ldrh	r3, [r7, #30]
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d201      	bcs.n	8006cf6 <EOE_ServiceInd+0x27e>
                    return MBXERR_SIZETOOSHORT;
 8006cf2:	2306      	movs	r3, #6
 8006cf4:	e078      	b.n	8006de8 <EOE_ServiceInd+0x370>
            }
            if ( SWAPWORD(pEoeInit->Flags1) & EOEINIT_CONTAINSSUBNETMASK )
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	881b      	ldrh	r3, [r3, #0]
 8006cfa:	f003 0304 	and.w	r3, r3, #4
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d012      	beq.n	8006d28 <EOE_ServiceInd+0x2b0>
            {
                /* EoE datagram contains Subnet Mask, so the Subnet Mask is expected (4 bytes) */
                expSize += 4;
 8006d02:	8bfb      	ldrh	r3, [r7, #30]
 8006d04:	3304      	adds	r3, #4
 8006d06:	83fb      	strh	r3, [r7, #30]
                /* check if enough bytes were received */
                if ( mbxSize < expSize )
 8006d08:	8afa      	ldrh	r2, [r7, #22]
 8006d0a:	8bfb      	ldrh	r3, [r7, #30]
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d20b      	bcs.n	8006d28 <EOE_ServiceInd+0x2b0>
                    return MBXERR_SIZETOOSHORT;
 8006d10:	2306      	movs	r3, #6
 8006d12:	e069      	b.n	8006de8 <EOE_ServiceInd+0x370>
 8006d14:	20000651 	.word	0x20000651
 8006d18:	20000658 	.word	0x20000658
 8006d1c:	20000652 	.word	0x20000652
 8006d20:	20000654 	.word	0x20000654
 8006d24:	20000656 	.word	0x20000656
            }
            if ( SWAPWORD(pEoeInit->Flags1) & EOEINIT_CONTAINSDEFAULTGATEWAY )
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	881b      	ldrh	r3, [r3, #0]
 8006d2c:	f003 0308 	and.w	r3, r3, #8
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d008      	beq.n	8006d46 <EOE_ServiceInd+0x2ce>
            {
                /* EoE datagram contains Default Gateway, so the Default Gateway is expected (4 bytes) */
                expSize += 4;
 8006d34:	8bfb      	ldrh	r3, [r7, #30]
 8006d36:	3304      	adds	r3, #4
 8006d38:	83fb      	strh	r3, [r7, #30]
                /* check if enough bytes were received */
                if ( mbxSize < expSize )
 8006d3a:	8afa      	ldrh	r2, [r7, #22]
 8006d3c:	8bfb      	ldrh	r3, [r7, #30]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d201      	bcs.n	8006d46 <EOE_ServiceInd+0x2ce>
                    return MBXERR_SIZETOOSHORT;
 8006d42:	2306      	movs	r3, #6
 8006d44:	e050      	b.n	8006de8 <EOE_ServiceInd+0x370>
            }
            if ( SWAPWORD(pEoeInit->Flags1) & EOEINIT_CONTAINSDNSSERVER )
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	881b      	ldrh	r3, [r3, #0]
 8006d4a:	f003 0310 	and.w	r3, r3, #16
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d008      	beq.n	8006d64 <EOE_ServiceInd+0x2ec>
            {
                /* EoE datagram contains Dns Server, so the Dns Server is expected (4 bytes) */
                expSize += 4;
 8006d52:	8bfb      	ldrh	r3, [r7, #30]
 8006d54:	3304      	adds	r3, #4
 8006d56:	83fb      	strh	r3, [r7, #30]
                /* check if enough bytes were received */
                if ( mbxSize < expSize )
 8006d58:	8afa      	ldrh	r2, [r7, #22]
 8006d5a:	8bfb      	ldrh	r3, [r7, #30]
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d201      	bcs.n	8006d64 <EOE_ServiceInd+0x2ec>
                    return MBXERR_SIZETOOSHORT;
 8006d60:	2306      	movs	r3, #6
 8006d62:	e041      	b.n	8006de8 <EOE_ServiceInd+0x370>
            }
            if ( SWAPWORD(pEoeInit->Flags1) & EOEINIT_CONTAINSDNSNAME )
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	881b      	ldrh	r3, [r3, #0]
 8006d68:	f003 0320 	and.w	r3, r3, #32
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d005      	beq.n	8006d7c <EOE_ServiceInd+0x304>
            {
                /* EoE datagram contains DNS name, so the DNS name is expected (1-32 bytes) */
                /* check if enough bytes were received */
                if ( mbxSize < (expSize+1) )
 8006d70:	8bfa      	ldrh	r2, [r7, #30]
 8006d72:	8afb      	ldrh	r3, [r7, #22]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d301      	bcc.n	8006d7c <EOE_ServiceInd+0x304>
                    return MBXERR_SIZETOOSHORT;
 8006d78:	2306      	movs	r3, #6
 8006d7a:	e035      	b.n	8006de8 <EOE_ServiceInd+0x370>
            }

            /* EoE datagram is correct, call application function to store the settings */
            result = EOEAPPL_SettingsInd(pEoeInit);
 8006d7c:	6938      	ldr	r0, [r7, #16]
 8006d7e:	f002 fd81 	bl	8009884 <EOEAPPL_SettingsInd>
 8006d82:	4603      	mov	r3, r0
 8006d84:	83bb      	strh	r3, [r7, #28]

/* ECATCHANGE_START(V5.11) EOE1*/
            pMbx->MbxHeader.Length = ETHERCAT_EOE_HEADER_LEN;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2204      	movs	r2, #4
 8006d8a:	801a      	strh	r2, [r3, #0]
            pMbx->Data[1] = SWAPWORD(result);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	8bba      	ldrh	r2, [r7, #28]
 8006d90:	811a      	strh	r2, [r3, #8]
/* ECATCHANGE_END(V5.11) EOE1*/

            /* Update EoE type flag */
            pMbx->Data[0] = SWAPWORD(EOE_TYPE_INIT_RES);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2203      	movs	r2, #3
 8006d96:	80da      	strh	r2, [r3, #6]
            break;
 8006d98:	e01b      	b.n	8006dd2 <EOE_ServiceInd+0x35a>
        case EOE_TYPE_GET_IP_PARAM_REQ:
/* ECATCHANGE_START(V5.11) EOE1*/
            result = EOEAPPL_GetSettingsInd(((ETHERCAT_EOE_INIT MBXMEM *) &pEoe[1]),&pMbx->MbxHeader.Length);
 8006d9a:	69bb      	ldr	r3, [r7, #24]
 8006d9c:	3304      	adds	r3, #4
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	4611      	mov	r1, r2
 8006da2:	4618      	mov	r0, r3
 8006da4:	f002 fd18 	bl	80097d8 <EOEAPPL_GetSettingsInd>
 8006da8:	4603      	mov	r3, r0
 8006daa:	83bb      	strh	r3, [r7, #28]
/* ECATCHANGE_END(V5.11) EOE1*/

            /* Update EoE type flag */
            pMbx->Data[0] = SWAPWORD(EOE_TYPE_GET_IP_PARAM_RES);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2207      	movs	r2, #7
 8006db0:	80da      	strh	r2, [r3, #6]
/* ECATCHANGE_START(V5.11) EOE1*/
            pMbx->Data[1] = SWAPWORD(result);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	8bba      	ldrh	r2, [r7, #28]
 8006db6:	811a      	strh	r2, [r3, #8]
/* ECATCHANGE_END(V5.11) EOE1*/

            break;
 8006db8:	e00b      	b.n	8006dd2 <EOE_ServiceInd+0x35a>
        case EOE_TYPE_TIMESTAMP_RES: // only supported by gateways
        case EOE_TYPE_MACFILTER_REQ: // only supported by gateways
        case EOE_TYPE_MACFILTER_RES: // only supported by gateways
        default:
            /* Update EoE type flag */
            pMbx->Data[0] = SWAPWORD(EOE_TYPE_INIT_RES);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2203      	movs	r2, #3
 8006dbe:	80da      	strh	r2, [r3, #6]

/* ECATCHANGE_START(V5.11) EOE1*/
            pMbx->MbxHeader.Length = ETHERCAT_EOE_HEADER_LEN;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2204      	movs	r2, #4
 8006dc4:	801a      	strh	r2, [r3, #0]
            pMbx->Data[1] = SWAPWORD(EOE_RESULT_UNSUPPORTED_TYPE);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2202      	movs	r2, #2
 8006dca:	811a      	strh	r2, [r3, #8]
/* ECATCHANGE_END(V5.11) EOE1*/
            break;
 8006dcc:	e001      	b.n	8006dd2 <EOE_ServiceInd+0x35a>
        }
    }
    else
        return MBXERR_SIZETOOSHORT;
 8006dce:	2306      	movs	r3, #6
 8006dd0:	e00a      	b.n	8006de8 <EOE_ServiceInd+0x370>

    if ( MBX_MailboxSendReq(pMbx, EOE_SERVICE) != 0 )
 8006dd2:	2108      	movs	r1, #8
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f003 fa29 	bl	800a22c <MBX_MailboxSendReq>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d002      	beq.n	8006de6 <EOE_ServiceInd+0x36e>
    {
        /* if the mailbox service could not be sent (or stored), the response will be
           stored in the variable pEoeSendStored and will be sent automatically
            from the mailbox handler (EOE_ContinueInd) when the send mailbox will be read
            the next time from the master */
        pEoeSendStored = pMbx;
 8006de0:	4a03      	ldr	r2, [pc, #12]	; (8006df0 <EOE_ServiceInd+0x378>)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6013      	str	r3, [r2, #0]
    }

    return 0;
 8006de6:	2300      	movs	r3, #0
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3720      	adds	r7, #32
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	20000668 	.word	0x20000668

08006df4 <SendFragment>:

 \brief    This function sends an EoE fragment
*////////////////////////////////////////////////////////////////////////////////////////

void SendFragment(void)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b082      	sub	sp, #8
 8006df8:	af00      	add	r7, sp, #0
    /* size contains the number of bytes which still has to be sent of the Ethernet frame */
    UINT16 size = u16EthernetSendSize - u16EthernetSendOffset;
 8006dfa:	4b6f      	ldr	r3, [pc, #444]	; (8006fb8 <SendFragment+0x1c4>)
 8006dfc:	881a      	ldrh	r2, [r3, #0]
 8006dfe:	4b6f      	ldr	r3, [pc, #444]	; (8006fbc <SendFragment+0x1c8>)
 8006e00:	881b      	ldrh	r3, [r3, #0]
 8006e02:	1ad3      	subs	r3, r2, r3
 8006e04:	80fb      	strh	r3, [r7, #6]
/* ECATCHANGE_START(V5.11) EOE2*/
    UINT8 result = 0;
 8006e06:	2300      	movs	r3, #0
 8006e08:	717b      	strb	r3, [r7, #5]
/* ECATCHANGE_END(V5.11) EOE2*/
    ETHERCAT_EOE_HEADER MBXMEM * pEoe;

    if ( (size + ETHERCAT_EOE_HEADER_LEN + MBX_HEADER_SIZE) > u16SendMbxSize )
 8006e0a:	88fb      	ldrh	r3, [r7, #6]
 8006e0c:	330a      	adds	r3, #10
 8006e0e:	4a6c      	ldr	r2, [pc, #432]	; (8006fc0 <SendFragment+0x1cc>)
 8006e10:	8812      	ldrh	r2, [r2, #0]
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d906      	bls.n	8006e24 <SendFragment+0x30>
        /* the remaining bytes cannot be sent with one mailbox service, so we have to
           send the next fragment which must be dividable by 32,
           the available mailbox size shall be rounded down to a value dividable by 32 */
        size = ((u16SendMbxSize - ETHERCAT_EOE_HEADER_LEN - MBX_HEADER_SIZE) >> 5) << 5;
 8006e16:	4b6a      	ldr	r3, [pc, #424]	; (8006fc0 <SendFragment+0x1cc>)
 8006e18:	881b      	ldrh	r3, [r3, #0]
 8006e1a:	3b0a      	subs	r3, #10
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	f023 031f 	bic.w	r3, r3, #31
 8006e22:	80fb      	strh	r3, [r7, #6]

    /* get a mailbox buffer to be sent */
    psWriteMbx = (TMBX MBXMEM *) APPL_AllocMailboxBuffer((size + ETHERCAT_EOE_HEADER_LEN + MBX_HEADER_SIZE));
 8006e24:	88fb      	ldrh	r3, [r7, #6]
 8006e26:	330a      	adds	r3, #10
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f005 ffed 	bl	800ce08 <malloc>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	461a      	mov	r2, r3
 8006e32:	4b64      	ldr	r3, [pc, #400]	; (8006fc4 <SendFragment+0x1d0>)
 8006e34:	601a      	str	r2, [r3, #0]
    if (psWriteMbx == NULL)
 8006e36:	4b63      	ldr	r3, [pc, #396]	; (8006fc4 <SendFragment+0x1d0>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d103      	bne.n	8006e46 <SendFragment+0x52>
    {
        /* set flag that the processing of the mailbox service will be checked in the
            function MBX_Main (called from ECAT_Main) */
        bReceiveMbxIsLocked = TRUE;
 8006e3e:	4b62      	ldr	r3, [pc, #392]	; (8006fc8 <SendFragment+0x1d4>)
 8006e40:	2201      	movs	r2, #1
 8006e42:	701a      	strb	r2, [r3, #0]
        return;
 8006e44:	e0b5      	b.n	8006fb2 <SendFragment+0x1be>
    }
    /* size of the mailbox data */
    psWriteMbx->MbxHeader.Length = size + ETHERCAT_EOE_HEADER_LEN;
 8006e46:	4b5f      	ldr	r3, [pc, #380]	; (8006fc4 <SendFragment+0x1d0>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	88fa      	ldrh	r2, [r7, #6]
 8006e4c:	3204      	adds	r2, #4
 8006e4e:	b292      	uxth	r2, r2
 8006e50:	801a      	strh	r2, [r3, #0]
    /* initialize the mailbox header */
    psWriteMbx->MbxHeader.Address = 0;
 8006e52:	4b5c      	ldr	r3, [pc, #368]	; (8006fc4 <SendFragment+0x1d0>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	2200      	movs	r2, #0
 8006e58:	805a      	strh	r2, [r3, #2]
    psWriteMbx->MbxHeader.Flags[0] = 0;
 8006e5a:	4b5a      	ldr	r3, [pc, #360]	; (8006fc4 <SendFragment+0x1d0>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	809a      	strh	r2, [r3, #4]
    psWriteMbx->MbxHeader.Flags[MBX_OFFS_TYPE] = (UINT16) (MBX_TYPE_EOE << MBX_SHIFT_TYPE);
 8006e62:	4b58      	ldr	r3, [pc, #352]	; (8006fc4 <SendFragment+0x1d0>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e6a:	809a      	strh	r2, [r3, #4]

    /* pEoe is a pointer to the EoE part of the mailbox service */
    pEoe = (ETHERCAT_EOE_HEADER MBXMEM *) psWriteMbx->Data;
 8006e6c:	4b55      	ldr	r3, [pc, #340]	; (8006fc4 <SendFragment+0x1d0>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	3306      	adds	r3, #6
 8006e72:	603b      	str	r3, [r7, #0]
    /* check if it is the last fragment */
    if ( size == (u16EthernetSendSize - u16EthernetSendOffset) )
 8006e74:	88fa      	ldrh	r2, [r7, #6]
 8006e76:	4b50      	ldr	r3, [pc, #320]	; (8006fb8 <SendFragment+0x1c4>)
 8006e78:	881b      	ldrh	r3, [r3, #0]
 8006e7a:	4619      	mov	r1, r3
 8006e7c:	4b4f      	ldr	r3, [pc, #316]	; (8006fbc <SendFragment+0x1c8>)
 8006e7e:	881b      	ldrh	r3, [r3, #0]
 8006e80:	1acb      	subs	r3, r1, r3
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d104      	bne.n	8006e90 <SendFragment+0x9c>
        pEoe->Flags1 = SWAPWORD(EOEHEADER_LASTFRAGMENT);
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e8c:	801a      	strh	r2, [r3, #0]
 8006e8e:	e002      	b.n	8006e96 <SendFragment+0xa2>
    else
        pEoe->Flags1 = 0;
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	2200      	movs	r2, #0
 8006e94:	801a      	strh	r2, [r3, #0]

    /* store the actual fragment number in the mailbox buffer */
    pEoe->Flags2 = SWAPWORD(u8SendFragmentNo);
 8006e96:	4b4d      	ldr	r3, [pc, #308]	; (8006fcc <SendFragment+0x1d8>)
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	b29a      	uxth	r2, r3
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	805a      	strh	r2, [r3, #2]
    if ( u8SendFragmentNo )
 8006ea0:	4b4a      	ldr	r3, [pc, #296]	; (8006fcc <SendFragment+0x1d8>)
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d00e      	beq.n	8006ec6 <SendFragment+0xd2>
    {
        /* it is not the first fragment, store the offset of the actual fragment to be sent
           in the mailbox buffer */
        pEoe->Flags2 |= SWAPWORD((u16EthernetSendOffset >> 5) << EOEHEADERSHIFT_OFFSETBUFFER);
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	885b      	ldrh	r3, [r3, #2]
 8006eac:	b21a      	sxth	r2, r3
 8006eae:	4b43      	ldr	r3, [pc, #268]	; (8006fbc <SendFragment+0x1c8>)
 8006eb0:	881b      	ldrh	r3, [r3, #0]
 8006eb2:	095b      	lsrs	r3, r3, #5
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	019b      	lsls	r3, r3, #6
 8006eb8:	b21b      	sxth	r3, r3
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	b21b      	sxth	r3, r3
 8006ebe:	b29a      	uxth	r2, r3
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	805a      	strh	r2, [r3, #2]
 8006ec4:	e014      	b.n	8006ef0 <SendFragment+0xfc>
    }
    else
    {
        /* it is the first fragment, store the size of the Ethernet frame (in 32 bytes blocks)
           in the mailbox buffer */
        pEoe->Flags2 |= SWAPWORD(((u16EthernetSendSize+31) >> 5) << EOEHEADERSHIFT_OFFSETBUFFER);
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	885b      	ldrh	r3, [r3, #2]
 8006eca:	b21a      	sxth	r2, r3
 8006ecc:	4b3a      	ldr	r3, [pc, #232]	; (8006fb8 <SendFragment+0x1c4>)
 8006ece:	881b      	ldrh	r3, [r3, #0]
 8006ed0:	331f      	adds	r3, #31
 8006ed2:	115b      	asrs	r3, r3, #5
 8006ed4:	019b      	lsls	r3, r3, #6
 8006ed6:	b21b      	sxth	r3, r3
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	b21b      	sxth	r3, r3
 8006edc:	b29a      	uxth	r2, r3
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	805a      	strh	r2, [r3, #2]
        /* the frame number is a 4-bit-field (bit 12-15) so we increment it here */
        u16SendFrameNo += 0x1000;
 8006ee2:	4b3b      	ldr	r3, [pc, #236]	; (8006fd0 <SendFragment+0x1dc>)
 8006ee4:	881b      	ldrh	r3, [r3, #0]
 8006ee6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006eea:	b29a      	uxth	r2, r3
 8006eec:	4b38      	ldr	r3, [pc, #224]	; (8006fd0 <SendFragment+0x1dc>)
 8006eee:	801a      	strh	r2, [r3, #0]
    }
    /* store the frame number in the mailbox buffer */
    pEoe->Flags2 |= SWAPWORD(u16SendFrameNo);
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	885a      	ldrh	r2, [r3, #2]
 8006ef4:	4b36      	ldr	r3, [pc, #216]	; (8006fd0 <SendFragment+0x1dc>)
 8006ef6:	881b      	ldrh	r3, [r3, #0]
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	b29a      	uxth	r2, r3
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	805a      	strh	r2, [r3, #2]

    /* copy the actual fragment in the mailbox buffer */
    MBXMEMCPY((UINT8 *)&pEoe[1], &((UINT8 *)pEthernetSendFrame)[u16EthernetSendOffset], size);
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	1d18      	adds	r0, r3, #4
 8006f04:	4b33      	ldr	r3, [pc, #204]	; (8006fd4 <SendFragment+0x1e0>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a2c      	ldr	r2, [pc, #176]	; (8006fbc <SendFragment+0x1c8>)
 8006f0a:	8812      	ldrh	r2, [r2, #0]
 8006f0c:	4413      	add	r3, r2
 8006f0e:	88fa      	ldrh	r2, [r7, #6]
 8006f10:	4619      	mov	r1, r3
 8006f12:	f005 ff99 	bl	800ce48 <memcpy>

/* ECATCHANGE_START(V5.11) EOE2*/
    result = MBX_MailboxSendReq(psWriteMbx, EOE_SERVICE);
 8006f16:	4b2b      	ldr	r3, [pc, #172]	; (8006fc4 <SendFragment+0x1d0>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2108      	movs	r1, #8
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f003 f985 	bl	800a22c <MBX_MailboxSendReq>
 8006f22:	4603      	mov	r3, r0
 8006f24:	717b      	strb	r3, [r7, #5]
    if ( result != 0 )
 8006f26:	797b      	ldrb	r3, [r7, #5]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d003      	beq.n	8006f34 <SendFragment+0x140>
    {
        /* if the mailbox service could not be sent (or stored), the response will be
           stored in the variable pEoeSendStored and will be sent automatically
            from the mailbox handler (EOE_ContinueInd) when the send mailbox will be read
            the next time from the master */
        pEoeSendStored = psWriteMbx;
 8006f2c:	4b25      	ldr	r3, [pc, #148]	; (8006fc4 <SendFragment+0x1d0>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a29      	ldr	r2, [pc, #164]	; (8006fd8 <SendFragment+0x1e4>)
 8006f32:	6013      	str	r3, [r2, #0]
    }

    if ( size == (u16EthernetSendSize - u16EthernetSendOffset) )
 8006f34:	88fa      	ldrh	r2, [r7, #6]
 8006f36:	4b20      	ldr	r3, [pc, #128]	; (8006fb8 <SendFragment+0x1c4>)
 8006f38:	881b      	ldrh	r3, [r3, #0]
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	4b1f      	ldr	r3, [pc, #124]	; (8006fbc <SendFragment+0x1c8>)
 8006f3e:	881b      	ldrh	r3, [r3, #0]
 8006f40:	1acb      	subs	r3, r1, r3
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d121      	bne.n	8006f8a <SendFragment+0x196>
    {
        /* it was the last fragment, we can return the buffer to the memory management */
        if(pEthernetSendFrame != NULL)
 8006f46:	4b23      	ldr	r3, [pc, #140]	; (8006fd4 <SendFragment+0x1e0>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d007      	beq.n	8006f5e <SendFragment+0x16a>
        {
            FREEMEM((void MBXMEM *) pEthernetSendFrame);
 8006f4e:	4b21      	ldr	r3, [pc, #132]	; (8006fd4 <SendFragment+0x1e0>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4618      	mov	r0, r3
 8006f54:	f005 ff60 	bl	800ce18 <free>
            pEthernetSendFrame = NULL;
 8006f58:	4b1e      	ldr	r3, [pc, #120]	; (8006fd4 <SendFragment+0x1e0>)
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	601a      	str	r2, [r3, #0]
        }
        /* next frame can be sent */
        bEoESendFramePending = FALSE;
 8006f5e:	4b1f      	ldr	r3, [pc, #124]	; (8006fdc <SendFragment+0x1e8>)
 8006f60:	2200      	movs	r2, #0
 8006f62:	701a      	strb	r2, [r3, #0]

/* ECATCHANGE_START(V5.11) EOE2*/
        if (result == 0)
 8006f64:	797b      	ldrb	r3, [r7, #5]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d107      	bne.n	8006f7a <SendFragment+0x186>
        {
            /*clear the pending EoE flag only if the last EoE Fragment was successfully written to the mailbox buffer*/
            u8MailboxSendReqStored &= ~EOE_SERVICE;
 8006f6a:	4b1d      	ldr	r3, [pc, #116]	; (8006fe0 <SendFragment+0x1ec>)
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	f023 0308 	bic.w	r3, r3, #8
 8006f72:	b2da      	uxtb	r2, r3
 8006f74:	4b1a      	ldr	r3, [pc, #104]	; (8006fe0 <SendFragment+0x1ec>)
 8006f76:	701a      	strb	r2, [r3, #0]
 8006f78:	e01b      	b.n	8006fb2 <SendFragment+0x1be>
        }
        else
        {
            /*Copy the last EoE fragment to the mailbox buffer failed. 
            Set the EoE pending indication to copy the fragment to the mailbox buffer when the buffer was read by the master*/
            u8MailboxSendReqStored |= EOE_SERVICE;
 8006f7a:	4b19      	ldr	r3, [pc, #100]	; (8006fe0 <SendFragment+0x1ec>)
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	f043 0308 	orr.w	r3, r3, #8
 8006f82:	b2da      	uxtb	r2, r3
 8006f84:	4b16      	ldr	r3, [pc, #88]	; (8006fe0 <SendFragment+0x1ec>)
 8006f86:	701a      	strb	r2, [r3, #0]
 8006f88:	e013      	b.n	8006fb2 <SendFragment+0x1be>
/* ECATCHANGE_END(V5.11) EOE2*/
    }
    else
    {
        /* we have to increment the offset for the next fragment to be sent */
        u16EthernetSendOffset += size;
 8006f8a:	4b0c      	ldr	r3, [pc, #48]	; (8006fbc <SendFragment+0x1c8>)
 8006f8c:	881a      	ldrh	r2, [r3, #0]
 8006f8e:	88fb      	ldrh	r3, [r7, #6]
 8006f90:	4413      	add	r3, r2
 8006f92:	b29a      	uxth	r2, r3
 8006f94:	4b09      	ldr	r3, [pc, #36]	; (8006fbc <SendFragment+0x1c8>)
 8006f96:	801a      	strh	r2, [r3, #0]
        /* increment the fragment number */
        u8SendFragmentNo++;
 8006f98:	4b0c      	ldr	r3, [pc, #48]	; (8006fcc <SendFragment+0x1d8>)
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	3301      	adds	r3, #1
 8006f9e:	b2da      	uxtb	r2, r3
 8006fa0:	4b0a      	ldr	r3, [pc, #40]	; (8006fcc <SendFragment+0x1d8>)
 8006fa2:	701a      	strb	r2, [r3, #0]
        u8MailboxSendReqStored |= EOE_SERVICE;
 8006fa4:	4b0e      	ldr	r3, [pc, #56]	; (8006fe0 <SendFragment+0x1ec>)
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	f043 0308 	orr.w	r3, r3, #8
 8006fac:	b2da      	uxtb	r2, r3
 8006fae:	4b0c      	ldr	r3, [pc, #48]	; (8006fe0 <SendFragment+0x1ec>)
 8006fb0:	701a      	strb	r2, [r3, #0]
    }
}
 8006fb2:	3708      	adds	r7, #8
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}
 8006fb8:	2000065e 	.word	0x2000065e
 8006fbc:	20000660 	.word	0x20000660
 8006fc0:	20000878 	.word	0x20000878
 8006fc4:	20000a88 	.word	0x20000a88
 8006fc8:	20000874 	.word	0x20000874
 8006fcc:	2000065c 	.word	0x2000065c
 8006fd0:	20000662 	.word	0x20000662
 8006fd4:	20000664 	.word	0x20000664
 8006fd8:	20000668 	.word	0x20000668
 8006fdc:	20000650 	.word	0x20000650
 8006fe0:	20000a84 	.word	0x20000a84

08006fe4 <EOE_ContinueInd>:

 \brief    This function is called when the next mailbox fragment can be sent.
*////////////////////////////////////////////////////////////////////////////////////////

void EOE_ContinueInd(TMBX MBXMEM * pMbx)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b082      	sub	sp, #8
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
    if ( pEoeSendStored )
 8006fec:	4b0b      	ldr	r3, [pc, #44]	; (800701c <EOE_ContinueInd+0x38>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d009      	beq.n	8007008 <EOE_ContinueInd+0x24>
    {
        /* send the stored EoE service which could not be sent before */
        MBX_MailboxSendReq(pEoeSendStored, 0);
 8006ff4:	4b09      	ldr	r3, [pc, #36]	; (800701c <EOE_ContinueInd+0x38>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2100      	movs	r1, #0
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f003 f916 	bl	800a22c <MBX_MailboxSendReq>
        pEoeSendStored = 0;
 8007000:	4b06      	ldr	r3, [pc, #24]	; (800701c <EOE_ContinueInd+0x38>)
 8007002:	2200      	movs	r2, #0
 8007004:	601a      	str	r2, [r3, #0]
    else if ( bEoESendFramePending )
    {
        /* send the next fragment of the actual frame */
        SendFragment();
    }
}
 8007006:	e005      	b.n	8007014 <EOE_ContinueInd+0x30>
    else if ( bEoESendFramePending )
 8007008:	4b05      	ldr	r3, [pc, #20]	; (8007020 <EOE_ContinueInd+0x3c>)
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d001      	beq.n	8007014 <EOE_ContinueInd+0x30>
        SendFragment();
 8007010:	f7ff fef0 	bl	8006df4 <SendFragment>
}
 8007014:	bf00      	nop
 8007016:	3708      	adds	r7, #8
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}
 800701c:	20000668 	.word	0x20000668
 8007020:	20000650 	.word	0x20000650

08007024 <EOE_SendFrameReq>:

 \brief    This function is called from the application to sent an Ethernet frame
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 EOE_SendFrameReq(UINT8 MBXMEM * pFrame, UINT16 frameSize)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b082      	sub	sp, #8
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	460b      	mov	r3, r1
 800702e:	807b      	strh	r3, [r7, #2]
    if ( !bEoESendFramePending && nAlStatus != STATE_INIT
 8007030:	4b14      	ldr	r3, [pc, #80]	; (8007084 <EOE_SendFrameReq+0x60>)
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d11f      	bne.n	8007078 <EOE_SendFrameReq+0x54>
 8007038:	4b13      	ldr	r3, [pc, #76]	; (8007088 <EOE_SendFrameReq+0x64>)
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	2b01      	cmp	r3, #1
 800703e:	d01b      	beq.n	8007078 <EOE_SendFrameReq+0x54>
        && (pEoeSendStored == NULL || pFrame == (UINT8 MBXMEM *)pEoeSendStored)
 8007040:	4b12      	ldr	r3, [pc, #72]	; (800708c <EOE_SendFrameReq+0x68>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d004      	beq.n	8007052 <EOE_SendFrameReq+0x2e>
 8007048:	4b10      	ldr	r3, [pc, #64]	; (800708c <EOE_SendFrameReq+0x68>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	687a      	ldr	r2, [r7, #4]
 800704e:	429a      	cmp	r2, r3
 8007050:	d112      	bne.n	8007078 <EOE_SendFrameReq+0x54>
    {
        /* no Ethernet is sent yet, no datagram is currently stored and the slave is at least in PRE-OP,
           so we could sent the requested frame */
        DISABLE_MBX_INT;
        /* Ethernet frame is to be sent */
        bEoESendFramePending        = TRUE;
 8007052:	4b0c      	ldr	r3, [pc, #48]	; (8007084 <EOE_SendFrameReq+0x60>)
 8007054:	2201      	movs	r2, #1
 8007056:	701a      	strb	r2, [r3, #0]
        /* store the size of the Ethernet frame to be sent */
        u16EthernetSendSize      = frameSize;
 8007058:	4a0d      	ldr	r2, [pc, #52]	; (8007090 <EOE_SendFrameReq+0x6c>)
 800705a:	887b      	ldrh	r3, [r7, #2]
 800705c:	8013      	strh	r3, [r2, #0]
        /* store the buffer of the Ethernet frame to be sent */
        pEthernetSendFrame       = (MEM_ADDR MBXMEM *)pFrame;
 800705e:	4a0d      	ldr	r2, [pc, #52]	; (8007094 <EOE_SendFrameReq+0x70>)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6013      	str	r3, [r2, #0]
        /* we start with the first fragment */
        u16EthernetSendOffset    = 0;
 8007064:	4b0c      	ldr	r3, [pc, #48]	; (8007098 <EOE_SendFrameReq+0x74>)
 8007066:	2200      	movs	r2, #0
 8007068:	801a      	strh	r2, [r3, #0]
        u8SendFragmentNo         = 0;
 800706a:	4b0c      	ldr	r3, [pc, #48]	; (800709c <EOE_SendFrameReq+0x78>)
 800706c:	2200      	movs	r2, #0
 800706e:	701a      	strb	r2, [r3, #0]

        SendFragment();
 8007070:	f7ff fec0 	bl	8006df4 <SendFragment>
    }
    else
        /* frame could not be sent, try it later */
        return 1;

    return 0;
 8007074:	2300      	movs	r3, #0
 8007076:	e000      	b.n	800707a <EOE_SendFrameReq+0x56>
        return 1;
 8007078:	2301      	movs	r3, #1
}
 800707a:	4618      	mov	r0, r3
 800707c:	3708      	adds	r7, #8
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop
 8007084:	20000650 	.word	0x20000650
 8007088:	200006b2 	.word	0x200006b2
 800708c:	20000668 	.word	0x20000668
 8007090:	2000065e 	.word	0x2000065e
 8007094:	20000664 	.word	0x20000664
 8007098:	20000660 	.word	0x20000660
 800709c:	2000065c 	.word	0x2000065c

080070a0 <FOE_ServiceInd>:
 \brief    This function is called when a FoE (File Access over EtherCAT) service is received from
             the master.
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 FOE_ServiceInd(TFOEMBX MBXMEM * pFoeInd)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b08c      	sub	sp, #48	; 0x30
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
    /* initialize the result of the service checking */
    UINT16 nextState = ECAT_FOE_ERRCODE_ILLEGAL;
 80070a8:	f248 0304 	movw	r3, #32772	; 0x8004
 80070ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* dataSize contains the size of the file data */
    UINT16 dataSize = SWAPWORD(pFoeInd->MbxHeader.Length) - FOE_HEADER_SIZE;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	881b      	ldrh	r3, [r3, #0]
 80070b2:	3b08      	subs	r3, #8
 80070b4:	857b      	strh	r3, [r7, #42]	; 0x2a


    /* it has to be checked if the mailbox protocol is correct, the sent mailbox data length has to
       great enough for the service header of the FoE service */
    if ( SWAPWORD(pFoeInd->MbxHeader.Length) < FOE_HEADER_SIZE )
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	881b      	ldrh	r3, [r3, #0]
 80070ba:	2b07      	cmp	r3, #7
 80070bc:	d801      	bhi.n	80070c2 <FOE_ServiceInd+0x22>
        return MBXERR_SIZETOOSHORT;
 80070be:	2306      	movs	r3, #6
 80070c0:	e1a6      	b.n	8007410 <FOE_ServiceInd+0x370>

    switch ( SWAPWORD(pFoeInd->FoeHeader.OpCode) )
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	891b      	ldrh	r3, [r3, #8]
 80070c6:	3b01      	subs	r3, #1
 80070c8:	2b05      	cmp	r3, #5
 80070ca:	f200 80d9 	bhi.w	8007280 <FOE_ServiceInd+0x1e0>
 80070ce:	a201      	add	r2, pc, #4	; (adr r2, 80070d4 <FOE_ServiceInd+0x34>)
 80070d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070d4:	080070ed 	.word	0x080070ed
 80070d8:	08007153 	.word	0x08007153
 80070dc:	08007189 	.word	0x08007189
 80070e0:	080071d1 	.word	0x080071d1
 80070e4:	08007227 	.word	0x08007227
 80070e8:	08007243 	.word	0x08007243
    {
    case ECAT_FOE_OPCODE_RRQ:
        /* file read is requested */
        if ( u16FileAccessState == FOE_READY )
 80070ec:	4b94      	ldr	r3, [pc, #592]	; (8007340 <FOE_ServiceInd+0x2a0>)
 80070ee:	881b      	ldrh	r3, [r3, #0]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	f040 80ba 	bne.w	800726a <FOE_ServiceInd+0x1ca>
        {
            UINT32 u32Password = SWAPDWORD(pFoeInd->FoeHeader.Cmd.Password);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	68db      	ldr	r3, [r3, #12]
 80070fa:	61bb      	str	r3, [r7, #24]
            /* last FoE sequence was finished, call application function */
            nextState = FOE_Read(pFoeInd->Data, dataSize, pFoeInd->Data, SWAPDWORD(u32Password));
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f103 0010 	add.w	r0, r3, #16
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f103 0210 	add.w	r2, r3, #16
 8007108:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 800710a:	69bb      	ldr	r3, [r7, #24]
 800710c:	f002 fc04 	bl	8009918 <FOE_Read>
 8007110:	4603      	mov	r3, r0
 8007112:	85fb      	strh	r3, [r7, #46]	; 0x2e

/* ECATCHANGE_START(V5.11) FOE1*/
            /* u32LastFileOffset contains the offset of the file which is sent now */
            u32LastFileOffset = 0;
 8007114:	4b8b      	ldr	r3, [pc, #556]	; (8007344 <FOE_ServiceInd+0x2a4>)
 8007116:	2200      	movs	r2, #0
 8007118:	601a      	str	r2, [r3, #0]

            if (nextState <= FOE_MAXDATA)
 800711a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800711c:	f647 7295 	movw	r2, #32661	; 0x7f95
 8007120:	4293      	cmp	r3, r2
 8007122:	d806      	bhi.n	8007132 <FOE_ServiceInd+0x92>
            {
                /* the first data packet shall be sent */
                u32PacketNo    = 1;
 8007124:	4b88      	ldr	r3, [pc, #544]	; (8007348 <FOE_ServiceInd+0x2a8>)
 8007126:	2201      	movs	r2, #1
 8007128:	601a      	str	r2, [r3, #0]
                /* u32FileOffset contains the offset of the file which shall be sent when the next FoE ACK is received */
                u32FileOffset = nextState;
 800712a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800712c:	4a87      	ldr	r2, [pc, #540]	; (800734c <FOE_ServiceInd+0x2ac>)
 800712e:	6013      	str	r3, [r2, #0]
                u32FileOffset = 0;
                u16FileAccessState = FOE_WAIT_FOR_ACK;
            }
/* ECATCHANGE_END(V5.11) FOE1*/
        }
        break;
 8007130:	e09b      	b.n	800726a <FOE_ServiceInd+0x1ca>
            else if (nextState <= FOE_MAXBUSY)
 8007132:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007134:	f647 72fa 	movw	r2, #32762	; 0x7ffa
 8007138:	4293      	cmp	r3, r2
 800713a:	f200 8096 	bhi.w	800726a <FOE_ServiceInd+0x1ca>
                u32PacketNo    = 0;
 800713e:	4b82      	ldr	r3, [pc, #520]	; (8007348 <FOE_ServiceInd+0x2a8>)
 8007140:	2200      	movs	r2, #0
 8007142:	601a      	str	r2, [r3, #0]
                u32FileOffset = 0;
 8007144:	4b81      	ldr	r3, [pc, #516]	; (800734c <FOE_ServiceInd+0x2ac>)
 8007146:	2200      	movs	r2, #0
 8007148:	601a      	str	r2, [r3, #0]
                u16FileAccessState = FOE_WAIT_FOR_ACK;
 800714a:	4b7d      	ldr	r3, [pc, #500]	; (8007340 <FOE_ServiceInd+0x2a0>)
 800714c:	2201      	movs	r2, #1
 800714e:	801a      	strh	r2, [r3, #0]
        break;
 8007150:	e08b      	b.n	800726a <FOE_ServiceInd+0x1ca>

    case ECAT_FOE_OPCODE_WRQ:
        /* file write is requested */
        if ( u16FileAccessState == FOE_READY )
 8007152:	4b7b      	ldr	r3, [pc, #492]	; (8007340 <FOE_ServiceInd+0x2a0>)
 8007154:	881b      	ldrh	r3, [r3, #0]
 8007156:	2b00      	cmp	r3, #0
 8007158:	f040 8089 	bne.w	800726e <FOE_ServiceInd+0x1ce>
        {
            UINT32 u32Password = SWAPDWORD(pFoeInd->FoeHeader.Cmd.Password);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	61fb      	str	r3, [r7, #28]
            /* last FoE sequence was finished, call application function */
            nextState = FOE_Write(pFoeInd->Data, dataSize, SWAPDWORD(u32Password));
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	3310      	adds	r3, #16
 8007166:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8007168:	69fa      	ldr	r2, [r7, #28]
 800716a:	4618      	mov	r0, r3
 800716c:	f002 fc2e 	bl	80099cc <FOE_Write>
 8007170:	4603      	mov	r3, r0
 8007172:	85fb      	strh	r3, [r7, #46]	; 0x2e
            if ( nextState == 0 )
 8007174:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007176:	2b00      	cmp	r3, #0
 8007178:	d102      	bne.n	8007180 <FOE_ServiceInd+0xe0>
            {
                /* checking was successful, sent a FoE Ack service */
                nextState = FOE_ACK;
 800717a:	f647 73fd 	movw	r3, #32765	; 0x7ffd
 800717e:	85fb      	strh	r3, [r7, #46]	; 0x2e
            }
            /* initialize the packet number */
            u32PacketNo    = 0;
 8007180:	4b71      	ldr	r3, [pc, #452]	; (8007348 <FOE_ServiceInd+0x2a8>)
 8007182:	2200      	movs	r2, #0
 8007184:	601a      	str	r2, [r3, #0]
        }
        break;
 8007186:	e072      	b.n	800726e <FOE_ServiceInd+0x1ce>

    case ECAT_FOE_OPCODE_DATA:
        /* file data is received */
        if ( u16FileAccessState == FOE_WAIT_FOR_DATA
 8007188:	4b6d      	ldr	r3, [pc, #436]	; (8007340 <FOE_ServiceInd+0x2a0>)
 800718a:	881b      	ldrh	r3, [r3, #0]
 800718c:	2b02      	cmp	r3, #2
 800718e:	d003      	beq.n	8007198 <FOE_ServiceInd+0xf8>
          || u16FileAccessState == FOE_WAIT_FOR_LAST_DATA )
 8007190:	4b6b      	ldr	r3, [pc, #428]	; (8007340 <FOE_ServiceInd+0x2a0>)
 8007192:	881b      	ldrh	r3, [r3, #0]
 8007194:	2b06      	cmp	r3, #6
 8007196:	d16c      	bne.n	8007272 <FOE_ServiceInd+0x1d2>
        {
            UINT32 u32CmdPacketNo = SWAPDWORD(pFoeInd->FoeHeader.Cmd.PacketNo);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	623b      	str	r3, [r7, #32]
            /* we are waiting for file data, service is correct */
            if ( u32CmdPacketNo == u32PacketNo )
 800719e:	4b6a      	ldr	r3, [pc, #424]	; (8007348 <FOE_ServiceInd+0x2a8>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	6a3a      	ldr	r2, [r7, #32]
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d10f      	bne.n	80071c8 <FOE_ServiceInd+0x128>
            {
                /* the packet number is correct, call application function to store the file data */
                nextState = FOE_Data(pFoeInd->Data, dataSize);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	3310      	adds	r3, #16
 80071ac:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80071ae:	4611      	mov	r1, r2
 80071b0:	4618      	mov	r0, r3
 80071b2:	f002 fc39 	bl	8009a28 <FOE_Data>
 80071b6:	4603      	mov	r3, r0
 80071b8:	85fb      	strh	r3, [r7, #46]	; 0x2e
                if ( nextState == 0 )
 80071ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d158      	bne.n	8007272 <FOE_ServiceInd+0x1d2>
                {
                    /* checking was successful, sent a FoE Ack service */
                    nextState = FOE_ACK;
 80071c0:	f647 73fd 	movw	r3, #32765	; 0x7ffd
 80071c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
                }
            }
            else
                nextState = ECAT_FOE_ERRCODE_PACKENO;
        }
        break;
 80071c6:	e054      	b.n	8007272 <FOE_ServiceInd+0x1d2>
                nextState = ECAT_FOE_ERRCODE_PACKENO;
 80071c8:	f248 0305 	movw	r3, #32773	; 0x8005
 80071cc:	85fb      	strh	r3, [r7, #46]	; 0x2e
        break;
 80071ce:	e050      	b.n	8007272 <FOE_ServiceInd+0x1d2>

    case ECAT_FOE_OPCODE_ACK:
        /* acknowledge is received, next file part can be sent */
        if ( u16FileAccessState == FOE_WAIT_FOR_ACK )
 80071d0:	4b5b      	ldr	r3, [pc, #364]	; (8007340 <FOE_ServiceInd+0x2a0>)
 80071d2:	881b      	ldrh	r3, [r3, #0]
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d11e      	bne.n	8007216 <FOE_ServiceInd+0x176>
        {
            /* we are waiting for an acknowledge, service is correct, call the application function
               to get the next part of the file */
            nextState = FOE_Ack( u32FileOffset, pFoeInd->Data );
 80071d8:	4b5c      	ldr	r3, [pc, #368]	; (800734c <FOE_ServiceInd+0x2ac>)
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	3310      	adds	r3, #16
 80071e0:	4619      	mov	r1, r3
 80071e2:	4610      	mov	r0, r2
 80071e4:	f002 fc64 	bl	8009ab0 <FOE_Ack>
 80071e8:	4603      	mov	r3, r0
 80071ea:	85fb      	strh	r3, [r7, #46]	; 0x2e
            /* u32LastFileOffset contains the offset of the file which is sent now */
            u32LastFileOffset = u32FileOffset;
 80071ec:	4b57      	ldr	r3, [pc, #348]	; (800734c <FOE_ServiceInd+0x2ac>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a54      	ldr	r2, [pc, #336]	; (8007344 <FOE_ServiceInd+0x2a4>)
 80071f2:	6013      	str	r3, [r2, #0]

/* ECATCHANGE_START(V5.11) FOE1*/
            if (nextState <= FOE_MAXDATA) 
 80071f4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80071f6:	f647 7295 	movw	r2, #32661	; 0x7f95
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d83b      	bhi.n	8007276 <FOE_ServiceInd+0x1d6>
            {
                /* u32FileOffset contains the offset of the file which shall be sent when the next FoE ACK is received */
                u32FileOffset += nextState;
 80071fe:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007200:	4b52      	ldr	r3, [pc, #328]	; (800734c <FOE_ServiceInd+0x2ac>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4413      	add	r3, r2
 8007206:	4a51      	ldr	r2, [pc, #324]	; (800734c <FOE_ServiceInd+0x2ac>)
 8007208:	6013      	str	r3, [r2, #0]
                /* increment the packet number */
                u32PacketNo++;
 800720a:	4b4f      	ldr	r3, [pc, #316]	; (8007348 <FOE_ServiceInd+0x2a8>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	3301      	adds	r3, #1
 8007210:	4a4d      	ldr	r2, [pc, #308]	; (8007348 <FOE_ServiceInd+0x2a8>)
 8007212:	6013      	str	r3, [r2, #0]
        else if ( u16FileAccessState == FOE_WAIT_FOR_LAST_ACK )
        {
            /* we were waiting for the last acknowledge, now the sequence is finished */
            nextState = FOE_FINISHED_NOACK;
        }
        break;
 8007214:	e02f      	b.n	8007276 <FOE_ServiceInd+0x1d6>
        else if ( u16FileAccessState == FOE_WAIT_FOR_LAST_ACK )
 8007216:	4b4a      	ldr	r3, [pc, #296]	; (8007340 <FOE_ServiceInd+0x2a0>)
 8007218:	881b      	ldrh	r3, [r3, #0]
 800721a:	2b04      	cmp	r3, #4
 800721c:	d12b      	bne.n	8007276 <FOE_ServiceInd+0x1d6>
            nextState = FOE_FINISHED_NOACK;
 800721e:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 8007222:	85fb      	strh	r3, [r7, #46]	; 0x2e
        break;
 8007224:	e027      	b.n	8007276 <FOE_ServiceInd+0x1d6>

    case ECAT_FOE_OPCODE_ERR:
        /* a FoE Error service is received */
        if ( u16FileAccessState != FOE_READY )
 8007226:	4b46      	ldr	r3, [pc, #280]	; (8007340 <FOE_ServiceInd+0x2a0>)
 8007228:	881b      	ldrh	r3, [r3, #0]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d025      	beq.n	800727a <FOE_ServiceInd+0x1da>
        {
            UINT32 u32CmdErrorCode = SWAPDWORD(pFoeInd->FoeHeader.Cmd.ErrorCode);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	68db      	ldr	r3, [r3, #12]
 8007232:	627b      	str	r3, [r7, #36]	; 0x24
            /* a file transmission sequence is active, inform the application, that this sequence
               was stopped */
            FOE_Error( u32CmdErrorCode );
 8007234:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007236:	f002 fc87 	bl	8009b48 <FOE_Error>
            nextState = FOE_FINISHED;
 800723a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800723e:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
        break;
 8007240:	e01b      	b.n	800727a <FOE_ServiceInd+0x1da>

    case ECAT_FOE_OPCODE_BUSY:
        /* a FoE Busy service is received */
        if ( u16FileAccessState == FOE_WAIT_FOR_ACK
 8007242:	4b3f      	ldr	r3, [pc, #252]	; (8007340 <FOE_ServiceInd+0x2a0>)
 8007244:	881b      	ldrh	r3, [r3, #0]
 8007246:	2b01      	cmp	r3, #1
 8007248:	d003      	beq.n	8007252 <FOE_ServiceInd+0x1b2>
          || u16FileAccessState == FOE_WAIT_FOR_LAST_ACK )
 800724a:	4b3d      	ldr	r3, [pc, #244]	; (8007340 <FOE_ServiceInd+0x2a0>)
 800724c:	881b      	ldrh	r3, [r3, #0]
 800724e:	2b04      	cmp	r3, #4
 8007250:	d115      	bne.n	800727e <FOE_ServiceInd+0x1de>
        {
            /* we are waiting for an acknowledge, service is correct, call the application function
               to resend the last part of the file */
            nextState = FOE_Busy( SWAPWORD(pFoeInd->FoeHeader.Cmd.Busy.Done), u32LastFileOffset, pFoeInd->Data );
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	8998      	ldrh	r0, [r3, #12]
 8007256:	4b3b      	ldr	r3, [pc, #236]	; (8007344 <FOE_ServiceInd+0x2a4>)
 8007258:	6819      	ldr	r1, [r3, #0]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	3310      	adds	r3, #16
 800725e:	461a      	mov	r2, r3
 8007260:	f002 fc62 	bl	8009b28 <FOE_Busy>
 8007264:	4603      	mov	r3, r0
 8007266:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
        break;
 8007268:	e009      	b.n	800727e <FOE_ServiceInd+0x1de>
        break;
 800726a:	bf00      	nop
 800726c:	e008      	b.n	8007280 <FOE_ServiceInd+0x1e0>
        break;
 800726e:	bf00      	nop
 8007270:	e006      	b.n	8007280 <FOE_ServiceInd+0x1e0>
        break;
 8007272:	bf00      	nop
 8007274:	e004      	b.n	8007280 <FOE_ServiceInd+0x1e0>
        break;
 8007276:	bf00      	nop
 8007278:	e002      	b.n	8007280 <FOE_ServiceInd+0x1e0>
        break;
 800727a:	bf00      	nop
 800727c:	e000      	b.n	8007280 <FOE_ServiceInd+0x1e0>
        break;
 800727e:	bf00      	nop

    }

    if ( nextState <= FOE_MAXDATA )
 8007280:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007282:	f647 7295 	movw	r2, #32661	; 0x7f95
 8007286:	4293      	cmp	r3, r2
 8007288:	d81b      	bhi.n	80072c2 <FOE_ServiceInd+0x222>
    {
        /* we send DATA and wait for ACK */
        UINT32 d = SWAPDWORD(u32PacketNo);
 800728a:	4b2f      	ldr	r3, [pc, #188]	; (8007348 <FOE_ServiceInd+0x2a8>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	60bb      	str	r3, [r7, #8]

        /* store the OpCode in the mailbox buffer */
        pFoeInd->FoeHeader.OpCode           = SWAPWORD(ECAT_FOE_OPCODE_DATA);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2203      	movs	r2, #3
 8007294:	811a      	strh	r2, [r3, #8]
        /* store the packet number in the mailbox buffer */
        pFoeInd->FoeHeader.Cmd.PacketNo     = d;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	68ba      	ldr	r2, [r7, #8]
 800729a:	60da      	str	r2, [r3, #12]
     
        /* store the size of the mailbox data in the mailbox buffer */
        pFoeInd->MbxHeader.Length           = FOE_HEADER_SIZE + nextState;
 800729c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800729e:	3308      	adds	r3, #8
 80072a0:	b29a      	uxth	r2, r3
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	801a      	strh	r2, [r3, #0]

        if ( nextState == u16SendMbxSize - FOE_HEADER_SIZE - MBX_HEADER_SIZE )
 80072a6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80072a8:	4b29      	ldr	r3, [pc, #164]	; (8007350 <FOE_ServiceInd+0x2b0>)
 80072aa:	881b      	ldrh	r3, [r3, #0]
 80072ac:	3b0e      	subs	r3, #14
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d103      	bne.n	80072ba <FOE_ServiceInd+0x21a>
        {
            /* packets still following, we wait for an ACK */
            u16FileAccessState = FOE_WAIT_FOR_ACK;
 80072b2:	4b23      	ldr	r3, [pc, #140]	; (8007340 <FOE_ServiceInd+0x2a0>)
 80072b4:	2201      	movs	r2, #1
 80072b6:	801a      	strh	r2, [r3, #0]
 80072b8:	e09f      	b.n	80073fa <FOE_ServiceInd+0x35a>
        }
        else
        {
            /* it was the last Packet, we wait for the last ACK */
            u16FileAccessState = FOE_WAIT_FOR_LAST_ACK;
 80072ba:	4b21      	ldr	r3, [pc, #132]	; (8007340 <FOE_ServiceInd+0x2a0>)
 80072bc:	2204      	movs	r2, #4
 80072be:	801a      	strh	r2, [r3, #0]
 80072c0:	e09b      	b.n	80073fa <FOE_ServiceInd+0x35a>
        }
    }
    else if ( nextState <= FOE_MAXBUSY )
 80072c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80072c4:	f647 72fa 	movw	r2, #32762	; 0x7ffa
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d810      	bhi.n	80072ee <FOE_ServiceInd+0x24e>
    {
        /* we are still storing the received file data (in flash for example) and
           send BUSY and wait for the DATA to be sent again */
        /* store the OpCode in the mailbox buffer */
        pFoeInd->FoeHeader.OpCode                   = SWAPWORD(ECAT_FOE_OPCODE_BUSY);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2206      	movs	r2, #6
 80072d0:	811a      	strh	r2, [r3, #8]
        /* store the information how much progress we made until we can receive file data again */
/* ECATCHANGE_START(V5.11) FOE1*/
        pFoeInd->FoeHeader.Cmd.Busy.Done            = SWAPWORD(nextState-FOE_MAXBUSY_ZERO);
 80072d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80072d4:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 80072d8:	3b16      	subs	r3, #22
 80072da:	b29a      	uxth	r2, r3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	819a      	strh	r2, [r3, #12]
/* ECATCHANGE_END(V5.11) FOE1*/

        pFoeInd->FoeHeader.Cmd.Busy.Entire          = 0;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	81da      	strh	r2, [r3, #14]
        /* store the size of the mailbox data in the mailbox buffer */

        pFoeInd->MbxHeader.Length                   = FOE_HEADER_SIZE;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2208      	movs	r2, #8
 80072ea:	801a      	strh	r2, [r3, #0]
 80072ec:	e085      	b.n	80073fa <FOE_ServiceInd+0x35a>
    }
    else if ( nextState == FOE_ACK || nextState == FOE_ACKFINISHED )
 80072ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80072f0:	f647 72fd 	movw	r2, #32765	; 0x7ffd
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d004      	beq.n	8007302 <FOE_ServiceInd+0x262>
 80072f8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80072fa:	f647 72fc 	movw	r2, #32764	; 0x7ffc
 80072fe:	4293      	cmp	r3, r2
 8007300:	d128      	bne.n	8007354 <FOE_ServiceInd+0x2b4>
    {
        /* we send ACK and wait for DATA
            the next file data is expected with an incremented packet number, but
            we have to acknowledge the old packet first */
        UINT32 d = SWAPDWORD(u32PacketNo);
 8007302:	4b11      	ldr	r3, [pc, #68]	; (8007348 <FOE_ServiceInd+0x2a8>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	60fb      	str	r3, [r7, #12]
        u32PacketNo++;
 8007308:	4b0f      	ldr	r3, [pc, #60]	; (8007348 <FOE_ServiceInd+0x2a8>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	3301      	adds	r3, #1
 800730e:	4a0e      	ldr	r2, [pc, #56]	; (8007348 <FOE_ServiceInd+0x2a8>)
 8007310:	6013      	str	r3, [r2, #0]
        /* store the OpCode in the mailbox buffer */
        pFoeInd->FoeHeader.OpCode                   = SWAPWORD(ECAT_FOE_OPCODE_ACK);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2204      	movs	r2, #4
 8007316:	811a      	strh	r2, [r3, #8]
        /* store the packet number in the mailbox buffer */
        pFoeInd->FoeHeader.Cmd.PacketNo             = d;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	68fa      	ldr	r2, [r7, #12]
 800731c:	60da      	str	r2, [r3, #12]
        /* store the size of the mailbox data in the mailbox buffer */
        pFoeInd->MbxHeader.Length                   = SIZEOF(TFOEHEADER);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2208      	movs	r2, #8
 8007322:	801a      	strh	r2, [r3, #0]

        /* we wait for the next data part */
        if ( nextState == FOE_ACK )
 8007324:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007326:	f647 72fd 	movw	r2, #32765	; 0x7ffd
 800732a:	4293      	cmp	r3, r2
 800732c:	d103      	bne.n	8007336 <FOE_ServiceInd+0x296>
            /* we wait for the next data part */
            u16FileAccessState = FOE_WAIT_FOR_DATA;
 800732e:	4b04      	ldr	r3, [pc, #16]	; (8007340 <FOE_ServiceInd+0x2a0>)
 8007330:	2202      	movs	r2, #2
 8007332:	801a      	strh	r2, [r3, #0]
    {
 8007334:	e061      	b.n	80073fa <FOE_ServiceInd+0x35a>
        else
            /* the last data part was received */
            u16FileAccessState = FOE_READY;
 8007336:	4b02      	ldr	r3, [pc, #8]	; (8007340 <FOE_ServiceInd+0x2a0>)
 8007338:	2200      	movs	r2, #0
 800733a:	801a      	strh	r2, [r3, #0]
    {
 800733c:	e05d      	b.n	80073fa <FOE_ServiceInd+0x35a>
 800733e:	bf00      	nop
 8007340:	20000678 	.word	0x20000678
 8007344:	20000674 	.word	0x20000674
 8007348:	2000066c 	.word	0x2000066c
 800734c:	20000670 	.word	0x20000670
 8007350:	20000878 	.word	0x20000878
    }
    else if ( nextState < FOE_ERROR )
 8007354:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8007358:	2b00      	cmp	r3, #0
 800735a:	db07      	blt.n	800736c <FOE_ServiceInd+0x2cc>
    {
        /* the file transmission sequence is finished, we have to send nothing */
        u16FileAccessState = FOE_READY;
 800735c:	4b2e      	ldr	r3, [pc, #184]	; (8007418 <FOE_ServiceInd+0x378>)
 800735e:	2200      	movs	r2, #0
 8007360:	801a      	strh	r2, [r3, #0]
        APPL_FreeMailboxBuffer(pFoeInd);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f005 fd58 	bl	800ce18 <free>
        return 0;
 8007368:	2300      	movs	r3, #0
 800736a:	e051      	b.n	8007410 <FOE_ServiceInd+0x370>
    }
    else
    {
        UINT32 d = SWAPDWORD(nextState);
 800736c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800736e:	617b      	str	r3, [r7, #20]
        UINT8 b = 0;
 8007370:	2300      	movs	r3, #0
 8007372:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

        /* store the OpCode in the mailbox buffer */
        pFoeInd->FoeHeader.OpCode                    = SWAPWORD(ECAT_FOE_OPCODE_ERR);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2205      	movs	r2, #5
 800737a:	811a      	strh	r2, [r3, #8]
        /* store the ErrorCode in the mailbox buffer */
        pFoeInd->FoeHeader.Cmd.ErrorCode            = d;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	697a      	ldr	r2, [r7, #20]
 8007380:	60da      	str	r2, [r3, #12]
        /* store the size of the mailbox data in the mailbox buffer */
        pFoeInd->MbxHeader.Length                   = SIZEOF(TFOEHEADER);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2208      	movs	r2, #8
 8007386:	801a      	strh	r2, [r3, #0]

        /* Error Text is returned in pFoeInd->Data */
        while (b < 32)
 8007388:	e01d      	b.n	80073c6 <FOE_ServiceInd+0x326>
        {
            UINT16 data = ((UINT16 MBXMEM *) pFoeInd->Data)[(b >> 1)];
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f103 0210 	add.w	r2, r3, #16
 8007390:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007394:	085b      	lsrs	r3, r3, #1
 8007396:	b2db      	uxtb	r3, r3
 8007398:	005b      	lsls	r3, r3, #1
 800739a:	4413      	add	r3, r2
 800739c:	881b      	ldrh	r3, [r3, #0]
 800739e:	827b      	strh	r3, [r7, #18]

            if ((data & 0x00FF) == 0)
 80073a0:	8a7b      	ldrh	r3, [r7, #18]
 80073a2:	b2db      	uxtb	r3, r3
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d013      	beq.n	80073d0 <FOE_ServiceInd+0x330>
                break;
            b++;
 80073a8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80073ac:	3301      	adds	r3, #1
 80073ae:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        
            if ((data & 0xFF00) == 0)
 80073b2:	8a7b      	ldrh	r3, [r7, #18]
 80073b4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d00b      	beq.n	80073d4 <FOE_ServiceInd+0x334>
                break;
            b++;
 80073bc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80073c0:	3301      	adds	r3, #1
 80073c2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        while (b < 32)
 80073c6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80073ca:	2b1f      	cmp	r3, #31
 80073cc:	d9dd      	bls.n	800738a <FOE_ServiceInd+0x2ea>
 80073ce:	e002      	b.n	80073d6 <FOE_ServiceInd+0x336>
                break;
 80073d0:	bf00      	nop
 80073d2:	e000      	b.n	80073d6 <FOE_ServiceInd+0x336>
                break;
 80073d4:	bf00      	nop
        }
        if ( b < 32 )
 80073d6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80073da:	2b1f      	cmp	r3, #31
 80073dc:	d80a      	bhi.n	80073f4 <FOE_ServiceInd+0x354>
        {
            pFoeInd->MbxHeader.Length    += b+1;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	881a      	ldrh	r2, [r3, #0]
 80073e2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	4413      	add	r3, r2
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	3301      	adds	r3, #1
 80073ee:	b29a      	uxth	r2, r3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	801a      	strh	r2, [r3, #0]
        }

        /* the file transmission sequence is finished */
        u16FileAccessState = FOE_READY;
 80073f4:	4b08      	ldr	r3, [pc, #32]	; (8007418 <FOE_ServiceInd+0x378>)
 80073f6:	2200      	movs	r2, #0
 80073f8:	801a      	strh	r2, [r3, #0]
    }

    {
        if ( MBX_MailboxSendReq((TMBX MBXMEM *) pFoeInd, FOE_SERVICE) != 0 )
 80073fa:	2140      	movs	r1, #64	; 0x40
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f002 ff15 	bl	800a22c <MBX_MailboxSendReq>
 8007402:	4603      	mov	r3, r0
 8007404:	2b00      	cmp	r3, #0
 8007406:	d002      	beq.n	800740e <FOE_ServiceInd+0x36e>
        {
            /* if the mailbox service could not be sent (or stored), the response will be
               stored in the variable pFoeSendStored and will be sent automatically
                from the mailbox handler (FOE_ContinueInd) when the send mailbox will be read
                the next time from the master */
            pFoeSendStored = (TMBX MBXMEM *) pFoeInd;
 8007408:	4a04      	ldr	r2, [pc, #16]	; (800741c <FOE_ServiceInd+0x37c>)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6013      	str	r3, [r2, #0]
        }
    }

    return 0;
 800740e:	2300      	movs	r3, #0
}
 8007410:	4618      	mov	r0, r3
 8007412:	3730      	adds	r7, #48	; 0x30
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}
 8007418:	20000678 	.word	0x20000678
 800741c:	2000067c 	.word	0x2000067c

08007420 <FOE_ContinueInd>:

 \brief    This function is called when the next mailbox fragment can be sent.
*////////////////////////////////////////////////////////////////////////////////////////

void FOE_ContinueInd(TMBX MBXMEM * pMbx)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
    if ( pFoeSendStored )
 8007428:	4b08      	ldr	r3, [pc, #32]	; (800744c <FOE_ContinueInd+0x2c>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d008      	beq.n	8007442 <FOE_ContinueInd+0x22>
    {
        /* send the stored FoE service which could not be sent before */
        MBX_MailboxSendReq(pFoeSendStored, 0);
 8007430:	4b06      	ldr	r3, [pc, #24]	; (800744c <FOE_ContinueInd+0x2c>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	2100      	movs	r1, #0
 8007436:	4618      	mov	r0, r3
 8007438:	f002 fef8 	bl	800a22c <MBX_MailboxSendReq>
        pFoeSendStored = 0;
 800743c:	4b03      	ldr	r3, [pc, #12]	; (800744c <FOE_ContinueInd+0x2c>)
 800743e:	2200      	movs	r2, #0
 8007440:	601a      	str	r2, [r3, #0]
    }
}
 8007442:	bf00      	nop
 8007444:	3708      	adds	r7, #8
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}
 800744a:	bf00      	nop
 800744c:	2000067c 	.word	0x2000067c

08007450 <ResetALEventMask>:
 \param    intMask        interrupt mask (disabled interrupt shall be zero)

 \brief    This function makes an logical and with the AL Event Mask register (0x204)
*////////////////////////////////////////////////////////////////////////////////////////
void ResetALEventMask(UINT16 intMask)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	4603      	mov	r3, r0
 8007458:	80fb      	strh	r3, [r7, #6]
    UINT16 mask;
    HW_EscReadWord(mask, ESC_AL_EVENTMASK_OFFSET);
 800745a:	f107 030e 	add.w	r3, r7, #14
 800745e:	2202      	movs	r2, #2
 8007460:	f44f 7101 	mov.w	r1, #516	; 0x204
 8007464:	4618      	mov	r0, r3
 8007466:	f001 ffb1 	bl	80093cc <HW_EscRead>
    
    mask &= intMask;
 800746a:	89fa      	ldrh	r2, [r7, #14]
 800746c:	88fb      	ldrh	r3, [r7, #6]
 800746e:	4013      	ands	r3, r2
 8007470:	b29b      	uxth	r3, r3
 8007472:	81fb      	strh	r3, [r7, #14]

    DISABLE_ESC_INT();
 8007474:	f7f9 fcae 	bl	8000dd4 <disable_Irq_Sync0_Sync1>


    HW_EscWriteWord(mask, ESC_AL_EVENTMASK_OFFSET);
 8007478:	f107 030e 	add.w	r3, r7, #14
 800747c:	2202      	movs	r2, #2
 800747e:	f44f 7101 	mov.w	r1, #516	; 0x204
 8007482:	4618      	mov	r0, r3
 8007484:	f001 fffe 	bl	8009484 <HW_EscWrite>
    ENABLE_ESC_INT();
 8007488:	f7f9 fc94 	bl	8000db4 <enable_Irq_Sync0_Sync1>
}
 800748c:	bf00      	nop
 800748e:	3710      	adds	r7, #16
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <SetALEventMask>:
 \param    intMask        interrupt mask (enabled interrupt shall be one)

  \brief    This function makes an logical or with the AL Event Mask register (0x204)
*////////////////////////////////////////////////////////////////////////////////////////
void SetALEventMask(UINT16 intMask)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
 800749a:	4603      	mov	r3, r0
 800749c:	80fb      	strh	r3, [r7, #6]
    UINT16 mask;
    HW_EscReadWord(mask, ESC_AL_EVENTMASK_OFFSET);
 800749e:	f107 030e 	add.w	r3, r7, #14
 80074a2:	2202      	movs	r2, #2
 80074a4:	f44f 7101 	mov.w	r1, #516	; 0x204
 80074a8:	4618      	mov	r0, r3
 80074aa:	f001 ff8f 	bl	80093cc <HW_EscRead>
    
    mask |= intMask;
 80074ae:	89fa      	ldrh	r2, [r7, #14]
 80074b0:	88fb      	ldrh	r3, [r7, #6]
 80074b2:	4313      	orrs	r3, r2
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	81fb      	strh	r3, [r7, #14]

    DISABLE_ESC_INT();
 80074b8:	f7f9 fc8c 	bl	8000dd4 <disable_Irq_Sync0_Sync1>


    HW_EscWriteWord(mask, ESC_AL_EVENTMASK_OFFSET);
 80074bc:	f107 030e 	add.w	r3, r7, #14
 80074c0:	2202      	movs	r2, #2
 80074c2:	f44f 7101 	mov.w	r1, #516	; 0x204
 80074c6:	4618      	mov	r0, r3
 80074c8:	f001 ffdc 	bl	8009484 <HW_EscWrite>
    ENABLE_ESC_INT();
 80074cc:	f7f9 fc72 	bl	8000db4 <enable_Irq_Sync0_Sync1>
}
 80074d0:	bf00      	nop
 80074d2:	3710      	adds	r7, #16
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <UpdateEEPROMLoadedState>:
/**

\brief    This function reads the EEPROM loaded state
*////////////////////////////////////////////////////////////////////////////////////////
void UpdateEEPROMLoadedState(void)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b082      	sub	sp, #8
 80074dc:	af00      	add	r7, sp, #0
    {
       UINT16 TmpVar = 0;
 80074de:	2300      	movs	r3, #0
 80074e0:	80fb      	strh	r3, [r7, #6]
       //read EEPROM loaded information
       HW_EscReadWord(TmpVar, ESC_EEPROM_CONTROL_OFFSET);
 80074e2:	1dbb      	adds	r3, r7, #6
 80074e4:	2202      	movs	r2, #2
 80074e6:	f240 5102 	movw	r1, #1282	; 0x502
 80074ea:	4618      	mov	r0, r3
 80074ec:	f001 ff6e 	bl	80093cc <HW_EscRead>
       TmpVar = SWAPWORD(TmpVar);
 80074f0:	88fb      	ldrh	r3, [r7, #6]
 80074f2:	80fb      	strh	r3, [r7, #6]

       if (((TmpVar & ESC_EEPROM_ERROR_CRC) > 0)
 80074f4:	88fb      	ldrh	r3, [r7, #6]
 80074f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	dc04      	bgt.n	8007508 <UpdateEEPROMLoadedState+0x30>
          || ((TmpVar & ESC_EEPROM_ERROR_LOAD) > 0))
 80074fe:	88fb      	ldrh	r3, [r7, #6]
 8007500:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007504:	2b00      	cmp	r3, #0
 8007506:	dd03      	ble.n	8007510 <UpdateEEPROMLoadedState+0x38>
       {
          EepromLoaded = FALSE;
 8007508:	4b05      	ldr	r3, [pc, #20]	; (8007520 <UpdateEEPROMLoadedState+0x48>)
 800750a:	2200      	movs	r2, #0
 800750c:	701a      	strb	r2, [r3, #0]
 800750e:	e003      	b.n	8007518 <UpdateEEPROMLoadedState+0x40>
       }
       else
       {
          EepromLoaded = TRUE;
 8007510:	4b03      	ldr	r3, [pc, #12]	; (8007520 <UpdateEEPROMLoadedState+0x48>)
 8007512:	2201      	movs	r2, #1
 8007514:	701a      	strb	r2, [r3, #0]
       }
    }
}
 8007516:	bf00      	nop
 8007518:	bf00      	nop
 800751a:	3708      	adds	r7, #8
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}
 8007520:	200006c8 	.word	0x200006c8

08007524 <GetSyncMan>:
 \brief    This function is called to read the SYNC Manager channel descriptions of the
             process data SYNC Managers.
*////////////////////////////////////////////////////////////////////////////////////////

TSYNCMAN ESCMEM * GetSyncMan( UINT8 channel )
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b082      	sub	sp, #8
 8007528:	af00      	add	r7, sp, #0
 800752a:	4603      	mov	r3, r0
 800752c:	71fb      	strb	r3, [r7, #7]
    HW_EscRead((MEM_ADDR *)&SyncManInfo, ESC_SYNCMAN_REG_OFFSET + (channel * SIZEOF_SM_REGISTER), SIZEOF_SM_REGISTER );
 800752e:	79fb      	ldrb	r3, [r7, #7]
 8007530:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007534:	b29b      	uxth	r3, r3
 8007536:	00db      	lsls	r3, r3, #3
 8007538:	b29b      	uxth	r3, r3
 800753a:	2208      	movs	r2, #8
 800753c:	4619      	mov	r1, r3
 800753e:	4804      	ldr	r0, [pc, #16]	; (8007550 <GetSyncMan+0x2c>)
 8007540:	f001 ff44 	bl	80093cc <HW_EscRead>


    return &SyncManInfo;
 8007544:	4b02      	ldr	r3, [pc, #8]	; (8007550 <GetSyncMan+0x2c>)
}
 8007546:	4618      	mov	r0, r3
 8007548:	3708      	adds	r7, #8
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}
 800754e:	bf00      	nop
 8007550:	200006c0 	.word	0x200006c0

08007554 <DisableSyncManChannel>:
 \param     channel        Sync Manager channel

 \brief    This function disables a Sync Manager channel
*////////////////////////////////////////////////////////////////////////////////////////
void DisableSyncManChannel(UINT8 channel)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	4603      	mov	r3, r0
 800755c:	71fb      	strb	r3, [r7, #7]
    UINT16 Offset;
    //The register 0x806 is only readable from PDI => writing 0 is valid
    VARVOLATILE UINT16 smStatus = SM_SETTING_PDI_DISABLE;
 800755e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007562:	81bb      	strh	r3, [r7, #12]
    Offset = (ESC_SYNCMAN_ACTIVE_OFFSET + (SIZEOF_SM_REGISTER*channel));
 8007564:	79fb      	ldrb	r3, [r7, #7]
 8007566:	b29b      	uxth	r3, r3
 8007568:	00db      	lsls	r3, r3, #3
 800756a:	b29b      	uxth	r3, r3
 800756c:	f603 0306 	addw	r3, r3, #2054	; 0x806
 8007570:	81fb      	strh	r3, [r7, #14]


    HW_EscWriteWord(smStatus,Offset);
 8007572:	89f9      	ldrh	r1, [r7, #14]
 8007574:	f107 030c 	add.w	r3, r7, #12
 8007578:	2202      	movs	r2, #2
 800757a:	4618      	mov	r0, r3
 800757c:	f001 ff82 	bl	8009484 <HW_EscWrite>
    
    /*wait until SyncManager is disabled*/
    do
    {
        HW_EscReadWord(smStatus, Offset);
 8007580:	89f9      	ldrh	r1, [r7, #14]
 8007582:	f107 030c 	add.w	r3, r7, #12
 8007586:	2202      	movs	r2, #2
 8007588:	4618      	mov	r0, r3
 800758a:	f001 ff1f 	bl	80093cc <HW_EscRead>
    }while(!(smStatus & SM_SETTING_PDI_DISABLE));
 800758e:	89bb      	ldrh	r3, [r7, #12]
 8007590:	b29b      	uxth	r3, r3
 8007592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007596:	2b00      	cmp	r3, #0
 8007598:	d0f2      	beq.n	8007580 <DisableSyncManChannel+0x2c>
}
 800759a:	bf00      	nop
 800759c:	bf00      	nop
 800759e:	3710      	adds	r7, #16
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <EnableSyncManChannel>:
 \param     channel        Sync Manager channel

 \brief    This function enables a Sync Manager channel
*////////////////////////////////////////////////////////////////////////////////////////
void EnableSyncManChannel(UINT8 channel)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b084      	sub	sp, #16
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	4603      	mov	r3, r0
 80075ac:	71fb      	strb	r3, [r7, #7]
    UINT16 Offset;
    //The register 0x806 is only readable from PDI => writing 0 is valid
    VARVOLATILE UINT16 smStatus = 0x0000;
 80075ae:	2300      	movs	r3, #0
 80075b0:	81bb      	strh	r3, [r7, #12]
    Offset = (ESC_SYNCMAN_ACTIVE_OFFSET + (SIZEOF_SM_REGISTER*channel));
 80075b2:	79fb      	ldrb	r3, [r7, #7]
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	00db      	lsls	r3, r3, #3
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	f603 0306 	addw	r3, r3, #2054	; 0x806
 80075be:	81fb      	strh	r3, [r7, #14]


    HW_EscWriteWord(smStatus,Offset);
 80075c0:	89f9      	ldrh	r1, [r7, #14]
 80075c2:	f107 030c 	add.w	r3, r7, #12
 80075c6:	2202      	movs	r2, #2
 80075c8:	4618      	mov	r0, r3
 80075ca:	f001 ff5b 	bl	8009484 <HW_EscWrite>
    
    /*wait until SyncManager is enabled*/
    do
    {
        HW_EscReadWord(smStatus,Offset);
 80075ce:	89f9      	ldrh	r1, [r7, #14]
 80075d0:	f107 030c 	add.w	r3, r7, #12
 80075d4:	2202      	movs	r2, #2
 80075d6:	4618      	mov	r0, r3
 80075d8:	f001 fef8 	bl	80093cc <HW_EscRead>

    }while((smStatus & SM_SETTING_PDI_DISABLE));
 80075dc:	89bb      	ldrh	r3, [r7, #12]
 80075de:	b29b      	uxth	r3, r3
 80075e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d1f2      	bne.n	80075ce <EnableSyncManChannel+0x2a>
}
 80075e8:	bf00      	nop
 80075ea:	bf00      	nop
 80075ec:	3710      	adds	r7, #16
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
	...

080075f4 <CheckSmSettings>:
 \brief    This function checks all SM channels

*////////////////////////////////////////////////////////////////////////////////////////

UINT8    CheckSmSettings(UINT8 maxChannel)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b086      	sub	sp, #24
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	4603      	mov	r3, r0
 80075fc:	71fb      	strb	r3, [r7, #7]
    UINT8 i;
    UINT8 result = 0;
 80075fe:	2300      	movs	r3, #0
 8007600:	75bb      	strb	r3, [r7, #22]
    TSYNCMAN ESCMEM *pSyncMan;
    UINT16 SMLength = 0;
 8007602:	2300      	movs	r3, #0
 8007604:	82bb      	strh	r3, [r7, #20]
    UINT16 SMAddress = 0;
 8007606:	2300      	movs	r3, #0
 8007608:	827b      	strh	r3, [r7, #18]

    //Check if max address defines are within the available ESC address range
    if((nMaxEscAddress < MAX_PD_WRITE_ADDRESS)
 800760a:	4b92      	ldr	r3, [pc, #584]	; (8007854 <CheckSmSettings+0x260>)
 800760c:	881b      	ldrh	r3, [r3, #0]
 800760e:	f642 72fe 	movw	r2, #12286	; 0x2ffe
 8007612:	4293      	cmp	r3, r2
 8007614:	d911      	bls.n	800763a <CheckSmSettings+0x46>
        ||(nMaxEscAddress < MAX_PD_READ_ADDRESS)
 8007616:	4b8f      	ldr	r3, [pc, #572]	; (8007854 <CheckSmSettings+0x260>)
 8007618:	881b      	ldrh	r3, [r3, #0]
 800761a:	f642 72fe 	movw	r2, #12286	; 0x2ffe
 800761e:	4293      	cmp	r3, r2
 8007620:	d90b      	bls.n	800763a <CheckSmSettings+0x46>
/*ECATCHANGE_START(V5.11) ESM5*/
        ||(nMaxEscAddress < MAX_MBX_WRITE_ADDRESS)
 8007622:	4b8c      	ldr	r3, [pc, #560]	; (8007854 <CheckSmSettings+0x260>)
 8007624:	881b      	ldrh	r3, [r3, #0]
 8007626:	f642 72fe 	movw	r2, #12286	; 0x2ffe
 800762a:	4293      	cmp	r3, r2
 800762c:	d905      	bls.n	800763a <CheckSmSettings+0x46>
/*ECATCHANGE_END(V5.11) ESM5*/
        ||(nMaxEscAddress < MAX_MBX_READ_ADDRESS))
 800762e:	4b89      	ldr	r3, [pc, #548]	; (8007854 <CheckSmSettings+0x260>)
 8007630:	881b      	ldrh	r3, [r3, #0]
 8007632:	f642 72fe 	movw	r2, #12286	; 0x2ffe
 8007636:	4293      	cmp	r3, r2
 8007638:	d801      	bhi.n	800763e <CheckSmSettings+0x4a>
    {
        /*The defines for maximum SM addresses are invalid for the used ESC (change the defines in the file ecat_def.h or the SSC Tool)
        It may be also required to adapt the SM settings in the ESI file*/

        return ALSTATUSCODE_NOVALIDFIRMWARE;
 800763a:	2314      	movs	r3, #20
 800763c:	e1c1      	b.n	80079c2 <CheckSmSettings+0x3ce>
    }

    /* check the Sync Manager Parameter for the Receive Mailbox (Sync Manager Channel 0) */
/*ECATCHANGE_START(V5.11) HW1*/
    pSyncMan = GetSyncMan(MAILBOX_WRITE);
 800763e:	2000      	movs	r0, #0
 8007640:	f7ff ff70 	bl	8007524 <GetSyncMan>
 8007644:	60f8      	str	r0, [r7, #12]
/*ECATCHANGE_END(V5.11) HW1*/

    SMLength = pSyncMan->Length;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	885b      	ldrh	r3, [r3, #2]
 800764a:	82bb      	strh	r3, [r7, #20]
    SMAddress = pSyncMan->PhysicalStartAddress;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	881b      	ldrh	r3, [r3, #0]
 8007650:	827b      	strh	r3, [r7, #18]

/* ECATCHANGE_START(V5.11) HW2*/
    //Check if the start address and length are even 16Bit addresses
    if ((SMLength & 0x1) > 0)
 8007652:	8abb      	ldrh	r3, [r7, #20]
 8007654:	f003 0301 	and.w	r3, r3, #1
 8007658:	2b00      	cmp	r3, #0
 800765a:	dd01      	ble.n	8007660 <CheckSmSettings+0x6c>
        return ALSTATUSCODE_INVALIDSMCFG;
 800765c:	2317      	movs	r3, #23
 800765e:	e1b0      	b.n	80079c2 <CheckSmSettings+0x3ce>

    if ((SMAddress & 0x1) > 0)
 8007660:	8a7b      	ldrh	r3, [r7, #18]
 8007662:	f003 0301 	and.w	r3, r3, #1
 8007666:	2b00      	cmp	r3, #0
 8007668:	dd01      	ble.n	800766e <CheckSmSettings+0x7a>
        return ALSTATUSCODE_INVALIDSMCFG;
 800766a:	2317      	movs	r3, #23
 800766c:	e1a9      	b.n	80079c2 <CheckSmSettings+0x3ce>
/* ECATCHANGE_END(V5.11) HW2*/

    if (!(pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET] & SM_SETTING_ENABLE_VALUE))
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	88db      	ldrh	r3, [r3, #6]
 8007672:	f003 0301 	and.w	r3, r3, #1
 8007676:	2b00      	cmp	r3, #0
 8007678:	d102      	bne.n	8007680 <CheckSmSettings+0x8c>
        /* receive mailbox is not enabled */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 800767a:	2316      	movs	r3, #22
 800767c:	75bb      	strb	r3, [r7, #22]
 800767e:	e02b      	b.n	80076d8 <CheckSmSettings+0xe4>
    else if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_DIRECTION_MASK) != SM_SETTING_DIRECTION_WRITE_VALUE)
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	889b      	ldrh	r3, [r3, #4]
 8007684:	f003 030c 	and.w	r3, r3, #12
 8007688:	2b04      	cmp	r3, #4
 800768a:	d002      	beq.n	8007692 <CheckSmSettings+0x9e>
       /* receive mailbox is not writable by the master*/
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 800768c:	2316      	movs	r3, #22
 800768e:	75bb      	strb	r3, [r7, #22]
 8007690:	e022      	b.n	80076d8 <CheckSmSettings+0xe4>
    else if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_MASK) != SM_SETTING_MODE_ONE_BUFFER_VALUE )
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	889b      	ldrh	r3, [r3, #4]
 8007696:	f003 0302 	and.w	r3, r3, #2
 800769a:	2b00      	cmp	r3, #0
 800769c:	d102      	bne.n	80076a4 <CheckSmSettings+0xb0>
        /* receive mailbox is not in one buffer mode */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 800769e:	2316      	movs	r3, #22
 80076a0:	75bb      	strb	r3, [r7, #22]
 80076a2:	e019      	b.n	80076d8 <CheckSmSettings+0xe4>
    else if ( SMLength < MIN_MBX_SIZE )
 80076a4:	8abb      	ldrh	r3, [r7, #20]
 80076a6:	2b21      	cmp	r3, #33	; 0x21
 80076a8:	d802      	bhi.n	80076b0 <CheckSmSettings+0xbc>
        /* receive mailbox size is too small */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 80076aa:	2316      	movs	r3, #22
 80076ac:	75bb      	strb	r3, [r7, #22]
 80076ae:	e013      	b.n	80076d8 <CheckSmSettings+0xe4>
    else if ( SMLength > MAX_MBX_SIZE )
 80076b0:	8abb      	ldrh	r3, [r7, #20]
 80076b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076b6:	d902      	bls.n	80076be <CheckSmSettings+0xca>
        /* receive mailbox size is too great */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 80076b8:	2316      	movs	r3, #22
 80076ba:	75bb      	strb	r3, [r7, #22]
 80076bc:	e00c      	b.n	80076d8 <CheckSmSettings+0xe4>
     else if ( SMAddress < MIN_MBX_WRITE_ADDRESS )
 80076be:	8a7b      	ldrh	r3, [r7, #18]
 80076c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076c4:	d202      	bcs.n	80076cc <CheckSmSettings+0xd8>
        /* receive mailbox address is too small */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 80076c6:	2316      	movs	r3, #22
 80076c8:	75bb      	strb	r3, [r7, #22]
 80076ca:	e005      	b.n	80076d8 <CheckSmSettings+0xe4>
    else if ( SMAddress > MAX_MBX_WRITE_ADDRESS)
 80076cc:	8a7b      	ldrh	r3, [r7, #18]
 80076ce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80076d2:	d301      	bcc.n	80076d8 <CheckSmSettings+0xe4>
        /* receive mailbox address is too great */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 80076d4:	2316      	movs	r3, #22
 80076d6:	75bb      	strb	r3, [r7, #22]


    if ( result == 0 )
 80076d8:	7dbb      	ldrb	r3, [r7, #22]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d14c      	bne.n	8007778 <CheckSmSettings+0x184>
    {
        /* check the Sync Manager Parameter for the Send Mailbox (Sync Manager Channel 1) */
/*ECATCHANGE_START(V5.11) HW1*/
        pSyncMan = GetSyncMan(MAILBOX_READ);
 80076de:	2001      	movs	r0, #1
 80076e0:	f7ff ff20 	bl	8007524 <GetSyncMan>
 80076e4:	60f8      	str	r0, [r7, #12]
/*ECATCHANGE_END(V5.11) HW1*/

    SMLength = pSyncMan->Length;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	885b      	ldrh	r3, [r3, #2]
 80076ea:	82bb      	strh	r3, [r7, #20]
    SMAddress = pSyncMan->PhysicalStartAddress;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	881b      	ldrh	r3, [r3, #0]
 80076f0:	827b      	strh	r3, [r7, #18]

/* ECATCHANGE_START(V5.11) HW2*/
    //Check if the start address and length are even 16Bit addresses
    if ((SMLength & 0x1) > 0)
 80076f2:	8abb      	ldrh	r3, [r7, #20]
 80076f4:	f003 0301 	and.w	r3, r3, #1
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	dd01      	ble.n	8007700 <CheckSmSettings+0x10c>
        return ALSTATUSCODE_INVALIDSMCFG;
 80076fc:	2317      	movs	r3, #23
 80076fe:	e160      	b.n	80079c2 <CheckSmSettings+0x3ce>

    if ((SMAddress & 0x1) > 0)
 8007700:	8a7b      	ldrh	r3, [r7, #18]
 8007702:	f003 0301 	and.w	r3, r3, #1
 8007706:	2b00      	cmp	r3, #0
 8007708:	dd01      	ble.n	800770e <CheckSmSettings+0x11a>
        return ALSTATUSCODE_INVALIDSMCFG;
 800770a:	2317      	movs	r3, #23
 800770c:	e159      	b.n	80079c2 <CheckSmSettings+0x3ce>
/* ECATCHANGE_END(V5.11) HW2*/

      if (!(pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET] & SM_SETTING_ENABLE_VALUE))
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	88db      	ldrh	r3, [r3, #6]
 8007712:	f003 0301 	and.w	r3, r3, #1
 8007716:	2b00      	cmp	r3, #0
 8007718:	d102      	bne.n	8007720 <CheckSmSettings+0x12c>
            /* send mailbox is not enabled */
            result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 800771a:	2316      	movs	r3, #22
 800771c:	75bb      	strb	r3, [r7, #22]
 800771e:	e02b      	b.n	8007778 <CheckSmSettings+0x184>
        else if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_DIRECTION_MASK) != SM_SETTING_DIRECTION_READ_VALUE)
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	889b      	ldrh	r3, [r3, #4]
 8007724:	f003 030c 	and.w	r3, r3, #12
 8007728:	2b00      	cmp	r3, #0
 800772a:	d002      	beq.n	8007732 <CheckSmSettings+0x13e>
           /* receive mailbox is not readable by the master*/
            result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 800772c:	2316      	movs	r3, #22
 800772e:	75bb      	strb	r3, [r7, #22]
 8007730:	e022      	b.n	8007778 <CheckSmSettings+0x184>
        else if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_MASK) != SM_SETTING_MODE_ONE_BUFFER_VALUE )
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	889b      	ldrh	r3, [r3, #4]
 8007736:	f003 0302 	and.w	r3, r3, #2
 800773a:	2b00      	cmp	r3, #0
 800773c:	d102      	bne.n	8007744 <CheckSmSettings+0x150>
            /* receive mailbox is not in one buffer mode */
            result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 800773e:	2316      	movs	r3, #22
 8007740:	75bb      	strb	r3, [r7, #22]
 8007742:	e019      	b.n	8007778 <CheckSmSettings+0x184>
        else if ( SMLength < MIN_MBX_SIZE )
 8007744:	8abb      	ldrh	r3, [r7, #20]
 8007746:	2b21      	cmp	r3, #33	; 0x21
 8007748:	d802      	bhi.n	8007750 <CheckSmSettings+0x15c>
            /* send mailbox size is too small */
            result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 800774a:	2316      	movs	r3, #22
 800774c:	75bb      	strb	r3, [r7, #22]
 800774e:	e013      	b.n	8007778 <CheckSmSettings+0x184>
        else if ( SMLength > MAX_MBX_SIZE )
 8007750:	8abb      	ldrh	r3, [r7, #20]
 8007752:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007756:	d902      	bls.n	800775e <CheckSmSettings+0x16a>
            /* send mailbox size is too great */
            result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8007758:	2316      	movs	r3, #22
 800775a:	75bb      	strb	r3, [r7, #22]
 800775c:	e00c      	b.n	8007778 <CheckSmSettings+0x184>
         else if ( SMAddress < MIN_MBX_READ_ADDRESS )
 800775e:	8a7b      	ldrh	r3, [r7, #18]
 8007760:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007764:	d202      	bcs.n	800776c <CheckSmSettings+0x178>
            /* send mailbox address is too small */
            result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8007766:	2316      	movs	r3, #22
 8007768:	75bb      	strb	r3, [r7, #22]
 800776a:	e005      	b.n	8007778 <CheckSmSettings+0x184>
        else if ( SMAddress > MAX_MBX_READ_ADDRESS )
 800776c:	8a7b      	ldrh	r3, [r7, #18]
 800776e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007772:	d301      	bcc.n	8007778 <CheckSmSettings+0x184>
            /* send mailbox address is too great */
            result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8007774:	2316      	movs	r3, #22
 8007776:	75bb      	strb	r3, [r7, #22]

    }

    if ( result == 0 && maxChannel > PROCESS_DATA_IN )
 8007778:	7dbb      	ldrb	r3, [r7, #22]
 800777a:	2b00      	cmp	r3, #0
 800777c:	f040 8082 	bne.w	8007884 <CheckSmSettings+0x290>
 8007780:	79fb      	ldrb	r3, [r7, #7]
 8007782:	2b03      	cmp	r3, #3
 8007784:	d97e      	bls.n	8007884 <CheckSmSettings+0x290>
    {
        /* b3BufferMode is only set, if inputs and outputs are running in 3-Buffer-Mode when leaving this function */
        b3BufferMode = TRUE;
 8007786:	4b34      	ldr	r3, [pc, #208]	; (8007858 <CheckSmSettings+0x264>)
 8007788:	2201      	movs	r2, #1
 800778a:	701a      	strb	r2, [r3, #0]
        /* check the Sync Manager Parameter for the Inputs (Sync Manager Channel 2) */
/*ECATCHANGE_START(V5.11) HW1*/
        pSyncMan = GetSyncMan(PROCESS_DATA_IN);
 800778c:	2003      	movs	r0, #3
 800778e:	f7ff fec9 	bl	8007524 <GetSyncMan>
 8007792:	60f8      	str	r0, [r7, #12]
/*ECATCHANGE_END(V5.11) HW1*/

    SMLength = pSyncMan->Length;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	885b      	ldrh	r3, [r3, #2]
 8007798:	82bb      	strh	r3, [r7, #20]
    SMAddress = pSyncMan->PhysicalStartAddress;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	881b      	ldrh	r3, [r3, #0]
 800779e:	827b      	strh	r3, [r7, #18]

/* ECATCHANGE_START(V5.11) HW2*/
    //Check if the start address and length are even 16Bit addresses
    if ((SMLength & 0x1) > 0)
 80077a0:	8abb      	ldrh	r3, [r7, #20]
 80077a2:	f003 0301 	and.w	r3, r3, #1
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	dd01      	ble.n	80077ae <CheckSmSettings+0x1ba>
        return ALSTATUSCODE_INVALIDSMCFG;
 80077aa:	2317      	movs	r3, #23
 80077ac:	e109      	b.n	80079c2 <CheckSmSettings+0x3ce>

    if ((SMAddress & 0x1) > 0)
 80077ae:	8a7b      	ldrh	r3, [r7, #18]
 80077b0:	f003 0301 	and.w	r3, r3, #1
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	dd01      	ble.n	80077bc <CheckSmSettings+0x1c8>
        return ALSTATUSCODE_INVALIDSMCFG;
 80077b8:	2317      	movs	r3, #23
 80077ba:	e102      	b.n	80079c2 <CheckSmSettings+0x3ce>
/* ECATCHANGE_END(V5.11) HW2*/

        if ((pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET] & SM_SETTING_ENABLE_VALUE) != 0 && SMLength == 0 )
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	88db      	ldrh	r3, [r3, #6]
 80077c0:	f003 0301 	and.w	r3, r3, #1
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d005      	beq.n	80077d4 <CheckSmSettings+0x1e0>
 80077c8:	8abb      	ldrh	r3, [r7, #20]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d102      	bne.n	80077d4 <CheckSmSettings+0x1e0>
            /* the SM3 size is 0 and the SM3 is active */
            result = SYNCMANCHSETTINGS+1;
 80077ce:	2304      	movs	r3, #4
 80077d0:	75bb      	strb	r3, [r7, #22]
 80077d2:	e052      	b.n	800787a <CheckSmSettings+0x286>
        else if (pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET] & SM_SETTING_ENABLE_VALUE)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	88db      	ldrh	r3, [r3, #6]
 80077d8:	f003 0301 	and.w	r3, r3, #1
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d043      	beq.n	8007868 <CheckSmSettings+0x274>
        {
            /* Sync Manager Channel 3 is active, input size has to greater 0 */
            if ( SMLength != nPdInputSize || nPdInputSize == 0 || SMLength > MAX_PD_INPUT_SIZE)
 80077e0:	4b1e      	ldr	r3, [pc, #120]	; (800785c <CheckSmSettings+0x268>)
 80077e2:	881b      	ldrh	r3, [r3, #0]
 80077e4:	8aba      	ldrh	r2, [r7, #20]
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d106      	bne.n	80077f8 <CheckSmSettings+0x204>
 80077ea:	4b1c      	ldr	r3, [pc, #112]	; (800785c <CheckSmSettings+0x268>)
 80077ec:	881b      	ldrh	r3, [r3, #0]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d002      	beq.n	80077f8 <CheckSmSettings+0x204>
 80077f2:	8abb      	ldrh	r3, [r7, #20]
 80077f4:	2b44      	cmp	r3, #68	; 0x44
 80077f6:	d902      	bls.n	80077fe <CheckSmSettings+0x20a>
                /* sizes don't match */
                result = SYNCMANCHSIZE+1;
 80077f8:	2303      	movs	r3, #3
 80077fa:	75bb      	strb	r3, [r7, #22]
 80077fc:	e03d      	b.n	800787a <CheckSmSettings+0x286>
            else
                /* sizes matches */
            if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_DIRECTION_MASK) == SM_SETTING_DIRECTION_READ_VALUE )
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	889b      	ldrh	r3, [r3, #4]
 8007802:	f003 030c 	and.w	r3, r3, #12
 8007806:	2b00      	cmp	r3, #0
 8007808:	d121      	bne.n	800784e <CheckSmSettings+0x25a>
            {
                /* settings match */
                if ( ( ( nAlStatus == STATE_PREOP )&&( SMAddress >= MIN_PD_READ_ADDRESS )&&( SMAddress <= MAX_PD_READ_ADDRESS ) )
 800780a:	4b15      	ldr	r3, [pc, #84]	; (8007860 <CheckSmSettings+0x26c>)
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	2b02      	cmp	r3, #2
 8007810:	d107      	bne.n	8007822 <CheckSmSettings+0x22e>
 8007812:	8a7b      	ldrh	r3, [r7, #18]
 8007814:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007818:	d303      	bcc.n	8007822 <CheckSmSettings+0x22e>
 800781a:	8a7b      	ldrh	r3, [r7, #18]
 800781c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007820:	d308      	bcc.n	8007834 <CheckSmSettings+0x240>
                   ||( ( nAlStatus != STATE_PREOP )&&( SMAddress == nEscAddrInputData ) )
 8007822:	4b0f      	ldr	r3, [pc, #60]	; (8007860 <CheckSmSettings+0x26c>)
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	2b02      	cmp	r3, #2
 8007828:	d00e      	beq.n	8007848 <CheckSmSettings+0x254>
 800782a:	4b0e      	ldr	r3, [pc, #56]	; (8007864 <CheckSmSettings+0x270>)
 800782c:	881b      	ldrh	r3, [r3, #0]
 800782e:	8a7a      	ldrh	r2, [r7, #18]
 8007830:	429a      	cmp	r2, r3
 8007832:	d109      	bne.n	8007848 <CheckSmSettings+0x254>
                    )
                {
                    /* addresses match */

                    if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_MASK) == SM_SETTING_MODE_ONE_BUFFER_VALUE )
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	889b      	ldrh	r3, [r3, #4]
 8007838:	f003 0302 	and.w	r3, r3, #2
 800783c:	2b00      	cmp	r3, #0
 800783e:	d01c      	beq.n	800787a <CheckSmSettings+0x286>
                        /* inputs are running in 1-Buffer-Mode, reset flag b3BufferMode */
                        b3BufferMode = FALSE;
 8007840:	4b05      	ldr	r3, [pc, #20]	; (8007858 <CheckSmSettings+0x264>)
 8007842:	2200      	movs	r2, #0
 8007844:	701a      	strb	r2, [r3, #0]
                    if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_MASK) == SM_SETTING_MODE_ONE_BUFFER_VALUE )
 8007846:	e018      	b.n	800787a <CheckSmSettings+0x286>
                }
                else
                    /* input address is out of the allowed area or has changed in SAFEOP or OP */
                    result = SYNCMANCHADDRESS+1;
 8007848:	2302      	movs	r3, #2
 800784a:	75bb      	strb	r3, [r7, #22]
 800784c:	e015      	b.n	800787a <CheckSmSettings+0x286>
            }
            else
                /* input settings do not match */
                result = SYNCMANCHSETTINGS+1;
 800784e:	2304      	movs	r3, #4
 8007850:	75bb      	strb	r3, [r7, #22]
 8007852:	e012      	b.n	800787a <CheckSmSettings+0x286>
 8007854:	200006b0 	.word	0x200006b0
 8007858:	200006a1 	.word	0x200006a1
 800785c:	200006aa 	.word	0x200006aa
 8007860:	200006b2 	.word	0x200006b2
 8007864:	200006b8 	.word	0x200006b8
        }
        else if ( SMLength != 0 || nPdInputSize != 0 )
 8007868:	8abb      	ldrh	r3, [r7, #20]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d103      	bne.n	8007876 <CheckSmSettings+0x282>
 800786e:	4b57      	ldr	r3, [pc, #348]	; (80079cc <CheckSmSettings+0x3d8>)
 8007870:	881b      	ldrh	r3, [r3, #0]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d001      	beq.n	800787a <CheckSmSettings+0x286>
            /* input size is not zero although the SM3 channel is not enabled */
            result = SYNCMANCHSIZE+1;
 8007876:	2303      	movs	r3, #3
 8007878:	75bb      	strb	r3, [r7, #22]



        if ( result != 0 )
 800787a:	7dbb      	ldrb	r3, [r7, #22]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d001      	beq.n	8007884 <CheckSmSettings+0x290>
        {
            result = ALSTATUSCODE_INVALIDSMINCFG;
 8007880:	231e      	movs	r3, #30
 8007882:	75bb      	strb	r3, [r7, #22]
        }
    }


//    else
    if ( result == 0 && maxChannel > PROCESS_DATA_OUT )
 8007884:	7dbb      	ldrb	r3, [r7, #22]
 8007886:	2b00      	cmp	r3, #0
 8007888:	f040 8083 	bne.w	8007992 <CheckSmSettings+0x39e>
 800788c:	79fb      	ldrb	r3, [r7, #7]
 800788e:	2b02      	cmp	r3, #2
 8007890:	d97f      	bls.n	8007992 <CheckSmSettings+0x39e>
    {
        /* check the Sync Manager Parameter for the Outputs (Sync Manager Channel 2) */
/*ECATCHANGE_START(V5.11) HW1*/
        pSyncMan = GetSyncMan(PROCESS_DATA_OUT);
 8007892:	2002      	movs	r0, #2
 8007894:	f7ff fe46 	bl	8007524 <GetSyncMan>
 8007898:	60f8      	str	r0, [r7, #12]
/*ECATCHANGE_END(V5.11) HW1*/

    SMLength = pSyncMan->Length;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	885b      	ldrh	r3, [r3, #2]
 800789e:	82bb      	strh	r3, [r7, #20]
    SMAddress = pSyncMan->PhysicalStartAddress;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	881b      	ldrh	r3, [r3, #0]
 80078a4:	827b      	strh	r3, [r7, #18]

/* ECATCHANGE_START(V5.11) HW2*/
    //Check if the start address and length are even 16Bit addresses
    if ((SMLength & 0x1) > 0)
 80078a6:	8abb      	ldrh	r3, [r7, #20]
 80078a8:	f003 0301 	and.w	r3, r3, #1
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	dd01      	ble.n	80078b4 <CheckSmSettings+0x2c0>
        return ALSTATUSCODE_INVALIDSMCFG;
 80078b0:	2317      	movs	r3, #23
 80078b2:	e086      	b.n	80079c2 <CheckSmSettings+0x3ce>

    if ((SMAddress & 0x1) > 0)
 80078b4:	8a7b      	ldrh	r3, [r7, #18]
 80078b6:	f003 0301 	and.w	r3, r3, #1
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	dd01      	ble.n	80078c2 <CheckSmSettings+0x2ce>
        return ALSTATUSCODE_INVALIDSMCFG;
 80078be:	2317      	movs	r3, #23
 80078c0:	e07f      	b.n	80079c2 <CheckSmSettings+0x3ce>
/* ECATCHANGE_END(V5.11) HW2*/

    if ( (pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET] & SM_SETTING_ENABLE_VALUE) != 0 && SMLength == 0 )
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	88db      	ldrh	r3, [r3, #6]
 80078c6:	f003 0301 	and.w	r3, r3, #1
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d005      	beq.n	80078da <CheckSmSettings+0x2e6>
 80078ce:	8abb      	ldrh	r3, [r7, #20]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d102      	bne.n	80078da <CheckSmSettings+0x2e6>
            /* the SM2 size is 0 and the SM2 is active */
            result = SYNCMANCHSETTINGS+1;
 80078d4:	2304      	movs	r3, #4
 80078d6:	75bb      	strb	r3, [r7, #22]
 80078d8:	e056      	b.n	8007988 <CheckSmSettings+0x394>
        else if (pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET] & SM_SETTING_ENABLE_VALUE)
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	88db      	ldrh	r3, [r3, #6]
 80078de:	f003 0301 	and.w	r3, r3, #1
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d047      	beq.n	8007976 <CheckSmSettings+0x382>
        {
            /* Sync Manager Channel 2 is active, output size has to greater 0 */
            if ( SMLength == nPdOutputSize && nPdOutputSize != 0 && SMLength <= ((UINT16)MAX_PD_OUTPUT_SIZE))
 80078e6:	4b3a      	ldr	r3, [pc, #232]	; (80079d0 <CheckSmSettings+0x3dc>)
 80078e8:	881b      	ldrh	r3, [r3, #0]
 80078ea:	8aba      	ldrh	r2, [r7, #20]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d13f      	bne.n	8007970 <CheckSmSettings+0x37c>
 80078f0:	4b37      	ldr	r3, [pc, #220]	; (80079d0 <CheckSmSettings+0x3dc>)
 80078f2:	881b      	ldrh	r3, [r3, #0]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d03b      	beq.n	8007970 <CheckSmSettings+0x37c>
 80078f8:	8abb      	ldrh	r3, [r7, #20]
 80078fa:	2b44      	cmp	r3, #68	; 0x44
 80078fc:	d838      	bhi.n	8007970 <CheckSmSettings+0x37c>

            {
                /* sizes match */
                if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_DIRECTION_MASK) == SM_SETTING_DIRECTION_WRITE_VALUE )
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	889b      	ldrh	r3, [r3, #4]
 8007902:	f003 030c 	and.w	r3, r3, #12
 8007906:	2b04      	cmp	r3, #4
 8007908:	d12e      	bne.n	8007968 <CheckSmSettings+0x374>
                {
                    /* settings match */
                    if ( ( ( nAlStatus == STATE_PREOP )&&( SMAddress >= MIN_PD_WRITE_ADDRESS )&&( SMAddress <= MAX_PD_WRITE_ADDRESS ) )
 800790a:	4b32      	ldr	r3, [pc, #200]	; (80079d4 <CheckSmSettings+0x3e0>)
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	2b02      	cmp	r3, #2
 8007910:	d107      	bne.n	8007922 <CheckSmSettings+0x32e>
 8007912:	8a7b      	ldrh	r3, [r7, #18]
 8007914:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007918:	d303      	bcc.n	8007922 <CheckSmSettings+0x32e>
 800791a:	8a7b      	ldrh	r3, [r7, #18]
 800791c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007920:	d308      	bcc.n	8007934 <CheckSmSettings+0x340>
                       ||( ( nAlStatus != STATE_PREOP )&&( SMAddress == nEscAddrOutputData ) )
 8007922:	4b2c      	ldr	r3, [pc, #176]	; (80079d4 <CheckSmSettings+0x3e0>)
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	2b02      	cmp	r3, #2
 8007928:	d01b      	beq.n	8007962 <CheckSmSettings+0x36e>
 800792a:	4b2b      	ldr	r3, [pc, #172]	; (80079d8 <CheckSmSettings+0x3e4>)
 800792c:	881b      	ldrh	r3, [r3, #0]
 800792e:	8a7a      	ldrh	r2, [r7, #18]
 8007930:	429a      	cmp	r2, r3
 8007932:	d116      	bne.n	8007962 <CheckSmSettings+0x36e>
                        )
                    {
                        /* addresses match */
                        {
                            /* check, if watchdog trigger is enabled */
                            if (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_WATCHDOG_VALUE)
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	889b      	ldrh	r3, [r3, #4]
 8007938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800793c:	2b00      	cmp	r3, #0
 800793e:	d003      	beq.n	8007948 <CheckSmSettings+0x354>
                            {
                                bWdTrigger = TRUE;
 8007940:	4b26      	ldr	r3, [pc, #152]	; (80079dc <CheckSmSettings+0x3e8>)
 8007942:	2201      	movs	r2, #1
 8007944:	701a      	strb	r2, [r3, #0]
 8007946:	e002      	b.n	800794e <CheckSmSettings+0x35a>
                            }
                            else
                            {
                                bWdTrigger = FALSE;
 8007948:	4b24      	ldr	r3, [pc, #144]	; (80079dc <CheckSmSettings+0x3e8>)
 800794a:	2200      	movs	r2, #0
 800794c:	701a      	strb	r2, [r3, #0]
                            }

                            if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_MASK) == SM_SETTING_MODE_ONE_BUFFER_VALUE )
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	889b      	ldrh	r3, [r3, #4]
 8007952:	f003 0302 	and.w	r3, r3, #2
 8007956:	2b00      	cmp	r3, #0
 8007958:	d009      	beq.n	800796e <CheckSmSettings+0x37a>
                                /* outputs are running in 1-Buffer-Mode, reset flag b3BufferMode */
                                b3BufferMode = FALSE;
 800795a:	4b21      	ldr	r3, [pc, #132]	; (80079e0 <CheckSmSettings+0x3ec>)
 800795c:	2200      	movs	r2, #0
 800795e:	701a      	strb	r2, [r3, #0]
                            if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_MASK) == SM_SETTING_MODE_ONE_BUFFER_VALUE )
 8007960:	e005      	b.n	800796e <CheckSmSettings+0x37a>
                        }
                    }
                    else
                        /* output address is out of the allowed area or has changed in SAFEOP or OP */
                        result = SYNCMANCHADDRESS+1;
 8007962:	2302      	movs	r3, #2
 8007964:	75bb      	strb	r3, [r7, #22]
                if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_DIRECTION_MASK) == SM_SETTING_DIRECTION_WRITE_VALUE )
 8007966:	e00f      	b.n	8007988 <CheckSmSettings+0x394>
                }
                else
                    /* output settings do not match */
                    result = SYNCMANCHSETTINGS+1;
 8007968:	2304      	movs	r3, #4
 800796a:	75bb      	strb	r3, [r7, #22]
                if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_DIRECTION_MASK) == SM_SETTING_DIRECTION_WRITE_VALUE )
 800796c:	e00c      	b.n	8007988 <CheckSmSettings+0x394>
 800796e:	e00b      	b.n	8007988 <CheckSmSettings+0x394>
            }
            else
                /* output sizes don't match */
                result = SYNCMANCHSIZE+1;
 8007970:	2303      	movs	r3, #3
 8007972:	75bb      	strb	r3, [r7, #22]
 8007974:	e008      	b.n	8007988 <CheckSmSettings+0x394>
        }
        else if ( SMLength != 0 || nPdOutputSize != 0 )
 8007976:	8abb      	ldrh	r3, [r7, #20]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d103      	bne.n	8007984 <CheckSmSettings+0x390>
 800797c:	4b14      	ldr	r3, [pc, #80]	; (80079d0 <CheckSmSettings+0x3dc>)
 800797e:	881b      	ldrh	r3, [r3, #0]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d001      	beq.n	8007988 <CheckSmSettings+0x394>
            /* output size is not zero although the SM2 channel is not enabled */
            result = SYNCMANCHSIZE+1;
 8007984:	2303      	movs	r3, #3
 8007986:	75bb      	strb	r3, [r7, #22]

        if ( result != 0 )
 8007988:	7dbb      	ldrb	r3, [r7, #22]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d001      	beq.n	8007992 <CheckSmSettings+0x39e>
        {
            result = ALSTATUSCODE_INVALIDSMOUTCFG;
 800798e:	231d      	movs	r3, #29
 8007990:	75bb      	strb	r3, [r7, #22]
        }
    }


    if ( result == 0 )
 8007992:	7dbb      	ldrb	r3, [r7, #22]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d113      	bne.n	80079c0 <CheckSmSettings+0x3cc>
    {
        /* the Enable-Byte of the rest of the SM channels has to be read to acknowledge the SM-Change-Interrupt */
        for (i = maxChannel; i < nMaxSyncMan; i++)
 8007998:	79fb      	ldrb	r3, [r7, #7]
 800799a:	75fb      	strb	r3, [r7, #23]
 800799c:	e00b      	b.n	80079b6 <CheckSmSettings+0x3c2>
        {
/*ECATCHANGE_START(V5.11) HW1*/
            pSyncMan = GetSyncMan(i);
 800799e:	7dfb      	ldrb	r3, [r7, #23]
 80079a0:	4618      	mov	r0, r3
 80079a2:	f7ff fdbf 	bl	8007524 <GetSyncMan>
 80079a6:	60f8      	str	r0, [r7, #12]
/*ECATCHANGE_END(V5.11) HW1*/
            SMActivate = pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET];
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	88da      	ldrh	r2, [r3, #6]
 80079ac:	4b0d      	ldr	r3, [pc, #52]	; (80079e4 <CheckSmSettings+0x3f0>)
 80079ae:	801a      	strh	r2, [r3, #0]
        for (i = maxChannel; i < nMaxSyncMan; i++)
 80079b0:	7dfb      	ldrb	r3, [r7, #23]
 80079b2:	3301      	adds	r3, #1
 80079b4:	75fb      	strb	r3, [r7, #23]
 80079b6:	4b0c      	ldr	r3, [pc, #48]	; (80079e8 <CheckSmSettings+0x3f4>)
 80079b8:	781b      	ldrb	r3, [r3, #0]
 80079ba:	7dfa      	ldrb	r2, [r7, #23]
 80079bc:	429a      	cmp	r2, r3
 80079be:	d3ee      	bcc.n	800799e <CheckSmSettings+0x3aa>
        }
    }
    return result;
 80079c0:	7dbb      	ldrb	r3, [r7, #22]
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3718      	adds	r7, #24
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	200006aa 	.word	0x200006aa
 80079d0:	200006ac 	.word	0x200006ac
 80079d4:	200006b2 	.word	0x200006b2
 80079d8:	200006b6 	.word	0x200006b6
 80079dc:	20000683 	.word	0x20000683
 80079e0:	200006a1 	.word	0x200006a1
 80079e4:	200006be 	.word	0x200006be
 80079e8:	200006ae 	.word	0x200006ae

080079ec <StartInputHandler>:
 \brief  and the AL Event Mask register will be set

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 StartInputHandler(void)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b08c      	sub	sp, #48	; 0x30
 80079f0:	af00      	add	r7, sp, #0
    TSYNCMAN ESCMEM * pSyncMan;
    UINT16        dcControl;
    UINT16     wdiv = 0;
 80079f2:	2300      	movs	r3, #0
 80079f4:	823b      	strh	r3, [r7, #16]
/*ECATCHANGE_START(V5.11) ECAT4*/
    UINT16     wd = 0;
 80079f6:	2300      	movs	r3, #0
 80079f8:	81fb      	strh	r3, [r7, #14]
/*ECATCHANGE_END(V5.11) ECAT4*/
    UINT32     cycleTimeSync0 = 0; /* Sync0 cycle time */
 80079fa:	2300      	movs	r3, #0
 80079fc:	60bb      	str	r3, [r7, #8]
    UINT32     cycleTimeSync1 = 0; /* Delay between the Sync0 and Sycn1 signal. A new Sync1 cycle starts on the next Sync0 signal after Sync1 signal.*/
 80079fe:	2300      	movs	r3, #0
 8007a00:	607b      	str	r3, [r7, #4]
    BOOL bSubordinatedCycles = FALSE;
 8007a02:	2300      	movs	r3, #0
 8007a04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    UINT16    nPdInputBuffer = 3;
 8007a08:	2303      	movs	r3, #3
 8007a0a:	85bb      	strh	r3, [r7, #44]	; 0x2c
    UINT16    nPdOutputBuffer = 3;
 8007a0c:	2303      	movs	r3, #3
 8007a0e:	857b      	strh	r3, [r7, #42]	; 0x2a

    UINT16 SyncType0x1C32 = 0; /* Helper variable for sync type for SM2 (required if no CoE is supported or no output process data available)*/
 8007a10:	2300      	movs	r3, #0
 8007a12:	853b      	strh	r3, [r7, #40]	; 0x28
    UINT16 SyncType0x1C33 = 0; /* Helper variable for sync type for SM3 (required if no CoE is supported or no input process data available)*/
 8007a14:	2300      	movs	r3, #0
 8007a16:	84fb      	strh	r3, [r7, #38]	; 0x26

    UINT16 u16MinSuppSyncType = 0xFFFF;  /* Minimum supported Sync Types */
 8007a18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007a1c:	84bb      	strh	r3, [r7, #36]	; 0x24

    u16MinSuppSyncType &= sSyncManOutPar.u16SyncTypesSupported;
 8007a1e:	4b98      	ldr	r3, [pc, #608]	; (8007c80 <StartInputHandler+0x294>)
 8007a20:	899a      	ldrh	r2, [r3, #12]
 8007a22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a24:	4013      	ands	r3, r2
 8007a26:	84bb      	strh	r3, [r7, #36]	; 0x24
    u16MinSuppSyncType &= sSyncManInPar.u16SyncTypesSupported;
 8007a28:	4b96      	ldr	r3, [pc, #600]	; (8007c84 <StartInputHandler+0x298>)
 8007a2a:	899a      	ldrh	r2, [r3, #12]
 8007a2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a2e:	4013      	ands	r3, r2
 8007a30:	84bb      	strh	r3, [r7, #36]	; 0x24

    u16ALEventMask = 0;
 8007a32:	4b95      	ldr	r3, [pc, #596]	; (8007c88 <StartInputHandler+0x29c>)
 8007a34:	2200      	movs	r2, #0
 8007a36:	801a      	strh	r2, [r3, #0]

    /* 
        --- Check if SyncManager areas overlapping --- 
    */
    bEcatFirstOutputsReceived = FALSE;
 8007a38:	4b94      	ldr	r3, [pc, #592]	; (8007c8c <StartInputHandler+0x2a0>)
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	701a      	strb	r2, [r3, #0]

    /* get a pointer to the Sync Manager Channel 2 (Outputs) */
/*ECATCHANGE_START(V5.11) HW1*/
    pSyncMan = GetSyncMan(PROCESS_DATA_OUT);
 8007a3e:	2002      	movs	r0, #2
 8007a40:	f7ff fd70 	bl	8007524 <GetSyncMan>
 8007a44:	6238      	str	r0, [r7, #32]
/*ECATCHANGE_END(V5.11) HW1*/
    /* store the address of the Sync Manager Channel 2 (Outputs) */
    nEscAddrOutputData = pSyncMan->PhysicalStartAddress;
 8007a46:	6a3b      	ldr	r3, [r7, #32]
 8007a48:	881a      	ldrh	r2, [r3, #0]
 8007a4a:	4b91      	ldr	r3, [pc, #580]	; (8007c90 <StartInputHandler+0x2a4>)
 8007a4c:	801a      	strh	r2, [r3, #0]
    /* get the number of output buffer used for calculating the address areas */
    if (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_ONE_BUFFER_VALUE)
 8007a4e:	6a3b      	ldr	r3, [r7, #32]
 8007a50:	889b      	ldrh	r3, [r3, #4]
 8007a52:	f003 0302 	and.w	r3, r3, #2
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d001      	beq.n	8007a5e <StartInputHandler+0x72>
    {
       nPdOutputBuffer = 1;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	857b      	strh	r3, [r7, #42]	; 0x2a
    }


    /* get a pointer to the Sync Manager Channel 3 (Inputs) */
/*ECATCHANGE_START(V5.11) HW1*/
    pSyncMan = GetSyncMan(PROCESS_DATA_IN);
 8007a5e:	2003      	movs	r0, #3
 8007a60:	f7ff fd60 	bl	8007524 <GetSyncMan>
 8007a64:	6238      	str	r0, [r7, #32]
/*ECATCHANGE_END(V5.11) HW1*/
    /* store the address of the Sync Manager Channel 3 (Inputs)*/
    nEscAddrInputData = pSyncMan->PhysicalStartAddress;
 8007a66:	6a3b      	ldr	r3, [r7, #32]
 8007a68:	881a      	ldrh	r2, [r3, #0]
 8007a6a:	4b8a      	ldr	r3, [pc, #552]	; (8007c94 <StartInputHandler+0x2a8>)
 8007a6c:	801a      	strh	r2, [r3, #0]
    
    /* get the number of input buffer used for calculating the address areas */
    if ( pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_ONE_BUFFER_VALUE )
 8007a6e:	6a3b      	ldr	r3, [r7, #32]
 8007a70:	889b      	ldrh	r3, [r3, #4]
 8007a72:	f003 0302 	and.w	r3, r3, #2
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d001      	beq.n	8007a7e <StartInputHandler+0x92>
        nPdInputBuffer = 1;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	85bb      	strh	r3, [r7, #44]	; 0x2c

    /* it has be checked if the Sync Manager memory areas for Inputs and Outputs will not overlap
       the Sync Manager memory areas for the Mailbox */

    if (((nEscAddrInputData + nPdInputSize * nPdInputBuffer) > u16EscAddrSendMbx && (nEscAddrInputData < (u16EscAddrSendMbx + u16SendMbxSize)))
 8007a7e:	4b85      	ldr	r3, [pc, #532]	; (8007c94 <StartInputHandler+0x2a8>)
 8007a80:	881b      	ldrh	r3, [r3, #0]
 8007a82:	461a      	mov	r2, r3
 8007a84:	4b84      	ldr	r3, [pc, #528]	; (8007c98 <StartInputHandler+0x2ac>)
 8007a86:	881b      	ldrh	r3, [r3, #0]
 8007a88:	4619      	mov	r1, r3
 8007a8a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007a8c:	fb01 f303 	mul.w	r3, r1, r3
 8007a90:	4413      	add	r3, r2
 8007a92:	4a82      	ldr	r2, [pc, #520]	; (8007c9c <StartInputHandler+0x2b0>)
 8007a94:	8812      	ldrh	r2, [r2, #0]
 8007a96:	4293      	cmp	r3, r2
 8007a98:	dd0a      	ble.n	8007ab0 <StartInputHandler+0xc4>
 8007a9a:	4b7e      	ldr	r3, [pc, #504]	; (8007c94 <StartInputHandler+0x2a8>)
 8007a9c:	881b      	ldrh	r3, [r3, #0]
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	4b7e      	ldr	r3, [pc, #504]	; (8007c9c <StartInputHandler+0x2b0>)
 8007aa2:	881b      	ldrh	r3, [r3, #0]
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	4b7e      	ldr	r3, [pc, #504]	; (8007ca0 <StartInputHandler+0x2b4>)
 8007aa8:	881b      	ldrh	r3, [r3, #0]
 8007aaa:	440b      	add	r3, r1
 8007aac:	429a      	cmp	r2, r3
 8007aae:	db18      	blt.n	8007ae2 <StartInputHandler+0xf6>
       || ((nEscAddrInputData + nPdInputSize * nPdInputBuffer) > u16EscAddrReceiveMbx && (nEscAddrInputData < (u16EscAddrReceiveMbx + u16ReceiveMbxSize)))
 8007ab0:	4b78      	ldr	r3, [pc, #480]	; (8007c94 <StartInputHandler+0x2a8>)
 8007ab2:	881b      	ldrh	r3, [r3, #0]
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	4b78      	ldr	r3, [pc, #480]	; (8007c98 <StartInputHandler+0x2ac>)
 8007ab8:	881b      	ldrh	r3, [r3, #0]
 8007aba:	4619      	mov	r1, r3
 8007abc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007abe:	fb01 f303 	mul.w	r3, r1, r3
 8007ac2:	4413      	add	r3, r2
 8007ac4:	4a77      	ldr	r2, [pc, #476]	; (8007ca4 <StartInputHandler+0x2b8>)
 8007ac6:	8812      	ldrh	r2, [r2, #0]
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	dd0c      	ble.n	8007ae6 <StartInputHandler+0xfa>
 8007acc:	4b71      	ldr	r3, [pc, #452]	; (8007c94 <StartInputHandler+0x2a8>)
 8007ace:	881b      	ldrh	r3, [r3, #0]
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	4b74      	ldr	r3, [pc, #464]	; (8007ca4 <StartInputHandler+0x2b8>)
 8007ad4:	881b      	ldrh	r3, [r3, #0]
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	4b73      	ldr	r3, [pc, #460]	; (8007ca8 <StartInputHandler+0x2bc>)
 8007ada:	881b      	ldrh	r3, [r3, #0]
 8007adc:	440b      	add	r3, r1
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	da01      	bge.n	8007ae6 <StartInputHandler+0xfa>
        )
    {
        return ALSTATUSCODE_INVALIDSMINCFG;
 8007ae2:	231e      	movs	r3, #30
 8007ae4:	e314      	b.n	8008110 <StartInputHandler+0x724>
    }

    if (
        ((nEscAddrOutputData + nPdOutputSize * nPdOutputBuffer) > u16EscAddrSendMbx && (nEscAddrOutputData < (u16EscAddrSendMbx + u16SendMbxSize)))
 8007ae6:	4b6a      	ldr	r3, [pc, #424]	; (8007c90 <StartInputHandler+0x2a4>)
 8007ae8:	881b      	ldrh	r3, [r3, #0]
 8007aea:	461a      	mov	r2, r3
 8007aec:	4b6f      	ldr	r3, [pc, #444]	; (8007cac <StartInputHandler+0x2c0>)
 8007aee:	881b      	ldrh	r3, [r3, #0]
 8007af0:	4619      	mov	r1, r3
 8007af2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007af4:	fb01 f303 	mul.w	r3, r1, r3
 8007af8:	4413      	add	r3, r2
 8007afa:	4a68      	ldr	r2, [pc, #416]	; (8007c9c <StartInputHandler+0x2b0>)
 8007afc:	8812      	ldrh	r2, [r2, #0]
    if (
 8007afe:	4293      	cmp	r3, r2
 8007b00:	dd0a      	ble.n	8007b18 <StartInputHandler+0x12c>
        ((nEscAddrOutputData + nPdOutputSize * nPdOutputBuffer) > u16EscAddrSendMbx && (nEscAddrOutputData < (u16EscAddrSendMbx + u16SendMbxSize)))
 8007b02:	4b63      	ldr	r3, [pc, #396]	; (8007c90 <StartInputHandler+0x2a4>)
 8007b04:	881b      	ldrh	r3, [r3, #0]
 8007b06:	461a      	mov	r2, r3
 8007b08:	4b64      	ldr	r3, [pc, #400]	; (8007c9c <StartInputHandler+0x2b0>)
 8007b0a:	881b      	ldrh	r3, [r3, #0]
 8007b0c:	4619      	mov	r1, r3
 8007b0e:	4b64      	ldr	r3, [pc, #400]	; (8007ca0 <StartInputHandler+0x2b4>)
 8007b10:	881b      	ldrh	r3, [r3, #0]
 8007b12:	440b      	add	r3, r1
 8007b14:	429a      	cmp	r2, r3
 8007b16:	db31      	blt.n	8007b7c <StartInputHandler+0x190>
        ||((nEscAddrOutputData + nPdOutputSize * nPdOutputBuffer) > u16EscAddrReceiveMbx && (nEscAddrOutputData < (u16EscAddrReceiveMbx + u16ReceiveMbxSize)))
 8007b18:	4b5d      	ldr	r3, [pc, #372]	; (8007c90 <StartInputHandler+0x2a4>)
 8007b1a:	881b      	ldrh	r3, [r3, #0]
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	4b63      	ldr	r3, [pc, #396]	; (8007cac <StartInputHandler+0x2c0>)
 8007b20:	881b      	ldrh	r3, [r3, #0]
 8007b22:	4619      	mov	r1, r3
 8007b24:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007b26:	fb01 f303 	mul.w	r3, r1, r3
 8007b2a:	4413      	add	r3, r2
 8007b2c:	4a5d      	ldr	r2, [pc, #372]	; (8007ca4 <StartInputHandler+0x2b8>)
 8007b2e:	8812      	ldrh	r2, [r2, #0]
 8007b30:	4293      	cmp	r3, r2
 8007b32:	dd0a      	ble.n	8007b4a <StartInputHandler+0x15e>
 8007b34:	4b56      	ldr	r3, [pc, #344]	; (8007c90 <StartInputHandler+0x2a4>)
 8007b36:	881b      	ldrh	r3, [r3, #0]
 8007b38:	461a      	mov	r2, r3
 8007b3a:	4b5a      	ldr	r3, [pc, #360]	; (8007ca4 <StartInputHandler+0x2b8>)
 8007b3c:	881b      	ldrh	r3, [r3, #0]
 8007b3e:	4619      	mov	r1, r3
 8007b40:	4b59      	ldr	r3, [pc, #356]	; (8007ca8 <StartInputHandler+0x2bc>)
 8007b42:	881b      	ldrh	r3, [r3, #0]
 8007b44:	440b      	add	r3, r1
 8007b46:	429a      	cmp	r2, r3
 8007b48:	db18      	blt.n	8007b7c <StartInputHandler+0x190>
        ||
        ((nEscAddrOutputData + nPdOutputSize * nPdOutputBuffer) > nEscAddrInputData && (nEscAddrOutputData < (nEscAddrInputData + nPdInputSize)))
 8007b4a:	4b51      	ldr	r3, [pc, #324]	; (8007c90 <StartInputHandler+0x2a4>)
 8007b4c:	881b      	ldrh	r3, [r3, #0]
 8007b4e:	461a      	mov	r2, r3
 8007b50:	4b56      	ldr	r3, [pc, #344]	; (8007cac <StartInputHandler+0x2c0>)
 8007b52:	881b      	ldrh	r3, [r3, #0]
 8007b54:	4619      	mov	r1, r3
 8007b56:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007b58:	fb01 f303 	mul.w	r3, r1, r3
 8007b5c:	4413      	add	r3, r2
 8007b5e:	4a4d      	ldr	r2, [pc, #308]	; (8007c94 <StartInputHandler+0x2a8>)
 8007b60:	8812      	ldrh	r2, [r2, #0]
        ||
 8007b62:	4293      	cmp	r3, r2
 8007b64:	dd0c      	ble.n	8007b80 <StartInputHandler+0x194>
        ((nEscAddrOutputData + nPdOutputSize * nPdOutputBuffer) > nEscAddrInputData && (nEscAddrOutputData < (nEscAddrInputData + nPdInputSize)))
 8007b66:	4b4a      	ldr	r3, [pc, #296]	; (8007c90 <StartInputHandler+0x2a4>)
 8007b68:	881b      	ldrh	r3, [r3, #0]
 8007b6a:	461a      	mov	r2, r3
 8007b6c:	4b49      	ldr	r3, [pc, #292]	; (8007c94 <StartInputHandler+0x2a8>)
 8007b6e:	881b      	ldrh	r3, [r3, #0]
 8007b70:	4619      	mov	r1, r3
 8007b72:	4b49      	ldr	r3, [pc, #292]	; (8007c98 <StartInputHandler+0x2ac>)
 8007b74:	881b      	ldrh	r3, [r3, #0]
 8007b76:	440b      	add	r3, r1
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	da01      	bge.n	8007b80 <StartInputHandler+0x194>
        )
    {
        /* Sync Manager Channel 2 memory area (Outputs) overlaps the Sync Manager memory areas for the Mailbox
           or the Sync Manager Channel 3 memory area (Inputs) */
        return ALSTATUSCODE_INVALIDSMOUTCFG;
 8007b7c:	231d      	movs	r3, #29
 8007b7e:	e2c7      	b.n	8008110 <StartInputHandler+0x724>
        --- Check configured synchronisation ---
    */

    /* Get the DC Control/Activation register value*/
    /*Read registers 0x980:0x981 (corresponding masks are adapted)*/
    HW_EscReadWord(dcControl, ESC_DC_UNIT_CONTROL_OFFSET);
 8007b80:	f107 0312 	add.w	r3, r7, #18
 8007b84:	2202      	movs	r2, #2
 8007b86:	f44f 6118 	mov.w	r1, #2432	; 0x980
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f001 fc1e 	bl	80093cc <HW_EscRead>
    dcControl = SWAPWORD(dcControl);
 8007b90:	8a7b      	ldrh	r3, [r7, #18]
 8007b92:	827b      	strh	r3, [r7, #18]

    // Cycle time for Sync0
        HW_EscReadDWord(cycleTimeSync0, ESC_DC_SYNC0_CYCLETIME_OFFSET);
 8007b94:	f107 0308 	add.w	r3, r7, #8
 8007b98:	2204      	movs	r2, #4
 8007b9a:	f44f 611a 	mov.w	r1, #2464	; 0x9a0
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f001 fc14 	bl	80093cc <HW_EscRead>
        cycleTimeSync0 = SWAPDWORD(cycleTimeSync0);
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	60bb      	str	r3, [r7, #8]

    // Cycle time for Sync1
        HW_EscReadDWord(cycleTimeSync1, ESC_DC_SYNC1_CYCLETIME_OFFSET);
 8007ba8:	1d3b      	adds	r3, r7, #4
 8007baa:	2204      	movs	r2, #4
 8007bac:	f640 11a4 	movw	r1, #2468	; 0x9a4
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f001 fc0b 	bl	80093cc <HW_EscRead>
        cycleTimeSync1 = SWAPDWORD(cycleTimeSync1);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	607b      	str	r3, [r7, #4]


    SyncType0x1C32 = sSyncManOutPar.u16SyncType;
 8007bba:	4b31      	ldr	r3, [pc, #196]	; (8007c80 <StartInputHandler+0x294>)
 8007bbc:	885b      	ldrh	r3, [r3, #2]
 8007bbe:	853b      	strh	r3, [r7, #40]	; 0x28
    SyncType0x1C33 = sSyncManInPar.u16SyncType;
 8007bc0:	4b30      	ldr	r3, [pc, #192]	; (8007c84 <StartInputHandler+0x298>)
 8007bc2:	885b      	ldrh	r3, [r3, #2]
 8007bc4:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* check general DC register plausibility and if configuration is supported
       - 0x981 DC Active
       - 0x9A0:0x9A3 Sync0 Cycle
       - 0x9A4:0x9A7 Sync1 Cycle
    */
    if((dcControl & (ESC_DC_SYNC_UNIT_ACTIVE_MASK | ESC_DC_SYNC_UNIT_AUTO_ACTIVE_MASK)) != 0)
 8007bc6:	8a7b      	ldrh	r3, [r7, #18]
 8007bc8:	f403 6310 	and.w	r3, r3, #2304	; 0x900
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d073      	beq.n	8007cb8 <StartInputHandler+0x2cc>
    {
        /* DC unit is active at least one Sync signal shall be generated */
        if((dcControl & (ESC_DC_SYNC0_ACTIVE_MASK | ESC_DC_SYNC1_ACTIVE_MASK)) == 0)
 8007bd0:	8a7b      	ldrh	r3, [r7, #18]
 8007bd2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d101      	bne.n	8007bde <StartInputHandler+0x1f2>
        {
            return ALSTATUSCODE_DCINVALIDSYNCCFG;
 8007bda:	2330      	movs	r3, #48	; 0x30
 8007bdc:	e298      	b.n	8008110 <StartInputHandler+0x724>
        }

        /* If Sync1 shall only be active if also Sync0 will be generated*/
        if(((dcControl & ESC_DC_SYNC0_ACTIVE_MASK) == 0)
 8007bde:	8a7b      	ldrh	r3, [r7, #18]
 8007be0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d106      	bne.n	8007bf6 <StartInputHandler+0x20a>
            && ((dcControl & ESC_DC_SYNC1_ACTIVE_MASK) != 0))
 8007be8:	8a7b      	ldrh	r3, [r7, #18]
 8007bea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d001      	beq.n	8007bf6 <StartInputHandler+0x20a>
        {
            return ALSTATUSCODE_DCINVALIDSYNCCFG;
 8007bf2:	2330      	movs	r3, #48	; 0x30
 8007bf4:	e28c      	b.n	8008110 <StartInputHandler+0x724>
        }

        if(u16MinSuppSyncType != 0)
 8007bf6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d015      	beq.n	8007c28 <StartInputHandler+0x23c>
        {
/*ECATCHANGE_START(V5.11) ESM2*/
            if((((u16MinSuppSyncType & SYNCTYPE_DCSYNC0SUPP) == 0) && ((dcControl & ESC_DC_SYNC0_ACTIVE_MASK) != 0))
 8007bfc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007bfe:	f003 0304 	and.w	r3, r3, #4
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d104      	bne.n	8007c10 <StartInputHandler+0x224>
 8007c06:	8a7b      	ldrh	r3, [r7, #18]
 8007c08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d109      	bne.n	8007c24 <StartInputHandler+0x238>
                ||(((u16MinSuppSyncType & SYNCTYPE_DCSYNC1SUPP) == 0) && ((dcControl & ESC_DC_SYNC1_ACTIVE_MASK) != 0)))
 8007c10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c12:	f003 0308 	and.w	r3, r3, #8
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d106      	bne.n	8007c28 <StartInputHandler+0x23c>
 8007c1a:	8a7b      	ldrh	r3, [r7, #18]
 8007c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d001      	beq.n	8007c28 <StartInputHandler+0x23c>
/*ECATCHANGE_END(V5.11) ESM2*/
            {
                /* Sync0 is not supported but will be generated*/
                return ALSTATUSCODE_DCINVALIDSYNCCFG;                   
 8007c24:	2330      	movs	r3, #48	; 0x30
 8007c26:	e273      	b.n	8008110 <StartInputHandler+0x724>
    }
        }

        /*Check if Sync0 cycle time is supported*/
        if ( cycleTimeSync0 != 0 && (cycleTimeSync0 < MIN_PD_CYCLE_TIME || cycleTimeSync0 > MAX_PD_CYCLE_TIME) )
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d009      	beq.n	8007c42 <StartInputHandler+0x256>
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	4a1f      	ldr	r2, [pc, #124]	; (8007cb0 <StartInputHandler+0x2c4>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d903      	bls.n	8007c3e <StartInputHandler+0x252>
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	4a1e      	ldr	r2, [pc, #120]	; (8007cb4 <StartInputHandler+0x2c8>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d901      	bls.n	8007c42 <StartInputHandler+0x256>
            return ALSTATUSCODE_DCSYNC0CYCLETIME;
 8007c3e:	2336      	movs	r3, #54	; 0x36
 8007c40:	e266      	b.n	8008110 <StartInputHandler+0x724>


        /* Check if Subordinated cycles are configured */
        if(((dcControl & ESC_DC_SYNC0_ACTIVE_MASK) != 0) && ((dcControl & ESC_DC_SYNC1_ACTIVE_MASK) != 0))
 8007c42:	8a7b      	ldrh	r3, [r7, #18]
 8007c44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d00e      	beq.n	8007c6a <StartInputHandler+0x27e>
 8007c4c:	8a7b      	ldrh	r3, [r7, #18]
 8007c4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d009      	beq.n	8007c6a <StartInputHandler+0x27e>
        {
            /* For Subordinated cycles both Sync signals shall be active and Sync0 is not configured in single shot (cycle time == 0)*/
/*ECATCHANGE_START(V5.11) ESM1*/
            if((cycleTimeSync1 > 0) && (cycleTimeSync1 >= cycleTimeSync0))
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d006      	beq.n	8007c6a <StartInputHandler+0x27e>
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d302      	bcc.n	8007c6a <StartInputHandler+0x27e>
/*ECATCHANGE_END(V5.11) ESM1*/
            {
                bSubordinatedCycles = TRUE;
 8007c64:	2301      	movs	r3, #1
 8007c66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
        }

        /* Dump an error if subordinated cycles are configured but not supported */
        if(bSubordinatedCycles && ((u16MinSuppSyncType & SYNCTYPE_SUBCYCLESUPP) == 0))
 8007c6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d022      	beq.n	8007cb8 <StartInputHandler+0x2cc>
 8007c72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c74:	f003 0310 	and.w	r3, r3, #16
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d11d      	bne.n	8007cb8 <StartInputHandler+0x2cc>
        {
             return ALSTATUSCODE_DCINVALIDSYNCCFG;
 8007c7c:	2330      	movs	r3, #48	; 0x30
 8007c7e:	e247      	b.n	8008110 <StartInputHandler+0x724>
 8007c80:	20000b08 	.word	0x20000b08
 8007c84:	20000b4c 	.word	0x20000b4c
 8007c88:	200006ba 	.word	0x200006ba
 8007c8c:	20000682 	.word	0x20000682
 8007c90:	200006b6 	.word	0x200006b6
 8007c94:	200006b8 	.word	0x200006b8
 8007c98:	200006aa 	.word	0x200006aa
 8007c9c:	2000087e 	.word	0x2000087e
 8007ca0:	20000878 	.word	0x20000878
 8007ca4:	2000087c 	.word	0x2000087c
 8007ca8:	2000087a 	.word	0x2000087a
 8007cac:	200006ac 	.word	0x200006ac
 8007cb0:	0007a11f 	.word	0x0007a11f
 8007cb4:	c3500000 	.word	0xc3500000


    /*
        Check if the user configured Sync Type matches the DC register values (if the Sync Type is supported was already checked in the object write function)
    */
    if(bSyncSetByUser)
 8007cb8:	4b8b      	ldr	r3, [pc, #556]	; (8007ee8 <StartInputHandler+0x4fc>)
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d02c      	beq.n	8007d1a <StartInputHandler+0x32e>
    {
        if((dcControl & (ESC_DC_SYNC_UNIT_ACTIVE_MASK | ESC_DC_SYNC_UNIT_AUTO_ACTIVE_MASK)) == 0)
 8007cc0:	8a7b      	ldrh	r3, [r7, #18]
 8007cc2:	f403 6310 	and.w	r3, r3, #2304	; 0x900
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d10d      	bne.n	8007ce6 <StartInputHandler+0x2fa>
        {
            /* DC out unit not enabled => no DC mode shall be set */
            if((SyncType0x1C32 == SYNCTYPE_DCSYNC0) || (SyncType0x1C32 == SYNCTYPE_DCSYNC1)
 8007cca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007ccc:	2b02      	cmp	r3, #2
 8007cce:	d008      	beq.n	8007ce2 <StartInputHandler+0x2f6>
 8007cd0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007cd2:	2b03      	cmp	r3, #3
 8007cd4:	d005      	beq.n	8007ce2 <StartInputHandler+0x2f6>
                ||(SyncType0x1C33 == SYNCTYPE_DCSYNC0) || (SyncType0x1C33 == SYNCTYPE_DCSYNC1))
 8007cd6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007cd8:	2b02      	cmp	r3, #2
 8007cda:	d002      	beq.n	8007ce2 <StartInputHandler+0x2f6>
 8007cdc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007cde:	2b03      	cmp	r3, #3
 8007ce0:	d162      	bne.n	8007da8 <StartInputHandler+0x3bc>
            {
                return ALSTATUSCODE_DCINVALIDSYNCCFG;
 8007ce2:	2330      	movs	r3, #48	; 0x30
 8007ce4:	e214      	b.n	8008110 <StartInputHandler+0x724>
            }
        } //if((dcControl & (ESC_DC_SYNC_UNIT_ACTIVE_MASK | ESC_DC_SYNC_UNIT_AUTO_ACTIVE_MASK)) == 0)
    else
    {
            if((dcControl & ESC_DC_SYNC1_ACTIVE_MASK) == 0)
 8007ce6:	8a7b      	ldrh	r3, [r7, #18]
 8007ce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d107      	bne.n	8007d00 <StartInputHandler+0x314>
            {
                /* No Sync 1 is generated => No Sync1 Sync Type shall configured*/
/*ECATCHANGE_START(V5.11) ESM3*/
                if((SyncType0x1C32 == (UINT16)SYNCTYPE_DCSYNC1)
 8007cf0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007cf2:	2b03      	cmp	r3, #3
 8007cf4:	d002      	beq.n	8007cfc <StartInputHandler+0x310>
                    ||(SyncType0x1C33 == (UINT16)SYNCTYPE_DCSYNC1))
 8007cf6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007cf8:	2b03      	cmp	r3, #3
 8007cfa:	d101      	bne.n	8007d00 <StartInputHandler+0x314>
/*ECATCHANGE_END(V5.11) ESM3*/
                {
                    return ALSTATUSCODE_DCINVALIDSYNCCFG;
 8007cfc:	2330      	movs	r3, #48	; 0x30
 8007cfe:	e207      	b.n	8008110 <StartInputHandler+0x724>
                }
            } //if((dcControl & ESC_DC_SYNC1_ACTIVE_MASK) == 0)

            if((dcControl & ESC_DC_SYNC0_ACTIVE_MASK) == 0)
 8007d00:	8a7b      	ldrh	r3, [r7, #18]
 8007d02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d14e      	bne.n	8007da8 <StartInputHandler+0x3bc>
            {
                /* No Sync 0 is generated => No Sync0 Sync Type shall configured*/
/*ECATCHANGE_START(V5.11) ESM3*/
                if((SyncType0x1C32 == (UINT16)SYNCTYPE_DCSYNC0)
 8007d0a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007d0c:	2b02      	cmp	r3, #2
 8007d0e:	d002      	beq.n	8007d16 <StartInputHandler+0x32a>
                    ||(SyncType0x1C33 == (UINT16)SYNCTYPE_DCSYNC0))
 8007d10:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007d12:	2b02      	cmp	r3, #2
 8007d14:	d148      	bne.n	8007da8 <StartInputHandler+0x3bc>
/*ECATCHANGE_END(V5.11) ESM3*/
                {
                    return ALSTATUSCODE_DCINVALIDSYNCCFG;
 8007d16:	2330      	movs	r3, #48	; 0x30
 8007d18:	e1fa      	b.n	8008110 <StartInputHandler+0x724>
        }
    } //if(bSyncSetByUser)
    else
    {
        /* No Sync Type selected by user => Configure Sync Type based on DC register values*/
        if((dcControl & (ESC_DC_SYNC_UNIT_ACTIVE_MASK | ESC_DC_SYNC_UNIT_AUTO_ACTIVE_MASK)) == 0)
 8007d1a:	8a7b      	ldrh	r3, [r7, #18]
 8007d1c:	f403 6310 	and.w	r3, r3, #2304	; 0x900
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d120      	bne.n	8007d66 <StartInputHandler+0x37a>
        {
            /* Activation or auto activation of the Sync Out Unit is disabled => Free Run or SM Sync is configured*/

            /* AL Event enabled => Configure SM Sync*/
            if (nPdOutputSize > 0)
 8007d24:	4b71      	ldr	r3, [pc, #452]	; (8007eec <StartInputHandler+0x500>)
 8007d26:	881b      	ldrh	r3, [r3, #0]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d00b      	beq.n	8007d44 <StartInputHandler+0x358>
            {
                SyncType0x1C32 = SYNCTYPE_SM_SYNCHRON;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	853b      	strh	r3, [r7, #40]	; 0x28
                
                if (nPdInputSize > 0)
 8007d30:	4b6f      	ldr	r3, [pc, #444]	; (8007ef0 <StartInputHandler+0x504>)
 8007d32:	881b      	ldrh	r3, [r3, #0]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d002      	beq.n	8007d3e <StartInputHandler+0x352>
                    SyncType0x1C33 = SYNCTYPE_SM2_SYNCHRON;
 8007d38:	2322      	movs	r3, #34	; 0x22
 8007d3a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007d3c:	e00f      	b.n	8007d5e <StartInputHandler+0x372>
                else
                    SyncType0x1C33 = SYNCTYPE_FREERUN;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007d42:	e00c      	b.n	8007d5e <StartInputHandler+0x372>
            }
            else if (nPdInputSize > 0)
 8007d44:	4b6a      	ldr	r3, [pc, #424]	; (8007ef0 <StartInputHandler+0x504>)
 8007d46:	881b      	ldrh	r3, [r3, #0]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d004      	beq.n	8007d56 <StartInputHandler+0x36a>
            {
                SyncType0x1C32 = SYNCTYPE_FREERUN;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	853b      	strh	r3, [r7, #40]	; 0x28
                SyncType0x1C33 = SYNCTYPE_SM_SYNCHRON;
 8007d50:	2301      	movs	r3, #1
 8007d52:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007d54:	e003      	b.n	8007d5e <StartInputHandler+0x372>
            }
            else
            {
                SyncType0x1C32 = SYNCTYPE_FREERUN;
 8007d56:	2300      	movs	r3, #0
 8007d58:	853b      	strh	r3, [r7, #40]	; 0x28
                SyncType0x1C33 = SYNCTYPE_FREERUN;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	84fb      	strh	r3, [r7, #38]	; 0x26
            }
            sSyncManOutPar.u16GetCycleTime = 1;
 8007d5e:	4b65      	ldr	r3, [pc, #404]	; (8007ef4 <StartInputHandler+0x508>)
 8007d60:	2201      	movs	r2, #1
 8007d62:	839a      	strh	r2, [r3, #28]
 8007d64:	e020      	b.n	8007da8 <StartInputHandler+0x3bc>

        }
        else
        {
            if (nPdOutputSize > 0)
 8007d66:	4b61      	ldr	r3, [pc, #388]	; (8007eec <StartInputHandler+0x500>)
 8007d68:	881b      	ldrh	r3, [r3, #0]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d009      	beq.n	8007d82 <StartInputHandler+0x396>
            {
                /* Sync Signal generation is active*/
                if (bSubordinatedCycles)
 8007d6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d002      	beq.n	8007d7c <StartInputHandler+0x390>
                {
                    SyncType0x1C32 = SYNCTYPE_DCSYNC1;
 8007d76:	2303      	movs	r3, #3
 8007d78:	853b      	strh	r3, [r7, #40]	; 0x28
 8007d7a:	e004      	b.n	8007d86 <StartInputHandler+0x39a>
                }
                else
                {
                    SyncType0x1C32 = SYNCTYPE_DCSYNC0;
 8007d7c:	2302      	movs	r3, #2
 8007d7e:	853b      	strh	r3, [r7, #40]	; 0x28
 8007d80:	e001      	b.n	8007d86 <StartInputHandler+0x39a>
                }
            }
            else
            {
                SyncType0x1C32 = SYNCTYPE_FREERUN;
 8007d82:	2300      	movs	r3, #0
 8007d84:	853b      	strh	r3, [r7, #40]	; 0x28
            }


            if (nPdInputSize > 0)
 8007d86:	4b5a      	ldr	r3, [pc, #360]	; (8007ef0 <StartInputHandler+0x504>)
 8007d88:	881b      	ldrh	r3, [r3, #0]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d00a      	beq.n	8007da4 <StartInputHandler+0x3b8>
            {
                if ((dcControl & ESC_DC_SYNC1_ACTIVE_MASK) != 0)
 8007d8e:	8a7b      	ldrh	r3, [r7, #18]
 8007d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d002      	beq.n	8007d9e <StartInputHandler+0x3b2>
                {
                    /* If Sync1 is available the inputs will always be mapped with Sync1 */
                    SyncType0x1C33 = SYNCTYPE_DCSYNC1;
 8007d98:	2303      	movs	r3, #3
 8007d9a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007d9c:	e004      	b.n	8007da8 <StartInputHandler+0x3bc>
                }
                else
                {
                    /* Map Inputs based on Sync0*/
                    SyncType0x1C33 = SYNCTYPE_DCSYNC0;
 8007d9e:	2302      	movs	r3, #2
 8007da0:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007da2:	e001      	b.n	8007da8 <StartInputHandler+0x3bc>
                }
            }
            else
            {
                SyncType0x1C33 = SYNCTYPE_FREERUN;
 8007da4:	2300      	movs	r3, #0
 8007da6:	84fb      	strh	r3, [r7, #38]	; 0x26
            }
        }
    }

    /* Update Cycle time entries if DC Sync Mode enabled */
    if(SyncType0x1C32 == SYNCTYPE_DCSYNC1)
 8007da8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007daa:	2b03      	cmp	r3, #3
 8007dac:	d106      	bne.n	8007dbc <StartInputHandler+0x3d0>
    {
        sSyncManOutPar.u32Sync0CycleTime = (UINT32)cycleTimeSync0;
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	4a50      	ldr	r2, [pc, #320]	; (8007ef4 <StartInputHandler+0x508>)
 8007db2:	6253      	str	r3, [r2, #36]	; 0x24

/*ECATCHANGE_START(V5.11) ECAT4*/
        sSyncManInPar.u32Sync0CycleTime = (UINT32)cycleTimeSync0;
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	4a50      	ldr	r2, [pc, #320]	; (8007ef8 <StartInputHandler+0x50c>)
 8007db8:	6253      	str	r3, [r2, #36]	; 0x24
 8007dba:	e00a      	b.n	8007dd2 <StartInputHandler+0x3e6>
/*ECATCHANGE_END(V5.11) ECAT4*/
    }
    else if(SyncType0x1C32 == SYNCTYPE_DCSYNC0)
 8007dbc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007dbe:	2b02      	cmp	r3, #2
 8007dc0:	d107      	bne.n	8007dd2 <StartInputHandler+0x3e6>
    {
        sSyncManOutPar.u32Sync0CycleTime = (UINT32)cycleTimeSync0;
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	4a4b      	ldr	r2, [pc, #300]	; (8007ef4 <StartInputHandler+0x508>)
 8007dc6:	6253      	str	r3, [r2, #36]	; 0x24

/*ECATCHANGE_START(V5.11) ECAT4*/
        sSyncManInPar.u32Sync0CycleTime = (UINT16)cycleTimeSync0;
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	461a      	mov	r2, r3
 8007dce:	4b4a      	ldr	r3, [pc, #296]	; (8007ef8 <StartInputHandler+0x50c>)
 8007dd0:	625a      	str	r2, [r3, #36]	; 0x24
/*ECATCHANGE_END(V5.11) ECAT4*/
    }

    /* Set global flags based on Sync Type */
    if ( !b3BufferMode )
 8007dd2:	4b4a      	ldr	r3, [pc, #296]	; (8007efc <StartInputHandler+0x510>)
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d107      	bne.n	8007dea <StartInputHandler+0x3fe>
    {
        /* 1-Buffer-Mode configured => For free run it shall be 3Buffer mode*/
        if (( SyncType0x1C32 == SYNCTYPE_FREERUN ) || ( SyncType0x1C33 == SYNCTYPE_FREERUN ))
 8007dda:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d002      	beq.n	8007de6 <StartInputHandler+0x3fa>
 8007de0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d101      	bne.n	8007dea <StartInputHandler+0x3fe>
        {
                return ALSTATUSCODE_FREERUNNEEDS3BUFFERMODE;
 8007de6:	2329      	movs	r3, #41	; 0x29
 8007de8:	e192      	b.n	8008110 <StartInputHandler+0x724>
        }
    }

    /* If no free run is supported the EscInt is always enabled*/
        if (( SyncType0x1C32 != SYNCTYPE_FREERUN ) || ( SyncType0x1C33 != SYNCTYPE_FREERUN ))
 8007dea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d102      	bne.n	8007df6 <StartInputHandler+0x40a>
 8007df0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d002      	beq.n	8007dfc <StartInputHandler+0x410>
        {
        /* ECAT Synchron Mode, the ESC interrupt is enabled */
        bEscIntEnabled = TRUE;
 8007df6:	4b42      	ldr	r3, [pc, #264]	; (8007f00 <StartInputHandler+0x514>)
 8007df8:	2201      	movs	r2, #1
 8007dfa:	701a      	strb	r2, [r3, #0]
    }

        /* Update value for AL Event Mask register (0x204) */
        if(bEscIntEnabled)
 8007dfc:	4b40      	ldr	r3, [pc, #256]	; (8007f00 <StartInputHandler+0x514>)
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d010      	beq.n	8007e26 <StartInputHandler+0x43a>
        {
            if(nPdOutputSize > 0)
 8007e04:	4b39      	ldr	r3, [pc, #228]	; (8007eec <StartInputHandler+0x500>)
 8007e06:	881b      	ldrh	r3, [r3, #0]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d004      	beq.n	8007e16 <StartInputHandler+0x42a>
            {
                u16ALEventMask = PROCESS_OUTPUT_EVENT;
 8007e0c:	4b3d      	ldr	r3, [pc, #244]	; (8007f04 <StartInputHandler+0x518>)
 8007e0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007e12:	801a      	strh	r2, [r3, #0]
 8007e14:	e007      	b.n	8007e26 <StartInputHandler+0x43a>
            }
            else if(nPdInputSize > 0)
 8007e16:	4b36      	ldr	r3, [pc, #216]	; (8007ef0 <StartInputHandler+0x504>)
 8007e18:	881b      	ldrh	r3, [r3, #0]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d003      	beq.n	8007e26 <StartInputHandler+0x43a>
            {
                u16ALEventMask = PROCESS_INPUT_EVENT;
 8007e1e:	4b39      	ldr	r3, [pc, #228]	; (8007f04 <StartInputHandler+0x518>)
 8007e20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e24:	801a      	strh	r2, [r3, #0]
            }

        }

        if ((SyncType0x1C32 == SYNCTYPE_DCSYNC0) || (SyncType0x1C32 == SYNCTYPE_DCSYNC1)
 8007e26:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007e28:	2b02      	cmp	r3, #2
 8007e2a:	d008      	beq.n	8007e3e <StartInputHandler+0x452>
 8007e2c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007e2e:	2b03      	cmp	r3, #3
 8007e30:	d005      	beq.n	8007e3e <StartInputHandler+0x452>
            || (SyncType0x1C33 == SYNCTYPE_DCSYNC0) || (SyncType0x1C33 == SYNCTYPE_DCSYNC1))/* Sync to Sync0 or Sync1 is enabled*/
 8007e32:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007e34:	2b02      	cmp	r3, #2
 8007e36:	d002      	beq.n	8007e3e <StartInputHandler+0x452>
 8007e38:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007e3a:	2b03      	cmp	r3, #3
 8007e3c:	d109      	bne.n	8007e52 <StartInputHandler+0x466>
        {
            /* slave is running in DC-mode */
            bDcSyncActive = TRUE;
 8007e3e:	4b32      	ldr	r3, [pc, #200]	; (8007f08 <StartInputHandler+0x51c>)
 8007e40:	2201      	movs	r2, #1
 8007e42:	701a      	strb	r2, [r3, #0]

/*ECATCHANGE_START(V5.11) ECAT4*/
            /*In case of an Input only application with DC no PDI Isr handling is required*/
            if (nPdOutputSize == 0)
 8007e44:	4b29      	ldr	r3, [pc, #164]	; (8007eec <StartInputHandler+0x500>)
 8007e46:	881b      	ldrh	r3, [r3, #0]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d102      	bne.n	8007e52 <StartInputHandler+0x466>
            {
               u16ALEventMask = 0;
 8007e4c:	4b2d      	ldr	r3, [pc, #180]	; (8007f04 <StartInputHandler+0x518>)
 8007e4e:	2200      	movs	r2, #0
 8007e50:	801a      	strh	r2, [r3, #0]
            }
/*ECATCHANGE_END(V5.11) ECAT4*/
        }

    sSyncManOutPar.u16SyncType = SyncType0x1C32;
 8007e52:	4a28      	ldr	r2, [pc, #160]	; (8007ef4 <StartInputHandler+0x508>)
 8007e54:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007e56:	8053      	strh	r3, [r2, #2]
    sSyncManInPar.u16SyncType = SyncType0x1C33;
 8007e58:	4a27      	ldr	r2, [pc, #156]	; (8007ef8 <StartInputHandler+0x50c>)
 8007e5a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007e5c:	8053      	strh	r3, [r2, #2]

    /* Calculate number of Sync0 events within one SM cycle and the Sync0 events on which the inputs has to be latched*/
    LatchInputSync0Value = 0;
 8007e5e:	4b2b      	ldr	r3, [pc, #172]	; (8007f0c <StartInputHandler+0x520>)
 8007e60:	2200      	movs	r2, #0
 8007e62:	801a      	strh	r2, [r3, #0]
    LatchInputSync0Counter = 0;
 8007e64:	4b2a      	ldr	r3, [pc, #168]	; (8007f10 <StartInputHandler+0x524>)
 8007e66:	2200      	movs	r2, #0
 8007e68:	801a      	strh	r2, [r3, #0]
    u16SmSync0Value = 0;
 8007e6a:	4b2a      	ldr	r3, [pc, #168]	; (8007f14 <StartInputHandler+0x528>)
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	801a      	strh	r2, [r3, #0]
    u16SmSync0Counter = 0;
 8007e70:	4b29      	ldr	r3, [pc, #164]	; (8007f18 <StartInputHandler+0x52c>)
 8007e72:	2200      	movs	r2, #0
 8007e74:	801a      	strh	r2, [r3, #0]


    if(bSubordinatedCycles == TRUE)
 8007e76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	d14e      	bne.n	8007f1c <StartInputHandler+0x530>
    {
        /* get the number of Sync0 event within on SM cycle */
        if(cycleTimeSync1 >= cycleTimeSync0)
 8007e7e:	687a      	ldr	r2, [r7, #4]
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d316      	bcc.n	8007eb4 <StartInputHandler+0x4c8>
        {
            u16SmSync0Value = (UINT16)(cycleTimeSync1 / cycleTimeSync0);
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e8e:	b29a      	uxth	r2, r3
 8007e90:	4b20      	ldr	r3, [pc, #128]	; (8007f14 <StartInputHandler+0x528>)
 8007e92:	801a      	strh	r2, [r3, #0]
            
            if((cycleTimeSync1 % cycleTimeSync0) == 0)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	68ba      	ldr	r2, [r7, #8]
 8007e98:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e9c:	fb01 f202 	mul.w	r2, r1, r2
 8007ea0:	1a9b      	subs	r3, r3, r2
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d109      	bne.n	8007eba <StartInputHandler+0x4ce>
            {
                /* if the Sync1cycletime/Sync0cycletime ratio is even one additional tick */
                u16SmSync0Value ++;
 8007ea6:	4b1b      	ldr	r3, [pc, #108]	; (8007f14 <StartInputHandler+0x528>)
 8007ea8:	881b      	ldrh	r3, [r3, #0]
 8007eaa:	3301      	adds	r3, #1
 8007eac:	b29a      	uxth	r2, r3
 8007eae:	4b19      	ldr	r3, [pc, #100]	; (8007f14 <StartInputHandler+0x528>)
 8007eb0:	801a      	strh	r2, [r3, #0]
 8007eb2:	e002      	b.n	8007eba <StartInputHandler+0x4ce>
        }
        }
        else
        {
            u16SmSync0Value = 1;
 8007eb4:	4b17      	ldr	r3, [pc, #92]	; (8007f14 <StartInputHandler+0x528>)
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	801a      	strh	r2, [r3, #0]
        }

        /* Calculate the Sync0 tick on which the inputs shall be latched (last Sync0 before the next Sync1 event)*/
        LatchInputSync0Value = (UINT16) (cycleTimeSync1 / cycleTimeSync0);
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ec2:	b29a      	uxth	r2, r3
 8007ec4:	4b11      	ldr	r3, [pc, #68]	; (8007f0c <StartInputHandler+0x520>)
 8007ec6:	801a      	strh	r2, [r3, #0]

        if((cycleTimeSync1 % cycleTimeSync0) > 0)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	68ba      	ldr	r2, [r7, #8]
 8007ecc:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ed0:	fb01 f202 	mul.w	r2, r1, r2
 8007ed4:	1a9b      	subs	r3, r3, r2
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d02c      	beq.n	8007f34 <StartInputHandler+0x548>
            LatchInputSync0Value++;
 8007eda:	4b0c      	ldr	r3, [pc, #48]	; (8007f0c <StartInputHandler+0x520>)
 8007edc:	881b      	ldrh	r3, [r3, #0]
 8007ede:	3301      	adds	r3, #1
 8007ee0:	b29a      	uxth	r2, r3
 8007ee2:	4b0a      	ldr	r3, [pc, #40]	; (8007f0c <StartInputHandler+0x520>)
 8007ee4:	801a      	strh	r2, [r3, #0]
 8007ee6:	e025      	b.n	8007f34 <StartInputHandler+0x548>
 8007ee8:	20000b01 	.word	0x20000b01
 8007eec:	200006ac 	.word	0x200006ac
 8007ef0:	200006aa 	.word	0x200006aa
 8007ef4:	20000b08 	.word	0x20000b08
 8007ef8:	20000b4c 	.word	0x20000b4c
 8007efc:	200006a1 	.word	0x200006a1
 8007f00:	200006a0 	.word	0x200006a0
 8007f04:	200006ba 	.word	0x200006ba
 8007f08:	20000684 	.word	0x20000684
 8007f0c:	2000069c 	.word	0x2000069c
 8007f10:	2000069e 	.word	0x2000069e
 8007f14:	2000068c 	.word	0x2000068c
 8007f18:	2000068a 	.word	0x2000068a

    }
    else 
    {
        if(SyncType0x1C32 == SYNCTYPE_DCSYNC0)
 8007f1c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007f1e:	2b02      	cmp	r3, #2
 8007f20:	d102      	bne.n	8007f28 <StartInputHandler+0x53c>
        {
            /* if SyncType of 0x1C32 is 2 the Sync0 event is trigger once during a SM cycle */
            u16SmSync0Value = 1;
 8007f22:	4b7d      	ldr	r3, [pc, #500]	; (8008118 <StartInputHandler+0x72c>)
 8007f24:	2201      	movs	r2, #1
 8007f26:	801a      	strh	r2, [r3, #0]
        }   

        if(SyncType0x1C33 != SYNCTYPE_DCSYNC1)
 8007f28:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007f2a:	2b03      	cmp	r3, #3
 8007f2c:	d002      	beq.n	8007f34 <StartInputHandler+0x548>
        {
            LatchInputSync0Value = 1;
 8007f2e:	4b7b      	ldr	r3, [pc, #492]	; (800811c <StartInputHandler+0x730>)
 8007f30:	2201      	movs	r2, #1
 8007f32:	801a      	strh	r2, [r3, #0]
    }



    /* reset the error counter indicating synchronization problems */
    sCycleDiag.syncFailedCounter = 0;
 8007f34:	4b7a      	ldr	r3, [pc, #488]	; (8008120 <StartInputHandler+0x734>)
 8007f36:	2200      	movs	r2, #0
 8007f38:	801a      	strh	r2, [r3, #0]
        --- Check watchdog settings ---
    */

    /*get the watchdog time (register 0x420). if value is > 0 watchdog is active*/
/*ECATCHANGE_START(V5.11) ECAT4*/
    HW_EscReadWord(wd, ESC_PD_WD_TIME);
 8007f3a:	f107 030e 	add.w	r3, r7, #14
 8007f3e:	2202      	movs	r2, #2
 8007f40:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8007f44:	4618      	mov	r0, r3
 8007f46:	f001 fa41 	bl	80093cc <HW_EscRead>
    wd = SWAPWORD(wd);
 8007f4a:	89fb      	ldrh	r3, [r7, #14]
 8007f4c:	81fb      	strh	r3, [r7, #14]
/*ECATCHANGE_END(V5.11) ECAT4*/

    if (nPdOutputSize > 0 &&  wd != 0 )
 8007f4e:	4b75      	ldr	r3, [pc, #468]	; (8008124 <StartInputHandler+0x738>)
 8007f50:	881b      	ldrh	r3, [r3, #0]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d02f      	beq.n	8007fb6 <StartInputHandler+0x5ca>
 8007f56:	89fb      	ldrh	r3, [r7, #14]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d02c      	beq.n	8007fb6 <StartInputHandler+0x5ca>
    {
    /*get watchdog divider (register 0x400)*/
    HW_EscReadWord(wdiv, ESC_WD_DIVIDER_OFFSET);
 8007f5c:	f107 0310 	add.w	r3, r7, #16
 8007f60:	2202      	movs	r2, #2
 8007f62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007f66:	4618      	mov	r0, r3
 8007f68:	f001 fa30 	bl	80093cc <HW_EscRead>
    wdiv = SWAPWORD(wdiv);
 8007f6c:	8a3b      	ldrh	r3, [r7, #16]
 8007f6e:	823b      	strh	r3, [r7, #16]
        if ( wdiv != 0 )
 8007f70:	8a3b      	ldrh	r3, [r7, #16]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d019      	beq.n	8007faa <StartInputHandler+0x5be>
        {
            /* the ESC subtracts 2 in register 0x400 so it has to be added here */
            UINT32 d = wdiv+2;
 8007f76:	8a3b      	ldrh	r3, [r7, #16]
 8007f78:	3302      	adds	r3, #2
 8007f7a:	61fb      	str	r3, [r7, #28]

            d *= wd;
 8007f7c:	89fb      	ldrh	r3, [r7, #14]
 8007f7e:	461a      	mov	r2, r3
 8007f80:	69fb      	ldr	r3, [r7, #28]
 8007f82:	fb02 f303 	mul.w	r3, r2, r3
 8007f86:	61fb      	str	r3, [r7, #28]
            /* store watchdog in ms in variable u16WdValue */
            /* watchdog value has to be rounded up */
            d += 24999;
 8007f88:	69fb      	ldr	r3, [r7, #28]
 8007f8a:	f503 43c3 	add.w	r3, r3, #24960	; 0x6180
 8007f8e:	3327      	adds	r3, #39	; 0x27
 8007f90:	61fb      	str	r3, [r7, #28]
            d /= 25000;
 8007f92:	69fb      	ldr	r3, [r7, #28]
 8007f94:	08db      	lsrs	r3, r3, #3
 8007f96:	4a64      	ldr	r2, [pc, #400]	; (8008128 <StartInputHandler+0x73c>)
 8007f98:	fba2 2303 	umull	r2, r3, r2, r3
 8007f9c:	0a1b      	lsrs	r3, r3, #8
 8007f9e:	61fb      	str	r3, [r7, #28]
            EcatWdValue = (UINT16) d;
 8007fa0:	69fb      	ldr	r3, [r7, #28]
 8007fa2:	b29a      	uxth	r2, r3
 8007fa4:	4b61      	ldr	r3, [pc, #388]	; (800812c <StartInputHandler+0x740>)
 8007fa6:	801a      	strh	r2, [r3, #0]
        if ( wdiv != 0 )
 8007fa8:	e00a      	b.n	8007fc0 <StartInputHandler+0x5d4>
        }
        else
        {
            wd = 0;
 8007faa:	2300      	movs	r3, #0
 8007fac:	81fb      	strh	r3, [r7, #14]
            /* wd value has to be set to zero, if the wd is 0 */
            EcatWdValue = 0;
 8007fae:	4b5f      	ldr	r3, [pc, #380]	; (800812c <StartInputHandler+0x740>)
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	801a      	strh	r2, [r3, #0]
        if ( wdiv != 0 )
 8007fb4:	e004      	b.n	8007fc0 <StartInputHandler+0x5d4>
        }
    }
    else
    {
        /* the watchdog is deactivated or slave has no output process data*/
        wdiv = 0;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	823b      	strh	r3, [r7, #16]
        EcatWdValue = 0;
 8007fba:	4b5c      	ldr	r3, [pc, #368]	; (800812c <StartInputHandler+0x740>)
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	801a      	strh	r2, [r3, #0]
    }

    if((EcatWdValue == 0 && bWdTrigger) || (EcatWdValue != 0 && !bWdTrigger))
 8007fc0:	4b5a      	ldr	r3, [pc, #360]	; (800812c <StartInputHandler+0x740>)
 8007fc2:	881b      	ldrh	r3, [r3, #0]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d103      	bne.n	8007fd0 <StartInputHandler+0x5e4>
 8007fc8:	4b59      	ldr	r3, [pc, #356]	; (8008130 <StartInputHandler+0x744>)
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d107      	bne.n	8007fe0 <StartInputHandler+0x5f4>
 8007fd0:	4b56      	ldr	r3, [pc, #344]	; (800812c <StartInputHandler+0x740>)
 8007fd2:	881b      	ldrh	r3, [r3, #0]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d005      	beq.n	8007fe4 <StartInputHandler+0x5f8>
 8007fd8:	4b55      	ldr	r3, [pc, #340]	; (8008130 <StartInputHandler+0x744>)
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d101      	bne.n	8007fe4 <StartInputHandler+0x5f8>
    {
        /* if the WD-Trigger in the Sync Manager Channel 2 Control-Byte is set (Bit 6 of Register 0x814)
            an error has to be returned */
        return ALSTATUSCODE_INVALIDWDCFG;
 8007fe0:	231f      	movs	r3, #31
 8007fe2:	e095      	b.n	8008110 <StartInputHandler+0x724>
    }

    if ( bEscIntEnabled && nPdOutputSize != 0 )
 8007fe4:	4b53      	ldr	r3, [pc, #332]	; (8008134 <StartInputHandler+0x748>)
 8007fe6:	781b      	ldrb	r3, [r3, #0]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d00a      	beq.n	8008002 <StartInputHandler+0x616>
 8007fec:	4b4d      	ldr	r3, [pc, #308]	; (8008124 <StartInputHandler+0x738>)
 8007fee:	881b      	ldrh	r3, [r3, #0]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d006      	beq.n	8008002 <StartInputHandler+0x616>
    {
        /* ECAT synchron Mode is active, the Sync Manager Channel 2 event
           has to activated in the AL-Event mask register */
        u16ALEventMask |= PROCESS_OUTPUT_EVENT;
 8007ff4:	4b50      	ldr	r3, [pc, #320]	; (8008138 <StartInputHandler+0x74c>)
 8007ff6:	881b      	ldrh	r3, [r3, #0]
 8007ff8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007ffc:	b29a      	uxth	r2, r3
 8007ffe:	4b4e      	ldr	r3, [pc, #312]	; (8008138 <StartInputHandler+0x74c>)
 8008000:	801a      	strh	r2, [r3, #0]
    }
/*The application ESM function is separated from this function to handle pending transitions*/

    Sync0WdValue = 0;
 8008002:	4b4e      	ldr	r3, [pc, #312]	; (800813c <StartInputHandler+0x750>)
 8008004:	2200      	movs	r2, #0
 8008006:	801a      	strh	r2, [r3, #0]
    Sync0WdCounter = 0;
 8008008:	4b4d      	ldr	r3, [pc, #308]	; (8008140 <StartInputHandler+0x754>)
 800800a:	2200      	movs	r2, #0
 800800c:	801a      	strh	r2, [r3, #0]
    Sync1WdCounter = 0;
 800800e:	4b4d      	ldr	r3, [pc, #308]	; (8008144 <StartInputHandler+0x758>)
 8008010:	2200      	movs	r2, #0
 8008012:	801a      	strh	r2, [r3, #0]
    Sync1WdValue = 0;
 8008014:	4b4c      	ldr	r3, [pc, #304]	; (8008148 <StartInputHandler+0x75c>)
 8008016:	2200      	movs	r2, #0
 8008018:	801a      	strh	r2, [r3, #0]
    bDcRunning = FALSE;
 800801a:	4b4c      	ldr	r3, [pc, #304]	; (800814c <StartInputHandler+0x760>)
 800801c:	2200      	movs	r2, #0
 800801e:	701a      	strb	r2, [r3, #0]
    bSmSyncSequenceValid = FALSE;
 8008020:	4b4b      	ldr	r3, [pc, #300]	; (8008150 <StartInputHandler+0x764>)
 8008022:	2200      	movs	r2, #0
 8008024:	701a      	strb	r2, [r3, #0]
    i16WaitForPllRunningTimeout = 0;
 8008026:	4b4b      	ldr	r3, [pc, #300]	; (8008154 <StartInputHandler+0x768>)
 8008028:	2200      	movs	r2, #0
 800802a:	801a      	strh	r2, [r3, #0]
/*ECATCHANGE_START(V5.11) ECAT4*/
    sSyncManInPar.u8SyncError = 0;
 800802c:	4b4a      	ldr	r3, [pc, #296]	; (8008158 <StartInputHandler+0x76c>)
 800802e:	2200      	movs	r2, #0
 8008030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
/*ECATCHANGE_END(V5.11) ECAT4*/
    sSyncManOutPar.u8SyncError = 0;
 8008034:	4b49      	ldr	r3, [pc, #292]	; (800815c <StartInputHandler+0x770>)
 8008036:	2200      	movs	r2, #0
 8008038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    sSyncManOutPar.u16SmEventMissedCounter = 0;
 800803c:	4b47      	ldr	r3, [pc, #284]	; (800815c <StartInputHandler+0x770>)
 800803e:	2200      	movs	r2, #0
 8008040:	851a      	strh	r2, [r3, #40]	; 0x28

    /* calculate the Sync0/Sync1 watchdog timeouts */
    if ( (dcControl & ESC_DC_SYNC0_ACTIVE_MASK) != 0 )
 8008042:	8a7b      	ldrh	r3, [r7, #18]
 8008044:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008048:	2b00      	cmp	r3, #0
 800804a:	d050      	beq.n	80080ee <StartInputHandler+0x702>
    {
        /*calculate the Sync0 Watchdog counter value the minimum value is 1 ms
            if the sync0 cycle is greater 500us the Sync0 Wd value is 2*Sycn0 cycle */
        if(cycleTimeSync0 == 0)
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d103      	bne.n	800805a <StartInputHandler+0x66e>
        {
            Sync0WdValue = 0;
 8008052:	4b3a      	ldr	r3, [pc, #232]	; (800813c <StartInputHandler+0x750>)
 8008054:	2200      	movs	r2, #0
 8008056:	801a      	strh	r2, [r3, #0]
 8008058:	e018      	b.n	800808c <StartInputHandler+0x6a0>
        }
        else
        {
            UINT32 Sync0Cycle = cycleTimeSync0/100000;
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	095b      	lsrs	r3, r3, #5
 800805e:	4a40      	ldr	r2, [pc, #256]	; (8008160 <StartInputHandler+0x774>)
 8008060:	fba2 2303 	umull	r2, r3, r2, r3
 8008064:	09db      	lsrs	r3, r3, #7
 8008066:	61bb      	str	r3, [r7, #24]
            if(Sync0Cycle < 5)
 8008068:	69bb      	ldr	r3, [r7, #24]
 800806a:	2b04      	cmp	r3, #4
 800806c:	d803      	bhi.n	8008076 <StartInputHandler+0x68a>
            {
                /*Sync0 cycle less than 500us*/
                Sync0WdValue = 1;
 800806e:	4b33      	ldr	r3, [pc, #204]	; (800813c <StartInputHandler+0x750>)
 8008070:	2201      	movs	r2, #1
 8008072:	801a      	strh	r2, [r3, #0]
 8008074:	e00a      	b.n	800808c <StartInputHandler+0x6a0>
            }
            else
            {
                Sync0WdValue = (UINT16)(Sync0Cycle*2)/10;
 8008076:	69bb      	ldr	r3, [r7, #24]
 8008078:	b29b      	uxth	r3, r3
 800807a:	005b      	lsls	r3, r3, #1
 800807c:	b29b      	uxth	r3, r3
 800807e:	4a39      	ldr	r2, [pc, #228]	; (8008164 <StartInputHandler+0x778>)
 8008080:	fba2 2303 	umull	r2, r3, r2, r3
 8008084:	08db      	lsrs	r3, r3, #3
 8008086:	b29a      	uxth	r2, r3
 8008088:	4b2c      	ldr	r3, [pc, #176]	; (800813c <StartInputHandler+0x750>)
 800808a:	801a      	strh	r2, [r3, #0]
            }
        }

        /* Calculate also the watchdog time for Sync1*/
        if ( (dcControl & ESC_DC_SYNC1_ACTIVE_MASK) != 0 )
 800808c:	8a7b      	ldrh	r3, [r7, #18]
 800808e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008092:	2b00      	cmp	r3, #0
 8008094:	d02b      	beq.n	80080ee <StartInputHandler+0x702>
        {
            if(cycleTimeSync1 < cycleTimeSync0)
 8008096:	687a      	ldr	r2, [r7, #4]
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	429a      	cmp	r2, r3
 800809c:	d204      	bcs.n	80080a8 <StartInputHandler+0x6bc>
        {
                /* Sync 1 has the same cycle time than Sync0 (maybe with a shift (cycleTimeSync1 > 0))*/
                Sync1WdValue = Sync0WdValue;
 800809e:	4b27      	ldr	r3, [pc, #156]	; (800813c <StartInputHandler+0x750>)
 80080a0:	881a      	ldrh	r2, [r3, #0]
 80080a2:	4b29      	ldr	r3, [pc, #164]	; (8008148 <StartInputHandler+0x75c>)
 80080a4:	801a      	strh	r2, [r3, #0]
 80080a6:	e022      	b.n	80080ee <StartInputHandler+0x702>
        }
        else
        {
                /* Sync1 cycle is larger than Sync0 (e.g. subordinated Sync0 cycles) */
                UINT32 Sync1Cycle = cycleTimeSync1/100000;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	095b      	lsrs	r3, r3, #5
 80080ac:	4a2c      	ldr	r2, [pc, #176]	; (8008160 <StartInputHandler+0x774>)
 80080ae:	fba2 2303 	umull	r2, r3, r2, r3
 80080b2:	09db      	lsrs	r3, r3, #7
 80080b4:	617b      	str	r3, [r7, #20]
                if(Sync1Cycle < 5)
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	2b04      	cmp	r3, #4
 80080ba:	d803      	bhi.n	80080c4 <StartInputHandler+0x6d8>
                {
                    /*Sync0 cycle less than 500us*/
                    Sync1WdValue = 1;
 80080bc:	4b22      	ldr	r3, [pc, #136]	; (8008148 <StartInputHandler+0x75c>)
 80080be:	2201      	movs	r2, #1
 80080c0:	801a      	strh	r2, [r3, #0]
 80080c2:	e00a      	b.n	80080da <StartInputHandler+0x6ee>
    }
    else
    {
                    Sync1WdValue = (UINT16)(Sync1Cycle*2)/10;
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	005b      	lsls	r3, r3, #1
 80080ca:	b29b      	uxth	r3, r3
 80080cc:	4a25      	ldr	r2, [pc, #148]	; (8008164 <StartInputHandler+0x778>)
 80080ce:	fba2 2303 	umull	r2, r3, r2, r3
 80080d2:	08db      	lsrs	r3, r3, #3
 80080d4:	b29a      	uxth	r2, r3
 80080d6:	4b1c      	ldr	r3, [pc, #112]	; (8008148 <StartInputHandler+0x75c>)
 80080d8:	801a      	strh	r2, [r3, #0]
                }

                /* add one Sync0 cycle because the Sync1 cycle starts on the next Sync0 after the Sync1 signal */
                Sync1WdValue += Sync0WdValue/2;
 80080da:	4b18      	ldr	r3, [pc, #96]	; (800813c <StartInputHandler+0x750>)
 80080dc:	881b      	ldrh	r3, [r3, #0]
 80080de:	085b      	lsrs	r3, r3, #1
 80080e0:	b29a      	uxth	r2, r3
 80080e2:	4b19      	ldr	r3, [pc, #100]	; (8008148 <StartInputHandler+0x75c>)
 80080e4:	881b      	ldrh	r3, [r3, #0]
 80080e6:	4413      	add	r3, r2
 80080e8:	b29a      	uxth	r2, r3
 80080ea:	4b17      	ldr	r3, [pc, #92]	; (8008148 <StartInputHandler+0x75c>)
 80080ec:	801a      	strh	r2, [r3, #0]





    if(nPdOutputSize > 0)
 80080ee:	4b0d      	ldr	r3, [pc, #52]	; (8008124 <StartInputHandler+0x738>)
 80080f0:	881b      	ldrh	r3, [r3, #0]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d002      	beq.n	80080fc <StartInputHandler+0x710>
    {
/*ECATCHANGE_START(V5.11) HW1*/
        EnableSyncManChannel(PROCESS_DATA_OUT);
 80080f6:	2002      	movs	r0, #2
 80080f8:	f7ff fa54 	bl	80075a4 <EnableSyncManChannel>
/*ECATCHANGE_END(V5.11) HW1*/
    }

    if(nPdInputSize > 0)
 80080fc:	4b1a      	ldr	r3, [pc, #104]	; (8008168 <StartInputHandler+0x77c>)
 80080fe:	881b      	ldrh	r3, [r3, #0]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d002      	beq.n	800810a <StartInputHandler+0x71e>
    {
/*ECATCHANGE_START(V5.11) HW1*/
        EnableSyncManChannel(PROCESS_DATA_IN);
 8008104:	2003      	movs	r0, #3
 8008106:	f7ff fa4d 	bl	80075a4 <EnableSyncManChannel>
/*ECATCHANGE_END(V5.11) HW1*/
    }

    /*write initial input data*/
    PDO_InputMapping();
 800810a:	f7fe f997 	bl	800643c <PDO_InputMapping>

    return ALSTATUSCODE_NOERROR;
 800810e:	2300      	movs	r3, #0
}
 8008110:	4618      	mov	r0, r3
 8008112:	3730      	adds	r7, #48	; 0x30
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}
 8008118:	2000068c 	.word	0x2000068c
 800811c:	2000069c 	.word	0x2000069c
 8008120:	20000b04 	.word	0x20000b04
 8008124:	200006ac 	.word	0x200006ac
 8008128:	14f8b589 	.word	0x14f8b589
 800812c:	200006b4 	.word	0x200006b4
 8008130:	20000683 	.word	0x20000683
 8008134:	200006a0 	.word	0x200006a0
 8008138:	200006ba 	.word	0x200006ba
 800813c:	20000696 	.word	0x20000696
 8008140:	20000694 	.word	0x20000694
 8008144:	20000698 	.word	0x20000698
 8008148:	2000069a 	.word	0x2000069a
 800814c:	20000688 	.word	0x20000688
 8008150:	2000068e 	.word	0x2000068e
 8008154:	20000690 	.word	0x20000690
 8008158:	20000b4c 	.word	0x20000b4c
 800815c:	20000b08 	.word	0x20000b08
 8008160:	0a7c5ac5 	.word	0x0a7c5ac5
 8008164:	cccccccd 	.word	0xcccccccd
 8008168:	200006aa 	.word	0x200006aa

0800816c <StartOutputHandler>:
 \brief  and the state transition would be refused if outputs are missing

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 StartOutputHandler(void)
{
 800816c:	b480      	push	{r7}
 800816e:	b083      	sub	sp, #12
 8008170:	af00      	add	r7, sp, #0
/*ECATCHANGE_START(V5.11) ESM6*/
    /* by default the SO transition should be completed in AlControlRes().
       required to support also masters which starts to send process data after the SO transition was triggered
       (if the master don't send process data within "SAFEOP2OPTIMEOUT" the transition is rejected)*/
    UINT16 result = NOERROR_INWORK;
 8008172:	23ff      	movs	r3, #255	; 0xff
 8008174:	80fb      	strh	r3, [r7, #6]
/*ECATCHANGE_END(V5.11) ESM6*/
    if(bLocalErrorFlag)
 8008176:	4b0c      	ldr	r3, [pc, #48]	; (80081a8 <StartOutputHandler+0x3c>)
 8008178:	781b      	ldrb	r3, [r3, #0]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d002      	beq.n	8008184 <StartOutputHandler+0x18>
    {
        /*Local error still exists => skip state request to OP and response with "u16LocalErrorCode"*/
        return u16LocalErrorCode;
 800817e:	4b0b      	ldr	r3, [pc, #44]	; (80081ac <StartOutputHandler+0x40>)
 8008180:	881b      	ldrh	r3, [r3, #0]
 8008182:	e00a      	b.n	800819a <StartOutputHandler+0x2e>
    }
/*The application ESM function is separated from this function to handle pending transitions*/


    /*DC synchronisation is active wait until pll is valid*/
    if(bDcSyncActive)
 8008184:	4b0a      	ldr	r3, [pc, #40]	; (80081b0 <StartOutputHandler+0x44>)
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d005      	beq.n	8008198 <StartOutputHandler+0x2c>
    {
        i16WaitForPllRunningTimeout = 200;
 800818c:	4b09      	ldr	r3, [pc, #36]	; (80081b4 <StartOutputHandler+0x48>)
 800818e:	22c8      	movs	r2, #200	; 0xc8
 8008190:	801a      	strh	r2, [r3, #0]
        i16WaitForPllRunningCnt = 0;
 8008192:	4b09      	ldr	r3, [pc, #36]	; (80081b8 <StartOutputHandler+0x4c>)
 8008194:	2200      	movs	r2, #0
 8008196:	801a      	strh	r2, [r3, #0]
    }


    return result;
 8008198:	88fb      	ldrh	r3, [r7, #6]
}
 800819a:	4618      	mov	r0, r3
 800819c:	370c      	adds	r7, #12
 800819e:	46bd      	mov	sp, r7
 80081a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a4:	4770      	bx	lr
 80081a6:	bf00      	nop
 80081a8:	200006a2 	.word	0x200006a2
 80081ac:	200006a4 	.word	0x200006a4
 80081b0:	20000684 	.word	0x20000684
 80081b4:	20000690 	.word	0x20000690
 80081b8:	20000692 	.word	0x20000692

080081bc <StopOutputHandler>:
 \brief  the state transition can be delayed by returning NOERROR_INWORK

*////////////////////////////////////////////////////////////////////////////////////////

void StopOutputHandler(void)
{
 80081bc:	b480      	push	{r7}
 80081be:	af00      	add	r7, sp, #0
    /* reset the flags that outputs were received and that the slave is in OP */
    bEcatFirstOutputsReceived = FALSE;
 80081c0:	4b05      	ldr	r3, [pc, #20]	; (80081d8 <StopOutputHandler+0x1c>)
 80081c2:	2200      	movs	r2, #0
 80081c4:	701a      	strb	r2, [r3, #0]
    bEcatOutputUpdateRunning = FALSE;
 80081c6:	4b05      	ldr	r3, [pc, #20]	; (80081dc <StopOutputHandler+0x20>)
 80081c8:	2200      	movs	r2, #0
 80081ca:	701a      	strb	r2, [r3, #0]
}
 80081cc:	bf00      	nop
 80081ce:	46bd      	mov	sp, r7
 80081d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d4:	4770      	bx	lr
 80081d6:	bf00      	nop
 80081d8:	20000682 	.word	0x20000682
 80081dc:	20000680 	.word	0x20000680

080081e0 <StopInputHandler>:
  \brief    This function is called in case of the state transition from SAFEOP to PREOP

*////////////////////////////////////////////////////////////////////////////////////////

void StopInputHandler(void)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b082      	sub	sp, #8
 80081e4:	af00      	add	r7, sp, #0
    if(nPdOutputSize > 0)
 80081e6:	4b2c      	ldr	r3, [pc, #176]	; (8008298 <StopInputHandler+0xb8>)
 80081e8:	881b      	ldrh	r3, [r3, #0]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d002      	beq.n	80081f4 <StopInputHandler+0x14>
    {
        /* disable the Sync Manager Channel 2 (outputs) */
/*ECATCHANGE_END(V5.11) HW1*/
        DisableSyncManChannel(PROCESS_DATA_OUT);
 80081ee:	2002      	movs	r0, #2
 80081f0:	f7ff f9b0 	bl	8007554 <DisableSyncManChannel>
/*ECATCHANGE_END(V5.11) HW1*/
    }

    if(nPdInputSize > 0)
 80081f4:	4b29      	ldr	r3, [pc, #164]	; (800829c <StopInputHandler+0xbc>)
 80081f6:	881b      	ldrh	r3, [r3, #0]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d002      	beq.n	8008202 <StopInputHandler+0x22>
    {
        /*disable Sync Manager 3 (inputs) if no outputs available*/
/*ECATCHANGE_START(V5.11) HW1*/
        DisableSyncManChannel(PROCESS_DATA_IN);
 80081fc:	2003      	movs	r0, #3
 80081fe:	f7ff f9a9 	bl	8007554 <DisableSyncManChannel>
/*ECATCHANGE_END(V5.11) HW1*/
    }

    /* reset the events in the AL Event mask register (0x204) */
    {
        UINT16 ResetMask = SYNC0_EVENT | SYNC1_EVENT;
 8008202:	230c      	movs	r3, #12
 8008204:	80fb      	strh	r3, [r7, #6]
        ResetMask |= PROCESS_OUTPUT_EVENT;
 8008206:	88fb      	ldrh	r3, [r7, #6]
 8008208:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800820c:	80fb      	strh	r3, [r7, #6]
        ResetMask |= PROCESS_INPUT_EVENT;
 800820e:	88fb      	ldrh	r3, [r7, #6]
 8008210:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008214:	80fb      	strh	r3, [r7, #6]

/*ECATCHANGE_START(V5.11) HW1*/
    ResetALEventMask( ~(ResetMask) );
 8008216:	88fb      	ldrh	r3, [r7, #6]
 8008218:	43db      	mvns	r3, r3
 800821a:	b29b      	uxth	r3, r3
 800821c:	4618      	mov	r0, r3
 800821e:	f7ff f917 	bl	8007450 <ResetALEventMask>
/*ECATCHANGE_END(V5.11) HW1*/
    }
    /* reset the flags */
    bEcatFirstOutputsReceived = FALSE;
 8008222:	4b1f      	ldr	r3, [pc, #124]	; (80082a0 <StopInputHandler+0xc0>)
 8008224:	2200      	movs	r2, #0
 8008226:	701a      	strb	r2, [r3, #0]
    bEscIntEnabled = FALSE;
 8008228:	4b1e      	ldr	r3, [pc, #120]	; (80082a4 <StopInputHandler+0xc4>)
 800822a:	2200      	movs	r2, #0
 800822c:	701a      	strb	r2, [r3, #0]
/*The application ESM function is separated from this function to handle pending transitions*/

    bDcSyncActive = FALSE;
 800822e:	4b1e      	ldr	r3, [pc, #120]	; (80082a8 <StopInputHandler+0xc8>)
 8008230:	2200      	movs	r2, #0
 8008232:	701a      	strb	r2, [r3, #0]
    bDcRunning = FALSE;
 8008234:	4b1d      	ldr	r3, [pc, #116]	; (80082ac <StopInputHandler+0xcc>)
 8008236:	2200      	movs	r2, #0
 8008238:	701a      	strb	r2, [r3, #0]
    bSmSyncSequenceValid = FALSE;
 800823a:	4b1d      	ldr	r3, [pc, #116]	; (80082b0 <StopInputHandler+0xd0>)
 800823c:	2200      	movs	r2, #0
 800823e:	701a      	strb	r2, [r3, #0]
    u16SmSync0Value = 0;
 8008240:	4b1c      	ldr	r3, [pc, #112]	; (80082b4 <StopInputHandler+0xd4>)
 8008242:	2200      	movs	r2, #0
 8008244:	801a      	strh	r2, [r3, #0]
    u16SmSync0Counter = 0;
 8008246:	4b1c      	ldr	r3, [pc, #112]	; (80082b8 <StopInputHandler+0xd8>)
 8008248:	2200      	movs	r2, #0
 800824a:	801a      	strh	r2, [r3, #0]

    Sync0WdValue = 0;
 800824c:	4b1b      	ldr	r3, [pc, #108]	; (80082bc <StopInputHandler+0xdc>)
 800824e:	2200      	movs	r2, #0
 8008250:	801a      	strh	r2, [r3, #0]
    Sync0WdCounter = 0;
 8008252:	4b1b      	ldr	r3, [pc, #108]	; (80082c0 <StopInputHandler+0xe0>)
 8008254:	2200      	movs	r2, #0
 8008256:	801a      	strh	r2, [r3, #0]
    Sync1WdCounter = 0;
 8008258:	4b1a      	ldr	r3, [pc, #104]	; (80082c4 <StopInputHandler+0xe4>)
 800825a:	2200      	movs	r2, #0
 800825c:	801a      	strh	r2, [r3, #0]
    Sync1WdValue = 0;
 800825e:	4b1a      	ldr	r3, [pc, #104]	; (80082c8 <StopInputHandler+0xe8>)
 8008260:	2200      	movs	r2, #0
 8008262:	801a      	strh	r2, [r3, #0]
    LatchInputSync0Value = 0;
 8008264:	4b19      	ldr	r3, [pc, #100]	; (80082cc <StopInputHandler+0xec>)
 8008266:	2200      	movs	r2, #0
 8008268:	801a      	strh	r2, [r3, #0]
    LatchInputSync0Counter = 0;
 800826a:	4b19      	ldr	r3, [pc, #100]	; (80082d0 <StopInputHandler+0xf0>)
 800826c:	2200      	movs	r2, #0
 800826e:	801a      	strh	r2, [r3, #0]
/*ECATCHANGE_START(V5.11) ECAT4*/
    sSyncManInPar.u8SyncError = 0;
 8008270:	4b18      	ldr	r3, [pc, #96]	; (80082d4 <StopInputHandler+0xf4>)
 8008272:	2200      	movs	r2, #0
 8008274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
/*ECATCHANGE_END(V5.11) ECAT4*/

    i16WaitForPllRunningTimeout = 0;
 8008278:	4b17      	ldr	r3, [pc, #92]	; (80082d8 <StopInputHandler+0xf8>)
 800827a:	2200      	movs	r2, #0
 800827c:	801a      	strh	r2, [r3, #0]

    bWdTrigger = FALSE;
 800827e:	4b17      	ldr	r3, [pc, #92]	; (80082dc <StopInputHandler+0xfc>)
 8008280:	2200      	movs	r2, #0
 8008282:	701a      	strb	r2, [r3, #0]
    bEcatInputUpdateRunning = FALSE;
 8008284:	4b16      	ldr	r3, [pc, #88]	; (80082e0 <StopInputHandler+0x100>)
 8008286:	2200      	movs	r2, #0
 8008288:	701a      	strb	r2, [r3, #0]

    /*Indicate no user specified Sync mode*/
    bSyncSetByUser = FALSE;
 800828a:	4b16      	ldr	r3, [pc, #88]	; (80082e4 <StopInputHandler+0x104>)
 800828c:	2200      	movs	r2, #0
 800828e:	701a      	strb	r2, [r3, #0]
}
 8008290:	bf00      	nop
 8008292:	3708      	adds	r7, #8
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}
 8008298:	200006ac 	.word	0x200006ac
 800829c:	200006aa 	.word	0x200006aa
 80082a0:	20000682 	.word	0x20000682
 80082a4:	200006a0 	.word	0x200006a0
 80082a8:	20000684 	.word	0x20000684
 80082ac:	20000688 	.word	0x20000688
 80082b0:	2000068e 	.word	0x2000068e
 80082b4:	2000068c 	.word	0x2000068c
 80082b8:	2000068a 	.word	0x2000068a
 80082bc:	20000696 	.word	0x20000696
 80082c0:	20000694 	.word	0x20000694
 80082c4:	20000698 	.word	0x20000698
 80082c8:	2000069a 	.word	0x2000069a
 80082cc:	2000069c 	.word	0x2000069c
 80082d0:	2000069e 	.word	0x2000069e
 80082d4:	20000b4c 	.word	0x20000b4c
 80082d8:	20000690 	.word	0x20000690
 80082dc:	20000683 	.word	0x20000683
 80082e0:	20000681 	.word	0x20000681
 80082e4:	20000b01 	.word	0x20000b01

080082e8 <BackToInitTransition>:
\brief    This function is called when a X to Init transition is completed

*////////////////////////////////////////////////////////////////////////////////////////

void BackToInitTransition(void)
{
 80082e8:	b480      	push	{r7}
 80082ea:	af00      	add	r7, sp, #0
    /* Reset indication that the user has written a sync mode*/
    bSyncSetByUser = FALSE;
 80082ec:	4b03      	ldr	r3, [pc, #12]	; (80082fc <BackToInitTransition+0x14>)
 80082ee:	2200      	movs	r2, #0
 80082f0:	701a      	strb	r2, [r3, #0]
}
 80082f2:	bf00      	nop
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr
 80082fc:	20000b01 	.word	0x20000b01

08008300 <SetALStatus>:
 \param alStatusCode    New AL Status Code (written to register 0x134)

  \brief  The function changes the state of the EtherCAT ASIC to the requested.
*////////////////////////////////////////////////////////////////////////////////////////
void SetALStatus(UINT8 alStatus, UINT16 alStatusCode)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b084      	sub	sp, #16
 8008304:	af00      	add	r7, sp, #0
 8008306:	4603      	mov	r3, r0
 8008308:	460a      	mov	r2, r1
 800830a:	71fb      	strb	r3, [r7, #7]
 800830c:	4613      	mov	r3, r2
 800830e:	80bb      	strh	r3, [r7, #4]
    UINT16 Value = alStatusCode;
 8008310:	88bb      	ldrh	r3, [r7, #4]
 8008312:	81fb      	strh	r3, [r7, #14]

    /*update global status variable if required*/
    if(nAlStatus != alStatus)
 8008314:	4b14      	ldr	r3, [pc, #80]	; (8008368 <SetALStatus+0x68>)
 8008316:	781b      	ldrb	r3, [r3, #0]
 8008318:	79fa      	ldrb	r2, [r7, #7]
 800831a:	429a      	cmp	r2, r3
 800831c:	d002      	beq.n	8008324 <SetALStatus+0x24>
    {
        nAlStatus = alStatus;
 800831e:	4a12      	ldr	r2, [pc, #72]	; (8008368 <SetALStatus+0x68>)
 8008320:	79fb      	ldrb	r3, [r7, #7]
 8008322:	7013      	strb	r3, [r2, #0]
    }


    if (alStatusCode != 0xFFFF)
 8008324:	88bb      	ldrh	r3, [r7, #4]
 8008326:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800832a:	4293      	cmp	r3, r2
 800832c:	d009      	beq.n	8008342 <SetALStatus+0x42>
    {
        Value = SWAPWORD(Value);
 800832e:	89fb      	ldrh	r3, [r7, #14]
 8008330:	81fb      	strh	r3, [r7, #14]

        HW_EscWriteWord(Value,ESC_AL_STATUS_CODE_OFFSET);
 8008332:	f107 030e 	add.w	r3, r7, #14
 8008336:	2202      	movs	r2, #2
 8008338:	f44f 719a 	mov.w	r1, #308	; 0x134
 800833c:	4618      	mov	r0, r3
 800833e:	f001 f8a1 	bl	8009484 <HW_EscWrite>
    }

    Value = nAlStatus;
 8008342:	4b09      	ldr	r3, [pc, #36]	; (8008368 <SetALStatus+0x68>)
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	b29b      	uxth	r3, r3
 8008348:	81fb      	strh	r3, [r7, #14]
    Value = SWAPWORD(Value);
 800834a:	89fb      	ldrh	r3, [r7, #14]
 800834c:	81fb      	strh	r3, [r7, #14]
    HW_EscWriteWord(Value,ESC_AL_STATUS_OFFSET);
 800834e:	f107 030e 	add.w	r3, r7, #14
 8008352:	2202      	movs	r2, #2
 8008354:	f44f 7198 	mov.w	r1, #304	; 0x130
 8008358:	4618      	mov	r0, r3
 800835a:	f001 f893 	bl	8009484 <HW_EscWrite>

}
 800835e:	bf00      	nop
 8008360:	3710      	adds	r7, #16
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}
 8008366:	bf00      	nop
 8008368:	200006b2 	.word	0x200006b2

0800836c <AL_ControlInd>:
              alControl contains the requested new state (INIT, PRE_OP or SAFE_OP)

*////////////////////////////////////////////////////////////////////////////////////////

void AL_ControlInd(UINT8 alControl, UINT16 alStatusCode)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
 8008372:	4603      	mov	r3, r0
 8008374:	460a      	mov	r2, r1
 8008376:	71fb      	strb	r3, [r7, #7]
 8008378:	4613      	mov	r3, r2
 800837a:	80bb      	strh	r3, [r7, #4]
    UINT16        result = 0;
 800837c:	2300      	movs	r3, #0
 800837e:	81fb      	strh	r3, [r7, #14]
    UINT8            bErrAck = 0;
 8008380:	2300      	movs	r3, #0
 8008382:	737b      	strb	r3, [r7, #13]
    UINT8         stateTrans;
    /*deactivate ESM timeout counter*/
    EsmTimeoutCounter = -1;
 8008384:	4bdb      	ldr	r3, [pc, #876]	; (80086f4 <AL_ControlInd+0x388>)
 8008386:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800838a:	801a      	strh	r2, [r3, #0]
    bApplEsmPending = TRUE;
 800838c:	4bda      	ldr	r3, [pc, #872]	; (80086f8 <AL_ControlInd+0x38c>)
 800838e:	2201      	movs	r2, #1
 8008390:	701a      	strb	r2, [r3, #0]

    /* reset the Error Flag in case of acknowledge by the Master */
    if ( alControl & STATE_CHANGE )
 8008392:	79fb      	ldrb	r3, [r7, #7]
 8008394:	f003 0310 	and.w	r3, r3, #16
 8008398:	2b00      	cmp	r3, #0
 800839a:	d009      	beq.n	80083b0 <AL_ControlInd+0x44>
    {
        bErrAck = 1;
 800839c:	2301      	movs	r3, #1
 800839e:	737b      	strb	r3, [r7, #13]
        nAlStatus &= ~STATE_CHANGE;
 80083a0:	4bd6      	ldr	r3, [pc, #856]	; (80086fc <AL_ControlInd+0x390>)
 80083a2:	781b      	ldrb	r3, [r3, #0]
 80083a4:	f023 0310 	bic.w	r3, r3, #16
 80083a8:	b2da      	uxtb	r2, r3
 80083aa:	4bd4      	ldr	r3, [pc, #848]	; (80086fc <AL_ControlInd+0x390>)
 80083ac:	701a      	strb	r2, [r3, #0]
 80083ae:	e012      	b.n	80083d6 <AL_ControlInd+0x6a>
        /*enable SM2 is moved to state transition block. First check SM Settings.*/
    }
    else if ( (nAlStatus & STATE_CHANGE)
 80083b0:	4bd2      	ldr	r3, [pc, #840]	; (80086fc <AL_ControlInd+0x390>)
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	f003 0310 	and.w	r3, r3, #16
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d005      	beq.n	80083c8 <AL_ControlInd+0x5c>
    // HBu 17.04.08: the error has to be acknowledged before when sending the same (or a higher) state
    //               (the error was acknowledged with the same state before independent of the acknowledge flag)
    /*Error Acknowledge with 0xX1 is allowed*/
           && (alControl & STATE_MASK) != STATE_INIT )
 80083bc:	79fb      	ldrb	r3, [r7, #7]
 80083be:	f003 030f 	and.w	r3, r3, #15
 80083c2:	2b01      	cmp	r3, #1
 80083c4:	f040 8374 	bne.w	8008ab0 <AL_ControlInd+0x744>
           is not set in the AL-Control, so the state cannot be set to a higher state
           and the new state request will be ignored */
        return;
    else
    {
        nAlStatus &= STATE_MASK;
 80083c8:	4bcc      	ldr	r3, [pc, #816]	; (80086fc <AL_ControlInd+0x390>)
 80083ca:	781b      	ldrb	r3, [r3, #0]
 80083cc:	f003 030f 	and.w	r3, r3, #15
 80083d0:	b2da      	uxtb	r2, r3
 80083d2:	4bca      	ldr	r3, [pc, #808]	; (80086fc <AL_ControlInd+0x390>)
 80083d4:	701a      	strb	r2, [r3, #0]
    }

    /* generate a variable for the state transition
      (Bit 0-3: new state (AL Control), Bit 4-7: old state (AL Status) */
    alControl &= STATE_MASK;
 80083d6:	79fb      	ldrb	r3, [r7, #7]
 80083d8:	f003 030f 	and.w	r3, r3, #15
 80083dc:	71fb      	strb	r3, [r7, #7]
    stateTrans = nAlStatus;
 80083de:	4bc7      	ldr	r3, [pc, #796]	; (80086fc <AL_ControlInd+0x390>)
 80083e0:	781b      	ldrb	r3, [r3, #0]
 80083e2:	733b      	strb	r3, [r7, #12]
    stateTrans <<= 4;
 80083e4:	7b3b      	ldrb	r3, [r7, #12]
 80083e6:	011b      	lsls	r3, r3, #4
 80083e8:	733b      	strb	r3, [r7, #12]
    stateTrans += alControl;
 80083ea:	7b3a      	ldrb	r2, [r7, #12]
 80083ec:	79fb      	ldrb	r3, [r7, #7]
 80083ee:	4413      	add	r3, r2
 80083f0:	733b      	strb	r3, [r7, #12]


    /* check the SYNCM settings depending on the state transition */
    switch ( stateTrans )
 80083f2:	7b3b      	ldrb	r3, [r7, #12]
 80083f4:	2b88      	cmp	r3, #136	; 0x88
 80083f6:	d074      	beq.n	80084e2 <AL_ControlInd+0x176>
 80083f8:	2b88      	cmp	r3, #136	; 0x88
 80083fa:	dc7b      	bgt.n	80084f4 <AL_ControlInd+0x188>
 80083fc:	2b84      	cmp	r3, #132	; 0x84
 80083fe:	d070      	beq.n	80084e2 <AL_ControlInd+0x176>
 8008400:	2b84      	cmp	r3, #132	; 0x84
 8008402:	dc77      	bgt.n	80084f4 <AL_ControlInd+0x188>
 8008404:	2b82      	cmp	r3, #130	; 0x82
 8008406:	d05d      	beq.n	80084c4 <AL_ControlInd+0x158>
 8008408:	2b82      	cmp	r3, #130	; 0x82
 800840a:	dc73      	bgt.n	80084f4 <AL_ControlInd+0x188>
 800840c:	2b12      	cmp	r3, #18
 800840e:	d059      	beq.n	80084c4 <AL_ControlInd+0x158>
 8008410:	2b12      	cmp	r3, #18
 8008412:	db6f      	blt.n	80084f4 <AL_ControlInd+0x188>
 8008414:	2b48      	cmp	r3, #72	; 0x48
 8008416:	dc6d      	bgt.n	80084f4 <AL_ControlInd+0x188>
 8008418:	2b22      	cmp	r3, #34	; 0x22
 800841a:	db6b      	blt.n	80084f4 <AL_ControlInd+0x188>
 800841c:	3b22      	subs	r3, #34	; 0x22
 800841e:	2b26      	cmp	r3, #38	; 0x26
 8008420:	d868      	bhi.n	80084f4 <AL_ControlInd+0x188>
 8008422:	a201      	add	r2, pc, #4	; (adr r2, 8008428 <AL_ControlInd+0xbc>)
 8008424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008428:	080084c5 	.word	0x080084c5
 800842c:	080084f5 	.word	0x080084f5
 8008430:	080084d1 	.word	0x080084d1
 8008434:	080084f5 	.word	0x080084f5
 8008438:	080084f5 	.word	0x080084f5
 800843c:	080084f5 	.word	0x080084f5
 8008440:	080084f5 	.word	0x080084f5
 8008444:	080084f5 	.word	0x080084f5
 8008448:	080084f5 	.word	0x080084f5
 800844c:	080084f5 	.word	0x080084f5
 8008450:	080084f5 	.word	0x080084f5
 8008454:	080084f5 	.word	0x080084f5
 8008458:	080084f5 	.word	0x080084f5
 800845c:	080084f5 	.word	0x080084f5
 8008460:	080084f5 	.word	0x080084f5
 8008464:	080084f5 	.word	0x080084f5
 8008468:	080084f5 	.word	0x080084f5
 800846c:	080084f5 	.word	0x080084f5
 8008470:	080084f5 	.word	0x080084f5
 8008474:	080084f5 	.word	0x080084f5
 8008478:	080084f5 	.word	0x080084f5
 800847c:	080084f5 	.word	0x080084f5
 8008480:	080084f5 	.word	0x080084f5
 8008484:	080084f5 	.word	0x080084f5
 8008488:	080084f5 	.word	0x080084f5
 800848c:	080084f5 	.word	0x080084f5
 8008490:	080084f5 	.word	0x080084f5
 8008494:	080084f5 	.word	0x080084f5
 8008498:	080084f5 	.word	0x080084f5
 800849c:	080084f5 	.word	0x080084f5
 80084a0:	080084f5 	.word	0x080084f5
 80084a4:	080084f5 	.word	0x080084f5
 80084a8:	080084c5 	.word	0x080084c5
 80084ac:	080084f5 	.word	0x080084f5
 80084b0:	080084e3 	.word	0x080084e3
 80084b4:	080084f5 	.word	0x080084f5
 80084b8:	080084f5 	.word	0x080084f5
 80084bc:	080084f5 	.word	0x080084f5
 80084c0:	080084e3 	.word	0x080084e3
    case SAFEOP_2_PREOP:
    case PREOP_2_PREOP:
        /* in PREOP only the SYNCM settings for SYNCM0 and SYNCM1 (mailbox)
           are checked, if result is unequal 0, the slave will stay in or
           switch to INIT and set the ErrorInd Bit (bit 4) of the AL-Status */
        result = CheckSmSettings(MAILBOX_READ+1);
 80084c4:	2002      	movs	r0, #2
 80084c6:	f7ff f895 	bl	80075f4 <CheckSmSettings>
 80084ca:	4603      	mov	r3, r0
 80084cc:	81fb      	strh	r3, [r7, #14]
        break;
 80084ce:	e011      	b.n	80084f4 <AL_ControlInd+0x188>
        /* before checking the SYNCM settings for SYNCM2 and SYNCM3 (process data)
           the expected length of input data (nPdInputSize) and output data (nPdOutputSize)
            could be adapted (changed by PDO-Assign and/or PDO-Mapping)
            if result is unequal 0, the slave will stay in PREOP and set
            the ErrorInd Bit (bit 4) of the AL-Status */
        result = APPL_GenerateMapping(&nPdInputSize,&nPdOutputSize);
 80084d0:	498b      	ldr	r1, [pc, #556]	; (8008700 <AL_ControlInd+0x394>)
 80084d2:	488c      	ldr	r0, [pc, #560]	; (8008704 <AL_ControlInd+0x398>)
 80084d4:	f7fd fc72 	bl	8005dbc <APPL_GenerateMapping>
 80084d8:	4603      	mov	r3, r0
 80084da:	81fb      	strh	r3, [r7, #14]

        if (result != 0)
 80084dc:	89fb      	ldrh	r3, [r7, #14]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d107      	bne.n	80084f2 <AL_ControlInd+0x186>
    case SAFEOP_2_SAFEOP:
    case OP_2_OP:
        /* in SAFEOP or OP the SYNCM settings for all SYNCM are checked
           if result is unequal 0, the slave will stay in or
           switch to PREOP and set the ErrorInd Bit (bit 4) of the AL-Status */
        result = CheckSmSettings(nMaxSyncMan);
 80084e2:	4b89      	ldr	r3, [pc, #548]	; (8008708 <AL_ControlInd+0x39c>)
 80084e4:	781b      	ldrb	r3, [r3, #0]
 80084e6:	4618      	mov	r0, r3
 80084e8:	f7ff f884 	bl	80075f4 <CheckSmSettings>
 80084ec:	4603      	mov	r3, r0
 80084ee:	81fb      	strh	r3, [r7, #14]
        break;
 80084f0:	e000      	b.n	80084f4 <AL_ControlInd+0x188>
            break;
 80084f2:	bf00      	nop
    }

    if ( result == 0 )
 80084f4:	89fb      	ldrh	r3, [r7, #14]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	f040 8203 	bne.w	8008902 <AL_ControlInd+0x596>
    {
        /* execute the corresponding local management service(s) depending on the state transition */
        nEcatStateTrans = 0;
 80084fc:	4b83      	ldr	r3, [pc, #524]	; (800870c <AL_ControlInd+0x3a0>)
 80084fe:	2200      	movs	r2, #0
 8008500:	801a      	strh	r2, [r3, #0]
        switch ( stateTrans )
 8008502:	7b3b      	ldrb	r3, [r7, #12]
 8008504:	3b11      	subs	r3, #17
 8008506:	2b77      	cmp	r3, #119	; 0x77
 8008508:	f200 81f8 	bhi.w	80088fc <AL_ControlInd+0x590>
 800850c:	a201      	add	r2, pc, #4	; (adr r2, 8008514 <AL_ControlInd+0x1a8>)
 800850e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008512:	bf00      	nop
 8008514:	080088ab 	.word	0x080088ab
 8008518:	08008721 	.word	0x08008721
 800851c:	08008711 	.word	0x08008711
 8008520:	080088f7 	.word	0x080088f7
 8008524:	080088fd 	.word	0x080088fd
 8008528:	080088fd 	.word	0x080088fd
 800852c:	080088fd 	.word	0x080088fd
 8008530:	080088f7 	.word	0x080088f7
 8008534:	080088fd 	.word	0x080088fd
 8008538:	080088fd 	.word	0x080088fd
 800853c:	080088fd 	.word	0x080088fd
 8008540:	080088fd 	.word	0x080088fd
 8008544:	080088fd 	.word	0x080088fd
 8008548:	080088fd 	.word	0x080088fd
 800854c:	080088fd 	.word	0x080088fd
 8008550:	080088fd 	.word	0x080088fd
 8008554:	08008899 	.word	0x08008899
 8008558:	080088af 	.word	0x080088af
 800855c:	080088f7 	.word	0x080088f7
 8008560:	08008783 	.word	0x08008783
 8008564:	080088fd 	.word	0x080088fd
 8008568:	080088fd 	.word	0x080088fd
 800856c:	080088fd 	.word	0x080088fd
 8008570:	080088f7 	.word	0x080088f7
 8008574:	080088fd 	.word	0x080088fd
 8008578:	080088fd 	.word	0x080088fd
 800857c:	080088fd 	.word	0x080088fd
 8008580:	080088fd 	.word	0x080088fd
 8008584:	080088fd 	.word	0x080088fd
 8008588:	080088fd 	.word	0x080088fd
 800858c:	080088fd 	.word	0x080088fd
 8008590:	080088fd 	.word	0x080088fd
 8008594:	08008717 	.word	0x08008717
 8008598:	080088f7 	.word	0x080088f7
 800859c:	080088fd 	.word	0x080088fd
 80085a0:	080088f7 	.word	0x080088f7
 80085a4:	080088fd 	.word	0x080088fd
 80085a8:	080088fd 	.word	0x080088fd
 80085ac:	080088fd 	.word	0x080088fd
 80085b0:	080088f7 	.word	0x080088f7
 80085b4:	080088fd 	.word	0x080088fd
 80085b8:	080088fd 	.word	0x080088fd
 80085bc:	080088fd 	.word	0x080088fd
 80085c0:	080088fd 	.word	0x080088fd
 80085c4:	080088fd 	.word	0x080088fd
 80085c8:	080088fd 	.word	0x080088fd
 80085cc:	080088fd 	.word	0x080088fd
 80085d0:	080088fd 	.word	0x080088fd
 80085d4:	0800887d 	.word	0x0800887d
 80085d8:	08008851 	.word	0x08008851
 80085dc:	080088f7 	.word	0x080088f7
 80085e0:	080088af 	.word	0x080088af
 80085e4:	080088fd 	.word	0x080088fd
 80085e8:	080088fd 	.word	0x080088fd
 80085ec:	080088fd 	.word	0x080088fd
 80085f0:	080087d9 	.word	0x080087d9
 80085f4:	080088fd 	.word	0x080088fd
 80085f8:	080088fd 	.word	0x080088fd
 80085fc:	080088fd 	.word	0x080088fd
 8008600:	080088fd 	.word	0x080088fd
 8008604:	080088fd 	.word	0x080088fd
 8008608:	080088fd 	.word	0x080088fd
 800860c:	080088fd 	.word	0x080088fd
 8008610:	080088fd 	.word	0x080088fd
 8008614:	080088fd 	.word	0x080088fd
 8008618:	080088fd 	.word	0x080088fd
 800861c:	080088fd 	.word	0x080088fd
 8008620:	080088fd 	.word	0x080088fd
 8008624:	080088fd 	.word	0x080088fd
 8008628:	080088fd 	.word	0x080088fd
 800862c:	080088fd 	.word	0x080088fd
 8008630:	080088fd 	.word	0x080088fd
 8008634:	080088fd 	.word	0x080088fd
 8008638:	080088fd 	.word	0x080088fd
 800863c:	080088fd 	.word	0x080088fd
 8008640:	080088fd 	.word	0x080088fd
 8008644:	080088fd 	.word	0x080088fd
 8008648:	080088fd 	.word	0x080088fd
 800864c:	080088fd 	.word	0x080088fd
 8008650:	080088fd 	.word	0x080088fd
 8008654:	080088fd 	.word	0x080088fd
 8008658:	080088fd 	.word	0x080088fd
 800865c:	080088fd 	.word	0x080088fd
 8008660:	080088fd 	.word	0x080088fd
 8008664:	080088fd 	.word	0x080088fd
 8008668:	080088fd 	.word	0x080088fd
 800866c:	080088fd 	.word	0x080088fd
 8008670:	080088fd 	.word	0x080088fd
 8008674:	080088fd 	.word	0x080088fd
 8008678:	080088fd 	.word	0x080088fd
 800867c:	080088fd 	.word	0x080088fd
 8008680:	080088fd 	.word	0x080088fd
 8008684:	080088fd 	.word	0x080088fd
 8008688:	080088fd 	.word	0x080088fd
 800868c:	080088fd 	.word	0x080088fd
 8008690:	080088fd 	.word	0x080088fd
 8008694:	080088fd 	.word	0x080088fd
 8008698:	080088fd 	.word	0x080088fd
 800869c:	080088fd 	.word	0x080088fd
 80086a0:	080088fd 	.word	0x080088fd
 80086a4:	080088fd 	.word	0x080088fd
 80086a8:	080088fd 	.word	0x080088fd
 80086ac:	080088fd 	.word	0x080088fd
 80086b0:	080088fd 	.word	0x080088fd
 80086b4:	080088fd 	.word	0x080088fd
 80086b8:	080088fd 	.word	0x080088fd
 80086bc:	080088fd 	.word	0x080088fd
 80086c0:	080088fd 	.word	0x080088fd
 80086c4:	080088fd 	.word	0x080088fd
 80086c8:	080088fd 	.word	0x080088fd
 80086cc:	080088fd 	.word	0x080088fd
 80086d0:	080088fd 	.word	0x080088fd
 80086d4:	08008861 	.word	0x08008861
 80086d8:	08008833 	.word	0x08008833
 80086dc:	080088f7 	.word	0x080088f7
 80086e0:	08008823 	.word	0x08008823
 80086e4:	080088fd 	.word	0x080088fd
 80086e8:	080088fd 	.word	0x080088fd
 80086ec:	080088fd 	.word	0x080088fd
 80086f0:	080088af 	.word	0x080088af
 80086f4:	20000686 	.word	0x20000686
 80086f8:	200006a6 	.word	0x200006a6
 80086fc:	200006b2 	.word	0x200006b2
 8008700:	200006ac 	.word	0x200006ac
 8008704:	200006aa 	.word	0x200006aa
 8008708:	200006ae 	.word	0x200006ae
 800870c:	200006a8 	.word	0x200006a8
        {
        case INIT_2_BOOT    :
            result = ALSTATUSCODE_BOOTNOTSUPP;
 8008710:	2313      	movs	r3, #19
 8008712:	81fb      	strh	r3, [r7, #14]
            break;
 8008714:	e122      	b.n	800895c <AL_ControlInd+0x5f0>

        case BOOT_2_INIT    :
            result = ALSTATUSCODE_BOOTNOTSUPP;
 8008716:	2313      	movs	r3, #19
 8008718:	81fb      	strh	r3, [r7, #14]

            BackToInitTransition();
 800871a:	f7ff fde5 	bl	80082e8 <BackToInitTransition>

            break;
 800871e:	e11d      	b.n	800895c <AL_ControlInd+0x5f0>
        case INIT_2_PREOP :

           UpdateEEPROMLoadedState();
 8008720:	f7fe feda 	bl	80074d8 <UpdateEEPROMLoadedState>

            if (EepromLoaded == FALSE)
 8008724:	4ba5      	ldr	r3, [pc, #660]	; (80089bc <AL_ControlInd+0x650>)
 8008726:	781b      	ldrb	r3, [r3, #0]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d101      	bne.n	8008730 <AL_ControlInd+0x3c4>
            {
                //return an error if the EEPROM was not loaded correct  (device restart is required after the new EEPORM update)
                result = ALSTATUSCODE_EE_ERROR;
 800872c:	2351      	movs	r3, #81	; 0x51
 800872e:	81fb      	strh	r3, [r7, #14]
            }
            if (result == 0)
 8008730:	89fb      	ldrh	r3, [r7, #14]
 8008732:	2b00      	cmp	r3, #0
 8008734:	f040 8107 	bne.w	8008946 <AL_ControlInd+0x5da>
            {
            /* MBX_StartMailboxHandler (in mailbox.c) checks if the areas of the mailbox
               sync managers SYNCM0 and SYNCM1 overlap each other
              if result is unequal 0, the slave will stay in INIT
              and sets the ErrorInd Bit (bit 4) of the AL-Status */
            result = MBX_StartMailboxHandler();
 8008738:	f001 fb00 	bl	8009d3c <MBX_StartMailboxHandler>
 800873c:	4603      	mov	r3, r0
 800873e:	81fb      	strh	r3, [r7, #14]
            if (result == 0)
 8008740:	89fb      	ldrh	r3, [r7, #14]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d10c      	bne.n	8008760 <AL_ControlInd+0x3f4>
            {
                bApplEsmPending = FALSE;
 8008746:	4b9e      	ldr	r3, [pc, #632]	; (80089c0 <AL_ControlInd+0x654>)
 8008748:	2200      	movs	r2, #0
 800874a:	701a      	strb	r2, [r3, #0]
                /* additionally there could be an application specific check (in ecatappl.c)
                   if the state transition from INIT to PREOP should be done
                 if result is unequal 0, the slave will stay in INIT
                 and sets the ErrorInd Bit (bit 4) of the AL-Status */
                result = APPL_StartMailboxHandler();
 800874c:	f7fd fb03 	bl	8005d56 <APPL_StartMailboxHandler>
 8008750:	4603      	mov	r3, r0
 8008752:	81fb      	strh	r3, [r7, #14]
                if ( result == 0 )
 8008754:	89fb      	ldrh	r3, [r7, #14]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d102      	bne.n	8008760 <AL_ControlInd+0x3f4>
                {
                    bMbxRunning = TRUE;
 800875a:	4b9a      	ldr	r3, [pc, #616]	; (80089c4 <AL_ControlInd+0x658>)
 800875c:	2201      	movs	r2, #1
 800875e:	701a      	strb	r2, [r3, #0]
                }
            }

            if(result != 0 && result != NOERROR_INWORK)
 8008760:	89fb      	ldrh	r3, [r7, #14]
 8008762:	2b00      	cmp	r3, #0
 8008764:	f000 80ef 	beq.w	8008946 <AL_ControlInd+0x5da>
 8008768:	89fb      	ldrh	r3, [r7, #14]
 800876a:	2bff      	cmp	r3, #255	; 0xff
 800876c:	f000 80eb 	beq.w	8008946 <AL_ControlInd+0x5da>
            {
                /*Stop APPL Mbx handler if APPL Start Mbx handler was called before*/
                if(!bApplEsmPending)
 8008770:	4b93      	ldr	r3, [pc, #588]	; (80089c0 <AL_ControlInd+0x654>)
 8008772:	781b      	ldrb	r3, [r3, #0]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d101      	bne.n	800877c <AL_ControlInd+0x410>
                    APPL_StopMailboxHandler();
 8008778:	f7fd faf5 	bl	8005d66 <APPL_StopMailboxHandler>

                 MBX_StopMailboxHandler();
 800877c:	f001 fb54 	bl	8009e28 <MBX_StopMailboxHandler>
            }

            }
            break;
 8008780:	e0e1      	b.n	8008946 <AL_ControlInd+0x5da>

        case PREOP_2_SAFEOP:
            /* start the input handler (function is defined above) */
            result = StartInputHandler();
 8008782:	f7ff f933 	bl	80079ec <StartInputHandler>
 8008786:	4603      	mov	r3, r0
 8008788:	81fb      	strh	r3, [r7, #14]
            if ( result == 0 )
 800878a:	89fb      	ldrh	r3, [r7, #14]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d112      	bne.n	80087b6 <AL_ControlInd+0x44a>
            {
                bApplEsmPending = FALSE;
 8008790:	4b8b      	ldr	r3, [pc, #556]	; (80089c0 <AL_ControlInd+0x654>)
 8008792:	2200      	movs	r2, #0
 8008794:	701a      	strb	r2, [r3, #0]
                result = APPL_StartInputHandler(&u16ALEventMask);
 8008796:	488c      	ldr	r0, [pc, #560]	; (80089c8 <AL_ControlInd+0x65c>)
 8008798:	f7fd faed 	bl	8005d76 <APPL_StartInputHandler>
 800879c:	4603      	mov	r3, r0
 800879e:	81fb      	strh	r3, [r7, #14]

                if(result == 0)
 80087a0:	89fb      	ldrh	r3, [r7, #14]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d107      	bne.n	80087b6 <AL_ControlInd+0x44a>
                {
                    /* initialize the AL Event Mask register (0x204) */
/*ECATCHANGE_START(V5.11) HW1*/
                    SetALEventMask( u16ALEventMask );
 80087a6:	4b88      	ldr	r3, [pc, #544]	; (80089c8 <AL_ControlInd+0x65c>)
 80087a8:	881b      	ldrh	r3, [r3, #0]
 80087aa:	4618      	mov	r0, r3
 80087ac:	f7fe fe72 	bl	8007494 <SetALEventMask>
/*ECATCHANGE_END(V5.11) HW1*/

                    bEcatInputUpdateRunning = TRUE;
 80087b0:	4b86      	ldr	r3, [pc, #536]	; (80089cc <AL_ControlInd+0x660>)
 80087b2:	2201      	movs	r2, #1
 80087b4:	701a      	strb	r2, [r3, #0]
                }
            }

            /*if one start input handler returned an error stop the input handler*/
            if(result != 0 && result != NOERROR_INWORK)
 80087b6:	89fb      	ldrh	r3, [r7, #14]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	f000 80c6 	beq.w	800894a <AL_ControlInd+0x5de>
 80087be:	89fb      	ldrh	r3, [r7, #14]
 80087c0:	2bff      	cmp	r3, #255	; 0xff
 80087c2:	f000 80c2 	beq.w	800894a <AL_ControlInd+0x5de>
            {
                if(!bApplEsmPending)
 80087c6:	4b7e      	ldr	r3, [pc, #504]	; (80089c0 <AL_ControlInd+0x654>)
 80087c8:	781b      	ldrb	r3, [r3, #0]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d101      	bne.n	80087d2 <AL_ControlInd+0x466>
                {
                    /*Call only the APPL stop handler if the APPL start handler was called before*/
                    /*The application can react to the state transition in the function APPL_StopInputHandler */
                    APPL_StopInputHandler();
 80087ce:	f7fd fadd 	bl	8005d8c <APPL_StopInputHandler>
                }

                StopInputHandler();
 80087d2:	f7ff fd05 	bl	80081e0 <StopInputHandler>
            }
            break;
 80087d6:	e0b8      	b.n	800894a <AL_ControlInd+0x5de>

        case SAFEOP_2_OP:
            /* start the output handler (function is defined above) */
            result = StartOutputHandler();
 80087d8:	f7ff fcc8 	bl	800816c <StartOutputHandler>
 80087dc:	4603      	mov	r3, r0
 80087de:	81fb      	strh	r3, [r7, #14]
            if(result == 0)
 80087e0:	89fb      	ldrh	r3, [r7, #14]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d10c      	bne.n	8008800 <AL_ControlInd+0x494>
            {
                bApplEsmPending = FALSE;
 80087e6:	4b76      	ldr	r3, [pc, #472]	; (80089c0 <AL_ControlInd+0x654>)
 80087e8:	2200      	movs	r2, #0
 80087ea:	701a      	strb	r2, [r3, #0]
                result = APPL_StartOutputHandler();
 80087ec:	f7fd fad6 	bl	8005d9c <APPL_StartOutputHandler>
 80087f0:	4603      	mov	r3, r0
 80087f2:	81fb      	strh	r3, [r7, #14]

                if(result == 0)
 80087f4:	89fb      	ldrh	r3, [r7, #14]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d102      	bne.n	8008800 <AL_ControlInd+0x494>
                {
                    /*Device is in OPERATINAL*/
                    bEcatOutputUpdateRunning = TRUE;
 80087fa:	4b75      	ldr	r3, [pc, #468]	; (80089d0 <AL_ControlInd+0x664>)
 80087fc:	2201      	movs	r2, #1
 80087fe:	701a      	strb	r2, [r3, #0]
                }

            }

            if ( result != 0 && result != NOERROR_INWORK)
 8008800:	89fb      	ldrh	r3, [r7, #14]
 8008802:	2b00      	cmp	r3, #0
 8008804:	f000 80a3 	beq.w	800894e <AL_ControlInd+0x5e2>
 8008808:	89fb      	ldrh	r3, [r7, #14]
 800880a:	2bff      	cmp	r3, #255	; 0xff
 800880c:	f000 809f 	beq.w	800894e <AL_ControlInd+0x5e2>
            {
                if(!bApplEsmPending)
 8008810:	4b6b      	ldr	r3, [pc, #428]	; (80089c0 <AL_ControlInd+0x654>)
 8008812:	781b      	ldrb	r3, [r3, #0]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d101      	bne.n	800881c <AL_ControlInd+0x4b0>
                    APPL_StopOutputHandler();
 8008818:	f7fd fac8 	bl	8005dac <APPL_StopOutputHandler>

                StopOutputHandler();
 800881c:	f7ff fcce 	bl	80081bc <StopOutputHandler>
            }

            break;
 8008820:	e095      	b.n	800894e <AL_ControlInd+0x5e2>

        case OP_2_SAFEOP:
            /* stop the output handler (function is defined above) */
            APPL_StopOutputHandler();
 8008822:	f7fd fac3 	bl	8005dac <APPL_StopOutputHandler>

            StopOutputHandler();
 8008826:	f7ff fcc9 	bl	80081bc <StopOutputHandler>

            bApplEsmPending = FALSE;
 800882a:	4b65      	ldr	r3, [pc, #404]	; (80089c0 <AL_ControlInd+0x654>)
 800882c:	2200      	movs	r2, #0
 800882e:	701a      	strb	r2, [r3, #0]

            break;
 8008830:	e094      	b.n	800895c <AL_ControlInd+0x5f0>

        case OP_2_PREOP:
            /* stop the output handler (function is defined above) */
            result = APPL_StopOutputHandler();
 8008832:	f7fd fabb 	bl	8005dac <APPL_StopOutputHandler>
 8008836:	4603      	mov	r3, r0
 8008838:	81fb      	strh	r3, [r7, #14]

            StopOutputHandler();
 800883a:	f7ff fcbf 	bl	80081bc <StopOutputHandler>

            bApplEsmPending = FALSE;
 800883e:	4b60      	ldr	r3, [pc, #384]	; (80089c0 <AL_ControlInd+0x654>)
 8008840:	2200      	movs	r2, #0
 8008842:	701a      	strb	r2, [r3, #0]

            if (result != 0)
 8008844:	89fb      	ldrh	r3, [r7, #14]
 8008846:	2b00      	cmp	r3, #0
 8008848:	f040 8083 	bne.w	8008952 <AL_ControlInd+0x5e6>
                break;

            stateTrans = SAFEOP_2_PREOP;
 800884c:	2342      	movs	r3, #66	; 0x42
 800884e:	733b      	strb	r3, [r7, #12]

        case SAFEOP_2_PREOP:
            /* stop the input handler (function is defined above) */
            APPL_StopInputHandler();
 8008850:	f7fd fa9c 	bl	8005d8c <APPL_StopInputHandler>
           
            StopInputHandler();
 8008854:	f7ff fcc4 	bl	80081e0 <StopInputHandler>

            bApplEsmPending = FALSE;
 8008858:	4b59      	ldr	r3, [pc, #356]	; (80089c0 <AL_ControlInd+0x654>)
 800885a:	2200      	movs	r2, #0
 800885c:	701a      	strb	r2, [r3, #0]

            break;
 800885e:	e07d      	b.n	800895c <AL_ControlInd+0x5f0>

        case OP_2_INIT:
            /* stop the output handler (function is defined above) */
            result = APPL_StopOutputHandler();
 8008860:	f7fd faa4 	bl	8005dac <APPL_StopOutputHandler>
 8008864:	4603      	mov	r3, r0
 8008866:	81fb      	strh	r3, [r7, #14]

            StopOutputHandler();
 8008868:	f7ff fca8 	bl	80081bc <StopOutputHandler>

            bApplEsmPending = FALSE;
 800886c:	4b54      	ldr	r3, [pc, #336]	; (80089c0 <AL_ControlInd+0x654>)
 800886e:	2200      	movs	r2, #0
 8008870:	701a      	strb	r2, [r3, #0]

            if (result != 0)
 8008872:	89fb      	ldrh	r3, [r7, #14]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d16e      	bne.n	8008956 <AL_ControlInd+0x5ea>
                break;
            
            stateTrans = SAFEOP_2_INIT;
 8008878:	2341      	movs	r3, #65	; 0x41
 800887a:	733b      	strb	r3, [r7, #12]

        case SAFEOP_2_INIT:
            /* stop the input handler (function is defined above) */
            result = APPL_StopInputHandler();
 800887c:	f7fd fa86 	bl	8005d8c <APPL_StopInputHandler>
 8008880:	4603      	mov	r3, r0
 8008882:	81fb      	strh	r3, [r7, #14]
            
            StopInputHandler();
 8008884:	f7ff fcac 	bl	80081e0 <StopInputHandler>

            bApplEsmPending = FALSE;
 8008888:	4b4d      	ldr	r3, [pc, #308]	; (80089c0 <AL_ControlInd+0x654>)
 800888a:	2200      	movs	r2, #0
 800888c:	701a      	strb	r2, [r3, #0]

            if (result != 0)
 800888e:	89fb      	ldrh	r3, [r7, #14]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d162      	bne.n	800895a <AL_ControlInd+0x5ee>
                break;
            stateTrans = PREOP_2_INIT;
 8008894:	2321      	movs	r3, #33	; 0x21
 8008896:	733b      	strb	r3, [r7, #12]

        case PREOP_2_INIT:
            MBX_StopMailboxHandler();
 8008898:	f001 fac6 	bl	8009e28 <MBX_StopMailboxHandler>
            result = APPL_StopMailboxHandler();
 800889c:	f7fd fa63 	bl	8005d66 <APPL_StopMailboxHandler>
 80088a0:	4603      	mov	r3, r0
 80088a2:	81fb      	strh	r3, [r7, #14]

            BackToInitTransition();
 80088a4:	f7ff fd20 	bl	80082e8 <BackToInitTransition>
            break;
 80088a8:	e058      	b.n	800895c <AL_ControlInd+0x5f0>

        case INIT_2_INIT:
            BackToInitTransition();
 80088aa:	f7ff fd1d 	bl	80082e8 <BackToInitTransition>
        case PREOP_2_PREOP:
        case SAFEOP_2_SAFEOP:
        case OP_2_OP:
            if(bErrAck)
 80088ae:	7b7b      	ldrb	r3, [r7, #13]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d004      	beq.n	80088be <AL_ControlInd+0x552>
                APPL_AckErrorInd(stateTrans);
 80088b4:	7b3b      	ldrb	r3, [r7, #12]
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	4618      	mov	r0, r3
 80088ba:	f7fd fa41 	bl	8005d40 <APPL_AckErrorInd>

            if(!bLocalErrorFlag)
 80088be:	4b45      	ldr	r3, [pc, #276]	; (80089d4 <AL_ControlInd+0x668>)
 80088c0:	781b      	ldrb	r3, [r3, #0]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d114      	bne.n	80088f0 <AL_ControlInd+0x584>
            {
                /*no local error flag is currently active, enable SM*/
                if ( nAlStatus & (STATE_SAFEOP | STATE_OP))
 80088c6:	4b44      	ldr	r3, [pc, #272]	; (80089d8 <AL_ControlInd+0x66c>)
 80088c8:	781b      	ldrb	r3, [r3, #0]
 80088ca:	f003 030c 	and.w	r3, r3, #12
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d00e      	beq.n	80088f0 <AL_ControlInd+0x584>
                {
                    if(nPdOutputSize > 0)
 80088d2:	4b42      	ldr	r3, [pc, #264]	; (80089dc <AL_ControlInd+0x670>)
 80088d4:	881b      	ldrh	r3, [r3, #0]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d003      	beq.n	80088e2 <AL_ControlInd+0x576>
                    {
/*ECATCHANGE_START(V5.11) HW1*/
                        EnableSyncManChannel(PROCESS_DATA_OUT);
 80088da:	2002      	movs	r0, #2
 80088dc:	f7fe fe62 	bl	80075a4 <EnableSyncManChannel>
 80088e0:	e006      	b.n	80088f0 <AL_ControlInd+0x584>
/*ECATCHANGE_END(V5.11) HW1*/
                    }
                    else 
                    if(nPdInputSize > 0)
 80088e2:	4b3f      	ldr	r3, [pc, #252]	; (80089e0 <AL_ControlInd+0x674>)
 80088e4:	881b      	ldrh	r3, [r3, #0]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d002      	beq.n	80088f0 <AL_ControlInd+0x584>
                    {
/*ECATCHANGE_START(V5.11) HW1*/
                        EnableSyncManChannel(PROCESS_DATA_IN);
 80088ea:	2003      	movs	r0, #3
 80088ec:	f7fe fe5a 	bl	80075a4 <EnableSyncManChannel>
/*ECATCHANGE_END(V5.11) HW1*/
                    }
                }
            }
            result = NOERROR_NOSTATECHANGE;
 80088f0:	23fe      	movs	r3, #254	; 0xfe
 80088f2:	81fb      	strh	r3, [r7, #14]
            break;
 80088f4:	e032      	b.n	800895c <AL_ControlInd+0x5f0>
        case SAFEOP_2_BOOT:
        case OP_2_BOOT:
        case BOOT_2_PREOP:
        case BOOT_2_SAFEOP:
        case BOOT_2_OP:
            result = ALSTATUSCODE_INVALIDALCONTROL;
 80088f6:	2311      	movs	r3, #17
 80088f8:	81fb      	strh	r3, [r7, #14]
            break;
 80088fa:	e02f      	b.n	800895c <AL_ControlInd+0x5f0>

        default:
            result = ALSTATUSCODE_UNKNOWNALCONTROL;
 80088fc:	2312      	movs	r3, #18
 80088fe:	81fb      	strh	r3, [r7, #14]
            break;
 8008900:	e02c      	b.n	800895c <AL_ControlInd+0x5f0>
    }
    else
    {
        /* the checking of the sync manager settings was not successful
            switch back the state to PREOP or INIT */
        switch (nAlStatus)
 8008902:	4b35      	ldr	r3, [pc, #212]	; (80089d8 <AL_ControlInd+0x66c>)
 8008904:	781b      	ldrb	r3, [r3, #0]
 8008906:	2b08      	cmp	r3, #8
 8008908:	d006      	beq.n	8008918 <AL_ControlInd+0x5ac>
 800890a:	2b08      	cmp	r3, #8
 800890c:	dc26      	bgt.n	800895c <AL_ControlInd+0x5f0>
 800890e:	2b02      	cmp	r3, #2
 8008910:	d00a      	beq.n	8008928 <AL_ControlInd+0x5bc>
 8008912:	2b04      	cmp	r3, #4
 8008914:	d004      	beq.n	8008920 <AL_ControlInd+0x5b4>
 8008916:	e021      	b.n	800895c <AL_ControlInd+0x5f0>
        {
        case STATE_OP:
            /* stop the output handler (function is defined above) */
            APPL_StopOutputHandler();
 8008918:	f7fd fa48 	bl	8005dac <APPL_StopOutputHandler>
            StopOutputHandler();
 800891c:	f7ff fc4e 	bl	80081bc <StopOutputHandler>
        case STATE_SAFEOP:
            /* stop the input handler (function is defined above) */
            APPL_StopInputHandler();
 8008920:	f7fd fa34 	bl	8005d8c <APPL_StopInputHandler>

            StopInputHandler();
 8008924:	f7ff fc5c 	bl	80081e0 <StopInputHandler>

        case STATE_PREOP:

            if ( result == ALSTATUSCODE_INVALIDMBXCFGINPREOP )
 8008928:	89fb      	ldrh	r3, [r7, #14]
 800892a:	2b16      	cmp	r3, #22
 800892c:	d107      	bne.n	800893e <AL_ControlInd+0x5d2>
            {
                /* the mailbox sync manager settings were wrong, switch back to INIT */
                MBX_StopMailboxHandler();
 800892e:	f001 fa7b 	bl	8009e28 <MBX_StopMailboxHandler>
                APPL_StopMailboxHandler();
 8008932:	f7fd fa18 	bl	8005d66 <APPL_StopMailboxHandler>

                nAlStatus = STATE_INIT;
 8008936:	4b28      	ldr	r3, [pc, #160]	; (80089d8 <AL_ControlInd+0x66c>)
 8008938:	2201      	movs	r2, #1
 800893a:	701a      	strb	r2, [r3, #0]
 800893c:	e00e      	b.n	800895c <AL_ControlInd+0x5f0>
            }
            else
                nAlStatus = STATE_PREOP;
 800893e:	4b26      	ldr	r3, [pc, #152]	; (80089d8 <AL_ControlInd+0x66c>)
 8008940:	2202      	movs	r2, #2
 8008942:	701a      	strb	r2, [r3, #0]
 8008944:	e00a      	b.n	800895c <AL_ControlInd+0x5f0>
            break;
 8008946:	bf00      	nop
 8008948:	e008      	b.n	800895c <AL_ControlInd+0x5f0>
            break;
 800894a:	bf00      	nop
 800894c:	e006      	b.n	800895c <AL_ControlInd+0x5f0>
            break;
 800894e:	bf00      	nop
 8008950:	e004      	b.n	800895c <AL_ControlInd+0x5f0>
                break;
 8008952:	bf00      	nop
 8008954:	e002      	b.n	800895c <AL_ControlInd+0x5f0>
                break;
 8008956:	bf00      	nop
 8008958:	e000      	b.n	800895c <AL_ControlInd+0x5f0>
                break;
 800895a:	bf00      	nop
        }
    }

    if ( result == NOERROR_INWORK )
 800895c:	89fb      	ldrh	r3, [r7, #14]
 800895e:	2bff      	cmp	r3, #255	; 0xff
 8008960:	d146      	bne.n	80089f0 <AL_ControlInd+0x684>
    {
        /* state transition is still in work
            ECAT_StateChange must be called from the application */
        bEcatWaitForAlControlRes = TRUE;
 8008962:	4b20      	ldr	r3, [pc, #128]	; (80089e4 <AL_ControlInd+0x678>)
 8008964:	2201      	movs	r2, #1
 8008966:	701a      	strb	r2, [r3, #0]
        /* state transition has to be stored */
        nEcatStateTrans = stateTrans;
 8008968:	7b3b      	ldrb	r3, [r7, #12]
 800896a:	b29a      	uxth	r2, r3
 800896c:	4b1e      	ldr	r3, [pc, #120]	; (80089e8 <AL_ControlInd+0x67c>)
 800896e:	801a      	strh	r2, [r3, #0]

        /*Init ESM timeout counter (will be decremented with the local 1ms timer)*/
        switch(nEcatStateTrans)
 8008970:	4b1d      	ldr	r3, [pc, #116]	; (80089e8 <AL_ControlInd+0x67c>)
 8008972:	881b      	ldrh	r3, [r3, #0]
 8008974:	2b48      	cmp	r3, #72	; 0x48
 8008976:	d00e      	beq.n	8008996 <AL_ControlInd+0x62a>
 8008978:	2b48      	cmp	r3, #72	; 0x48
 800897a:	dc11      	bgt.n	80089a0 <AL_ControlInd+0x634>
 800897c:	2b13      	cmp	r3, #19
 800897e:	dc02      	bgt.n	8008986 <AL_ControlInd+0x61a>
 8008980:	2b12      	cmp	r3, #18
 8008982:	da03      	bge.n	800898c <AL_ControlInd+0x620>
 8008984:	e00c      	b.n	80089a0 <AL_ControlInd+0x634>
 8008986:	2b24      	cmp	r3, #36	; 0x24
 8008988:	d005      	beq.n	8008996 <AL_ControlInd+0x62a>
 800898a:	e009      	b.n	80089a0 <AL_ControlInd+0x634>
        {
            case INIT_2_PREOP:
            case INIT_2_BOOT:
                EsmTimeoutCounter = PREOPTIMEOUT;
 800898c:	4b17      	ldr	r3, [pc, #92]	; (80089ec <AL_ControlInd+0x680>)
 800898e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008992:	801a      	strh	r2, [r3, #0]
            break;
 8008994:	e008      	b.n	80089a8 <AL_ControlInd+0x63c>
            case PREOP_2_SAFEOP:
            case SAFEOP_2_OP:
                EsmTimeoutCounter = SAFEOP2OPTIMEOUT;
 8008996:	4b15      	ldr	r3, [pc, #84]	; (80089ec <AL_ControlInd+0x680>)
 8008998:	f242 3228 	movw	r2, #9000	; 0x2328
 800899c:	801a      	strh	r2, [r3, #0]
                break;
 800899e:	e003      	b.n	80089a8 <AL_ControlInd+0x63c>
           default:
                EsmTimeoutCounter = 200; //Set default timeout value to 200ms
 80089a0:	4b12      	ldr	r3, [pc, #72]	; (80089ec <AL_ControlInd+0x680>)
 80089a2:	22c8      	movs	r2, #200	; 0xc8
 80089a4:	801a      	strh	r2, [r3, #0]
                break;
 80089a6:	bf00      	nop
        }
        EsmTimeoutCounter -= 50; //subtract 50ms from the timeout to react before the master runs into a timeout.
 80089a8:	4b10      	ldr	r3, [pc, #64]	; (80089ec <AL_ControlInd+0x680>)
 80089aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80089ae:	b29b      	uxth	r3, r3
 80089b0:	3b32      	subs	r3, #50	; 0x32
 80089b2:	b29b      	uxth	r3, r3
 80089b4:	b21a      	sxth	r2, r3
 80089b6:	4b0d      	ldr	r3, [pc, #52]	; (80089ec <AL_ControlInd+0x680>)
 80089b8:	801a      	strh	r2, [r3, #0]
 80089ba:	e07a      	b.n	8008ab2 <AL_ControlInd+0x746>
 80089bc:	200006c8 	.word	0x200006c8
 80089c0:	200006a6 	.word	0x200006a6
 80089c4:	20000876 	.word	0x20000876
 80089c8:	200006ba 	.word	0x200006ba
 80089cc:	20000681 	.word	0x20000681
 80089d0:	20000680 	.word	0x20000680
 80089d4:	200006a2 	.word	0x200006a2
 80089d8:	200006b2 	.word	0x200006b2
 80089dc:	200006ac 	.word	0x200006ac
 80089e0:	200006aa 	.word	0x200006aa
 80089e4:	200006a7 	.word	0x200006a7
 80089e8:	200006a8 	.word	0x200006a8
 80089ec:	20000686 	.word	0x20000686

    }
    else if ( alControl != (nAlStatus & STATE_MASK) )
 80089f0:	79fa      	ldrb	r2, [r7, #7]
 80089f2:	4b31      	ldr	r3, [pc, #196]	; (8008ab8 <AL_ControlInd+0x74c>)
 80089f4:	781b      	ldrb	r3, [r3, #0]
 80089f6:	f003 030f 	and.w	r3, r3, #15
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d04e      	beq.n	8008a9c <AL_ControlInd+0x730>
    {
        /* The slave state has changed */

        if ( (result != 0 || alStatusCode != 0) && ((alControl | nAlStatus) & STATE_OP) )
 80089fe:	89fb      	ldrh	r3, [r7, #14]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d102      	bne.n	8008a0a <AL_ControlInd+0x69e>
 8008a04:	88bb      	ldrh	r3, [r7, #4]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d01f      	beq.n	8008a4a <AL_ControlInd+0x6de>
 8008a0a:	4b2b      	ldr	r3, [pc, #172]	; (8008ab8 <AL_ControlInd+0x74c>)
 8008a0c:	781a      	ldrb	r2, [r3, #0]
 8008a0e:	79fb      	ldrb	r3, [r7, #7]
 8008a10:	4313      	orrs	r3, r2
 8008a12:	b2db      	uxtb	r3, r3
 8008a14:	f003 0308 	and.w	r3, r3, #8
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d016      	beq.n	8008a4a <AL_ControlInd+0x6de>
        {
            /* the local application requested to leave the state OP so we have to disable the SM2
               and make the state change from OP to SAFEOP by calling StopOutputHandler */

            //only execute StopOutputHandler() if Output update is still running
            if(bEcatOutputUpdateRunning)
 8008a1c:	4b27      	ldr	r3, [pc, #156]	; (8008abc <AL_ControlInd+0x750>)
 8008a1e:	781b      	ldrb	r3, [r3, #0]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d003      	beq.n	8008a2c <AL_ControlInd+0x6c0>
            {
                APPL_StopOutputHandler();
 8008a24:	f7fd f9c2 	bl	8005dac <APPL_StopOutputHandler>

                StopOutputHandler();
 8008a28:	f7ff fbc8 	bl	80081bc <StopOutputHandler>
            }

            if(nPdOutputSize > 0)
 8008a2c:	4b24      	ldr	r3, [pc, #144]	; (8008ac0 <AL_ControlInd+0x754>)
 8008a2e:	881b      	ldrh	r3, [r3, #0]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d003      	beq.n	8008a3c <AL_ControlInd+0x6d0>
            {
                /* disable the Sync Manager Channel 2 (outputs) */
/*ECATCHANGE_START(V5.11) HW1*/
                DisableSyncManChannel(PROCESS_DATA_OUT);
 8008a34:	2002      	movs	r0, #2
 8008a36:	f7fe fd8d 	bl	8007554 <DisableSyncManChannel>
 8008a3a:	e006      	b.n	8008a4a <AL_ControlInd+0x6de>
/*ECATCHANGE_END(V5.11) HW1*/
            }
            else
                if(nPdInputSize > 0)
 8008a3c:	4b21      	ldr	r3, [pc, #132]	; (8008ac4 <AL_ControlInd+0x758>)
 8008a3e:	881b      	ldrh	r3, [r3, #0]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d002      	beq.n	8008a4a <AL_ControlInd+0x6de>
            {
                /*disable Sync Manager 3 (inputs) if no outputs available*/
/*ECATCHANGE_START(V5.11) HW1*/
                DisableSyncManChannel(PROCESS_DATA_IN);
 8008a44:	2003      	movs	r0, #3
 8008a46:	f7fe fd85 	bl	8007554 <DisableSyncManChannel>
/*ECATCHANGE_END(V5.11) HW1*/
            }

        }
        if ( result != 0 )
 8008a4a:	89fb      	ldrh	r3, [r7, #14]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d00e      	beq.n	8008a6e <AL_ControlInd+0x702>
        {
            if ( nAlStatus == STATE_OP )
 8008a50:	4b19      	ldr	r3, [pc, #100]	; (8008ab8 <AL_ControlInd+0x74c>)
 8008a52:	781b      	ldrb	r3, [r3, #0]
 8008a54:	2b08      	cmp	r3, #8
 8008a56:	d102      	bne.n	8008a5e <AL_ControlInd+0x6f2>
                nAlStatus = STATE_SAFEOP;
 8008a58:	4b17      	ldr	r3, [pc, #92]	; (8008ab8 <AL_ControlInd+0x74c>)
 8008a5a:	2204      	movs	r2, #4
 8008a5c:	701a      	strb	r2, [r3, #0]
            /* save the failed status to be able to decide, if the AL Status Code shall be
               reset in case of a coming successful state transition */
            nAlStatus |= STATE_CHANGE;
 8008a5e:	4b16      	ldr	r3, [pc, #88]	; (8008ab8 <AL_ControlInd+0x74c>)
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	f043 0310 	orr.w	r3, r3, #16
 8008a66:	b2da      	uxtb	r2, r3
 8008a68:	4b13      	ldr	r3, [pc, #76]	; (8008ab8 <AL_ControlInd+0x74c>)
 8008a6a:	701a      	strb	r2, [r3, #0]
 8008a6c:	e00b      	b.n	8008a86 <AL_ControlInd+0x71a>
        }
        else
        {
            /* state transition was successful */
            if ( alStatusCode != 0 )
 8008a6e:	88bb      	ldrh	r3, [r7, #4]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d005      	beq.n	8008a80 <AL_ControlInd+0x714>
            {
                /* state change request from the user */
                result = alStatusCode;
 8008a74:	88bb      	ldrh	r3, [r7, #4]
 8008a76:	81fb      	strh	r3, [r7, #14]
                alControl |= STATE_CHANGE;
 8008a78:	79fb      	ldrb	r3, [r7, #7]
 8008a7a:	f043 0310 	orr.w	r3, r3, #16
 8008a7e:	71fb      	strb	r3, [r7, #7]
            }
            /* acknowledge the new state */
            nAlStatus = alControl;
 8008a80:	4a0d      	ldr	r2, [pc, #52]	; (8008ab8 <AL_ControlInd+0x74c>)
 8008a82:	79fb      	ldrb	r3, [r7, #7]
 8008a84:	7013      	strb	r3, [r2, #0]
        }

        bEcatWaitForAlControlRes = FALSE;
 8008a86:	4b10      	ldr	r3, [pc, #64]	; (8008ac8 <AL_ControlInd+0x75c>)
 8008a88:	2200      	movs	r2, #0
 8008a8a:	701a      	strb	r2, [r3, #0]

        /* write the AL Status register */
        SetALStatus(nAlStatus, result);
 8008a8c:	4b0a      	ldr	r3, [pc, #40]	; (8008ab8 <AL_ControlInd+0x74c>)
 8008a8e:	781b      	ldrb	r3, [r3, #0]
 8008a90:	89fa      	ldrh	r2, [r7, #14]
 8008a92:	4611      	mov	r1, r2
 8008a94:	4618      	mov	r0, r3
 8008a96:	f7ff fc33 	bl	8008300 <SetALStatus>
 8008a9a:	e00a      	b.n	8008ab2 <AL_ControlInd+0x746>
    }
    else
    {
        /* Error acknowledgement without a state transition */

         bEcatWaitForAlControlRes = FALSE;
 8008a9c:	4b0a      	ldr	r3, [pc, #40]	; (8008ac8 <AL_ControlInd+0x75c>)
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	701a      	strb	r2, [r3, #0]

        /* AL-Status has to be updated and AL-Status-Code has to be reset
           if the the error bit was acknowledged */
        SetALStatus(nAlStatus, 0);
 8008aa2:	4b05      	ldr	r3, [pc, #20]	; (8008ab8 <AL_ControlInd+0x74c>)
 8008aa4:	781b      	ldrb	r3, [r3, #0]
 8008aa6:	2100      	movs	r1, #0
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f7ff fc29 	bl	8008300 <SetALStatus>
 8008aae:	e000      	b.n	8008ab2 <AL_ControlInd+0x746>
        return;
 8008ab0:	bf00      	nop
    }

}
 8008ab2:	3710      	adds	r7, #16
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}
 8008ab8:	200006b2 	.word	0x200006b2
 8008abc:	20000680 	.word	0x20000680
 8008ac0:	200006ac 	.word	0x200006ac
 8008ac4:	200006aa 	.word	0x200006aa
 8008ac8:	200006a7 	.word	0x200006a7

08008acc <AL_ControlRes>:
 \brief    This function is called cyclic if a state transition is pending (bEcatWaitForAlControlRes == TRUE)
 \brief    If the ESM timeout is expired the state transition will be rejected. Otherwise the application specific state transition function is called.
 \brief    If the pending state transition is triggered by the application the transition need to be completed by the application (ECAT_StateChange())
  *////////////////////////////////////////////////////////////////////////////////////////
void AL_ControlRes(void)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b082      	sub	sp, #8
 8008ad0:	af00      	add	r7, sp, #0
    if(bEcatWaitForAlControlRes)
 8008ad2:	4b9b      	ldr	r3, [pc, #620]	; (8008d40 <AL_ControlRes+0x274>)
 8008ad4:	781b      	ldrb	r3, [r3, #0]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	f000 812d 	beq.w	8008d36 <AL_ControlRes+0x26a>
    {
        UINT16 result = 0;
 8008adc:	2300      	movs	r3, #0
 8008ade:	807b      	strh	r3, [r7, #2]
        UINT8 Status = 0;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	71fb      	strb	r3, [r7, #7]
        UINT16 StatusCode = 0;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	80bb      	strh	r3, [r7, #4]

        if(EsmTimeoutCounter == 0)
 8008ae8:	4b96      	ldr	r3, [pc, #600]	; (8008d44 <AL_ControlRes+0x278>)
 8008aea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d16d      	bne.n	8008bce <AL_ControlRes+0x102>
        {
            Status =  (UINT8)(nEcatStateTrans >> 4);
 8008af2:	4b95      	ldr	r3, [pc, #596]	; (8008d48 <AL_ControlRes+0x27c>)
 8008af4:	881b      	ldrh	r3, [r3, #0]
 8008af6:	091b      	lsrs	r3, r3, #4
 8008af8:	b29b      	uxth	r3, r3
 8008afa:	71fb      	strb	r3, [r7, #7]

            /* ESM timeout expired*/
            switch(nEcatStateTrans)
 8008afc:	4b92      	ldr	r3, [pc, #584]	; (8008d48 <AL_ControlRes+0x27c>)
 8008afe:	881b      	ldrh	r3, [r3, #0]
 8008b00:	2b48      	cmp	r3, #72	; 0x48
 8008b02:	d030      	beq.n	8008b66 <AL_ControlRes+0x9a>
 8008b04:	2b48      	cmp	r3, #72	; 0x48
 8008b06:	f300 8103 	bgt.w	8008d10 <AL_ControlRes+0x244>
 8008b0a:	2b13      	cmp	r3, #19
 8008b0c:	dc02      	bgt.n	8008b14 <AL_ControlRes+0x48>
 8008b0e:	2b12      	cmp	r3, #18
 8008b10:	da03      	bge.n	8008b1a <AL_ControlRes+0x4e>
 8008b12:	e0fd      	b.n	8008d10 <AL_ControlRes+0x244>
 8008b14:	2b24      	cmp	r3, #36	; 0x24
 8008b16:	d013      	beq.n	8008b40 <AL_ControlRes+0x74>
 8008b18:	e0fa      	b.n	8008d10 <AL_ControlRes+0x244>
            {
                case INIT_2_PREOP:
                case INIT_2_BOOT:

                    if(!bApplEsmPending)
 8008b1a:	4b8c      	ldr	r3, [pc, #560]	; (8008d4c <AL_ControlRes+0x280>)
 8008b1c:	781b      	ldrb	r3, [r3, #0]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d101      	bne.n	8008b26 <AL_ControlRes+0x5a>
                        APPL_StopMailboxHandler();
 8008b22:	f7fd f920 	bl	8005d66 <APPL_StopMailboxHandler>

                    MBX_StopMailboxHandler();
 8008b26:	f001 f97f 	bl	8009e28 <MBX_StopMailboxHandler>
                    if(bLocalErrorFlag)
 8008b2a:	4b89      	ldr	r3, [pc, #548]	; (8008d50 <AL_ControlRes+0x284>)
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d003      	beq.n	8008b3a <AL_ControlRes+0x6e>
                    {
                        /*Set application specified error*/
                        StatusCode = u16LocalErrorCode;
 8008b32:	4b88      	ldr	r3, [pc, #544]	; (8008d54 <AL_ControlRes+0x288>)
 8008b34:	881b      	ldrh	r3, [r3, #0]
 8008b36:	80bb      	strh	r3, [r7, #4]
                    else
                    {
                        /*Set unspecified error*/
                        StatusCode = ALSTATUSCODE_UNSPECIFIEDERROR;
                    }
                break;
 8008b38:	e0ea      	b.n	8008d10 <AL_ControlRes+0x244>
                        StatusCode = ALSTATUSCODE_UNSPECIFIEDERROR;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	80bb      	strh	r3, [r7, #4]
                break;
 8008b3e:	e0e7      	b.n	8008d10 <AL_ControlRes+0x244>
                case PREOP_2_SAFEOP:
                    if(!bApplEsmPending)
 8008b40:	4b82      	ldr	r3, [pc, #520]	; (8008d4c <AL_ControlRes+0x280>)
 8008b42:	781b      	ldrb	r3, [r3, #0]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d101      	bne.n	8008b4c <AL_ControlRes+0x80>
                        APPL_StopInputHandler();
 8008b48:	f7fd f920 	bl	8005d8c <APPL_StopInputHandler>

                    StopInputHandler();
 8008b4c:	f7ff fb48 	bl	80081e0 <StopInputHandler>
                    
                    if(bLocalErrorFlag)
 8008b50:	4b7f      	ldr	r3, [pc, #508]	; (8008d50 <AL_ControlRes+0x284>)
 8008b52:	781b      	ldrb	r3, [r3, #0]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d003      	beq.n	8008b60 <AL_ControlRes+0x94>
                    {
                        /*Set application specified error*/
                        StatusCode = u16LocalErrorCode;
 8008b58:	4b7e      	ldr	r3, [pc, #504]	; (8008d54 <AL_ControlRes+0x288>)
 8008b5a:	881b      	ldrh	r3, [r3, #0]
 8008b5c:	80bb      	strh	r3, [r7, #4]
                    else
                    {
                        /*Set unspecified error*/
                        StatusCode = ALSTATUSCODE_UNSPECIFIEDERROR;
                    }
                break;
 8008b5e:	e0d7      	b.n	8008d10 <AL_ControlRes+0x244>
                        StatusCode = ALSTATUSCODE_UNSPECIFIEDERROR;
 8008b60:	2301      	movs	r3, #1
 8008b62:	80bb      	strh	r3, [r7, #4]
                break;
 8008b64:	e0d4      	b.n	8008d10 <AL_ControlRes+0x244>
                case SAFEOP_2_OP:
                    if(bDcSyncActive)
 8008b66:	4b7c      	ldr	r3, [pc, #496]	; (8008d58 <AL_ControlRes+0x28c>)
 8008b68:	781b      	ldrb	r3, [r3, #0]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d014      	beq.n	8008b98 <AL_ControlRes+0xcc>
                    {
                        /*SafeOP to OP timeout expired check which AL status code need to be written*/
                        if(!bDcRunning)
 8008b6e:	4b7b      	ldr	r3, [pc, #492]	; (8008d5c <AL_ControlRes+0x290>)
 8008b70:	781b      	ldrb	r3, [r3, #0]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d102      	bne.n	8008b7c <AL_ControlRes+0xb0>
                        {
                            /*no Sync0 signal received*/
                            StatusCode = ALSTATUSCODE_NOSYNCERROR;
 8008b76:	232d      	movs	r3, #45	; 0x2d
 8008b78:	80bb      	strh	r3, [r7, #4]
 8008b7a:	e01b      	b.n	8008bb4 <AL_ControlRes+0xe8>
                        }
/*ECATCHANGE_START(V5.11) ECAT4*/
                        else if(!bEcatFirstOutputsReceived && (nPdOutputSize > 0))
 8008b7c:	4b78      	ldr	r3, [pc, #480]	; (8008d60 <AL_ControlRes+0x294>)
 8008b7e:	781b      	ldrb	r3, [r3, #0]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d106      	bne.n	8008b92 <AL_ControlRes+0xc6>
 8008b84:	4b77      	ldr	r3, [pc, #476]	; (8008d64 <AL_ControlRes+0x298>)
 8008b86:	881b      	ldrh	r3, [r3, #0]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d002      	beq.n	8008b92 <AL_ControlRes+0xc6>
/*ECATCHANGE_END(V5.11) ECAT4*/
                        {
                            /*no process data received*/
                            StatusCode = ALSTATUSCODE_SMWATCHDOG;
 8008b8c:	231b      	movs	r3, #27
 8008b8e:	80bb      	strh	r3, [r7, #4]
 8008b90:	e010      	b.n	8008bb4 <AL_ControlRes+0xe8>
                        }
                        else
                        {
                            /*SM/Sync Sequence is not valid*/
                            StatusCode = ALSTATUSCODE_SYNCERROR;
 8008b92:	231a      	movs	r3, #26
 8008b94:	80bb      	strh	r3, [r7, #4]
 8008b96:	e00d      	b.n	8008bb4 <AL_ControlRes+0xe8>
                        }
                    }
                    else
                    {
/*ECATCHANGE_START(V5.11) ECAT4*/
                        if (nPdOutputSize > 0)
 8008b98:	4b72      	ldr	r3, [pc, #456]	; (8008d64 <AL_ControlRes+0x298>)
 8008b9a:	881b      	ldrh	r3, [r3, #0]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d002      	beq.n	8008ba6 <AL_ControlRes+0xda>
                        {
                            StatusCode = ALSTATUSCODE_SMWATCHDOG;
 8008ba0:	231b      	movs	r3, #27
 8008ba2:	80bb      	strh	r3, [r7, #4]
 8008ba4:	e006      	b.n	8008bb4 <AL_ControlRes+0xe8>
                        }
                        else
/*ECATCHANGE_END(V5.11) ECAT4*/
                        {
                            /*Set valid state transition even if timeout expired*/
                            Status = STATE_OP;
 8008ba6:	2308      	movs	r3, #8
 8008ba8:	71fb      	strb	r3, [r7, #7]
                            StatusCode = 0;
 8008baa:	2300      	movs	r3, #0
 8008bac:	80bb      	strh	r3, [r7, #4]
                            /* Slave is OPERATIONAL */
                            bEcatOutputUpdateRunning = TRUE;
 8008bae:	4b6e      	ldr	r3, [pc, #440]	; (8008d68 <AL_ControlRes+0x29c>)
 8008bb0:	2201      	movs	r2, #1
 8008bb2:	701a      	strb	r2, [r3, #0]
                        }
                    }

                    /*Stop handler on failed transition*/
                    if(StatusCode != 0)
 8008bb4:	88bb      	ldrh	r3, [r7, #4]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	f000 80a3 	beq.w	8008d02 <AL_ControlRes+0x236>
                    {
                        if(!bApplEsmPending)
 8008bbc:	4b63      	ldr	r3, [pc, #396]	; (8008d4c <AL_ControlRes+0x280>)
 8008bbe:	781b      	ldrb	r3, [r3, #0]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d101      	bne.n	8008bc8 <AL_ControlRes+0xfc>
                            APPL_StopOutputHandler();
 8008bc4:	f7fd f8f2 	bl	8005dac <APPL_StopOutputHandler>

                        StopOutputHandler();
 8008bc8:	f7ff faf8 	bl	80081bc <StopOutputHandler>
                    }
                break;
 8008bcc:	e099      	b.n	8008d02 <AL_ControlRes+0x236>
            }
        } //ESM timeout
        else
        {
            /*Call application specific transition function and complete transition it the function returns 0*/
            switch(nEcatStateTrans)
 8008bce:	4b5e      	ldr	r3, [pc, #376]	; (8008d48 <AL_ControlRes+0x27c>)
 8008bd0:	881b      	ldrh	r3, [r3, #0]
 8008bd2:	2b48      	cmp	r3, #72	; 0x48
 8008bd4:	d048      	beq.n	8008c68 <AL_ControlRes+0x19c>
 8008bd6:	2b48      	cmp	r3, #72	; 0x48
 8008bd8:	f300 809a 	bgt.w	8008d10 <AL_ControlRes+0x244>
 8008bdc:	2b13      	cmp	r3, #19
 8008bde:	dc02      	bgt.n	8008be6 <AL_ControlRes+0x11a>
 8008be0:	2b12      	cmp	r3, #18
 8008be2:	da03      	bge.n	8008bec <AL_ControlRes+0x120>
 8008be4:	e094      	b.n	8008d10 <AL_ControlRes+0x244>
 8008be6:	2b24      	cmp	r3, #36	; 0x24
 8008be8:	d021      	beq.n	8008c2e <AL_ControlRes+0x162>
 8008bea:	e091      	b.n	8008d10 <AL_ControlRes+0x244>
            {
                case INIT_2_PREOP:
                case INIT_2_BOOT:
                    if(bApplEsmPending)
 8008bec:	4b57      	ldr	r3, [pc, #348]	; (8008d4c <AL_ControlRes+0x280>)
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	f000 8088 	beq.w	8008d06 <AL_ControlRes+0x23a>
                    {
                        bApplEsmPending = FALSE;
 8008bf6:	4b55      	ldr	r3, [pc, #340]	; (8008d4c <AL_ControlRes+0x280>)
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	701a      	strb	r2, [r3, #0]
                        /*APPL_StartMailboxHandler() need to be called*/
                        result = APPL_StartMailboxHandler();
 8008bfc:	f7fd f8ab 	bl	8005d56 <APPL_StartMailboxHandler>
 8008c00:	4603      	mov	r3, r0
 8008c02:	807b      	strh	r3, [r7, #2]

                        if(result == 0)
 8008c04:	887b      	ldrh	r3, [r7, #2]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d109      	bne.n	8008c1e <AL_ControlRes+0x152>
                        {
                            /*The application specific transition was successful => set active mailbox handler indication*/
                            bMbxRunning = TRUE;
 8008c0a:	4b58      	ldr	r3, [pc, #352]	; (8008d6c <AL_ControlRes+0x2a0>)
 8008c0c:	2201      	movs	r2, #1
 8008c0e:	701a      	strb	r2, [r3, #0]
                            Status =  (UINT8)(nEcatStateTrans & STATE_MASK);
 8008c10:	4b4d      	ldr	r3, [pc, #308]	; (8008d48 <AL_ControlRes+0x27c>)
 8008c12:	881b      	ldrh	r3, [r3, #0]
 8008c14:	b2db      	uxtb	r3, r3
 8008c16:	f003 030f 	and.w	r3, r3, #15
 8008c1a:	71fb      	strb	r3, [r7, #7]
                                APPL_StopMailboxHandler();
                                MBX_StopMailboxHandler();
                            }
                        }
                    }
                break;
 8008c1c:	e073      	b.n	8008d06 <AL_ControlRes+0x23a>
                            if(result != NOERROR_INWORK)
 8008c1e:	887b      	ldrh	r3, [r7, #2]
 8008c20:	2bff      	cmp	r3, #255	; 0xff
 8008c22:	d070      	beq.n	8008d06 <AL_ControlRes+0x23a>
                                APPL_StopMailboxHandler();
 8008c24:	f7fd f89f 	bl	8005d66 <APPL_StopMailboxHandler>
                                MBX_StopMailboxHandler();
 8008c28:	f001 f8fe 	bl	8009e28 <MBX_StopMailboxHandler>
                break;
 8008c2c:	e06b      	b.n	8008d06 <AL_ControlRes+0x23a>
                case PREOP_2_SAFEOP:
                    if(bApplEsmPending)
 8008c2e:	4b47      	ldr	r3, [pc, #284]	; (8008d4c <AL_ControlRes+0x280>)
 8008c30:	781b      	ldrb	r3, [r3, #0]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d069      	beq.n	8008d0a <AL_ControlRes+0x23e>
                    {
                        bApplEsmPending = FALSE;
 8008c36:	4b45      	ldr	r3, [pc, #276]	; (8008d4c <AL_ControlRes+0x280>)
 8008c38:	2200      	movs	r2, #0
 8008c3a:	701a      	strb	r2, [r3, #0]
                        result = APPL_StartInputHandler(&u16ALEventMask);
 8008c3c:	484c      	ldr	r0, [pc, #304]	; (8008d70 <AL_ControlRes+0x2a4>)
 8008c3e:	f7fd f89a 	bl	8005d76 <APPL_StartInputHandler>
 8008c42:	4603      	mov	r3, r0
 8008c44:	807b      	strh	r3, [r7, #2]

                        if(result == 0)
 8008c46:	887b      	ldrh	r3, [r7, #2]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d105      	bne.n	8008c58 <AL_ControlRes+0x18c>
                        {
                            bEcatInputUpdateRunning = TRUE;
 8008c4c:	4b49      	ldr	r3, [pc, #292]	; (8008d74 <AL_ControlRes+0x2a8>)
 8008c4e:	2201      	movs	r2, #1
 8008c50:	701a      	strb	r2, [r3, #0]
                            Status = STATE_SAFEOP;
 8008c52:	2304      	movs	r3, #4
 8008c54:	71fb      	strb	r3, [r7, #7]
                                APPL_StopInputHandler();
                                StopInputHandler();
                            }
                        }
                    }
                break;
 8008c56:	e058      	b.n	8008d0a <AL_ControlRes+0x23e>
                            if(result != NOERROR_INWORK)
 8008c58:	887b      	ldrh	r3, [r7, #2]
 8008c5a:	2bff      	cmp	r3, #255	; 0xff
 8008c5c:	d055      	beq.n	8008d0a <AL_ControlRes+0x23e>
                                APPL_StopInputHandler();
 8008c5e:	f7fd f895 	bl	8005d8c <APPL_StopInputHandler>
                                StopInputHandler();
 8008c62:	f7ff fabd 	bl	80081e0 <StopInputHandler>
                break;
 8008c66:	e050      	b.n	8008d0a <AL_ControlRes+0x23e>
                case SAFEOP_2_OP:
                   if(bApplEsmPending)
 8008c68:	4b38      	ldr	r3, [pc, #224]	; (8008d4c <AL_ControlRes+0x280>)
 8008c6a:	781b      	ldrb	r3, [r3, #0]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d04e      	beq.n	8008d0e <AL_ControlRes+0x242>
                    {
                        if(bDcSyncActive)
 8008c70:	4b39      	ldr	r3, [pc, #228]	; (8008d58 <AL_ControlRes+0x28c>)
 8008c72:	781b      	ldrb	r3, [r3, #0]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d027      	beq.n	8008cc8 <AL_ControlRes+0x1fc>
                        {
                            if(i16WaitForPllRunningTimeout > 0 && i16WaitForPllRunningTimeout <= i16WaitForPllRunningCnt)
 8008c78:	4b3f      	ldr	r3, [pc, #252]	; (8008d78 <AL_ControlRes+0x2ac>)
 8008c7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	dd45      	ble.n	8008d0e <AL_ControlRes+0x242>
 8008c82:	4b3d      	ldr	r3, [pc, #244]	; (8008d78 <AL_ControlRes+0x2ac>)
 8008c84:	f9b3 2000 	ldrsh.w	r2, [r3]
 8008c88:	4b3c      	ldr	r3, [pc, #240]	; (8008d7c <AL_ControlRes+0x2b0>)
 8008c8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	dc3d      	bgt.n	8008d0e <AL_ControlRes+0x242>
                            {
                                /*Pll sequence valid for 200ms (set in APPL_StartOutputHandler() )
                                acknowledge state transition to OP */

                                i16WaitForPllRunningTimeout = 0;
 8008c92:	4b39      	ldr	r3, [pc, #228]	; (8008d78 <AL_ControlRes+0x2ac>)
 8008c94:	2200      	movs	r2, #0
 8008c96:	801a      	strh	r2, [r3, #0]
                                i16WaitForPllRunningCnt = 0;
 8008c98:	4b38      	ldr	r3, [pc, #224]	; (8008d7c <AL_ControlRes+0x2b0>)
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	801a      	strh	r2, [r3, #0]

                                result = APPL_StartOutputHandler();
 8008c9e:	f7fd f87d 	bl	8005d9c <APPL_StartOutputHandler>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	807b      	strh	r3, [r7, #2]

                                if(result == 0)
 8008ca6:	887b      	ldrh	r3, [r7, #2]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d105      	bne.n	8008cb8 <AL_ControlRes+0x1ec>
                                {
                                    /* Slave is OPERATIONAL */
                                    bEcatOutputUpdateRunning = TRUE;
 8008cac:	4b2e      	ldr	r3, [pc, #184]	; (8008d68 <AL_ControlRes+0x29c>)
 8008cae:	2201      	movs	r2, #1
 8008cb0:	701a      	strb	r2, [r3, #0]
                                    Status = STATE_OP;
 8008cb2:	2308      	movs	r3, #8
 8008cb4:	71fb      	strb	r3, [r7, #7]
                                    }
                                }
                            }
                        }       
                    }             
                break;
 8008cb6:	e02a      	b.n	8008d0e <AL_ControlRes+0x242>
                                    if(result != NOERROR_INWORK)
 8008cb8:	887b      	ldrh	r3, [r7, #2]
 8008cba:	2bff      	cmp	r3, #255	; 0xff
 8008cbc:	d027      	beq.n	8008d0e <AL_ControlRes+0x242>
                                        APPL_StopOutputHandler();
 8008cbe:	f7fd f875 	bl	8005dac <APPL_StopOutputHandler>
                                        StopOutputHandler();
 8008cc2:	f7ff fa7b 	bl	80081bc <StopOutputHandler>
                break;
 8008cc6:	e022      	b.n	8008d0e <AL_ControlRes+0x242>
                            if(nPdOutputSize == 0 || bEcatFirstOutputsReceived)
 8008cc8:	4b26      	ldr	r3, [pc, #152]	; (8008d64 <AL_ControlRes+0x298>)
 8008cca:	881b      	ldrh	r3, [r3, #0]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d003      	beq.n	8008cd8 <AL_ControlRes+0x20c>
 8008cd0:	4b23      	ldr	r3, [pc, #140]	; (8008d60 <AL_ControlRes+0x294>)
 8008cd2:	781b      	ldrb	r3, [r3, #0]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d01a      	beq.n	8008d0e <AL_ControlRes+0x242>
                                result = APPL_StartOutputHandler();
 8008cd8:	f7fd f860 	bl	8005d9c <APPL_StartOutputHandler>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	807b      	strh	r3, [r7, #2]
                                if(result == 0)
 8008ce0:	887b      	ldrh	r3, [r7, #2]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d105      	bne.n	8008cf2 <AL_ControlRes+0x226>
                                    bEcatOutputUpdateRunning = TRUE;
 8008ce6:	4b20      	ldr	r3, [pc, #128]	; (8008d68 <AL_ControlRes+0x29c>)
 8008ce8:	2201      	movs	r2, #1
 8008cea:	701a      	strb	r2, [r3, #0]
                                    Status = STATE_OP;
 8008cec:	2308      	movs	r3, #8
 8008cee:	71fb      	strb	r3, [r7, #7]
                break;
 8008cf0:	e00d      	b.n	8008d0e <AL_ControlRes+0x242>
                                    if(result != NOERROR_INWORK)
 8008cf2:	887b      	ldrh	r3, [r7, #2]
 8008cf4:	2bff      	cmp	r3, #255	; 0xff
 8008cf6:	d00a      	beq.n	8008d0e <AL_ControlRes+0x242>
                                        APPL_StopOutputHandler();
 8008cf8:	f7fd f858 	bl	8005dac <APPL_StopOutputHandler>
                                        StopOutputHandler();
 8008cfc:	f7ff fa5e 	bl	80081bc <StopOutputHandler>
                break;
 8008d00:	e005      	b.n	8008d0e <AL_ControlRes+0x242>
                break;
 8008d02:	bf00      	nop
 8008d04:	e004      	b.n	8008d10 <AL_ControlRes+0x244>
                break;
 8008d06:	bf00      	nop
 8008d08:	e002      	b.n	8008d10 <AL_ControlRes+0x244>
                break;
 8008d0a:	bf00      	nop
 8008d0c:	e000      	b.n	8008d10 <AL_ControlRes+0x244>
                break;
 8008d0e:	bf00      	nop
            }//Switch - transition
        }

        if(Status != 0)
 8008d10:	79fb      	ldrb	r3, [r7, #7]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d00f      	beq.n	8008d36 <AL_ControlRes+0x26a>
        {
            /*Pending state transition finished => write AL Status and AL Status Code*/
            bEcatWaitForAlControlRes = FALSE;
 8008d16:	4b0a      	ldr	r3, [pc, #40]	; (8008d40 <AL_ControlRes+0x274>)
 8008d18:	2200      	movs	r2, #0
 8008d1a:	701a      	strb	r2, [r3, #0]

            if (StatusCode != 0)
 8008d1c:	88bb      	ldrh	r3, [r7, #4]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d003      	beq.n	8008d2a <AL_ControlRes+0x25e>
            {
                Status |= STATE_CHANGE;
 8008d22:	79fb      	ldrb	r3, [r7, #7]
 8008d24:	f043 0310 	orr.w	r3, r3, #16
 8008d28:	71fb      	strb	r3, [r7, #7]
            }

            SetALStatus(Status,StatusCode);
 8008d2a:	88ba      	ldrh	r2, [r7, #4]
 8008d2c:	79fb      	ldrb	r3, [r7, #7]
 8008d2e:	4611      	mov	r1, r2
 8008d30:	4618      	mov	r0, r3
 8008d32:	f7ff fae5 	bl	8008300 <SetALStatus>
        }
    }// Pending state transition (bEcatWaitForAlControlRes == true)
}
 8008d36:	bf00      	nop
 8008d38:	3708      	adds	r7, #8
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
 8008d3e:	bf00      	nop
 8008d40:	200006a7 	.word	0x200006a7
 8008d44:	20000686 	.word	0x20000686
 8008d48:	200006a8 	.word	0x200006a8
 8008d4c:	200006a6 	.word	0x200006a6
 8008d50:	200006a2 	.word	0x200006a2
 8008d54:	200006a4 	.word	0x200006a4
 8008d58:	20000684 	.word	0x20000684
 8008d5c:	20000688 	.word	0x20000688
 8008d60:	20000682 	.word	0x20000682
 8008d64:	200006ac 	.word	0x200006ac
 8008d68:	20000680 	.word	0x20000680
 8008d6c:	20000876 	.word	0x20000876
 8008d70:	200006ba 	.word	0x200006ba
 8008d74:	20000681 	.word	0x20000681
 8008d78:	20000690 	.word	0x20000690
 8008d7c:	20000692 	.word	0x20000692

08008d80 <DC_CheckWatchdog>:
 \brief    This function checks the current Sync state and set the local flags
 The analyse of the local flags is handled in "CheckIfEcatError"

*////////////////////////////////////////////////////////////////////////////////////////
void DC_CheckWatchdog(void)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	af00      	add	r7, sp, #0
    DISABLE_ESC_INT();
 8008d84:	f7f8 f826 	bl	8000dd4 <disable_Irq_Sync0_Sync1>
    if(bDcSyncActive)
 8008d88:	4b39      	ldr	r3, [pc, #228]	; (8008e70 <DC_CheckWatchdog+0xf0>)
 8008d8a:	781b      	ldrb	r3, [r3, #0]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d06b      	beq.n	8008e68 <DC_CheckWatchdog+0xe8>
    {
/*ECATCHANGE_START(V5.11) ESM4*/
        /*If Sync0 watchdog is enabled and expired*/
        if((Sync0WdValue > 0) && (Sync0WdCounter >= Sync0WdValue))
 8008d90:	4b38      	ldr	r3, [pc, #224]	; (8008e74 <DC_CheckWatchdog+0xf4>)
 8008d92:	881b      	ldrh	r3, [r3, #0]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d009      	beq.n	8008dac <DC_CheckWatchdog+0x2c>
 8008d98:	4b37      	ldr	r3, [pc, #220]	; (8008e78 <DC_CheckWatchdog+0xf8>)
 8008d9a:	881a      	ldrh	r2, [r3, #0]
 8008d9c:	4b35      	ldr	r3, [pc, #212]	; (8008e74 <DC_CheckWatchdog+0xf4>)
 8008d9e:	881b      	ldrh	r3, [r3, #0]
 8008da0:	429a      	cmp	r2, r3
 8008da2:	d303      	bcc.n	8008dac <DC_CheckWatchdog+0x2c>
        {
                /*Sync0 watchdog expired*/
                bDcRunning = FALSE;        
 8008da4:	4b35      	ldr	r3, [pc, #212]	; (8008e7c <DC_CheckWatchdog+0xfc>)
 8008da6:	2200      	movs	r2, #0
 8008da8:	701a      	strb	r2, [r3, #0]
 8008daa:	e00e      	b.n	8008dca <DC_CheckWatchdog+0x4a>
        }
        else
        {
            if(Sync0WdCounter < Sync0WdValue)
 8008dac:	4b32      	ldr	r3, [pc, #200]	; (8008e78 <DC_CheckWatchdog+0xf8>)
 8008dae:	881a      	ldrh	r2, [r3, #0]
 8008db0:	4b30      	ldr	r3, [pc, #192]	; (8008e74 <DC_CheckWatchdog+0xf4>)
 8008db2:	881b      	ldrh	r3, [r3, #0]
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d205      	bcs.n	8008dc4 <DC_CheckWatchdog+0x44>
            {
                Sync0WdCounter ++;
 8008db8:	4b2f      	ldr	r3, [pc, #188]	; (8008e78 <DC_CheckWatchdog+0xf8>)
 8008dba:	881b      	ldrh	r3, [r3, #0]
 8008dbc:	3301      	adds	r3, #1
 8008dbe:	b29a      	uxth	r2, r3
 8008dc0:	4b2d      	ldr	r3, [pc, #180]	; (8008e78 <DC_CheckWatchdog+0xf8>)
 8008dc2:	801a      	strh	r2, [r3, #0]
            }

            bDcRunning = TRUE;
 8008dc4:	4b2d      	ldr	r3, [pc, #180]	; (8008e7c <DC_CheckWatchdog+0xfc>)
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	701a      	strb	r2, [r3, #0]
        }

        if(bDcRunning)
 8008dca:	4b2c      	ldr	r3, [pc, #176]	; (8008e7c <DC_CheckWatchdog+0xfc>)
 8008dcc:	781b      	ldrb	r3, [r3, #0]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d013      	beq.n	8008dfa <DC_CheckWatchdog+0x7a>
        {
            /*Check the Sync1 cycle if Sync1 Wd is enabled*/
            if(Sync1WdValue > 0)
 8008dd2:	4b2b      	ldr	r3, [pc, #172]	; (8008e80 <DC_CheckWatchdog+0x100>)
 8008dd4:	881b      	ldrh	r3, [r3, #0]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d00f      	beq.n	8008dfa <DC_CheckWatchdog+0x7a>
            {
                if(Sync1WdCounter < Sync1WdValue)
 8008dda:	4b2a      	ldr	r3, [pc, #168]	; (8008e84 <DC_CheckWatchdog+0x104>)
 8008ddc:	881a      	ldrh	r2, [r3, #0]
 8008dde:	4b28      	ldr	r3, [pc, #160]	; (8008e80 <DC_CheckWatchdog+0x100>)
 8008de0:	881b      	ldrh	r3, [r3, #0]
 8008de2:	429a      	cmp	r2, r3
 8008de4:	d206      	bcs.n	8008df4 <DC_CheckWatchdog+0x74>
                {
                    Sync1WdCounter ++;
 8008de6:	4b27      	ldr	r3, [pc, #156]	; (8008e84 <DC_CheckWatchdog+0x104>)
 8008de8:	881b      	ldrh	r3, [r3, #0]
 8008dea:	3301      	adds	r3, #1
 8008dec:	b29a      	uxth	r2, r3
 8008dee:	4b25      	ldr	r3, [pc, #148]	; (8008e84 <DC_CheckWatchdog+0x104>)
 8008df0:	801a      	strh	r2, [r3, #0]
 8008df2:	e002      	b.n	8008dfa <DC_CheckWatchdog+0x7a>
                }
                else
                {
                    /*Sync1 watchdog expired*/
                    bDcRunning = FALSE;
 8008df4:	4b21      	ldr	r3, [pc, #132]	; (8008e7c <DC_CheckWatchdog+0xfc>)
 8008df6:	2200      	movs	r2, #0
 8008df8:	701a      	strb	r2, [r3, #0]
                }
            }
        }
/*ECATCHANGE_END(V5.11) ESM4*/

        if(bDcRunning)
 8008dfa:	4b20      	ldr	r3, [pc, #128]	; (8008e7c <DC_CheckWatchdog+0xfc>)
 8008dfc:	781b      	ldrb	r3, [r3, #0]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d02b      	beq.n	8008e5a <DC_CheckWatchdog+0xda>
        {
/*ECATCHANGE_START(V5.11) COE3*/
           if(sSyncManOutPar.u16SmEventMissedCounter < sErrorSettings.u16SyncErrorCounterLimit)
 8008e02:	4b21      	ldr	r3, [pc, #132]	; (8008e88 <DC_CheckWatchdog+0x108>)
 8008e04:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008e06:	4b21      	ldr	r3, [pc, #132]	; (8008e8c <DC_CheckWatchdog+0x10c>)
 8008e08:	891b      	ldrh	r3, [r3, #8]
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	d211      	bcs.n	8008e32 <DC_CheckWatchdog+0xb2>
/*ECATCHANGE_END(V5.11) COE3*/
            {
                bSmSyncSequenceValid = TRUE;
 8008e0e:	4b20      	ldr	r3, [pc, #128]	; (8008e90 <DC_CheckWatchdog+0x110>)
 8008e10:	2201      	movs	r2, #1
 8008e12:	701a      	strb	r2, [r3, #0]

                /*Wait for PLL is active increment the Pll valid counter*/
                if(i16WaitForPllRunningTimeout > 0)
 8008e14:	4b1f      	ldr	r3, [pc, #124]	; (8008e94 <DC_CheckWatchdog+0x114>)
 8008e16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	dd24      	ble.n	8008e68 <DC_CheckWatchdog+0xe8>
                {
                    i16WaitForPllRunningCnt++;
 8008e1e:	4b1e      	ldr	r3, [pc, #120]	; (8008e98 <DC_CheckWatchdog+0x118>)
 8008e20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e24:	b29b      	uxth	r3, r3
 8008e26:	3301      	adds	r3, #1
 8008e28:	b29b      	uxth	r3, r3
 8008e2a:	b21a      	sxth	r2, r3
 8008e2c:	4b1a      	ldr	r3, [pc, #104]	; (8008e98 <DC_CheckWatchdog+0x118>)
 8008e2e:	801a      	strh	r2, [r3, #0]
 8008e30:	e01a      	b.n	8008e68 <DC_CheckWatchdog+0xe8>
                }
            }
            else if(bSmSyncSequenceValid)
 8008e32:	4b17      	ldr	r3, [pc, #92]	; (8008e90 <DC_CheckWatchdog+0x110>)
 8008e34:	781b      	ldrb	r3, [r3, #0]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d016      	beq.n	8008e68 <DC_CheckWatchdog+0xe8>
            {
                bSmSyncSequenceValid = FALSE;
 8008e3a:	4b15      	ldr	r3, [pc, #84]	; (8008e90 <DC_CheckWatchdog+0x110>)
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	701a      	strb	r2, [r3, #0]
                sSyncManOutPar.u8SyncError = 1;
 8008e40:	4b11      	ldr	r3, [pc, #68]	; (8008e88 <DC_CheckWatchdog+0x108>)
 8008e42:	2201      	movs	r2, #1
 8008e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

                /*Wait for PLL is active reset the Pll valid counter*/
                if(i16WaitForPllRunningTimeout > 0)
 8008e48:	4b12      	ldr	r3, [pc, #72]	; (8008e94 <DC_CheckWatchdog+0x114>)
 8008e4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	dd0a      	ble.n	8008e68 <DC_CheckWatchdog+0xe8>
                {
                    i16WaitForPllRunningCnt = 0;
 8008e52:	4b11      	ldr	r3, [pc, #68]	; (8008e98 <DC_CheckWatchdog+0x118>)
 8008e54:	2200      	movs	r2, #0
 8008e56:	801a      	strh	r2, [r3, #0]
 8008e58:	e006      	b.n	8008e68 <DC_CheckWatchdog+0xe8>
                }
            }
        }
        else if(bSmSyncSequenceValid)
 8008e5a:	4b0d      	ldr	r3, [pc, #52]	; (8008e90 <DC_CheckWatchdog+0x110>)
 8008e5c:	781b      	ldrb	r3, [r3, #0]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d002      	beq.n	8008e68 <DC_CheckWatchdog+0xe8>
        {
            bSmSyncSequenceValid = FALSE;
 8008e62:	4b0b      	ldr	r3, [pc, #44]	; (8008e90 <DC_CheckWatchdog+0x110>)
 8008e64:	2200      	movs	r2, #0
 8008e66:	701a      	strb	r2, [r3, #0]
        }

    }
    ENABLE_ESC_INT();
 8008e68:	f7f7 ffa4 	bl	8000db4 <enable_Irq_Sync0_Sync1>
}
 8008e6c:	bf00      	nop
 8008e6e:	bd80      	pop	{r7, pc}
 8008e70:	20000684 	.word	0x20000684
 8008e74:	20000696 	.word	0x20000696
 8008e78:	20000694 	.word	0x20000694
 8008e7c:	20000688 	.word	0x20000688
 8008e80:	2000069a 	.word	0x2000069a
 8008e84:	20000698 	.word	0x20000698
 8008e88:	20000b08 	.word	0x20000b08
 8008e8c:	20000354 	.word	0x20000354
 8008e90:	2000068e 	.word	0x2000068e
 8008e94:	20000690 	.word	0x20000690
 8008e98:	20000692 	.word	0x20000692

08008e9c <CheckIfEcatError>:

 \brief    Checks communication and synchronisation variables and update AL status / AL status code if an error has occurred

*////////////////////////////////////////////////////////////////////////////////////////
void CheckIfEcatError(void)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b082      	sub	sp, #8
 8008ea0:	af00      	add	r7, sp, #0
   /*if the watchdog is enabled check the the process data watchdog in the ESC
   and set the AL status code 0x1B if the watchdog expired*/
   if (EcatWdValue != 0)
 8008ea2:	4b20      	ldr	r3, [pc, #128]	; (8008f24 <CheckIfEcatError+0x88>)
 8008ea4:	881b      	ldrh	r3, [r3, #0]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d01f      	beq.n	8008eea <CheckIfEcatError+0x4e>
   {
      /*watchdog time is set => watchdog is active*/
      UINT16 WdStatusOK = 0;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	80fb      	strh	r3, [r7, #6]

      HW_EscReadWord(WdStatusOK, ESC_PD_WD_STATE);
 8008eae:	1dbb      	adds	r3, r7, #6
 8008eb0:	2202      	movs	r2, #2
 8008eb2:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f000 fa88 	bl	80093cc <HW_EscRead>
      WdStatusOK = SWAPWORD(WdStatusOK);
 8008ebc:	88fb      	ldrh	r3, [r7, #6]
 8008ebe:	80fb      	strh	r3, [r7, #6]

      /*ECATCHANGE_START(V5.11) ECAT4*/
      if (!(WdStatusOK & ESC_PD_WD_TRIGGER_MASK) && (nPdOutputSize > 0))
 8008ec0:	88fb      	ldrh	r3, [r7, #6]
 8008ec2:	f003 0301 	and.w	r3, r3, #1
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d10f      	bne.n	8008eea <CheckIfEcatError+0x4e>
 8008eca:	4b17      	ldr	r3, [pc, #92]	; (8008f28 <CheckIfEcatError+0x8c>)
 8008ecc:	881b      	ldrh	r3, [r3, #0]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d00b      	beq.n	8008eea <CheckIfEcatError+0x4e>
      {
         /*The device is in OP state*/

         if (bEcatOutputUpdateRunning
 8008ed2:	4b16      	ldr	r3, [pc, #88]	; (8008f2c <CheckIfEcatError+0x90>)
 8008ed4:	781b      	ldrb	r3, [r3, #0]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d004      	beq.n	8008ee4 <CheckIfEcatError+0x48>
            )
         {
            AL_ControlInd(STATE_SAFEOP, ALSTATUSCODE_SMWATCHDOG);
 8008eda:	211b      	movs	r1, #27
 8008edc:	2004      	movs	r0, #4
 8008ede:	f7ff fa45 	bl	800836c <AL_ControlInd>
 8008ee2:	e01c      	b.n	8008f1e <CheckIfEcatError+0x82>
            return;
         }

         else
         {
            bEcatFirstOutputsReceived = FALSE;
 8008ee4:	4b12      	ldr	r3, [pc, #72]	; (8008f30 <CheckIfEcatError+0x94>)
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	701a      	strb	r2, [r3, #0]
         }
      }
      /*ECATCHANGE_END(V5.11) ECAT4*/
   }

   if(bDcSyncActive)
 8008eea:	4b12      	ldr	r3, [pc, #72]	; (8008f34 <CheckIfEcatError+0x98>)
 8008eec:	781b      	ldrb	r3, [r3, #0]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d015      	beq.n	8008f1e <CheckIfEcatError+0x82>
   {
       if(bEcatOutputUpdateRunning)
 8008ef2:	4b0e      	ldr	r3, [pc, #56]	; (8008f2c <CheckIfEcatError+0x90>)
 8008ef4:	781b      	ldrb	r3, [r3, #0]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d011      	beq.n	8008f1e <CheckIfEcatError+0x82>
       {
           /*Slave is in OP state*/
           if(!bDcRunning)
 8008efa:	4b0f      	ldr	r3, [pc, #60]	; (8008f38 <CheckIfEcatError+0x9c>)
 8008efc:	781b      	ldrb	r3, [r3, #0]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d104      	bne.n	8008f0c <CheckIfEcatError+0x70>
           {
               AL_ControlInd(STATE_SAFEOP, ALSTATUSCODE_FATALSYNCERROR);
 8008f02:	212c      	movs	r1, #44	; 0x2c
 8008f04:	2004      	movs	r0, #4
 8008f06:	f7ff fa31 	bl	800836c <AL_ControlInd>
               return;
 8008f0a:	e008      	b.n	8008f1e <CheckIfEcatError+0x82>
           }
           else if(!bSmSyncSequenceValid)
 8008f0c:	4b0b      	ldr	r3, [pc, #44]	; (8008f3c <CheckIfEcatError+0xa0>)
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d104      	bne.n	8008f1e <CheckIfEcatError+0x82>
           {
               AL_ControlInd(STATE_SAFEOP, ALSTATUSCODE_SYNCERROR);
 8008f14:	211a      	movs	r1, #26
 8008f16:	2004      	movs	r0, #4
 8008f18:	f7ff fa28 	bl	800836c <AL_ControlInd>
               return;
 8008f1c:	bf00      	nop
           }
        
       }
   }
}
 8008f1e:	3708      	adds	r7, #8
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}
 8008f24:	200006b4 	.word	0x200006b4
 8008f28:	200006ac 	.word	0x200006ac
 8008f2c:	20000680 	.word	0x20000680
 8008f30:	20000682 	.word	0x20000682
 8008f34:	20000684 	.word	0x20000684
 8008f38:	20000688 	.word	0x20000688
 8008f3c:	2000068e 	.word	0x2000068e

08008f40 <ECAT_Init>:

 \brief    This function initialize the EtherCAT Slave Interface.
*////////////////////////////////////////////////////////////////////////////////////////

void ECAT_Init(void)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b082      	sub	sp, #8
 8008f44:	af00      	add	r7, sp, #0
    UINT8 i;

    /*Get Maximum Number of SyncManagers and supported DPRAM size*/
    {
    UINT16 TmpVar = 0;
 8008f46:	2300      	movs	r3, #0
 8008f48:	80bb      	strh	r3, [r7, #4]

    HW_EscReadWord(TmpVar, ESC_COMM_INFO_OFFSET);
 8008f4a:	1d3b      	adds	r3, r7, #4
 8008f4c:	2202      	movs	r2, #2
 8008f4e:	2104      	movs	r1, #4
 8008f50:	4618      	mov	r0, r3
 8008f52:	f000 fa3b 	bl	80093cc <HW_EscRead>

    TmpVar = SWAPWORD(TmpVar);
 8008f56:	88bb      	ldrh	r3, [r7, #4]
 8008f58:	80bb      	strh	r3, [r7, #4]
    nMaxSyncMan = (UINT8) ((TmpVar & ESC_SM_CHANNELS_MASK)>> ESC_SM_CHANNELS_SHIFT);
 8008f5a:	88bb      	ldrh	r3, [r7, #4]
 8008f5c:	0a1b      	lsrs	r3, r3, #8
 8008f5e:	b29b      	uxth	r3, r3
 8008f60:	b2da      	uxtb	r2, r3
 8008f62:	4b36      	ldr	r3, [pc, #216]	; (800903c <ECAT_Init+0xfc>)
 8008f64:	701a      	strb	r2, [r3, #0]

    HW_EscReadWord(TmpVar, ESC_DPRAM_SIZE_OFFSET);
 8008f66:	1d3b      	adds	r3, r7, #4
 8008f68:	2202      	movs	r2, #2
 8008f6a:	2106      	movs	r1, #6
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f000 fa2d 	bl	80093cc <HW_EscRead>
    TmpVar = SWAPWORD(TmpVar);
 8008f72:	88bb      	ldrh	r3, [r7, #4]
 8008f74:	80bb      	strh	r3, [r7, #4]

    //get max address (register + DPRAM size in Byte (in the register it is stored in KB))
    /* ECATCHANGE_START(V5.11) ESC1*/
    nMaxEscAddress = (UINT16) ((TmpVar & ESC_DPRAM_SIZE_MASK) << 10) + 0xFFF;
 8008f76:	88bb      	ldrh	r3, [r7, #4]
 8008f78:	029b      	lsls	r3, r3, #10
 8008f7a:	b29b      	uxth	r3, r3
 8008f7c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8008f80:	b29a      	uxth	r2, r3
 8008f82:	4b2f      	ldr	r3, [pc, #188]	; (8009040 <ECAT_Init+0x100>)
 8008f84:	801a      	strh	r2, [r3, #0]
    /* ECATCHANGE_END(V5.11) ESC1*/
    }

    /* Get EEPROM loaded information */
    UpdateEEPROMLoadedState();
 8008f86:	f7fe faa7 	bl	80074d8 <UpdateEEPROMLoadedState>

    /* disable all Sync Manager channels */
    for (i = 0; i < nMaxSyncMan; i++)
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	71fb      	strb	r3, [r7, #7]
 8008f8e:	e006      	b.n	8008f9e <ECAT_Init+0x5e>
    {
/*ECATCHANGE_START(V5.11) HW1*/
        DisableSyncManChannel(i);
 8008f90:	79fb      	ldrb	r3, [r7, #7]
 8008f92:	4618      	mov	r0, r3
 8008f94:	f7fe fade 	bl	8007554 <DisableSyncManChannel>
    for (i = 0; i < nMaxSyncMan; i++)
 8008f98:	79fb      	ldrb	r3, [r7, #7]
 8008f9a:	3301      	adds	r3, #1
 8008f9c:	71fb      	strb	r3, [r7, #7]
 8008f9e:	4b27      	ldr	r3, [pc, #156]	; (800903c <ECAT_Init+0xfc>)
 8008fa0:	781b      	ldrb	r3, [r3, #0]
 8008fa2:	79fa      	ldrb	r2, [r7, #7]
 8008fa4:	429a      	cmp	r2, r3
 8008fa6:	d3f3      	bcc.n	8008f90 <ECAT_Init+0x50>
/*ECATCHANGE_END(V5.11) HW1*/
    }

    /* initialize the mailbox handler */
    MBX_Init();
 8008fa8:	f000 fe42 	bl	8009c30 <MBX_Init>

    /* initialize variables */
    bApplEsmPending = FALSE;
 8008fac:	4b25      	ldr	r3, [pc, #148]	; (8009044 <ECAT_Init+0x104>)
 8008fae:	2200      	movs	r2, #0
 8008fb0:	701a      	strb	r2, [r3, #0]
    bEcatWaitForAlControlRes = FALSE;
 8008fb2:	4b25      	ldr	r3, [pc, #148]	; (8009048 <ECAT_Init+0x108>)
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	701a      	strb	r2, [r3, #0]
    bEcatFirstOutputsReceived = FALSE;
 8008fb8:	4b24      	ldr	r3, [pc, #144]	; (800904c <ECAT_Init+0x10c>)
 8008fba:	2200      	movs	r2, #0
 8008fbc:	701a      	strb	r2, [r3, #0]
     bEcatOutputUpdateRunning = FALSE;
 8008fbe:	4b24      	ldr	r3, [pc, #144]	; (8009050 <ECAT_Init+0x110>)
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	701a      	strb	r2, [r3, #0]
     bEcatInputUpdateRunning = FALSE;
 8008fc4:	4b23      	ldr	r3, [pc, #140]	; (8009054 <ECAT_Init+0x114>)
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	701a      	strb	r2, [r3, #0]
    bWdTrigger = FALSE;
 8008fca:	4b23      	ldr	r3, [pc, #140]	; (8009058 <ECAT_Init+0x118>)
 8008fcc:	2200      	movs	r2, #0
 8008fce:	701a      	strb	r2, [r3, #0]
    EcatWdValue = 0;
 8008fd0:	4b22      	ldr	r3, [pc, #136]	; (800905c <ECAT_Init+0x11c>)
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	801a      	strh	r2, [r3, #0]
    Sync0WdCounter = 0;
 8008fd6:	4b22      	ldr	r3, [pc, #136]	; (8009060 <ECAT_Init+0x120>)
 8008fd8:	2200      	movs	r2, #0
 8008fda:	801a      	strh	r2, [r3, #0]
    Sync0WdValue = 0;
 8008fdc:	4b21      	ldr	r3, [pc, #132]	; (8009064 <ECAT_Init+0x124>)
 8008fde:	2200      	movs	r2, #0
 8008fe0:	801a      	strh	r2, [r3, #0]
    Sync1WdCounter = 0;
 8008fe2:	4b21      	ldr	r3, [pc, #132]	; (8009068 <ECAT_Init+0x128>)
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	801a      	strh	r2, [r3, #0]
    Sync1WdValue = 0;
 8008fe8:	4b20      	ldr	r3, [pc, #128]	; (800906c <ECAT_Init+0x12c>)
 8008fea:	2200      	movs	r2, #0
 8008fec:	801a      	strh	r2, [r3, #0]
    bDcSyncActive = FALSE;
 8008fee:	4b20      	ldr	r3, [pc, #128]	; (8009070 <ECAT_Init+0x130>)
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	701a      	strb	r2, [r3, #0]
    bLocalErrorFlag = FALSE;
 8008ff4:	4b1f      	ldr	r3, [pc, #124]	; (8009074 <ECAT_Init+0x134>)
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	701a      	strb	r2, [r3, #0]
    u16LocalErrorCode = 0x00;
 8008ffa:	4b1f      	ldr	r3, [pc, #124]	; (8009078 <ECAT_Init+0x138>)
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	801a      	strh	r2, [r3, #0]

    u16ALEventMask = 0;
 8009000:	4b1e      	ldr	r3, [pc, #120]	; (800907c <ECAT_Init+0x13c>)
 8009002:	2200      	movs	r2, #0
 8009004:	801a      	strh	r2, [r3, #0]
    nPdOutputSize = 0;
 8009006:	4b1e      	ldr	r3, [pc, #120]	; (8009080 <ECAT_Init+0x140>)
 8009008:	2200      	movs	r2, #0
 800900a:	801a      	strh	r2, [r3, #0]
    nPdInputSize = 0;
 800900c:	4b1d      	ldr	r3, [pc, #116]	; (8009084 <ECAT_Init+0x144>)
 800900e:	2200      	movs	r2, #0
 8009010:	801a      	strh	r2, [r3, #0]

    /* initialize the AL Status register */
    nAlStatus    = STATE_INIT;
 8009012:	4b1d      	ldr	r3, [pc, #116]	; (8009088 <ECAT_Init+0x148>)
 8009014:	2201      	movs	r2, #1
 8009016:	701a      	strb	r2, [r3, #0]
    SetALStatus(nAlStatus, 0);
 8009018:	4b1b      	ldr	r3, [pc, #108]	; (8009088 <ECAT_Init+0x148>)
 800901a:	781b      	ldrb	r3, [r3, #0]
 800901c:	2100      	movs	r1, #0
 800901e:	4618      	mov	r0, r3
 8009020:	f7ff f96e 	bl	8008300 <SetALStatus>
    nEcatStateTrans = 0;
 8009024:	4b19      	ldr	r3, [pc, #100]	; (800908c <ECAT_Init+0x14c>)
 8009026:	2200      	movs	r2, #0
 8009028:	801a      	strh	r2, [r3, #0]

/* ECATCHANGE_START(V5.11) ECAT5*/
    bEscIntEnabled = FALSE;
 800902a:	4b19      	ldr	r3, [pc, #100]	; (8009090 <ECAT_Init+0x150>)
 800902c:	2200      	movs	r2, #0
 800902e:	701a      	strb	r2, [r3, #0]
/* ECATCHANGE_END(V5.11) ECAT5*/

    /* initialize the COE part */
    COE_Init();
 8009030:	f7fd fcaa 	bl	8006988 <COE_Init>
}
 8009034:	bf00      	nop
 8009036:	3708      	adds	r7, #8
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}
 800903c:	200006ae 	.word	0x200006ae
 8009040:	200006b0 	.word	0x200006b0
 8009044:	200006a6 	.word	0x200006a6
 8009048:	200006a7 	.word	0x200006a7
 800904c:	20000682 	.word	0x20000682
 8009050:	20000680 	.word	0x20000680
 8009054:	20000681 	.word	0x20000681
 8009058:	20000683 	.word	0x20000683
 800905c:	200006b4 	.word	0x200006b4
 8009060:	20000694 	.word	0x20000694
 8009064:	20000696 	.word	0x20000696
 8009068:	20000698 	.word	0x20000698
 800906c:	2000069a 	.word	0x2000069a
 8009070:	20000684 	.word	0x20000684
 8009074:	200006a2 	.word	0x200006a2
 8009078:	200006a4 	.word	0x200006a4
 800907c:	200006ba 	.word	0x200006ba
 8009080:	200006ac 	.word	0x200006ac
 8009084:	200006aa 	.word	0x200006aa
 8009088:	200006b2 	.word	0x200006b2
 800908c:	200006a8 	.word	0x200006a8
 8009090:	200006a0 	.word	0x200006a0

08009094 <ECAT_Main>:
/**
 \brief        This function has to be called cyclically.
*////////////////////////////////////////////////////////////////////////////////////////

void ECAT_Main(void)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b082      	sub	sp, #8
 8009098:	af00      	add	r7, sp, #0
    UINT16 ALEventReg;
    UINT16 EscAlControl = 0x0000;
 800909a:	2300      	movs	r3, #0
 800909c:	80bb      	strh	r3, [r7, #4]
    UINT16 sm1Activate = SM_SETTING_ENABLE_VALUE;
 800909e:	2301      	movs	r3, #1
 80090a0:	807b      	strh	r3, [r7, #2]

    /* check if services are stored in the mailbox */
    MBX_Main();
 80090a2:	f001 fa5b 	bl	800a55c <MBX_Main>


    if ( bMbxRunning )
 80090a6:	4b5d      	ldr	r3, [pc, #372]	; (800921c <ECAT_Main+0x188>)
 80090a8:	781b      	ldrb	r3, [r3, #0]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d008      	beq.n	80090c0 <ECAT_Main+0x2c>
    {
        /* Slave is at least in PREOP, Mailbox is running */
        /* get the Activate-Byte of SM 1 (Register 0x80E) to check if a mailbox repeat request was received */
        HW_EscReadWord(sm1Activate,(ESC_SYNCMAN_ACTIVE_OFFSET + SIZEOF_SM_REGISTER));
 80090ae:	1cbb      	adds	r3, r7, #2
 80090b0:	2202      	movs	r2, #2
 80090b2:	f640 010e 	movw	r1, #2062	; 0x80e
 80090b6:	4618      	mov	r0, r3
 80090b8:	f000 f988 	bl	80093cc <HW_EscRead>
        sm1Activate = SWAPWORD(sm1Activate);
 80090bc:	887b      	ldrh	r3, [r7, #2]
 80090be:	807b      	strh	r3, [r7, #2]
    }

    /* Read AL Event-Register from ESC */
    ALEventReg = HW_GetALEventRegister();
 80090c0:	f000 f970 	bl	80093a4 <HW_GetALEventRegister>
 80090c4:	4603      	mov	r3, r0
 80090c6:	80fb      	strh	r3, [r7, #6]
    ALEventReg = SWAPWORD(ALEventReg);


    if ((ALEventReg & AL_CONTROL_EVENT) && !bEcatWaitForAlControlRes)
 80090c8:	88fb      	ldrh	r3, [r7, #6]
 80090ca:	f003 0301 	and.w	r3, r3, #1
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d016      	beq.n	8009100 <ECAT_Main+0x6c>
 80090d2:	4b53      	ldr	r3, [pc, #332]	; (8009220 <ECAT_Main+0x18c>)
 80090d4:	781b      	ldrb	r3, [r3, #0]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d112      	bne.n	8009100 <ECAT_Main+0x6c>
    {
        /* AL Control event is set, get the AL Control register sent by the Master to acknowledge the event
          (that the corresponding bit in the AL Event register will be reset) */
        HW_EscReadWord( EscAlControl, ESC_AL_CONTROL_OFFSET);
 80090da:	1d3b      	adds	r3, r7, #4
 80090dc:	2202      	movs	r2, #2
 80090de:	f44f 7190 	mov.w	r1, #288	; 0x120
 80090e2:	4618      	mov	r0, r3
 80090e4:	f000 f972 	bl	80093cc <HW_EscRead>
        EscAlControl = SWAPWORD(EscAlControl);
 80090e8:	88bb      	ldrh	r3, [r7, #4]
 80090ea:	80bb      	strh	r3, [r7, #4]


        /* reset AL Control event and the SM Change event (because the Sync Manager settings will be checked
           in AL_ControlInd, too)*/
        ALEventReg &= ~((AL_CONTROL_EVENT) | (SM_CHANGE_EVENT));
 80090ec:	88fb      	ldrh	r3, [r7, #6]
 80090ee:	f023 0311 	bic.w	r3, r3, #17
 80090f2:	80fb      	strh	r3, [r7, #6]

        AL_ControlInd((UINT8)EscAlControl, 0); /* in AL_ControlInd the state transition will be checked and done */
 80090f4:	88bb      	ldrh	r3, [r7, #4]
 80090f6:	b2db      	uxtb	r3, r3
 80090f8:	2100      	movs	r1, #0
 80090fa:	4618      	mov	r0, r3
 80090fc:	f7ff f936 	bl	800836c <AL_ControlInd>
        
        /* SM-Change-Event was handled too */
    }

    if ( (ALEventReg & SM_CHANGE_EVENT) && !bEcatWaitForAlControlRes && (nAlStatus & STATE_CHANGE) == 0 && (nAlStatus & ~STATE_CHANGE) != STATE_INIT )
 8009100:	88fb      	ldrh	r3, [r7, #6]
 8009102:	f003 0310 	and.w	r3, r3, #16
 8009106:	2b00      	cmp	r3, #0
 8009108:	d01c      	beq.n	8009144 <ECAT_Main+0xb0>
 800910a:	4b45      	ldr	r3, [pc, #276]	; (8009220 <ECAT_Main+0x18c>)
 800910c:	781b      	ldrb	r3, [r3, #0]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d118      	bne.n	8009144 <ECAT_Main+0xb0>
 8009112:	4b44      	ldr	r3, [pc, #272]	; (8009224 <ECAT_Main+0x190>)
 8009114:	781b      	ldrb	r3, [r3, #0]
 8009116:	f003 0310 	and.w	r3, r3, #16
 800911a:	2b00      	cmp	r3, #0
 800911c:	d112      	bne.n	8009144 <ECAT_Main+0xb0>
 800911e:	4b41      	ldr	r3, [pc, #260]	; (8009224 <ECAT_Main+0x190>)
 8009120:	781b      	ldrb	r3, [r3, #0]
 8009122:	f023 0310 	bic.w	r3, r3, #16
 8009126:	2b01      	cmp	r3, #1
 8009128:	d00c      	beq.n	8009144 <ECAT_Main+0xb0>
    {
        /* the SM Change event is set (Bit 4 of Register 0x220), when the Byte 6 (Enable, Lo-Byte of Register 0x806, 0x80E, 0x816,...)
           of a Sync Manager channel was written */
        ALEventReg &= ~(SM_CHANGE_EVENT);
 800912a:	88fb      	ldrh	r3, [r7, #6]
 800912c:	f023 0310 	bic.w	r3, r3, #16
 8009130:	80fb      	strh	r3, [r7, #6]

        /* AL_ControlInd is called with the actual state, so that the correct SM settings will be checked */
        AL_ControlInd(nAlStatus & STATE_MASK, 0);
 8009132:	4b3c      	ldr	r3, [pc, #240]	; (8009224 <ECAT_Main+0x190>)
 8009134:	781b      	ldrb	r3, [r3, #0]
 8009136:	f003 030f 	and.w	r3, r3, #15
 800913a:	b2db      	uxtb	r3, r3
 800913c:	2100      	movs	r1, #0
 800913e:	4618      	mov	r0, r3
 8009140:	f7ff f914 	bl	800836c <AL_ControlInd>
    }

    if(bEcatWaitForAlControlRes)
 8009144:	4b36      	ldr	r3, [pc, #216]	; (8009220 <ECAT_Main+0x18c>)
 8009146:	781b      	ldrb	r3, [r3, #0]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d001      	beq.n	8009150 <ECAT_Main+0xbc>
    {
        AL_ControlRes();
 800914c:	f7ff fcbe 	bl	8008acc <AL_ControlRes>
        The SM1 activate Byte (Register 0x80E) was read before reading AL Event register.
        1. Handle Mailbox Read event
        2. Handle repeat toggle request
        3. Handle Mailbox write event
    */
    if ( bMbxRunning )
 8009150:	4b32      	ldr	r3, [pc, #200]	; (800921c <ECAT_Main+0x188>)
 8009152:	781b      	ldrb	r3, [r3, #0]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d05d      	beq.n	8009214 <ECAT_Main+0x180>
    {
        /*SnycManger change event (0x220:4) could be acknowledged by reading the SM1 control register without notification to the local application
        => check if the SyncManger 1 is still enabled*/
        if(!(sm1Activate & SM_SETTING_ENABLE_VALUE))
 8009158:	887b      	ldrh	r3, [r7, #2]
 800915a:	f003 0301 	and.w	r3, r3, #1
 800915e:	2b00      	cmp	r3, #0
 8009160:	d108      	bne.n	8009174 <ECAT_Main+0xe0>
            AL_ControlInd(nAlStatus & STATE_MASK, 0);
 8009162:	4b30      	ldr	r3, [pc, #192]	; (8009224 <ECAT_Main+0x190>)
 8009164:	781b      	ldrb	r3, [r3, #0]
 8009166:	f003 030f 	and.w	r3, r3, #15
 800916a:	b2db      	uxtb	r3, r3
 800916c:	2100      	movs	r1, #0
 800916e:	4618      	mov	r0, r3
 8009170:	f7ff f8fc 	bl	800836c <AL_ControlInd>

        if ( ALEventReg & (MAILBOX_READ_EVENT) )
 8009174:	88fb      	ldrh	r3, [r7, #6]
 8009176:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800917a:	2b00      	cmp	r3, #0
 800917c:	d00f      	beq.n	800919e <ECAT_Main+0x10a>
        {
            /* SM 1 (Mailbox Read) event is set, when the mailbox was read from the master,
               to acknowledge the event the first byte of the mailbox has to be written,
               by writing the first byte the mailbox is locked, too */
            u16dummy = 0;
 800917e:	4b2a      	ldr	r3, [pc, #168]	; (8009228 <ECAT_Main+0x194>)
 8009180:	2200      	movs	r2, #0
 8009182:	801a      	strh	r2, [r3, #0]
            HW_EscWriteWord(u16dummy,u16EscAddrSendMbx);
 8009184:	4b29      	ldr	r3, [pc, #164]	; (800922c <ECAT_Main+0x198>)
 8009186:	881b      	ldrh	r3, [r3, #0]
 8009188:	2202      	movs	r2, #2
 800918a:	4619      	mov	r1, r3
 800918c:	4826      	ldr	r0, [pc, #152]	; (8009228 <ECAT_Main+0x194>)
 800918e:	f000 f979 	bl	8009484 <HW_EscWrite>

            /* the Mailbox Read event in the variable ALEventReg shall be reset before calling
               MBX_MailboxReadInd, where a new mailbox datagram (if available) could be stored in the send mailbox */
            ALEventReg &= ~(MAILBOX_READ_EVENT);
 8009192:	88fb      	ldrh	r3, [r7, #6]
 8009194:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009198:	80fb      	strh	r3, [r7, #6]
            MBX_MailboxReadInd();
 800919a:	f000 ff7b 	bl	800a094 <MBX_MailboxReadInd>
        }

        DISABLE_MBX_INT;
        /* bMbxRepeatToggle holds the last state of the Repeat Bit (Bit 1) */

        if ( ( (sm1Activate & SM_SETTING_REPAET_REQ_MASK) && !bMbxRepeatToggle )
 800919e:	887b      	ldrh	r3, [r7, #2]
 80091a0:	f003 0302 	and.w	r3, r3, #2
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d003      	beq.n	80091b0 <ECAT_Main+0x11c>
 80091a8:	4b21      	ldr	r3, [pc, #132]	; (8009230 <ECAT_Main+0x19c>)
 80091aa:	781b      	ldrb	r3, [r3, #0]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d008      	beq.n	80091c2 <ECAT_Main+0x12e>
            ||( !(sm1Activate & SM_SETTING_REPAET_REQ_MASK) && bMbxRepeatToggle ))
 80091b0:	887b      	ldrh	r3, [r7, #2]
 80091b2:	f003 0302 	and.w	r3, r3, #2
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d11d      	bne.n	80091f6 <ECAT_Main+0x162>
 80091ba:	4b1d      	ldr	r3, [pc, #116]	; (8009230 <ECAT_Main+0x19c>)
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d019      	beq.n	80091f6 <ECAT_Main+0x162>
        {
            /* Repeat Bit (Bit 1) has toggled, there is a repeat request, in MBX_MailboxRepeatReq the correct
               response will put in the send mailbox again */
            MBX_MailboxRepeatReq();
 80091c2:	f000 fff5 	bl	800a1b0 <MBX_MailboxRepeatReq>
            /* acknowledge the repeat request after the send mailbox was updated by writing the Repeat Bit
               in the Repeat Ack Bit (Bit 1) of the PDI Ctrl-Byte of SM 1 (Register 0x80F) */
            if(bMbxRepeatToggle)
 80091c6:	4b1a      	ldr	r3, [pc, #104]	; (8009230 <ECAT_Main+0x19c>)
 80091c8:	781b      	ldrb	r3, [r3, #0]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d005      	beq.n	80091da <ECAT_Main+0x146>
                sm1Activate |= SM_SETTING_REPEAT_ACK; //set repeat acknowledge bit (bit 9)
 80091ce:	887b      	ldrh	r3, [r7, #2]
 80091d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80091d4:	b29b      	uxth	r3, r3
 80091d6:	807b      	strh	r3, [r7, #2]
 80091d8:	e004      	b.n	80091e4 <ECAT_Main+0x150>
            else
                sm1Activate &= ~SM_SETTING_REPEAT_ACK; //clear repeat acknowledge bit (bit 9)
 80091da:	887b      	ldrh	r3, [r7, #2]
 80091dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80091e0:	b29b      	uxth	r3, r3
 80091e2:	807b      	strh	r3, [r7, #2]

            sm1Activate = SWAPWORD(sm1Activate);
 80091e4:	887b      	ldrh	r3, [r7, #2]
 80091e6:	807b      	strh	r3, [r7, #2]
            HW_EscWriteWord(sm1Activate,(ESC_SYNCMAN_ACTIVE_OFFSET + SIZEOF_SM_REGISTER));
 80091e8:	1cbb      	adds	r3, r7, #2
 80091ea:	2202      	movs	r2, #2
 80091ec:	f640 010e 	movw	r1, #2062	; 0x80e
 80091f0:	4618      	mov	r0, r3
 80091f2:	f000 f947 	bl	8009484 <HW_EscWrite>
        }
        ENABLE_MBX_INT;

        /* Reload the AlEvent because it may be changed due to a SM disable, enable in case of an repeat request */
        ALEventReg = HW_GetALEventRegister();
 80091f6:	f000 f8d5 	bl	80093a4 <HW_GetALEventRegister>
 80091fa:	4603      	mov	r3, r0
 80091fc:	80fb      	strh	r3, [r7, #6]
        ALEventReg = SWAPWORD(ALEventReg);

        if ( ALEventReg & (MAILBOX_WRITE_EVENT) )
 80091fe:	88fb      	ldrh	r3, [r7, #6]
 8009200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009204:	2b00      	cmp	r3, #0
 8009206:	d005      	beq.n	8009214 <ECAT_Main+0x180>
            /* SM 0 (Mailbox Write) event is set, when the mailbox was written from the master,
               to acknowledge the event the first byte of the mailbox has to be read,
               which will be done in MBX_CheckAndCopyMailbox */
            /* the Mailbox Write event in the variable ALEventReg shall be reset before calling
               MBX_CheckAndCopyMailbox, where the received mailbox datagram will be processed */
            ALEventReg &= ~(MAILBOX_WRITE_EVENT);
 8009208:	88fb      	ldrh	r3, [r7, #6]
 800920a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800920e:	80fb      	strh	r3, [r7, #6]
            MBX_CheckAndCopyMailbox();
 8009210:	f001 f878 	bl	800a304 <MBX_CheckAndCopyMailbox>

        }
    }
}
 8009214:	bf00      	nop
 8009216:	3708      	adds	r7, #8
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}
 800921c:	20000876 	.word	0x20000876
 8009220:	200006a7 	.word	0x200006a7
 8009224:	200006b2 	.word	0x200006b2
 8009228:	200006bc 	.word	0x200006bc
 800922c:	2000087e 	.word	0x2000087e
 8009230:	20000877 	.word	0x20000877

08009234 <GetInterruptRegister>:

        The first two bytes of an access to the EtherCAT ASIC always deliver the AL_Event register (0x220).
        It will be saved in the global "EscALEvent"
*////////////////////////////////////////////////////////////////////////////////////////
static void GetInterruptRegister(void)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8009238:	b672      	cpsid	i
}
 800923a:	bf00      	nop
    DISABLE_AL_EVENT_INT;

    /* select the SPI */
    SELECT_SPI;
 800923c:	f7f7 fd7e 	bl	8000d3c <spi_Select>

//	HW_EscRead( (UINT16 *)(&EscALEvent.Byte[0] ), 0x220, 2 );

    EscALEvent.Byte[0] = WR_CMD((UINT8) (0xFF >> 5));
 8009240:	2007      	movs	r0, #7
 8009242:	f7f7 fd65 	bl	8000d10 <WR_CMD>
 8009246:	4603      	mov	r3, r0
 8009248:	b2da      	uxtb	r2, r3
 800924a:	4b07      	ldr	r3, [pc, #28]	; (8009268 <GetInterruptRegister+0x34>)
 800924c:	701a      	strb	r2, [r3, #0]
    EscALEvent.Byte[1] = WR_CMD((UINT8) (((0xFF & 0x1F) << 3) | ESC_RD));
 800924e:	20fa      	movs	r0, #250	; 0xfa
 8009250:	f7f7 fd5e 	bl	8000d10 <WR_CMD>
 8009254:	4603      	mov	r3, r0
 8009256:	b2da      	uxtb	r2, r3
 8009258:	4b03      	ldr	r3, [pc, #12]	; (8009268 <GetInterruptRegister+0x34>)
 800925a:	705a      	strb	r2, [r3, #1]
//	WR_CMD(0xFF);
    /* if the SPI transmission rate is higher than 15 MBaud, the Busy detection shall be
       done here */

    DESELECT_SPI;
 800925c:	f7f7 fd7a 	bl	8000d54 <spi_Deselect>
  __ASM volatile ("cpsie i" : : : "memory");
 8009260:	b662      	cpsie	i
}
 8009262:	bf00      	nop

    ENABLE_AL_EVENT_INT;
}
 8009264:	bf00      	nop
 8009266:	bd80      	pop	{r7, pc}
 8009268:	200006cc 	.word	0x200006cc

0800926c <ISR_GetInterruptRegister>:

        The first two bytes of an access to the EtherCAT ASIC always deliver the AL_Event register (0x220).
        It will be saved in the global "EscALEvent"
*////////////////////////////////////////////////////////////////////////////////////////
static void ISR_GetInterruptRegister(void)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	af00      	add	r7, sp, #0
    /* SPI should be deactivated to interrupt a possible transmission */
    DESELECT_SPI
 8009270:	f7f7 fd70 	bl	8000d54 <spi_Deselect>

    /* select the SPI */
    SELECT_SPI;
 8009274:	f7f7 fd62 	bl	8000d3c <spi_Select>

//		HW_EscRead( (UINT16 *)(&EscALEvent.Byte[0] ), 0x220, 2 );

	EscALEvent.Byte[0] = WR_CMD(0x00);
 8009278:	2000      	movs	r0, #0
 800927a:	f7f7 fd49 	bl	8000d10 <WR_CMD>
 800927e:	4603      	mov	r3, r0
 8009280:	b2da      	uxtb	r2, r3
 8009282:	4b06      	ldr	r3, [pc, #24]	; (800929c <ISR_GetInterruptRegister+0x30>)
 8009284:	701a      	strb	r2, [r3, #0]
	EscALEvent.Byte[1] = WR_CMD(0x00);
 8009286:	2000      	movs	r0, #0
 8009288:	f7f7 fd42 	bl	8000d10 <WR_CMD>
 800928c:	4603      	mov	r3, r0
 800928e:	b2da      	uxtb	r2, r3
 8009290:	4b02      	ldr	r3, [pc, #8]	; (800929c <ISR_GetInterruptRegister+0x30>)
 8009292:	705a      	strb	r2, [r3, #1]

  /* if the SPI transmission rate is higher than 15 MBaud, the Busy detection shall be
       done here */

    DESELECT_SPI;
 8009294:	f7f7 fd5e 	bl	8000d54 <spi_Deselect>
}
 8009298:	bf00      	nop
 800929a:	bd80      	pop	{r7, pc}
 800929c:	200006cc 	.word	0x200006cc

080092a0 <AddressingEsc>:
 \param Command    ESC_WR performs a write access; ESC_RD performs a read access.

 \brief The function addresses the EtherCAT ASIC via SPI for a following SPI access.
*////////////////////////////////////////////////////////////////////////////////////////
static void AddressingEsc( UINT16 Address, UINT8 Command )
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b084      	sub	sp, #16
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	4603      	mov	r3, r0
 80092a8:	460a      	mov	r2, r1
 80092aa:	80fb      	strh	r3, [r7, #6]
 80092ac:	4613      	mov	r3, r2
 80092ae:	717b      	strb	r3, [r7, #5]
    UBYTETOWORD tmp;
    VARVOLATILE UINT8 dummy;
    tmp.Word = ( Address << 3 ) | Command;
 80092b0:	88fb      	ldrh	r3, [r7, #6]
 80092b2:	00db      	lsls	r3, r3, #3
 80092b4:	b21a      	sxth	r2, r3
 80092b6:	797b      	ldrb	r3, [r7, #5]
 80092b8:	b21b      	sxth	r3, r3
 80092ba:	4313      	orrs	r3, r2
 80092bc:	b21b      	sxth	r3, r3
 80092be:	b29b      	uxth	r3, r3
 80092c0:	81bb      	strh	r3, [r7, #12]
    /* select the SPI */
    SELECT_SPI;
 80092c2:	f7f7 fd3b 	bl	8000d3c <spi_Select>

    /* there have to be at least 15 ns after the SPI1_SEL signal was active (0) before
       the transmission shall be started */
    /* send the first address/command byte to the ESC */

	dummy = 	WR_CMD(tmp.Byte[1]);
 80092c6:	7b7b      	ldrb	r3, [r7, #13]
 80092c8:	4618      	mov	r0, r3
 80092ca:	f7f7 fd21 	bl	8000d10 <WR_CMD>
 80092ce:	4603      	mov	r3, r0
 80092d0:	b2db      	uxtb	r3, r3
 80092d2:	72fb      	strb	r3, [r7, #11]

    /* send the second address/command byte to the ESC */

	dummy =	WR_CMD(tmp.Byte[0]);
 80092d4:	7b3b      	ldrb	r3, [r7, #12]
 80092d6:	4618      	mov	r0, r3
 80092d8:	f7f7 fd1a 	bl	8000d10 <WR_CMD>
 80092dc:	4603      	mov	r3, r0
 80092de:	b2db      	uxtb	r3, r3
 80092e0:	72fb      	strb	r3, [r7, #11]

    /* if the SPI transmission rate is higher than 15 MBaud, the Busy detection shall be
       done here */
}
 80092e2:	bf00      	nop
 80092e4:	3710      	adds	r7, #16
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}

080092ea <ISR_AddressingEsc>:

 \brief The function addresses the EtherCAT ASIC via SPI for a following SPI access.
        Shall be implemented if interrupts are supported else this function is equal to "AddressingEsc()"
*////////////////////////////////////////////////////////////////////////////////////////
static void ISR_AddressingEsc( UINT16 Address, UINT8 Command )
{
 80092ea:	b580      	push	{r7, lr}
 80092ec:	b084      	sub	sp, #16
 80092ee:	af00      	add	r7, sp, #0
 80092f0:	4603      	mov	r3, r0
 80092f2:	460a      	mov	r2, r1
 80092f4:	80fb      	strh	r3, [r7, #6]
 80092f6:	4613      	mov	r3, r2
 80092f8:	717b      	strb	r3, [r7, #5]
    VARVOLATILE UINT8 dummy;
    UBYTETOWORD tmp;
    tmp.Word = ( Address << 3 ) | Command;
 80092fa:	88fb      	ldrh	r3, [r7, #6]
 80092fc:	00db      	lsls	r3, r3, #3
 80092fe:	b21a      	sxth	r2, r3
 8009300:	797b      	ldrb	r3, [r7, #5]
 8009302:	b21b      	sxth	r3, r3
 8009304:	4313      	orrs	r3, r2
 8009306:	b21b      	sxth	r3, r3
 8009308:	b29b      	uxth	r3, r3
 800930a:	81bb      	strh	r3, [r7, #12]

    /* select the SPI */
    SELECT_SPI;
 800930c:	f7f7 fd16 	bl	8000d3c <spi_Select>

    /* there have to be at least 15 ns after the SPI1_SEL signal was active (0) before
      the transmission shall be started */

    /* send the first address/command byte to the ESC */
	dummy= WR_CMD(tmp.Byte[1]);
 8009310:	7b7b      	ldrb	r3, [r7, #13]
 8009312:	4618      	mov	r0, r3
 8009314:	f7f7 fcfc 	bl	8000d10 <WR_CMD>
 8009318:	4603      	mov	r3, r0
 800931a:	b2db      	uxtb	r3, r3
 800931c:	73fb      	strb	r3, [r7, #15]

   /* send the second address/command byte to the ESC */

	dummy= WR_CMD(tmp.Byte[0]);
 800931e:	7b3b      	ldrb	r3, [r7, #12]
 8009320:	4618      	mov	r0, r3
 8009322:	f7f7 fcf5 	bl	8000d10 <WR_CMD>
 8009326:	4603      	mov	r3, r0
 8009328:	b2db      	uxtb	r3, r3
 800932a:	73fb      	strb	r3, [r7, #15]
    /* if the SPI transmission rate is higher than 15 MBaud, the Busy detection shall be
       done here */
}
 800932c:	bf00      	nop
 800932e:	3710      	adds	r7, #16
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}

08009334 <HW_Init>:
\return     0 if initialization was successful

 \brief    This function intialize the Process Data Interface (PDI) and the host controller.
*////////////////////////////////////////////////////////////////////////////////////////
UINT8 HW_Init(void)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b082      	sub	sp, #8
 8009338:	af00      	add	r7, sp, #0
      /* initialize the SPI registers for the ESC SPI */
//    SPI1_CON1 = SPI1_CON1_VALUE;
//    SPI1_STAT = SPI1_STAT_VALUE;
    do
    {
    	intMask = 0x00;
 800933a:	2300      	movs	r3, #0
 800933c:	607b      	str	r3, [r7, #4]
    	HW_EscRead(&intMask, ESC_PDI_CONTROL_OFFSET, 1);
 800933e:	1d3b      	adds	r3, r7, #4
 8009340:	2201      	movs	r2, #1
 8009342:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009346:	4618      	mov	r0, r3
 8009348:	f000 f840 	bl	80093cc <HW_EscRead>
    } while (intMask != 0x05);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2b05      	cmp	r3, #5
 8009350:	d1f3      	bne.n	800933a <HW_Init+0x6>
/*ECATCHANGE_START(V5.11) EL9800 2*/
    do
    {
        intMask = 0x93;
 8009352:	2393      	movs	r3, #147	; 0x93
 8009354:	607b      	str	r3, [r7, #4]
        HW_EscWriteDWord(intMask, ESC_AL_EVENTMASK_OFFSET);
 8009356:	1d3b      	adds	r3, r7, #4
 8009358:	2204      	movs	r2, #4
 800935a:	f44f 7101 	mov.w	r1, #516	; 0x204
 800935e:	4618      	mov	r0, r3
 8009360:	f000 f890 	bl	8009484 <HW_EscWrite>
        intMask = 0;
 8009364:	2300      	movs	r3, #0
 8009366:	607b      	str	r3, [r7, #4]
        HW_EscReadDWord(intMask, ESC_AL_EVENTMASK_OFFSET);
 8009368:	1d3b      	adds	r3, r7, #4
 800936a:	2204      	movs	r2, #4
 800936c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8009370:	4618      	mov	r0, r3
 8009372:	f000 f82b 	bl	80093cc <HW_EscRead>

    } while (intMask != 0x93);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2b93      	cmp	r3, #147	; 0x93
 800937a:	d1ea      	bne.n	8009352 <HW_Init+0x1e>

    intMask = 0x00;
 800937c:	2300      	movs	r3, #0
 800937e:	607b      	str	r3, [r7, #4]

    HW_EscWriteDWord(intMask, ESC_AL_EVENTMASK_OFFSET);
 8009380:	1d3b      	adds	r3, r7, #4
 8009382:	2204      	movs	r2, #4
 8009384:	f44f 7101 	mov.w	r1, #516	; 0x204
 8009388:	4618      	mov	r0, r3
 800938a:	f000 f87b 	bl	8009484 <HW_EscWrite>

/*ECATCHANGE_END(V5.11) EL9800 2*/
    al_Event_Int_Enable();
 800938e:	f7f7 fced 	bl	8000d6c <al_Event_Int_Enable>
    START_ECAT_TIMER;
 8009392:	f7f7 fcf9 	bl	8000d88 <timer_Esc_IT_Start>
  __ASM volatile ("cpsie i" : : : "memory");
 8009396:	b662      	cpsie	i
}
 8009398:	bf00      	nop

    /* enable all interrupts */
    ENABLE_GLOBAL_INT;

    return 0;
 800939a:	2300      	movs	r3, #0
}
 800939c:	4618      	mov	r0, r3
 800939e:	3708      	adds	r7, #8
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <HW_GetALEventRegister>:
 \return    first two Bytes of ALEvent register (0x220)

 \brief  This function gets the current content of ALEvent register
*////////////////////////////////////////////////////////////////////////////////////////
UINT16 HW_GetALEventRegister(void)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	af00      	add	r7, sp, #0
    GetInterruptRegister();
 80093a8:	f7ff ff44 	bl	8009234 <GetInterruptRegister>
    return EscALEvent.Word;
 80093ac:	4b01      	ldr	r3, [pc, #4]	; (80093b4 <HW_GetALEventRegister+0x10>)
 80093ae:	881b      	ldrh	r3, [r3, #0]
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	bd80      	pop	{r7, pc}
 80093b4:	200006cc 	.word	0x200006cc

080093b8 <HW_GetALEventRegister_Isr>:

 \brief  The SPI PDI requires an extra ESC read access functions from interrupts service routines.
        The behaviour is equal to "HW_GetALEventRegister()"
*////////////////////////////////////////////////////////////////////////////////////////
UINT16 HW_GetALEventRegister_Isr(void)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	af00      	add	r7, sp, #0
     ISR_GetInterruptRegister();
 80093bc:	f7ff ff56 	bl	800926c <ISR_GetInterruptRegister>
    return EscALEvent.Word;
 80093c0:	4b01      	ldr	r3, [pc, #4]	; (80093c8 <HW_GetALEventRegister_Isr+0x10>)
 80093c2:	881b      	ldrh	r3, [r3, #0]
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	bd80      	pop	{r7, pc}
 80093c8:	200006cc 	.word	0x200006cc

080093cc <HW_EscRead>:
 \param Len            Access size in Bytes.

 \brief  This function operates the SPI read access to the EtherCAT ASIC.
*////////////////////////////////////////////////////////////////////////////////////////
void HW_EscRead( MEM_ADDR *pData, UINT16 Address, UINT16 Len )
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b084      	sub	sp, #16
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	460b      	mov	r3, r1
 80093d6:	807b      	strh	r3, [r7, #2]
 80093d8:	4613      	mov	r3, r2
 80093da:	803b      	strh	r3, [r7, #0]
    /* HBu 24.01.06: if the SPI will be read by an interrupt routine too the
                     mailbox reading may be interrupted but an interrupted
                     reading will remain in a SPI transmission fault that will
                     reset the internal Sync Manager status. Therefore the reading
                     will be divided in 1-byte reads with disabled interrupt */
    UINT16 i = Len;
 80093dc:	883b      	ldrh	r3, [r7, #0]
 80093de:	81fb      	strh	r3, [r7, #14]
    UINT8 *pTmpData = (UINT8 *)pData;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	60bb      	str	r3, [r7, #8]

    /* loop for all bytes to be read */
    while ( i-- > 0 )
 80093e4:	e016      	b.n	8009414 <HW_EscRead+0x48>
  __ASM volatile ("cpsid i" : : : "memory");
 80093e6:	b672      	cpsid	i
}
 80093e8:	bf00      	nop
           in that case the status flag will indicate an error because
           the reading operation was interrupted without setting the last
           sent byte to 0xFF */
        DISABLE_AL_EVENT_INT;
#endif
         AddressingEsc( Address, ESC_RD );
 80093ea:	887b      	ldrh	r3, [r7, #2]
 80093ec:	2102      	movs	r1, #2
 80093ee:	4618      	mov	r0, r3
 80093f0:	f7ff ff56 	bl	80092a0 <AddressingEsc>

        /* when reading the last byte the DI pin shall be 1 */
			*pTmpData++= WR_CMD(0xFF);
 80093f4:	20ff      	movs	r0, #255	; 0xff
 80093f6:	f7f7 fc8b 	bl	8000d10 <WR_CMD>
 80093fa:	4601      	mov	r1, r0
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	1c5a      	adds	r2, r3, #1
 8009400:	60ba      	str	r2, [r7, #8]
 8009402:	b2ca      	uxtb	r2, r1
 8009404:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009406:	b662      	cpsie	i
}
 8009408:	bf00      	nop
#if AL_EVENT_ENABLED
        ENABLE_AL_EVENT_INT;
#endif
        /* there has to be at least 15 ns + CLK/2 after the transmission is finished
           before the SPI1_SEL signal shall be 1 */
        DESELECT_SPI;
 800940a:	f7f7 fca3 	bl	8000d54 <spi_Deselect>
        /* next address */
        Address++;
 800940e:	887b      	ldrh	r3, [r7, #2]
 8009410:	3301      	adds	r3, #1
 8009412:	807b      	strh	r3, [r7, #2]
    while ( i-- > 0 )
 8009414:	89fb      	ldrh	r3, [r7, #14]
 8009416:	1e5a      	subs	r2, r3, #1
 8009418:	81fa      	strh	r2, [r7, #14]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d1e3      	bne.n	80093e6 <HW_EscRead+0x1a>
//        /* reset transmission flag */
//        SPI1_IF = 0;
    }
}
 800941e:	bf00      	nop
 8009420:	bf00      	nop
 8009422:	3710      	adds	r7, #16
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}

08009428 <HW_EscReadIsr>:

\brief  The SPI PDI requires an extra ESC read access functions from interrupts service routines.
        The behaviour is equal to "HW_EscRead()"
*////////////////////////////////////////////////////////////////////////////////////////
void HW_EscReadIsr( MEM_ADDR *pData, UINT16 Address, UINT16 Len )
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b084      	sub	sp, #16
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	460b      	mov	r3, r1
 8009432:	807b      	strh	r3, [r7, #2]
 8009434:	4613      	mov	r3, r2
 8009436:	803b      	strh	r3, [r7, #0]
    UINT16 i = Len;
 8009438:	883b      	ldrh	r3, [r7, #0]
 800943a:	81fb      	strh	r3, [r7, #14]
    UINT8 data = 0;
 800943c:	2300      	movs	r3, #0
 800943e:	737b      	strb	r3, [r7, #13]

   UINT8 *pTmpData = (UINT8 *)pData;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	60bb      	str	r3, [r7, #8]

    /* send the address and command to the ESC */
     ISR_AddressingEsc( Address, ESC_RD );
 8009444:	887b      	ldrh	r3, [r7, #2]
 8009446:	2102      	movs	r1, #2
 8009448:	4618      	mov	r0, r3
 800944a:	f7ff ff4e 	bl	80092ea <ISR_AddressingEsc>
    /* loop for all bytes to be read */
    while ( i-- > 0 )
 800944e:	e00e      	b.n	800946e <HW_EscReadIsr+0x46>
    {
        if ( i == 0 )
 8009450:	89fb      	ldrh	r3, [r7, #14]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d101      	bne.n	800945a <HW_EscReadIsr+0x32>
        {
            /* when reading the last byte the DI pin shall be 1 */
            data = 0xFF;
 8009456:	23ff      	movs	r3, #255	; 0xff
 8009458:	737b      	strb	r3, [r7, #13]
        }

		*pTmpData++= WR_CMD(data);
 800945a:	7b7b      	ldrb	r3, [r7, #13]
 800945c:	4618      	mov	r0, r3
 800945e:	f7f7 fc57 	bl	8000d10 <WR_CMD>
 8009462:	4601      	mov	r1, r0
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	1c5a      	adds	r2, r3, #1
 8009468:	60ba      	str	r2, [r7, #8]
 800946a:	b2ca      	uxtb	r2, r1
 800946c:	701a      	strb	r2, [r3, #0]
    while ( i-- > 0 )
 800946e:	89fb      	ldrh	r3, [r7, #14]
 8009470:	1e5a      	subs	r2, r3, #1
 8009472:	81fa      	strh	r2, [r7, #14]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d1eb      	bne.n	8009450 <HW_EscReadIsr+0x28>
    }

    /* there has to be at least 15 ns + CLK/2 after the transmission is finished
       before the SPI1_SEL signal shall be 1 */
    DESELECT_SPI;
 8009478:	f7f7 fc6c 	bl	8000d54 <spi_Deselect>
}
 800947c:	bf00      	nop
 800947e:	3710      	adds	r7, #16
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}

08009484 <HW_EscWrite>:
 \param Len            Access size in Bytes.

  \brief  This function operates the SPI write access to the EtherCAT ASIC.
*////////////////////////////////////////////////////////////////////////////////////////
void HW_EscWrite( MEM_ADDR *pData, UINT16 Address, UINT16 Len )
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b086      	sub	sp, #24
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	460b      	mov	r3, r1
 800948e:	807b      	strh	r3, [r7, #2]
 8009490:	4613      	mov	r3, r2
 8009492:	803b      	strh	r3, [r7, #0]
    UINT16 i = Len;
 8009494:	883b      	ldrh	r3, [r7, #0]
 8009496:	82fb      	strh	r3, [r7, #22]
    VARVOLATILE UINT8 dummy;

    UINT8 *pTmpData = (UINT8 *)pData;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	613b      	str	r3, [r7, #16]

    /* loop for all bytes to be written */
    while ( i-- > 0 )
 800949c:	e017      	b.n	80094ce <HW_EscWrite+0x4a>
  __ASM volatile ("cpsid i" : : : "memory");
 800949e:	b672      	cpsid	i
}
 80094a0:	bf00      	nop
        /* the reading of data from the ESC can be interrupted by the
           AL Event ISR, so every byte will be written separate */
        DISABLE_AL_EVENT_INT;
#endif
        /* HBu 24.01.06: wrong parameter ESC_RD */
         AddressingEsc( Address, ESC_WR );
 80094a2:	887b      	ldrh	r3, [r7, #2]
 80094a4:	2104      	movs	r1, #4
 80094a6:	4618      	mov	r0, r3
 80094a8:	f7ff fefa 	bl	80092a0 <AddressingEsc>

        /* enable the ESC interrupt to get the AL Event ISR the chance to interrupt */
        /* SPI1_BUF must be read, otherwise the module will not transfer the next received data from SPIxSR to SPIxRXB.*/
			dummy= WR_CMD(*pTmpData++);
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	1c5a      	adds	r2, r3, #1
 80094b0:	613a      	str	r2, [r7, #16]
 80094b2:	781b      	ldrb	r3, [r3, #0]
 80094b4:	4618      	mov	r0, r3
 80094b6:	f7f7 fc2b 	bl	8000d10 <WR_CMD>
 80094ba:	4603      	mov	r3, r0
 80094bc:	b2db      	uxtb	r3, r3
 80094be:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 80094c0:	b662      	cpsie	i
}
 80094c2:	bf00      	nop

#if AL_EVENT_ENABLED
        ENABLE_AL_EVENT_INT;
#endif

        DESELECT_SPI;
 80094c4:	f7f7 fc46 	bl	8000d54 <spi_Deselect>
        /* next address */
        Address++;
 80094c8:	887b      	ldrh	r3, [r7, #2]
 80094ca:	3301      	adds	r3, #1
 80094cc:	807b      	strh	r3, [r7, #2]
    while ( i-- > 0 )
 80094ce:	8afb      	ldrh	r3, [r7, #22]
 80094d0:	1e5a      	subs	r2, r3, #1
 80094d2:	82fa      	strh	r2, [r7, #22]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d1e2      	bne.n	800949e <HW_EscWrite+0x1a>
    }
}
 80094d8:	bf00      	nop
 80094da:	bf00      	nop
 80094dc:	3718      	adds	r7, #24
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}

080094e2 <HW_EscWriteIsr>:

 \brief  The SPI PDI requires an extra ESC write access functions from interrupts service routines.
        The behaviour is equal to "HW_EscWrite()"
*////////////////////////////////////////////////////////////////////////////////////////
void HW_EscWriteIsr( MEM_ADDR *pData, UINT16 Address, UINT16 Len )
{
 80094e2:	b580      	push	{r7, lr}
 80094e4:	b086      	sub	sp, #24
 80094e6:	af00      	add	r7, sp, #0
 80094e8:	6078      	str	r0, [r7, #4]
 80094ea:	460b      	mov	r3, r1
 80094ec:	807b      	strh	r3, [r7, #2]
 80094ee:	4613      	mov	r3, r2
 80094f0:	803b      	strh	r3, [r7, #0]
    UINT16 i = Len;
 80094f2:	883b      	ldrh	r3, [r7, #0]
 80094f4:	82fb      	strh	r3, [r7, #22]
    VARVOLATILE UINT16 dummy;
    UINT8 *pTmpData = (UINT8 *)pData;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	613b      	str	r3, [r7, #16]

    /* send the address and command to the ESC */
     ISR_AddressingEsc( Address, ESC_WR );
 80094fa:	887b      	ldrh	r3, [r7, #2]
 80094fc:	2104      	movs	r1, #4
 80094fe:	4618      	mov	r0, r3
 8009500:	f7ff fef3 	bl	80092ea <ISR_AddressingEsc>
    /* loop for all bytes to be written */
    while ( i-- > 0 )
 8009504:	e00a      	b.n	800951c <HW_EscWriteIsr+0x3a>
    {
        /* start transmission */
		dummy= WR_CMD(*pTmpData);
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	781b      	ldrb	r3, [r3, #0]
 800950a:	4618      	mov	r0, r3
 800950c:	f7f7 fc00 	bl	8000d10 <WR_CMD>
 8009510:	4603      	mov	r3, r0
 8009512:	b29b      	uxth	r3, r3
 8009514:	81fb      	strh	r3, [r7, #14]
      /* increment data pointer */
        pTmpData++;
 8009516:	693b      	ldr	r3, [r7, #16]
 8009518:	3301      	adds	r3, #1
 800951a:	613b      	str	r3, [r7, #16]
    while ( i-- > 0 )
 800951c:	8afb      	ldrh	r3, [r7, #22]
 800951e:	1e5a      	subs	r2, r3, #1
 8009520:	82fa      	strh	r2, [r7, #22]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d1ef      	bne.n	8009506 <HW_EscWriteIsr+0x24>
    }

    /* there has to be at least 15 ns + CLK/2 after the transmission is finished
       before the SPI1_SEL signal shall be 1 */
    DESELECT_SPI;
 8009526:	f7f7 fc15 	bl	8000d54 <spi_Deselect>
}
 800952a:	bf00      	nop
 800952c:	3718      	adds	r7, #24
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}

08009532 <EscIsr>:
 \brief    Interrupt service routine for the PDI interrupt from the EtherCAT Slave Controller
*////////////////////////////////////////////////////////////////////////////////////////

//void __attribute__ ((__interrupt__, no_auto_psv)) EscIsr(void)
void EscIsr(void)
{
 8009532:	b580      	push	{r7, lr}
 8009534:	af00      	add	r7, sp, #0
     PDI_Isr();
 8009536:	f7fd f82f 	bl	8006598 <PDI_Isr>

    /* reset the interrupt flag */
//    ACK_ESC_INT;
}
 800953a:	bf00      	nop
 800953c:	bd80      	pop	{r7, pc}

0800953e <Sync0Isr>:
/**
 \brief    Interrupt service routine for the interrupts from SYNC0
*////////////////////////////////////////////////////////////////////////////////////////
//void __attribute__((__interrupt__, no_auto_psv)) Sync0Isr(void)
void Sync0Isr(void)
{
 800953e:	b580      	push	{r7, lr}
 8009540:	af00      	add	r7, sp, #0
    Sync0_Isr();
 8009542:	f7fd f8d1 	bl	80066e8 <Sync0_Isr>
    /* reset the interrupt flag */

//    ACK_SYNC0_INT;
}
 8009546:	bf00      	nop
 8009548:	bd80      	pop	{r7, pc}

0800954a <Sync1Isr>:
/**
 \brief    Interrupt service routine for the interrupts from SYNC1
*////////////////////////////////////////////////////////////////////////////////////////
//void __attribute__((__interrupt__, no_auto_psv)) Sync1Isr(void)
void Sync1Isr(void)
{
 800954a:	b580      	push	{r7, lr}
 800954c:	af00      	add	r7, sp, #0
    Sync1_Isr();
 800954e:	f7fd f975 	bl	800683c <Sync1_Isr>
    /* reset the interrupt flag */

//    ACK_SYNC1_INT;
}
 8009552:	bf00      	nop
 8009554:	bd80      	pop	{r7, pc}

08009556 <EOEAPPL_CalcCheckSum>:
 \brief you have to compliment the output.

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 EOEAPPL_CalcCheckSum (UINT16 MBXMEM *pWord, UINT16 nLen)
{
 8009556:	b480      	push	{r7}
 8009558:	b087      	sub	sp, #28
 800955a:	af00      	add	r7, sp, #0
 800955c:	6078      	str	r0, [r7, #4]
 800955e:	460b      	mov	r3, r1
 8009560:	807b      	strh	r3, [r7, #2]
    UINT32 crc;
    UINT32 CrcLo;
    UINT32 CrcHi;
    UINT16 RetCrc;

    crc = 0;
 8009562:	2300      	movs	r3, #0
 8009564:	617b      	str	r3, [r7, #20]
    while (nLen > 1)
 8009566:	e00b      	b.n	8009580 <EOEAPPL_CalcCheckSum+0x2a>
    {
        crc += SWAPWORD(*pWord);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	881b      	ldrh	r3, [r3, #0]
 800956c:	461a      	mov	r2, r3
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	4413      	add	r3, r2
 8009572:	617b      	str	r3, [r7, #20]
          pWord++;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	3302      	adds	r3, #2
 8009578:	607b      	str	r3, [r7, #4]
          nLen -= 2;
 800957a:	887b      	ldrh	r3, [r7, #2]
 800957c:	3b02      	subs	r3, #2
 800957e:	807b      	strh	r3, [r7, #2]
    while (nLen > 1)
 8009580:	887b      	ldrh	r3, [r7, #2]
 8009582:	2b01      	cmp	r3, #1
 8009584:	d8f0      	bhi.n	8009568 <EOEAPPL_CalcCheckSum+0x12>
    }
    if ( nLen == 1 )                          // if nLen odd
 8009586:	887b      	ldrh	r3, [r7, #2]
 8009588:	2b01      	cmp	r3, #1
 800958a:	d105      	bne.n	8009598 <EOEAPPL_CalcCheckSum+0x42>
          crc += *((UINT8*)pWord);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	781b      	ldrb	r3, [r3, #0]
 8009590:	461a      	mov	r2, r3
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	4413      	add	r3, r2
 8009596:	617b      	str	r3, [r7, #20]
    CrcLo = LOWORD(crc);
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	b29b      	uxth	r3, r3
 800959c:	613b      	str	r3, [r7, #16]
    CrcHi = HIWORD(crc);
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	0c1b      	lsrs	r3, r3, #16
 80095a2:	60fb      	str	r3, [r7, #12]
    crc = CrcLo + CrcHi;
 80095a4:	693a      	ldr	r2, [r7, #16]
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	4413      	add	r3, r2
 80095aa:	617b      	str	r3, [r7, #20]

    CrcHi = HIWORD(crc);
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	0c1b      	lsrs	r3, r3, #16
 80095b0:	60fb      	str	r3, [r7, #12]
    crc += CrcHi;
 80095b2:	697a      	ldr	r2, [r7, #20]
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	4413      	add	r3, r2
 80095b8:	617b      	str	r3, [r7, #20]
    if (crc == 0xFFFF)                     // remove the -0 ambiguity
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d101      	bne.n	80095c8 <EOEAPPL_CalcCheckSum+0x72>
          crc = 0;
 80095c4:	2300      	movs	r3, #0
 80095c6:	617b      	str	r3, [r7, #20]

    RetCrc = (UINT16)crc;
 80095c8:	697b      	ldr	r3, [r7, #20]
 80095ca:	817b      	strh	r3, [r7, #10]
    RetCrc = ~RetCrc;
 80095cc:	897b      	ldrh	r3, [r7, #10]
 80095ce:	43db      	mvns	r3, r3
 80095d0:	817b      	strh	r3, [r7, #10]
    return(RetCrc);
 80095d2:	897b      	ldrh	r3, [r7, #10]
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	371c      	adds	r7, #28
 80095d8:	46bd      	mov	sp, r7
 80095da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095de:	4770      	bx	lr

080095e0 <EOEAPPL_ReceiveFrameInd>:

 \brief    This function is called when an Ethernet frame is received over EoE
*////////////////////////////////////////////////////////////////////////////////////////

void EOEAPPL_ReceiveFrameInd(UINT8 MBXMEM * pFrame, UINT16 frameSize)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b088      	sub	sp, #32
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
 80095e8:	460b      	mov	r3, r1
 80095ea:	807b      	strh	r3, [r7, #2]
    switch ( ((ETHERNET_FRAME *) pFrame)->FrameType )
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	899b      	ldrh	r3, [r3, #12]
 80095f0:	2b08      	cmp	r3, #8
 80095f2:	d069      	beq.n	80096c8 <EOEAPPL_ReceiveFrameInd+0xe8>
 80095f4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80095f8:	f040 80e4 	bne.w	80097c4 <EOEAPPL_ReceiveFrameInd+0x1e4>
    {
    case ETHERNET_FRAME_TYPE_ARP1_SW:
        {
            ETHERNET_FRAME MBXMEM * pSendFrame = (ETHERNET_FRAME MBXMEM *) ALLOCMEM(frameSize);
 80095fc:	887b      	ldrh	r3, [r7, #2]
 80095fe:	4618      	mov	r0, r3
 8009600:	f003 fc02 	bl	800ce08 <malloc>
 8009604:	4603      	mov	r3, r0
 8009606:	61fb      	str	r3, [r7, #28]
            ARP_IP_HEADER MBXMEM    * pArpIp = (ARP_IP_HEADER MBXMEM    *) &pSendFrame[1];
 8009608:	69fb      	ldr	r3, [r7, #28]
 800960a:	330e      	adds	r3, #14
 800960c:	61bb      	str	r3, [r7, #24]

            /*Copy Receive Frame to create ARP Reply*/
            MBXMEMCPY(pSendFrame,pFrame,frameSize);
 800960e:	887b      	ldrh	r3, [r7, #2]
 8009610:	461a      	mov	r2, r3
 8009612:	6879      	ldr	r1, [r7, #4]
 8009614:	69f8      	ldr	r0, [r7, #28]
 8009616:	f003 fc17 	bl	800ce48 <memcpy>
            if ( ( MBXMEMCMP(BroadcastEthernetAddress, pSendFrame->Destination.b, 4) == 0 )
 800961a:	69fb      	ldr	r3, [r7, #28]
 800961c:	2204      	movs	r2, #4
 800961e:	4619      	mov	r1, r3
 8009620:	486a      	ldr	r0, [pc, #424]	; (80097cc <EOEAPPL_ReceiveFrameInd+0x1ec>)
 8009622:	f003 fc01 	bl	800ce28 <memcmp>
 8009626:	4603      	mov	r3, r0
 8009628:	2b00      	cmp	r3, #0
 800962a:	f040 80c8 	bne.w	80097be <EOEAPPL_ReceiveFrameInd+0x1de>
                &&( pArpIp->hwAddrSpace == SWAPWORD(ARP_HW_ADDR_SPACE_ETHERNET_SW) )
 800962e:	69bb      	ldr	r3, [r7, #24]
 8009630:	881b      	ldrh	r3, [r3, #0]
 8009632:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009636:	f040 80c2 	bne.w	80097be <EOEAPPL_ReceiveFrameInd+0x1de>
                &&( pArpIp->lengthHwAddr == ETHERNET_ADDRESS_LEN )
 800963a:	69bb      	ldr	r3, [r7, #24]
 800963c:	791b      	ldrb	r3, [r3, #4]
 800963e:	2b06      	cmp	r3, #6
 8009640:	f040 80bd 	bne.w	80097be <EOEAPPL_ReceiveFrameInd+0x1de>
                &&( pArpIp->protAddrSpace == SWAPWORD(ETHERNET_FRAME_TYPE_IP_SW) )
 8009644:	69bb      	ldr	r3, [r7, #24]
 8009646:	885b      	ldrh	r3, [r3, #2]
 8009648:	2b08      	cmp	r3, #8
 800964a:	f040 80b8 	bne.w	80097be <EOEAPPL_ReceiveFrameInd+0x1de>
                &&( pArpIp->lengthProtAddr == SIZEOF(UINT32) )
 800964e:	69bb      	ldr	r3, [r7, #24]
 8009650:	795b      	ldrb	r3, [r3, #5]
 8009652:	2b04      	cmp	r3, #4
 8009654:	f040 80b3 	bne.w	80097be <EOEAPPL_ReceiveFrameInd+0x1de>
                &&( pArpIp->opcode == SWAPWORD(ARP_OPCODE_REQUEST_SW) )
 8009658:	69bb      	ldr	r3, [r7, #24]
 800965a:	88db      	ldrh	r3, [r3, #6]
 800965c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009660:	f040 80ad 	bne.w	80097be <EOEAPPL_ReceiveFrameInd+0x1de>
                )
            {
                MBXMEMCPY(pSendFrame->Destination.b, pSendFrame->Source.b, 6);
 8009664:	69f8      	ldr	r0, [r7, #28]
 8009666:	69fb      	ldr	r3, [r7, #28]
 8009668:	3306      	adds	r3, #6
 800966a:	2206      	movs	r2, #6
 800966c:	4619      	mov	r1, r3
 800966e:	f003 fbeb 	bl	800ce48 <memcpy>
                MBXMEMCPY(pSendFrame->Source.b, &aMacAdd[0], 6);
 8009672:	69fb      	ldr	r3, [r7, #28]
 8009674:	3306      	adds	r3, #6
 8009676:	2206      	movs	r2, #6
 8009678:	4955      	ldr	r1, [pc, #340]	; (80097d0 <EOEAPPL_ReceiveFrameInd+0x1f0>)
 800967a:	4618      	mov	r0, r3
 800967c:	f003 fbe4 	bl	800ce48 <memcpy>

                MBXMEMCPY(pArpIp->macDest.b, pArpIp->macSource.b, 6);
 8009680:	69bb      	ldr	r3, [r7, #24]
 8009682:	f103 0014 	add.w	r0, r3, #20
 8009686:	69bb      	ldr	r3, [r7, #24]
 8009688:	3308      	adds	r3, #8
 800968a:	2206      	movs	r2, #6
 800968c:	4619      	mov	r1, r3
 800968e:	f003 fbdb 	bl	800ce48 <memcpy>
                MBXMEMCPY(pArpIp->macSource.b, &aMacAdd[0], 6);
 8009692:	69bb      	ldr	r3, [r7, #24]
 8009694:	3308      	adds	r3, #8
 8009696:	2206      	movs	r2, #6
 8009698:	494d      	ldr	r1, [pc, #308]	; (80097d0 <EOEAPPL_ReceiveFrameInd+0x1f0>)
 800969a:	4618      	mov	r0, r3
 800969c:	f003 fbd4 	bl	800ce48 <memcpy>

                MBXMEMCPY( &pArpIp->ipDest, &pArpIp->ipSource, 4);
 80096a0:	69bb      	ldr	r3, [r7, #24]
 80096a2:	331c      	adds	r3, #28
 80096a4:	69ba      	ldr	r2, [r7, #24]
 80096a6:	3210      	adds	r2, #16
 80096a8:	6812      	ldr	r2, [r2, #0]
 80096aa:	601a      	str	r2, [r3, #0]
                MBXMEMCPY( &pArpIp->ipSource, &aIpAdd[0], 4);
 80096ac:	69bb      	ldr	r3, [r7, #24]
 80096ae:	3310      	adds	r3, #16
 80096b0:	4a48      	ldr	r2, [pc, #288]	; (80097d4 <EOEAPPL_ReceiveFrameInd+0x1f4>)
 80096b2:	6812      	ldr	r2, [r2, #0]
 80096b4:	601a      	str	r2, [r3, #0]

                pArpIp->opcode = SWAPWORD(ARP_OPCODE_REPLY_SW);
 80096b6:	69bb      	ldr	r3, [r7, #24]
 80096b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80096bc:	80da      	strh	r2, [r3, #6]

                EOE_SendFrameReq((UINT8 MBXMEM *) pSendFrame, ARP_IP_HEADER_LEN + ETHERNET_FRAME_LEN);
 80096be:	212e      	movs	r1, #46	; 0x2e
 80096c0:	69f8      	ldr	r0, [r7, #28]
 80096c2:	f7fd fcaf 	bl	8007024 <EOE_SendFrameReq>
            }
        }
        break;
 80096c6:	e07a      	b.n	80097be <EOEAPPL_ReceiveFrameInd+0x1de>
    case ETHERNET_FRAME_TYPE_IP_SW:
        {
            ETHERNET_IP_MAX_FRAME MBXMEM * pIPHeader = (ETHERNET_IP_MAX_FRAME MBXMEM *) ALLOCMEM(frameSize);			
 80096c8:	887b      	ldrh	r3, [r7, #2]
 80096ca:	4618      	mov	r0, r3
 80096cc:	f003 fb9c 	bl	800ce08 <malloc>
 80096d0:	4603      	mov	r3, r0
 80096d2:	617b      	str	r3, [r7, #20]

            /*Copy Receive Frame to create ICMP Reply*/
            MBXMEMCPY(pIPHeader,pFrame,frameSize);
 80096d4:	887b      	ldrh	r3, [r7, #2]
 80096d6:	461a      	mov	r2, r3
 80096d8:	6879      	ldr	r1, [r7, #4]
 80096da:	6978      	ldr	r0, [r7, #20]
 80096dc:	f003 fbb4 	bl	800ce48 <memcpy>

            if (  ( pIPHeader->Ip.protocol == IP_PROTOCOL_ICMP )
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	7e5b      	ldrb	r3, [r3, #25]
 80096e4:	2b01      	cmp	r3, #1
 80096e6:	d161      	bne.n	80097ac <EOEAPPL_ReceiveFrameInd+0x1cc>
                &&( pIPHeader->IpData.Icmp.type == ICMP_TYPE_ECHO )
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80096ee:	2b08      	cmp	r3, #8
 80096f0:	d15c      	bne.n	80097ac <EOEAPPL_ReceiveFrameInd+0x1cc>
                &&( MBXMEMCMP(&pIPHeader->Ip.dest, aIpAdd, 4) == 0 )
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	3320      	adds	r3, #32
 80096f6:	2204      	movs	r2, #4
 80096f8:	4936      	ldr	r1, [pc, #216]	; (80097d4 <EOEAPPL_ReceiveFrameInd+0x1f4>)
 80096fa:	4618      	mov	r0, r3
 80096fc:	f003 fb94 	bl	800ce28 <memcmp>
 8009700:	4603      	mov	r3, r0
 8009702:	2b00      	cmp	r3, #0
 8009704:	d152      	bne.n	80097ac <EOEAPPL_ReceiveFrameInd+0x1cc>
                )
            {
                // ping requested
                UINT16 length;
                UINT16 lo = 0;
 8009706:	2300      	movs	r3, #0
 8009708:	827b      	strh	r3, [r7, #18]
                UINT16 hi = 0;
 800970a:	2300      	movs	r3, #0
 800970c:	823b      	strh	r3, [r7, #16]
                UINT32 tmp;

                // length is in BigEndian format -> swap bytes
                lo = (( pIPHeader->Ip.length) & 0xff) << 8;
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	8a5b      	ldrh	r3, [r3, #18]
 8009712:	021b      	lsls	r3, r3, #8
 8009714:	827b      	strh	r3, [r7, #18]
                hi = pIPHeader->Ip.length >> 8;
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	8a5b      	ldrh	r3, [r3, #18]
 800971a:	0a1b      	lsrs	r3, r3, #8
 800971c:	823b      	strh	r3, [r7, #16]
                length = hi + lo;
 800971e:	8a3a      	ldrh	r2, [r7, #16]
 8009720:	8a7b      	ldrh	r3, [r7, #18]
 8009722:	4413      	add	r3, r2
 8009724:	81fb      	strh	r3, [r7, #14]
                // swap src and dest ip address
                tmp = pIPHeader->Ip.src;
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	69db      	ldr	r3, [r3, #28]
 800972a:	60bb      	str	r3, [r7, #8]
                pIPHeader->Ip.src = pIPHeader->Ip.dest;
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	6a1a      	ldr	r2, [r3, #32]
 8009730:	697b      	ldr	r3, [r7, #20]
 8009732:	61da      	str	r2, [r3, #28]
                pIPHeader->Ip.dest = tmp;
 8009734:	697b      	ldr	r3, [r7, #20]
 8009736:	68ba      	ldr	r2, [r7, #8]
 8009738:	621a      	str	r2, [r3, #32]

                // set ping reply command
                pIPHeader->IpData.Icmp.type = ICMP_TYPE_ECHO_REPLY;
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	2200      	movs	r2, #0
 800973e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

                // swap src and dest mac address
                MBXMEMCPY(pIPHeader->Ether.Destination.b, pIPHeader->Ether.Source.b, 6);
 8009742:	6978      	ldr	r0, [r7, #20]
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	3306      	adds	r3, #6
 8009748:	2206      	movs	r2, #6
 800974a:	4619      	mov	r1, r3
 800974c:	f003 fb7c 	bl	800ce48 <memcpy>
                MBXMEMCPY(pIPHeader->Ether.Source.b, aMacAdd, 6);
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	3306      	adds	r3, #6
 8009754:	4a1e      	ldr	r2, [pc, #120]	; (80097d0 <EOEAPPL_ReceiveFrameInd+0x1f0>)
 8009756:	6810      	ldr	r0, [r2, #0]
 8009758:	6018      	str	r0, [r3, #0]
 800975a:	8892      	ldrh	r2, [r2, #4]
 800975c:	809a      	strh	r2, [r3, #4]

                // calculate ip checksum
                pIPHeader->Ip.cksum = 0;
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	2200      	movs	r2, #0
 8009762:	835a      	strh	r2, [r3, #26]
                pIPHeader->Ip.cksum = SWAPWORD(EOEAPPL_CalcCheckSum((UINT16 MBXMEM *) &pIPHeader->Ip, IP_HEADER_MINIMUM_LEN));
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	3310      	adds	r3, #16
 8009768:	2114      	movs	r1, #20
 800976a:	4618      	mov	r0, r3
 800976c:	f7ff fef3 	bl	8009556 <EOEAPPL_CalcCheckSum>
 8009770:	4603      	mov	r3, r0
 8009772:	461a      	mov	r2, r3
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	835a      	strh	r2, [r3, #26]
                // calculate icmp checksum
                pIPHeader->IpData.Icmp.checksum = 0;
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	2200      	movs	r2, #0
 800977c:	84da      	strh	r2, [r3, #38]	; 0x26
                /* type cast because of warning was added */
                pIPHeader->IpData.Icmp.checksum = SWAPWORD(EOEAPPL_CalcCheckSum((UINT16 MBXMEM *) &pIPHeader->IpData.Icmp, (UINT16) (length - 20)));
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8009784:	89fb      	ldrh	r3, [r7, #14]
 8009786:	3b14      	subs	r3, #20
 8009788:	b29b      	uxth	r3, r3
 800978a:	4619      	mov	r1, r3
 800978c:	4610      	mov	r0, r2
 800978e:	f7ff fee2 	bl	8009556 <EOEAPPL_CalcCheckSum>
 8009792:	4603      	mov	r3, r0
 8009794:	461a      	mov	r2, r3
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	84da      	strh	r2, [r3, #38]	; 0x26
                /* type cast because of warning was added */
                EOE_SendFrameReq((UINT8 MBXMEM *) pIPHeader, (UINT16) (ETHERNET_FRAME_LEN + length));
 800979a:	89fb      	ldrh	r3, [r7, #14]
 800979c:	330e      	adds	r3, #14
 800979e:	b29b      	uxth	r3, r3
 80097a0:	4619      	mov	r1, r3
 80097a2:	6978      	ldr	r0, [r7, #20]
 80097a4:	f7fd fc3e 	bl	8007024 <EOE_SendFrameReq>
            {
 80097a8:	bf00      	nop
                    FREEMEM(pIPHeader);
                    pIPHeader = NULL;
                }
            }
        }
        break;
 80097aa:	e00a      	b.n	80097c2 <EOEAPPL_ReceiveFrameInd+0x1e2>
                if(pIPHeader != NULL)
 80097ac:	697b      	ldr	r3, [r7, #20]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d007      	beq.n	80097c2 <EOEAPPL_ReceiveFrameInd+0x1e2>
                    FREEMEM(pIPHeader);
 80097b2:	6978      	ldr	r0, [r7, #20]
 80097b4:	f003 fb30 	bl	800ce18 <free>
                    pIPHeader = NULL;
 80097b8:	2300      	movs	r3, #0
 80097ba:	617b      	str	r3, [r7, #20]
        break;
 80097bc:	e001      	b.n	80097c2 <EOEAPPL_ReceiveFrameInd+0x1e2>
        break;
 80097be:	bf00      	nop
 80097c0:	e000      	b.n	80097c4 <EOEAPPL_ReceiveFrameInd+0x1e4>
        break;
 80097c2:	bf00      	nop
    }
}
 80097c4:	bf00      	nop
 80097c6:	3720      	adds	r7, #32
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}
 80097cc:	0800db54 	.word	0x0800db54
 80097d0:	200006d4 	.word	0x200006d4
 80097d4:	200006d0 	.word	0x200006d0

080097d8 <EOEAPPL_GetSettingsInd>:

 \brief    This function is called when the IP get settings were received over EoE
*////////////////////////////////////////////////////////////////////////////////////////
/* ECATCHANGE_START(V5.11) EOE1*/
UINT16 EOEAPPL_GetSettingsInd(ETHERCAT_EOE_INIT MBXMEM *pEoeInit,UINT16 *pMbxLength)
{
 80097d8:	b480      	push	{r7}
 80097da:	b083      	sub	sp, #12
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
 80097e0:	6039      	str	r1, [r7, #0]
    /* Clear include Flags */
    pEoeInit->Flags1 = 0;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2200      	movs	r2, #0
 80097e6:	801a      	strh	r2, [r3, #0]
    pEoeInit->Flags2 = 0;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2200      	movs	r2, #0
 80097ec:	805a      	strh	r2, [r3, #2]

    /* set initial get IP parameter response length */
    *pMbxLength = 10;
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	220a      	movs	r2, #10
 80097f2:	801a      	strh	r2, [r3, #0]

     /* set MAC Address */
    MBXMEMCPY(&pEoeInit->MacAddr,aMacAdd, 6);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	3304      	adds	r3, #4
 80097f8:	4a20      	ldr	r2, [pc, #128]	; (800987c <EOEAPPL_GetSettingsInd+0xa4>)
 80097fa:	6810      	ldr	r0, [r2, #0]
 80097fc:	6018      	str	r0, [r3, #0]
 80097fe:	8892      	ldrh	r2, [r2, #4]
 8009800:	809a      	strh	r2, [r3, #4]
    pEoeInit->Flags1 |= EOEINIT_CONTAINSMACADDR;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	881b      	ldrh	r3, [r3, #0]
 8009806:	f043 0301 	orr.w	r3, r3, #1
 800980a:	b29a      	uxth	r2, r3
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	801a      	strh	r2, [r3, #0]
    *pMbxLength += 6;
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	881b      	ldrh	r3, [r3, #0]
 8009814:	3306      	adds	r3, #6
 8009816:	b29a      	uxth	r2, r3
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	801a      	strh	r2, [r3, #0]

    // set IP Address
    ((UINT8 MBXMEM *) &pEoeInit->IpAddr)[3] = aIpAdd[0];
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	330c      	adds	r3, #12
 8009820:	3303      	adds	r3, #3
 8009822:	4a17      	ldr	r2, [pc, #92]	; (8009880 <EOEAPPL_GetSettingsInd+0xa8>)
 8009824:	7812      	ldrb	r2, [r2, #0]
 8009826:	701a      	strb	r2, [r3, #0]
    ((UINT8 MBXMEM *) &pEoeInit->IpAddr)[2] = aIpAdd[1];
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	330c      	adds	r3, #12
 800982c:	3302      	adds	r3, #2
 800982e:	4a14      	ldr	r2, [pc, #80]	; (8009880 <EOEAPPL_GetSettingsInd+0xa8>)
 8009830:	7852      	ldrb	r2, [r2, #1]
 8009832:	701a      	strb	r2, [r3, #0]
    ((UINT8 MBXMEM *) &pEoeInit->IpAddr)[1] = aIpAdd[2];
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	330c      	adds	r3, #12
 8009838:	3301      	adds	r3, #1
 800983a:	4a11      	ldr	r2, [pc, #68]	; (8009880 <EOEAPPL_GetSettingsInd+0xa8>)
 800983c:	7892      	ldrb	r2, [r2, #2]
 800983e:	701a      	strb	r2, [r3, #0]
    ((UINT8 MBXMEM *) &pEoeInit->IpAddr)[0] = aIpAdd[3];
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	330c      	adds	r3, #12
 8009844:	4a0e      	ldr	r2, [pc, #56]	; (8009880 <EOEAPPL_GetSettingsInd+0xa8>)
 8009846:	78d2      	ldrb	r2, [r2, #3]
 8009848:	701a      	strb	r2, [r3, #0]
    pEoeInit->Flags1 |= EOEINIT_CONTAINSIPADDR;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	881b      	ldrh	r3, [r3, #0]
 800984e:	f043 0302 	orr.w	r3, r3, #2
 8009852:	b29a      	uxth	r2, r3
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	801a      	strh	r2, [r3, #0]
    *pMbxLength += 4;
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	881b      	ldrh	r3, [r3, #0]
 800985c:	3304      	adds	r3, #4
 800985e:	b29a      	uxth	r2, r3
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	801a      	strh	r2, [r3, #0]

    pEoeInit->Flags1 = SWAPWORD(pEoeInit->Flags1);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	881a      	ldrh	r2, [r3, #0]
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	801a      	strh	r2, [r3, #0]
    
    return 0;
 800986c:	2300      	movs	r3, #0
}
 800986e:	4618      	mov	r0, r3
 8009870:	370c      	adds	r7, #12
 8009872:	46bd      	mov	sp, r7
 8009874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009878:	4770      	bx	lr
 800987a:	bf00      	nop
 800987c:	200006d4 	.word	0x200006d4
 8009880:	200006d0 	.word	0x200006d0

08009884 <EOEAPPL_SettingsInd>:

 \brief    This function is called when the IP settings were received over EoE
*////////////////////////////////////////////////////////////////////////////////////////

UINT16 EOEAPPL_SettingsInd(ETHERCAT_EOE_INIT MBXMEM *pEoeInit)
{
 8009884:	b480      	push	{r7}
 8009886:	b085      	sub	sp, #20
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
    UINT16 result = 0;
 800988c:	2300      	movs	r3, #0
 800988e:	81fb      	strh	r3, [r7, #14]

    if ( SWAPWORD(pEoeInit->Flags1) & EOEINIT_CONTAINSMACADDR )
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	881b      	ldrh	r3, [r3, #0]
 8009894:	f003 0301 	and.w	r3, r3, #1
 8009898:	2b00      	cmp	r3, #0
 800989a:	d006      	beq.n	80098aa <EOEAPPL_SettingsInd+0x26>
    {
        // set MAC Address
        MBXMEMCPY(aMacAdd, &pEoeInit->MacAddr, 6);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	1d1a      	adds	r2, r3, #4
 80098a0:	4b1b      	ldr	r3, [pc, #108]	; (8009910 <EOEAPPL_SettingsInd+0x8c>)
 80098a2:	6810      	ldr	r0, [r2, #0]
 80098a4:	6018      	str	r0, [r3, #0]
 80098a6:	8892      	ldrh	r2, [r2, #4]
 80098a8:	809a      	strh	r2, [r3, #4]
    }
    if(!(pEoeInit->Flags1 & EOEINIT_CONTAINSIPADDR)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	881b      	ldrh	r3, [r3, #0]
 80098ae:	f003 0302 	and.w	r3, r3, #2
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d009      	beq.n	80098ca <EOEAPPL_SettingsInd+0x46>
        ||((pEoeInit->Flags1 & EOEINIT_CONTAINSIPADDR) && (pEoeInit->IpAddr == 0)))
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	881b      	ldrh	r3, [r3, #0]
 80098ba:	f003 0302 	and.w	r3, r3, #2
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d007      	beq.n	80098d2 <EOEAPPL_SettingsInd+0x4e>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	68db      	ldr	r3, [r3, #12]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d103      	bne.n	80098d2 <EOEAPPL_SettingsInd+0x4e>
    {
        /*no IP defined (IP is assigned via DHCP) => not supported yet*/
        result = EOE_RESULT_NO_DHCP_SUPPORT;
 80098ca:	f240 2302 	movw	r3, #514	; 0x202
 80098ce:	81fb      	strh	r3, [r7, #14]
 80098d0:	e016      	b.n	8009900 <EOEAPPL_SettingsInd+0x7c>
    }
    else
    {
        // set IP Address
        aIpAdd[0] = ((UINT8 MBXMEM *) &pEoeInit->IpAddr)[3];
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	330c      	adds	r3, #12
 80098d6:	3303      	adds	r3, #3
 80098d8:	781a      	ldrb	r2, [r3, #0]
 80098da:	4b0e      	ldr	r3, [pc, #56]	; (8009914 <EOEAPPL_SettingsInd+0x90>)
 80098dc:	701a      	strb	r2, [r3, #0]
        aIpAdd[1] = ((UINT8 MBXMEM *) &pEoeInit->IpAddr)[2];
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	330c      	adds	r3, #12
 80098e2:	3302      	adds	r3, #2
 80098e4:	781a      	ldrb	r2, [r3, #0]
 80098e6:	4b0b      	ldr	r3, [pc, #44]	; (8009914 <EOEAPPL_SettingsInd+0x90>)
 80098e8:	705a      	strb	r2, [r3, #1]
        aIpAdd[2] = ((UINT8 MBXMEM *) &pEoeInit->IpAddr)[1];
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	330c      	adds	r3, #12
 80098ee:	3301      	adds	r3, #1
 80098f0:	781a      	ldrb	r2, [r3, #0]
 80098f2:	4b08      	ldr	r3, [pc, #32]	; (8009914 <EOEAPPL_SettingsInd+0x90>)
 80098f4:	709a      	strb	r2, [r3, #2]
        aIpAdd[3] = ((UINT8 MBXMEM *) &pEoeInit->IpAddr)[0];
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	330c      	adds	r3, #12
 80098fa:	781a      	ldrb	r2, [r3, #0]
 80098fc:	4b05      	ldr	r3, [pc, #20]	; (8009914 <EOEAPPL_SettingsInd+0x90>)
 80098fe:	70da      	strb	r2, [r3, #3]
    }

    return result;
 8009900:	89fb      	ldrh	r3, [r7, #14]
}
 8009902:	4618      	mov	r0, r3
 8009904:	3714      	adds	r7, #20
 8009906:	46bd      	mov	sp, r7
 8009908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990c:	4770      	bx	lr
 800990e:	bf00      	nop
 8009910:	200006d4 	.word	0x200006d4
 8009914:	200006d0 	.word	0x200006d0

08009918 <FOE_Read>:
 \brief    The function starts a file reading

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 FOE_Read(UINT16 MBXMEM * pName, UINT16 nameSize, UINT16 MBXMEM * pData, UINT32 password)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b08a      	sub	sp, #40	; 0x28
 800991c:	af00      	add	r7, sp, #0
 800991e:	60f8      	str	r0, [r7, #12]
 8009920:	607a      	str	r2, [r7, #4]
 8009922:	603b      	str	r3, [r7, #0]
 8009924:	460b      	mov	r3, r1
 8009926:	817b      	strh	r3, [r7, #10]
    UINT16 size = 0;
 8009928:	2300      	movs	r3, #0
 800992a:	84fb      	strh	r3, [r7, #38]	; 0x26
    UINT16 i = 0;
 800992c:	2300      	movs	r3, #0
 800992e:	84bb      	strh	r3, [r7, #36]	; 0x24

    CHAR aReadFileName[MAX_FILE_NAME_SIZE];

    /* ECATCHANGE_START(V5.11) FOE2*/
    if ((nameSize + 1) > MAX_FILE_NAME_SIZE)
 8009930:	897b      	ldrh	r3, [r7, #10]
 8009932:	2b0f      	cmp	r3, #15
 8009934:	d902      	bls.n	800993c <FOE_Read+0x24>
    {
        return ECAT_FOE_ERRCODE_DISKFULL;
 8009936:	f248 0303 	movw	r3, #32771	; 0x8003
 800993a:	e03a      	b.n	80099b2 <FOE_Read+0x9a>
    }

    /*Read requested file name to endianess conversion if required*/
    MBXSTRCPY(aReadFileName, pName, nameSize);
 800993c:	897a      	ldrh	r2, [r7, #10]
 800993e:	f107 0314 	add.w	r3, r7, #20
 8009942:	68f9      	ldr	r1, [r7, #12]
 8009944:	4618      	mov	r0, r3
 8009946:	f003 fa7f 	bl	800ce48 <memcpy>
    aReadFileName[nameSize] = '\0';
 800994a:	897b      	ldrh	r3, [r7, #10]
 800994c:	3328      	adds	r3, #40	; 0x28
 800994e:	443b      	add	r3, r7
 8009950:	2200      	movs	r2, #0
 8009952:	f803 2c14 	strb.w	r2, [r3, #-20]
    /* ECATCHANGE_END(V5.11) FOE2*/


    {
    /* for test only the written file name can be read */
    for (i = 0; i < nameSize; i++)
 8009956:	2300      	movs	r3, #0
 8009958:	84bb      	strh	r3, [r7, #36]	; 0x24
 800995a:	e00f      	b.n	800997c <FOE_Read+0x64>
    {
        if (aReadFileName[i] != aFileName[i] )
 800995c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800995e:	3328      	adds	r3, #40	; 0x28
 8009960:	443b      	add	r3, r7
 8009962:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8009966:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009968:	4914      	ldr	r1, [pc, #80]	; (80099bc <FOE_Read+0xa4>)
 800996a:	5ccb      	ldrb	r3, [r1, r3]
 800996c:	429a      	cmp	r2, r3
 800996e:	d002      	beq.n	8009976 <FOE_Read+0x5e>
            /* file name not found */
            return ECAT_FOE_ERRCODE_NOTFOUND;
 8009970:	f248 0301 	movw	r3, #32769	; 0x8001
 8009974:	e01d      	b.n	80099b2 <FOE_Read+0x9a>
    for (i = 0; i < nameSize; i++)
 8009976:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009978:	3301      	adds	r3, #1
 800997a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800997c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800997e:	897b      	ldrh	r3, [r7, #10]
 8009980:	429a      	cmp	r2, r3
 8009982:	d3eb      	bcc.n	800995c <FOE_Read+0x44>
    }

    if ( nFileSize >= (u16SendMbxSize-SIZEOF(TFOEHEADER)-MBX_HEADER_SIZE) )
 8009984:	4b0e      	ldr	r3, [pc, #56]	; (80099c0 <FOE_Read+0xa8>)
 8009986:	881b      	ldrh	r3, [r3, #0]
 8009988:	f1a3 020e 	sub.w	r2, r3, #14
 800998c:	4b0d      	ldr	r3, [pc, #52]	; (80099c4 <FOE_Read+0xac>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	429a      	cmp	r2, r3
 8009992:	d804      	bhi.n	800999e <FOE_Read+0x86>
        size = (u16SendMbxSize-SIZEOF(TFOEHEADER)-MBX_HEADER_SIZE);
 8009994:	4b0a      	ldr	r3, [pc, #40]	; (80099c0 <FOE_Read+0xa8>)
 8009996:	881b      	ldrh	r3, [r3, #0]
 8009998:	3b0e      	subs	r3, #14
 800999a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800999c:	e002      	b.n	80099a4 <FOE_Read+0x8c>
    else
        size = (unsigned short) nFileSize;
 800999e:	4b09      	ldr	r3, [pc, #36]	; (80099c4 <FOE_Read+0xac>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	84fb      	strh	r3, [r7, #38]	; 0x26

    MBXMEMCPY(pData, aFileData, size);
 80099a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80099a6:	461a      	mov	r2, r3
 80099a8:	4907      	ldr	r1, [pc, #28]	; (80099c8 <FOE_Read+0xb0>)
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f003 fa4c 	bl	800ce48 <memcpy>
    }
    return size;
 80099b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 80099b2:	4618      	mov	r0, r3
 80099b4:	3728      	adds	r7, #40	; 0x28
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}
 80099ba:	bf00      	nop
 80099bc:	200006e4 	.word	0x200006e4
 80099c0:	20000878 	.word	0x20000878
 80099c4:	200006dc 	.word	0x200006dc
 80099c8:	200006f4 	.word	0x200006f4

080099cc <FOE_Write>:
 \brief    The function starts a file writing

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 FOE_Write(UINT16 MBXMEM * pName, UINT16 nameSize, UINT32 password)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b084      	sub	sp, #16
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	60f8      	str	r0, [r7, #12]
 80099d4:	460b      	mov	r3, r1
 80099d6:	607a      	str	r2, [r7, #4]
 80099d8:	817b      	strh	r3, [r7, #10]
    if ( nameSize < MAX_FILE_NAME_SIZE )
 80099da:	897b      	ldrh	r3, [r7, #10]
 80099dc:	2b0f      	cmp	r3, #15
 80099de:	d815      	bhi.n	8009a0c <FOE_Write+0x40>
    {
        /* for test every file name can be written */
        MBXSTRCPY(aFileName, pName, nameSize);
 80099e0:	897b      	ldrh	r3, [r7, #10]
 80099e2:	461a      	mov	r2, r3
 80099e4:	68f9      	ldr	r1, [r7, #12]
 80099e6:	480c      	ldr	r0, [pc, #48]	; (8009a18 <FOE_Write+0x4c>)
 80099e8:	f003 fa2e 	bl	800ce48 <memcpy>
        MBXSTRCPY(aFileName+nameSize, "\0", 1); //string termination
 80099ec:	897b      	ldrh	r3, [r7, #10]
 80099ee:	4a0a      	ldr	r2, [pc, #40]	; (8009a18 <FOE_Write+0x4c>)
 80099f0:	4413      	add	r3, r2
 80099f2:	2201      	movs	r2, #1
 80099f4:	4909      	ldr	r1, [pc, #36]	; (8009a1c <FOE_Write+0x50>)
 80099f6:	4618      	mov	r0, r3
 80099f8:	f003 fa26 	bl	800ce48 <memcpy>


        nFileWriteOffset = 0;
 80099fc:	4b08      	ldr	r3, [pc, #32]	; (8009a20 <FOE_Write+0x54>)
 80099fe:	2200      	movs	r2, #0
 8009a00:	601a      	str	r2, [r3, #0]
        nFileSize = 0;
 8009a02:	4b08      	ldr	r3, [pc, #32]	; (8009a24 <FOE_Write+0x58>)
 8009a04:	2200      	movs	r2, #0
 8009a06:	601a      	str	r2, [r3, #0]
        return 0;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	e001      	b.n	8009a10 <FOE_Write+0x44>
    }
    else
        return ECAT_FOE_ERRCODE_DISKFULL;
 8009a0c:	f248 0303 	movw	r3, #32771	; 0x8003
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3710      	adds	r7, #16
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}
 8009a18:	200006e4 	.word	0x200006e4
 8009a1c:	0800d584 	.word	0x0800d584
 8009a20:	200006e0 	.word	0x200006e0
 8009a24:	200006dc 	.word	0x200006dc

08009a28 <FOE_Data>:
 \brief    The function is called to write the next part of a file

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 FOE_Data(UINT16 MBXMEM * pData, UINT16 Size)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b082      	sub	sp, #8
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
 8009a30:	460b      	mov	r3, r1
 8009a32:	807b      	strh	r3, [r7, #2]
        if((nFileWriteOffset + Size) > MAX_FILE_SIZE)
 8009a34:	887a      	ldrh	r2, [r7, #2]
 8009a36:	4b1a      	ldr	r3, [pc, #104]	; (8009aa0 <FOE_Data+0x78>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	4413      	add	r3, r2
 8009a3c:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8009a40:	d902      	bls.n	8009a48 <FOE_Data+0x20>
            return ECAT_FOE_ERRCODE_DISKFULL;
 8009a42:	f248 0303 	movw	r3, #32771	; 0x8003
 8009a46:	e026      	b.n	8009a96 <FOE_Data+0x6e>

        if ( Size )
 8009a48:	887b      	ldrh	r3, [r7, #2]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d00a      	beq.n	8009a64 <FOE_Data+0x3c>
        {

                MBXMEMCPY(&aFileData[(nFileWriteOffset >> 1)], pData, Size);
 8009a4e:	4b14      	ldr	r3, [pc, #80]	; (8009aa0 <FOE_Data+0x78>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	085b      	lsrs	r3, r3, #1
 8009a54:	005b      	lsls	r3, r3, #1
 8009a56:	4a13      	ldr	r2, [pc, #76]	; (8009aa4 <FOE_Data+0x7c>)
 8009a58:	4413      	add	r3, r2
 8009a5a:	887a      	ldrh	r2, [r7, #2]
 8009a5c:	6879      	ldr	r1, [r7, #4]
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f003 f9f2 	bl	800ce48 <memcpy>

        }
        if ( Size == (u16ReceiveMbxSize - MBX_HEADER_SIZE - FOE_HEADER_SIZE) )
 8009a64:	887a      	ldrh	r2, [r7, #2]
 8009a66:	4b10      	ldr	r3, [pc, #64]	; (8009aa8 <FOE_Data+0x80>)
 8009a68:	881b      	ldrh	r3, [r3, #0]
 8009a6a:	3b0e      	subs	r3, #14
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d107      	bne.n	8009a80 <FOE_Data+0x58>
        {
            /* FoE-Data services will follow */
            nFileWriteOffset += Size;
 8009a70:	887a      	ldrh	r2, [r7, #2]
 8009a72:	4b0b      	ldr	r3, [pc, #44]	; (8009aa0 <FOE_Data+0x78>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	4413      	add	r3, r2
 8009a78:	4a09      	ldr	r2, [pc, #36]	; (8009aa0 <FOE_Data+0x78>)
 8009a7a:	6013      	str	r3, [r2, #0]
            return 0;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	e00a      	b.n	8009a96 <FOE_Data+0x6e>
        }
        else
        {
            /* last part of the file is written */
            nFileSize = nFileWriteOffset + Size;
 8009a80:	887a      	ldrh	r2, [r7, #2]
 8009a82:	4b07      	ldr	r3, [pc, #28]	; (8009aa0 <FOE_Data+0x78>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4413      	add	r3, r2
 8009a88:	4a08      	ldr	r2, [pc, #32]	; (8009aac <FOE_Data+0x84>)
 8009a8a:	6013      	str	r3, [r2, #0]
            nFileWriteOffset = 0;
 8009a8c:	4b04      	ldr	r3, [pc, #16]	; (8009aa0 <FOE_Data+0x78>)
 8009a8e:	2200      	movs	r2, #0
 8009a90:	601a      	str	r2, [r3, #0]

            return FOE_ACKFINISHED;
 8009a92:	f647 73fc 	movw	r3, #32764	; 0x7ffc
        }


}
 8009a96:	4618      	mov	r0, r3
 8009a98:	3708      	adds	r7, #8
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}
 8009a9e:	bf00      	nop
 8009aa0:	200006e0 	.word	0x200006e0
 8009aa4:	200006f4 	.word	0x200006f4
 8009aa8:	2000087a 	.word	0x2000087a
 8009aac:	200006dc 	.word	0x200006dc

08009ab0 <FOE_Ack>:
 \brief    The function is called when the reading of a part of a file is acknowledged

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 FOE_Ack(UINT32 fileOffset, UINT16 MBXMEM * pData)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b084      	sub	sp, #16
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	6039      	str	r1, [r7, #0]
    if ( fileOffset < nFileSize )
 8009aba:	4b18      	ldr	r3, [pc, #96]	; (8009b1c <FOE_Ack+0x6c>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	687a      	ldr	r2, [r7, #4]
 8009ac0:	429a      	cmp	r2, r3
 8009ac2:	d21e      	bcs.n	8009b02 <FOE_Ack+0x52>
    {
        /* send next part of the file */
        UINT32 size;
        UINT32 sendSize = nFileSize-fileOffset;
 8009ac4:	4b15      	ldr	r3, [pc, #84]	; (8009b1c <FOE_Ack+0x6c>)
 8009ac6:	681a      	ldr	r2, [r3, #0]
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	1ad3      	subs	r3, r2, r3
 8009acc:	60bb      	str	r3, [r7, #8]

        if ( sendSize >= (u16SendMbxSize-SIZEOF(TFOEHEADER)-MBX_HEADER_SIZE) )
 8009ace:	4b14      	ldr	r3, [pc, #80]	; (8009b20 <FOE_Ack+0x70>)
 8009ad0:	881b      	ldrh	r3, [r3, #0]
 8009ad2:	3b0e      	subs	r3, #14
 8009ad4:	68ba      	ldr	r2, [r7, #8]
 8009ad6:	429a      	cmp	r2, r3
 8009ad8:	d304      	bcc.n	8009ae4 <FOE_Ack+0x34>
        {
            size = (u16SendMbxSize-SIZEOF(TFOEHEADER)-MBX_HEADER_SIZE);
 8009ada:	4b11      	ldr	r3, [pc, #68]	; (8009b20 <FOE_Ack+0x70>)
 8009adc:	881b      	ldrh	r3, [r3, #0]
 8009ade:	3b0e      	subs	r3, #14
 8009ae0:	60fb      	str	r3, [r7, #12]
 8009ae2:	e001      	b.n	8009ae8 <FOE_Ack+0x38>
        }
        else
        {
            size = sendSize;
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	60fb      	str	r3, [r7, #12]
        }
        MBXMEMCPY(pData, &aFileData[(fileOffset >> 1)], size);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	085b      	lsrs	r3, r3, #1
 8009aec:	005b      	lsls	r3, r3, #1
 8009aee:	4a0d      	ldr	r2, [pc, #52]	; (8009b24 <FOE_Ack+0x74>)
 8009af0:	4413      	add	r3, r2
 8009af2:	68fa      	ldr	r2, [r7, #12]
 8009af4:	4619      	mov	r1, r3
 8009af6:	6838      	ldr	r0, [r7, #0]
 8009af8:	f003 f9a6 	bl	800ce48 <memcpy>

        return ((UINT16) size);
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	b29b      	uxth	r3, r3
 8009b00:	e008      	b.n	8009b14 <FOE_Ack+0x64>
    }
    else if ( fileOffset == nFileSize )
 8009b02:	4b06      	ldr	r3, [pc, #24]	; (8009b1c <FOE_Ack+0x6c>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	687a      	ldr	r2, [r7, #4]
 8009b08:	429a      	cmp	r2, r3
 8009b0a:	d101      	bne.n	8009b10 <FOE_Ack+0x60>
    {
        /* file transfer is finished */
        return 0; // size = 0
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	e001      	b.n	8009b14 <FOE_Ack+0x64>
    }
    else
        return ECAT_FOE_ERRCODE_ILLEGAL;
 8009b10:	f248 0304 	movw	r3, #32772	; 0x8004

}
 8009b14:	4618      	mov	r0, r3
 8009b16:	3710      	adds	r7, #16
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}
 8009b1c:	200006dc 	.word	0x200006dc
 8009b20:	20000878 	.word	0x20000878
 8009b24:	200006f4 	.word	0x200006f4

08009b28 <FOE_Busy>:
 \brief    The function is called when the reading of a part of a file should be repeated

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 FOE_Busy(UINT16 done, UINT32 fileOffset, UINT16 MBXMEM * pData)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b084      	sub	sp, #16
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	4603      	mov	r3, r0
 8009b30:	60b9      	str	r1, [r7, #8]
 8009b32:	607a      	str	r2, [r7, #4]
 8009b34:	81fb      	strh	r3, [r7, #14]
    /* send last part again */
    return FOE_Ack(fileOffset, pData);
 8009b36:	6879      	ldr	r1, [r7, #4]
 8009b38:	68b8      	ldr	r0, [r7, #8]
 8009b3a:	f7ff ffb9 	bl	8009ab0 <FOE_Ack>
 8009b3e:	4603      	mov	r3, r0
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	3710      	adds	r7, #16
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}

08009b48 <FOE_Error>:
 \brief    The function is called when a file transfer is aborted from the other station

*////////////////////////////////////////////////////////////////////////////////////////

void FOE_Error(UINT32 errorCode)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b082      	sub	sp, #8
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
    if ( nFileWriteOffset )
 8009b50:	4b09      	ldr	r3, [pc, #36]	; (8009b78 <FOE_Error+0x30>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d00a      	beq.n	8009b6e <FOE_Error+0x26>
    {
        /* no file is stored */
        memset(aFileName, 0, MAX_FILE_NAME_SIZE);
 8009b58:	2210      	movs	r2, #16
 8009b5a:	2100      	movs	r1, #0
 8009b5c:	4807      	ldr	r0, [pc, #28]	; (8009b7c <FOE_Error+0x34>)
 8009b5e:	f003 f981 	bl	800ce64 <memset>
        nFileWriteOffset = 0;
 8009b62:	4b05      	ldr	r3, [pc, #20]	; (8009b78 <FOE_Error+0x30>)
 8009b64:	2200      	movs	r2, #0
 8009b66:	601a      	str	r2, [r3, #0]
        nFileSize = 0;
 8009b68:	4b05      	ldr	r3, [pc, #20]	; (8009b80 <FOE_Error+0x38>)
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	601a      	str	r2, [r3, #0]
    }
}
 8009b6e:	bf00      	nop
 8009b70:	3708      	adds	r7, #8
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
 8009b76:	bf00      	nop
 8009b78:	200006e0 	.word	0x200006e0
 8009b7c:	200006e4 	.word	0x200006e4
 8009b80:	200006dc 	.word	0x200006dc

08009b84 <PutInMbxQueue>:
//
//    PutInMbxQueue
//

UINT8 PutInMbxQueue(TMBX MBXMEM * pMbx, TMBXQUEUE MBXMEM * pQueue)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b085      	sub	sp, #20
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
 8009b8c:	6039      	str	r1, [r7, #0]
    UINT16 lastInQueue;
    ENTER_MBX_CRITICAL;


    lastInQueue = pQueue->lastInQueue+1;
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	885b      	ldrh	r3, [r3, #2]
 8009b92:	3301      	adds	r3, #1
 8009b94:	81fb      	strh	r3, [r7, #14]
    if (lastInQueue == pQueue->maxQueueSize)
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	889b      	ldrh	r3, [r3, #4]
 8009b9a:	89fa      	ldrh	r2, [r7, #14]
 8009b9c:	429a      	cmp	r2, r3
 8009b9e:	d101      	bne.n	8009ba4 <PutInMbxQueue+0x20>
    {
        // Umbruch der Queue
        lastInQueue = 0;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	81fb      	strh	r3, [r7, #14]
    }

    if (pQueue->firstInQueue == lastInQueue)
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	881b      	ldrh	r3, [r3, #0]
 8009ba8:	89fa      	ldrh	r2, [r7, #14]
 8009baa:	429a      	cmp	r2, r3
 8009bac:	d101      	bne.n	8009bb2 <PutInMbxQueue+0x2e>
    {
        // Ueberlauf der Queue -> letztes Element wieder herausnehmen
        LEAVE_MBX_CRITICAL;
        return MBXERR_NOMOREMEMORY;
 8009bae:	2307      	movs	r3, #7
 8009bb0:	e00b      	b.n	8009bca <PutInMbxQueue+0x46>
    }

    pQueue->queue[pQueue->lastInQueue] = pMbx;
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	885b      	ldrh	r3, [r3, #2]
 8009bb6:	461a      	mov	r2, r3
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	3202      	adds	r2, #2
 8009bbc:	6879      	ldr	r1, [r7, #4]
 8009bbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pQueue->lastInQueue = lastInQueue;
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	89fa      	ldrh	r2, [r7, #14]
 8009bc6:	805a      	strh	r2, [r3, #2]

    LEAVE_MBX_CRITICAL;

    return 0;
 8009bc8:	2300      	movs	r3, #0
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3714      	adds	r7, #20
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd4:	4770      	bx	lr

08009bd6 <GetOutOfMbxQueue>:
//
//    GetOutOfMbxQueue
//

TMBX MBXMEM * GetOutOfMbxQueue(TMBXQUEUE MBXMEM * pQueue)
{
 8009bd6:	b480      	push	{r7}
 8009bd8:	b085      	sub	sp, #20
 8009bda:	af00      	add	r7, sp, #0
 8009bdc:	6078      	str	r0, [r7, #4]
    TMBX MBXMEM * pMbx;
    ENTER_MBX_CRITICAL;

    if (pQueue->firstInQueue != pQueue->lastInQueue)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	881a      	ldrh	r2, [r3, #0]
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	885b      	ldrh	r3, [r3, #2]
 8009be6:	429a      	cmp	r2, r3
 8009be8:	d018      	beq.n	8009c1c <GetOutOfMbxQueue+0x46>
    {
        // Queue ist nicht leer
        UINT16 firstInQueue = pQueue->firstInQueue;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	881b      	ldrh	r3, [r3, #0]
 8009bee:	817b      	strh	r3, [r7, #10]
        pMbx = pQueue->queue[firstInQueue];
 8009bf0:	897a      	ldrh	r2, [r7, #10]
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	3202      	adds	r2, #2
 8009bf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bfa:	60fb      	str	r3, [r7, #12]
        firstInQueue++;
 8009bfc:	897b      	ldrh	r3, [r7, #10]
 8009bfe:	3301      	adds	r3, #1
 8009c00:	817b      	strh	r3, [r7, #10]
        pQueue->firstInQueue = firstInQueue;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	897a      	ldrh	r2, [r7, #10]
 8009c06:	801a      	strh	r2, [r3, #0]
        if (pQueue->firstInQueue == pQueue->maxQueueSize)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	881a      	ldrh	r2, [r3, #0]
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	889b      	ldrh	r3, [r3, #4]
 8009c10:	429a      	cmp	r2, r3
 8009c12:	d105      	bne.n	8009c20 <GetOutOfMbxQueue+0x4a>
        {
            // Umbruch der Queue
            pQueue->firstInQueue = 0;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2200      	movs	r2, #0
 8009c18:	801a      	strh	r2, [r3, #0]
 8009c1a:	e001      	b.n	8009c20 <GetOutOfMbxQueue+0x4a>
        }
    }
    else
        pMbx = 0;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	60fb      	str	r3, [r7, #12]


    LEAVE_MBX_CRITICAL;

    return pMbx;
 8009c20:	68fb      	ldr	r3, [r7, #12]
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	3714      	adds	r7, #20
 8009c26:	46bd      	mov	sp, r7
 8009c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2c:	4770      	bx	lr
	...

08009c30 <MBX_Init>:
/**
 \brief    This function intialize the Mailbox Interface.
*////////////////////////////////////////////////////////////////////////////////////////

void MBX_Init(void)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b082      	sub	sp, #8
 8009c34:	af00      	add	r7, sp, #0
    u16ReceiveMbxSize = MIN_MBX_SIZE;
 8009c36:	4b2f      	ldr	r3, [pc, #188]	; (8009cf4 <MBX_Init+0xc4>)
 8009c38:	2222      	movs	r2, #34	; 0x22
 8009c3a:	801a      	strh	r2, [r3, #0]
    u16SendMbxSize = MAX_MBX_SIZE;
 8009c3c:	4b2e      	ldr	r3, [pc, #184]	; (8009cf8 <MBX_Init+0xc8>)
 8009c3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009c42:	801a      	strh	r2, [r3, #0]
    u16EscAddrReceiveMbx = MIN_MBX_WRITE_ADDRESS;
 8009c44:	4b2d      	ldr	r3, [pc, #180]	; (8009cfc <MBX_Init+0xcc>)
 8009c46:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009c4a:	801a      	strh	r2, [r3, #0]
    u16EscAddrSendMbx = MIN_MBX_READ_ADDRESS;
 8009c4c:	4b2c      	ldr	r3, [pc, #176]	; (8009d00 <MBX_Init+0xd0>)
 8009c4e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009c52:	801a      	strh	r2, [r3, #0]

    sMbxReceiveQueue.firstInQueue    = 0;
 8009c54:	4b2b      	ldr	r3, [pc, #172]	; (8009d04 <MBX_Init+0xd4>)
 8009c56:	2200      	movs	r2, #0
 8009c58:	801a      	strh	r2, [r3, #0]
    sMbxReceiveQueue.lastInQueue     = 0;
 8009c5a:	4b2a      	ldr	r3, [pc, #168]	; (8009d04 <MBX_Init+0xd4>)
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	805a      	strh	r2, [r3, #2]
    sMbxReceiveQueue.maxQueueSize = MAX_MBX_QUEUE_SIZE;
 8009c60:	4b28      	ldr	r3, [pc, #160]	; (8009d04 <MBX_Init+0xd4>)
 8009c62:	220a      	movs	r2, #10
 8009c64:	809a      	strh	r2, [r3, #4]
    sMbxSendQueue.firstInQueue        = 0;
 8009c66:	4b28      	ldr	r3, [pc, #160]	; (8009d08 <MBX_Init+0xd8>)
 8009c68:	2200      	movs	r2, #0
 8009c6a:	801a      	strh	r2, [r3, #0]
    sMbxSendQueue.lastInQueue         = 0;
 8009c6c:	4b26      	ldr	r3, [pc, #152]	; (8009d08 <MBX_Init+0xd8>)
 8009c6e:	2200      	movs	r2, #0
 8009c70:	805a      	strh	r2, [r3, #2]
    sMbxSendQueue.maxQueueSize     = MAX_MBX_QUEUE_SIZE;
 8009c72:	4b25      	ldr	r3, [pc, #148]	; (8009d08 <MBX_Init+0xd8>)
 8009c74:	220a      	movs	r2, #10
 8009c76:	809a      	strh	r2, [r3, #4]
    psWriteMbx  = NULL;
 8009c78:	4b24      	ldr	r3, [pc, #144]	; (8009d0c <MBX_Init+0xdc>)
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	601a      	str	r2, [r3, #0]

    bEoESendFramePending = FALSE;
 8009c7e:	4b24      	ldr	r3, [pc, #144]	; (8009d10 <MBX_Init+0xe0>)
 8009c80:	2200      	movs	r2, #0
 8009c82:	701a      	strb	r2, [r3, #0]

    psRepeatMbx = NULL;
 8009c84:	4b23      	ldr	r3, [pc, #140]	; (8009d14 <MBX_Init+0xe4>)
 8009c86:	2200      	movs	r2, #0
 8009c88:	601a      	str	r2, [r3, #0]
    psReadMbx    = NULL;
 8009c8a:	4b23      	ldr	r3, [pc, #140]	; (8009d18 <MBX_Init+0xe8>)
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	601a      	str	r2, [r3, #0]
    psStoreMbx    = NULL;
 8009c90:	4b22      	ldr	r3, [pc, #136]	; (8009d1c <MBX_Init+0xec>)
 8009c92:	2200      	movs	r2, #0
 8009c94:	601a      	str	r2, [r3, #0]

    bMbxRepeatToggle    = FALSE;
 8009c96:	4b22      	ldr	r3, [pc, #136]	; (8009d20 <MBX_Init+0xf0>)
 8009c98:	2200      	movs	r2, #0
 8009c9a:	701a      	strb	r2, [r3, #0]
    /*Reset Repeat acknowledge bit of SyncManager1 (0x80F bit 2)*/
    {
        UINT16 sm1Activate = 0;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	80fb      	strh	r3, [r7, #6]
        HW_EscReadWord(sm1Activate,(ESC_SYNCMAN_ACTIVE_OFFSET + SIZEOF_SM_REGISTER));
 8009ca0:	1dbb      	adds	r3, r7, #6
 8009ca2:	2202      	movs	r2, #2
 8009ca4:	f640 010e 	movw	r1, #2062	; 0x80e
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f7ff fb8f 	bl	80093cc <HW_EscRead>
        sm1Activate &= SWAPWORD(~0x0200);
 8009cae:	88fb      	ldrh	r3, [r7, #6]
 8009cb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009cb4:	b29b      	uxth	r3, r3
 8009cb6:	80fb      	strh	r3, [r7, #6]
        HW_EscWriteWord(sm1Activate,(ESC_SYNCMAN_ACTIVE_OFFSET + SIZEOF_SM_REGISTER));
 8009cb8:	1dbb      	adds	r3, r7, #6
 8009cba:	2202      	movs	r2, #2
 8009cbc:	f640 010e 	movw	r1, #2062	; 0x80e
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f7ff fbdf 	bl	8009484 <HW_EscWrite>
    }
    bMbxRunning = FALSE;
 8009cc6:	4b17      	ldr	r3, [pc, #92]	; (8009d24 <MBX_Init+0xf4>)
 8009cc8:	2200      	movs	r2, #0
 8009cca:	701a      	strb	r2, [r3, #0]
    bSendMbxIsFull = FALSE;
 8009ccc:	4b16      	ldr	r3, [pc, #88]	; (8009d28 <MBX_Init+0xf8>)
 8009cce:	2200      	movs	r2, #0
 8009cd0:	701a      	strb	r2, [r3, #0]
    bReceiveMbxIsLocked = FALSE;
 8009cd2:	4b16      	ldr	r3, [pc, #88]	; (8009d2c <MBX_Init+0xfc>)
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	701a      	strb	r2, [r3, #0]
    u8MailboxSendReqStored    = 0;
 8009cd8:	4b15      	ldr	r3, [pc, #84]	; (8009d30 <MBX_Init+0x100>)
 8009cda:	2200      	movs	r2, #0
 8009cdc:	701a      	strb	r2, [r3, #0]
    u8MbxWriteCounter = 0;
 8009cde:	4b15      	ldr	r3, [pc, #84]	; (8009d34 <MBX_Init+0x104>)
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	701a      	strb	r2, [r3, #0]
    u8MbxReadCounter    = 0;
 8009ce4:	4b14      	ldr	r3, [pc, #80]	; (8009d38 <MBX_Init+0x108>)
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	701a      	strb	r2, [r3, #0]
}
 8009cea:	bf00      	nop
 8009cec:	3708      	adds	r7, #8
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}
 8009cf2:	bf00      	nop
 8009cf4:	2000087a 	.word	0x2000087a
 8009cf8:	20000878 	.word	0x20000878
 8009cfc:	2000087c 	.word	0x2000087c
 8009d00:	2000087e 	.word	0x2000087e
 8009d04:	20000acc 	.word	0x20000acc
 8009d08:	20000a98 	.word	0x20000a98
 8009d0c:	20000a88 	.word	0x20000a88
 8009d10:	20000650 	.word	0x20000650
 8009d14:	20000a90 	.word	0x20000a90
 8009d18:	20000a8c 	.word	0x20000a8c
 8009d1c:	20000a94 	.word	0x20000a94
 8009d20:	20000877 	.word	0x20000877
 8009d24:	20000876 	.word	0x20000876
 8009d28:	20000875 	.word	0x20000875
 8009d2c:	20000874 	.word	0x20000874
 8009d30:	20000a84 	.word	0x20000a84
 8009d34:	20000880 	.word	0x20000880
 8009d38:	20000881 	.word	0x20000881

08009d3c <MBX_StartMailboxHandler>:
 \brief     it is checked if the mailbox areas overlaps each other
 \brief     and the Sync Manager channels 0 and 1 are enabled.
 \brief     This function shall only be called if mailbox is supported.
*////////////////////////////////////////////////////////////////////////////////////////
UINT16 MBX_StartMailboxHandler(void)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b082      	sub	sp, #8
 8009d40:	af00      	add	r7, sp, #0
    UINT16 result = 0;
 8009d42:	2300      	movs	r3, #0
 8009d44:	80fb      	strh	r3, [r7, #6]
    /* get address of the receive mailbox sync manager (SM0) */
/*ECATCHANGE_START(V5.11) HW1*/
    TSYNCMAN ESCMEM * pSyncMan = (TSYNCMAN ESCMEM *)GetSyncMan(MAILBOX_WRITE);
 8009d46:	2000      	movs	r0, #0
 8009d48:	f7fd fbec 	bl	8007524 <GetSyncMan>
 8009d4c:	6038      	str	r0, [r7, #0]
/*ECATCHANGE_END(V5.11) HW1*/
    /* store size of the receive mailbox */
    u16ReceiveMbxSize     = pSyncMan->Length;
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	885a      	ldrh	r2, [r3, #2]
 8009d52:	4b2f      	ldr	r3, [pc, #188]	; (8009e10 <MBX_StartMailboxHandler+0xd4>)
 8009d54:	801a      	strh	r2, [r3, #0]
    /* store the address of the receive mailbox */
    u16EscAddrReceiveMbx = pSyncMan->PhysicalStartAddress;
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	881a      	ldrh	r2, [r3, #0]
 8009d5a:	4b2e      	ldr	r3, [pc, #184]	; (8009e14 <MBX_StartMailboxHandler+0xd8>)
 8009d5c:	801a      	strh	r2, [r3, #0]

    /* get address of the send mailbox sync manager (SM1) */
/*ECATCHANGE_START(V5.11) HW1*/
    pSyncMan =(TSYNCMAN ESCMEM *) GetSyncMan(MAILBOX_READ);
 8009d5e:	2001      	movs	r0, #1
 8009d60:	f7fd fbe0 	bl	8007524 <GetSyncMan>
 8009d64:	6038      	str	r0, [r7, #0]
/*ECATCHANGE_END(V5.11) HW1*/

    /* store the size of the send mailbox */
    u16SendMbxSize = pSyncMan->Length;
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	885a      	ldrh	r2, [r3, #2]
 8009d6a:	4b2b      	ldr	r3, [pc, #172]	; (8009e18 <MBX_StartMailboxHandler+0xdc>)
 8009d6c:	801a      	strh	r2, [r3, #0]
    /* store the address of the send mailbox */
    u16EscAddrSendMbx = pSyncMan->PhysicalStartAddress;
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	881a      	ldrh	r2, [r3, #0]
 8009d72:	4b2a      	ldr	r3, [pc, #168]	; (8009e1c <MBX_StartMailboxHandler+0xe0>)
 8009d74:	801a      	strh	r2, [r3, #0]

    // HBu 02.05.06: it should be checked if there are overlaps in the sync manager areas
    if ((u16EscAddrReceiveMbx + u16ReceiveMbxSize) > u16EscAddrSendMbx && (u16EscAddrReceiveMbx < (u16EscAddrSendMbx + u16SendMbxSize)))
 8009d76:	4b27      	ldr	r3, [pc, #156]	; (8009e14 <MBX_StartMailboxHandler+0xd8>)
 8009d78:	881b      	ldrh	r3, [r3, #0]
 8009d7a:	461a      	mov	r2, r3
 8009d7c:	4b24      	ldr	r3, [pc, #144]	; (8009e10 <MBX_StartMailboxHandler+0xd4>)
 8009d7e:	881b      	ldrh	r3, [r3, #0]
 8009d80:	4413      	add	r3, r2
 8009d82:	4a26      	ldr	r2, [pc, #152]	; (8009e1c <MBX_StartMailboxHandler+0xe0>)
 8009d84:	8812      	ldrh	r2, [r2, #0]
 8009d86:	4293      	cmp	r3, r2
 8009d88:	dd0c      	ble.n	8009da4 <MBX_StartMailboxHandler+0x68>
 8009d8a:	4b22      	ldr	r3, [pc, #136]	; (8009e14 <MBX_StartMailboxHandler+0xd8>)
 8009d8c:	881b      	ldrh	r3, [r3, #0]
 8009d8e:	461a      	mov	r2, r3
 8009d90:	4b22      	ldr	r3, [pc, #136]	; (8009e1c <MBX_StartMailboxHandler+0xe0>)
 8009d92:	881b      	ldrh	r3, [r3, #0]
 8009d94:	4619      	mov	r1, r3
 8009d96:	4b20      	ldr	r3, [pc, #128]	; (8009e18 <MBX_StartMailboxHandler+0xdc>)
 8009d98:	881b      	ldrh	r3, [r3, #0]
 8009d9a:	440b      	add	r3, r1
 8009d9c:	429a      	cmp	r2, r3
 8009d9e:	da01      	bge.n	8009da4 <MBX_StartMailboxHandler+0x68>
    {
        return ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8009da0:	2316      	movs	r3, #22
 8009da2:	e031      	b.n	8009e08 <MBX_StartMailboxHandler+0xcc>
    }

    /* enable the receive mailbox sync manager channel */
/*ECATCHANGE_START(V5.11) HW1*/
    EnableSyncManChannel(MAILBOX_WRITE);
 8009da4:	2000      	movs	r0, #0
 8009da6:	f7fd fbfd 	bl	80075a4 <EnableSyncManChannel>
    /* enable the send mailbox sync manager channel */
    EnableSyncManChannel(MAILBOX_READ);
 8009daa:	2001      	movs	r0, #1
 8009dac:	f7fd fbfa 	bl	80075a4 <EnableSyncManChannel>
/*ECATCHANGE_END(V5.11) HW1*/

/* ECATCHANGE_START(V5.11) MBX2*/
        psWriteMbx = (TMBX MBXMEM *) APPL_AllocMailboxBuffer(u16ReceiveMbxSize);
 8009db0:	4b17      	ldr	r3, [pc, #92]	; (8009e10 <MBX_StartMailboxHandler+0xd4>)
 8009db2:	881b      	ldrh	r3, [r3, #0]
 8009db4:	4618      	mov	r0, r3
 8009db6:	f003 f827 	bl	800ce08 <malloc>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	461a      	mov	r2, r3
 8009dbe:	4b18      	ldr	r3, [pc, #96]	; (8009e20 <MBX_StartMailboxHandler+0xe4>)
 8009dc0:	601a      	str	r2, [r3, #0]
        if(psWriteMbx == NULL)
 8009dc2:	4b17      	ldr	r3, [pc, #92]	; (8009e20 <MBX_StartMailboxHandler+0xe4>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d115      	bne.n	8009df6 <MBX_StartMailboxHandler+0xba>
        {
            bNoMbxMemoryAvailable = TRUE;
 8009dca:	4b16      	ldr	r3, [pc, #88]	; (8009e24 <MBX_StartMailboxHandler+0xe8>)
 8009dcc:	2201      	movs	r2, #1
 8009dce:	701a      	strb	r2, [r3, #0]

            //check if at least enough memory for an mailbox error is available (other wise stop the state transition)
            psWriteMbx = (TMBX MBXMEM *) APPL_AllocMailboxBuffer(10); /* a mailbox error datagram length*/
 8009dd0:	200a      	movs	r0, #10
 8009dd2:	f003 f819 	bl	800ce08 <malloc>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	461a      	mov	r2, r3
 8009dda:	4b11      	ldr	r3, [pc, #68]	; (8009e20 <MBX_StartMailboxHandler+0xe4>)
 8009ddc:	601a      	str	r2, [r3, #0]
            if(psWriteMbx == NULL)
 8009dde:	4b10      	ldr	r3, [pc, #64]	; (8009e20 <MBX_StartMailboxHandler+0xe4>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d101      	bne.n	8009dea <MBX_StartMailboxHandler+0xae>
            {
                result = ALSTATUSCODE_NOMEMORY;
 8009de6:	2302      	movs	r3, #2
 8009de8:	80fb      	strh	r3, [r7, #6]
            }
           
            APPL_FreeMailboxBuffer(psWriteMbx);
 8009dea:	4b0d      	ldr	r3, [pc, #52]	; (8009e20 <MBX_StartMailboxHandler+0xe4>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	4618      	mov	r0, r3
 8009df0:	f003 f812 	bl	800ce18 <free>
 8009df4:	e007      	b.n	8009e06 <MBX_StartMailboxHandler+0xca>
        }
        else
        {
            bNoMbxMemoryAvailable = FALSE;
 8009df6:	4b0b      	ldr	r3, [pc, #44]	; (8009e24 <MBX_StartMailboxHandler+0xe8>)
 8009df8:	2200      	movs	r2, #0
 8009dfa:	701a      	strb	r2, [r3, #0]
            APPL_FreeMailboxBuffer(psWriteMbx);
 8009dfc:	4b08      	ldr	r3, [pc, #32]	; (8009e20 <MBX_StartMailboxHandler+0xe4>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	4618      	mov	r0, r3
 8009e02:	f003 f809 	bl	800ce18 <free>
        }
/* ECATCHANGE_END(V5.11) MBX2*/

    return result;
 8009e06:	88fb      	ldrh	r3, [r7, #6]
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3708      	adds	r7, #8
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}
 8009e10:	2000087a 	.word	0x2000087a
 8009e14:	2000087c 	.word	0x2000087c
 8009e18:	20000878 	.word	0x20000878
 8009e1c:	2000087e 	.word	0x2000087e
 8009e20:	20000a88 	.word	0x20000a88
 8009e24:	20000b00 	.word	0x20000b00

08009e28 <MBX_StopMailboxHandler>:
 \brief  local management service Stop Mailbox Handler
 \brief  the Sync Manager channels 0 and 1 are disabled
*////////////////////////////////////////////////////////////////////////////////////////

void MBX_StopMailboxHandler(void)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b082      	sub	sp, #8
 8009e2c:	af00      	add	r7, sp, #0
    TMBX MBXMEM * pMbx;

    /* mailbox handler is stopped */
    bMbxRunning = FALSE;
 8009e2e:	4b46      	ldr	r3, [pc, #280]	; (8009f48 <MBX_StopMailboxHandler+0x120>)
 8009e30:	2200      	movs	r2, #0
 8009e32:	701a      	strb	r2, [r3, #0]
    /* disable the receive mailbox sync manager channel */
/*ECATCHANGE_START(V5.11) HW1*/
    DisableSyncManChannel(MAILBOX_WRITE);
 8009e34:	2000      	movs	r0, #0
 8009e36:	f7fd fb8d 	bl	8007554 <DisableSyncManChannel>
    /* disable the send mailbox sync manager channel */
    DisableSyncManChannel(MAILBOX_READ);
 8009e3a:	2001      	movs	r0, #1
 8009e3c:	f7fd fb8a 	bl	8007554 <DisableSyncManChannel>
/*ECATCHANGE_END(V5.11) HW1*/
    /* initialize variables again */


    if (psRepeatMbx != NULL)
 8009e40:	4b42      	ldr	r3, [pc, #264]	; (8009f4c <MBX_StopMailboxHandler+0x124>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d004      	beq.n	8009e52 <MBX_StopMailboxHandler+0x2a>
        APPL_FreeMailboxBuffer(psRepeatMbx);
 8009e48:	4b40      	ldr	r3, [pc, #256]	; (8009f4c <MBX_StopMailboxHandler+0x124>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f002 ffe3 	bl	800ce18 <free>

    if (psStoreMbx != NULL && psStoreMbx != psRepeatMbx)
 8009e52:	4b3f      	ldr	r3, [pc, #252]	; (8009f50 <MBX_StopMailboxHandler+0x128>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d00a      	beq.n	8009e70 <MBX_StopMailboxHandler+0x48>
 8009e5a:	4b3d      	ldr	r3, [pc, #244]	; (8009f50 <MBX_StopMailboxHandler+0x128>)
 8009e5c:	681a      	ldr	r2, [r3, #0]
 8009e5e:	4b3b      	ldr	r3, [pc, #236]	; (8009f4c <MBX_StopMailboxHandler+0x124>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	429a      	cmp	r2, r3
 8009e64:	d004      	beq.n	8009e70 <MBX_StopMailboxHandler+0x48>
        APPL_FreeMailboxBuffer(psStoreMbx);
 8009e66:	4b3a      	ldr	r3, [pc, #232]	; (8009f50 <MBX_StopMailboxHandler+0x128>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f002 ffd4 	bl	800ce18 <free>

    if (psReadMbx != NULL && psReadMbx != psRepeatMbx && psReadMbx != psStoreMbx)
 8009e70:	4b38      	ldr	r3, [pc, #224]	; (8009f54 <MBX_StopMailboxHandler+0x12c>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d010      	beq.n	8009e9a <MBX_StopMailboxHandler+0x72>
 8009e78:	4b36      	ldr	r3, [pc, #216]	; (8009f54 <MBX_StopMailboxHandler+0x12c>)
 8009e7a:	681a      	ldr	r2, [r3, #0]
 8009e7c:	4b33      	ldr	r3, [pc, #204]	; (8009f4c <MBX_StopMailboxHandler+0x124>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	429a      	cmp	r2, r3
 8009e82:	d00a      	beq.n	8009e9a <MBX_StopMailboxHandler+0x72>
 8009e84:	4b33      	ldr	r3, [pc, #204]	; (8009f54 <MBX_StopMailboxHandler+0x12c>)
 8009e86:	681a      	ldr	r2, [r3, #0]
 8009e88:	4b31      	ldr	r3, [pc, #196]	; (8009f50 <MBX_StopMailboxHandler+0x128>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	429a      	cmp	r2, r3
 8009e8e:	d004      	beq.n	8009e9a <MBX_StopMailboxHandler+0x72>
        APPL_FreeMailboxBuffer(psReadMbx);
 8009e90:	4b30      	ldr	r3, [pc, #192]	; (8009f54 <MBX_StopMailboxHandler+0x12c>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	4618      	mov	r0, r3
 8009e96:	f002 ffbf 	bl	800ce18 <free>

    bEoESendFramePending = FALSE;
 8009e9a:	4b2f      	ldr	r3, [pc, #188]	; (8009f58 <MBX_StopMailboxHandler+0x130>)
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	701a      	strb	r2, [r3, #0]

    psRepeatMbx = NULL;
 8009ea0:	4b2a      	ldr	r3, [pc, #168]	; (8009f4c <MBX_StopMailboxHandler+0x124>)
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	601a      	str	r2, [r3, #0]
    psReadMbx = NULL;
 8009ea6:	4b2b      	ldr	r3, [pc, #172]	; (8009f54 <MBX_StopMailboxHandler+0x12c>)
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	601a      	str	r2, [r3, #0]
    psStoreMbx = NULL;
 8009eac:	4b28      	ldr	r3, [pc, #160]	; (8009f50 <MBX_StopMailboxHandler+0x128>)
 8009eae:	2200      	movs	r2, #0
 8009eb0:	601a      	str	r2, [r3, #0]

    bMbxRepeatToggle    = FALSE;
 8009eb2:	4b2a      	ldr	r3, [pc, #168]	; (8009f5c <MBX_StopMailboxHandler+0x134>)
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	701a      	strb	r2, [r3, #0]
    /*Reset Repeat acknowledge bit of SyncManager1 (0x080F bit 2)*/
    {
        UINT16 sm1Activate = 0;
 8009eb8:	2300      	movs	r3, #0
 8009eba:	807b      	strh	r3, [r7, #2]
        HW_EscReadWord(sm1Activate,(ESC_SYNCMAN_ACTIVE_OFFSET + SIZEOF_SM_REGISTER));
 8009ebc:	1cbb      	adds	r3, r7, #2
 8009ebe:	2202      	movs	r2, #2
 8009ec0:	f640 010e 	movw	r1, #2062	; 0x80e
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	f7ff fa81 	bl	80093cc <HW_EscRead>
        sm1Activate &= SWAPWORD(~0x0200);
 8009eca:	887b      	ldrh	r3, [r7, #2]
 8009ecc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009ed0:	b29b      	uxth	r3, r3
 8009ed2:	807b      	strh	r3, [r7, #2]
        HW_EscWriteWord(sm1Activate,(ESC_SYNCMAN_ACTIVE_OFFSET + SIZEOF_SM_REGISTER));
 8009ed4:	1cbb      	adds	r3, r7, #2
 8009ed6:	2202      	movs	r2, #2
 8009ed8:	f640 010e 	movw	r1, #2062	; 0x80e
 8009edc:	4618      	mov	r0, r3
 8009ede:	f7ff fad1 	bl	8009484 <HW_EscWrite>
    }
    bSendMbxIsFull         = FALSE;
 8009ee2:	4b1f      	ldr	r3, [pc, #124]	; (8009f60 <MBX_StopMailboxHandler+0x138>)
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	701a      	strb	r2, [r3, #0]
    bReceiveMbxIsLocked = FALSE;
 8009ee8:	4b1e      	ldr	r3, [pc, #120]	; (8009f64 <MBX_StopMailboxHandler+0x13c>)
 8009eea:	2200      	movs	r2, #0
 8009eec:	701a      	strb	r2, [r3, #0]
    u8MailboxSendReqStored    = 0;
 8009eee:	4b1e      	ldr	r3, [pc, #120]	; (8009f68 <MBX_StopMailboxHandler+0x140>)
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	701a      	strb	r2, [r3, #0]
    u8MbxWriteCounter         = 0;
 8009ef4:	4b1d      	ldr	r3, [pc, #116]	; (8009f6c <MBX_StopMailboxHandler+0x144>)
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	701a      	strb	r2, [r3, #0]
    u8MbxReadCounter        = 0;
 8009efa:	4b1d      	ldr	r3, [pc, #116]	; (8009f70 <MBX_StopMailboxHandler+0x148>)
 8009efc:	2200      	movs	r2, #0
 8009efe:	701a      	strb	r2, [r3, #0]

    do
    {
        pMbx = GetOutOfMbxQueue(&sMbxReceiveQueue);
 8009f00:	481c      	ldr	r0, [pc, #112]	; (8009f74 <MBX_StopMailboxHandler+0x14c>)
 8009f02:	f7ff fe68 	bl	8009bd6 <GetOutOfMbxQueue>
 8009f06:	6078      	str	r0, [r7, #4]
        if (pMbx)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d004      	beq.n	8009f18 <MBX_StopMailboxHandler+0xf0>
        {
            APPL_FreeMailboxBuffer(pMbx);
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f002 ff82 	bl	800ce18 <free>
            pMbx = NULL;
 8009f14:	2300      	movs	r3, #0
 8009f16:	607b      	str	r3, [r7, #4]
        }
    } while (pMbx != NULL);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d1f0      	bne.n	8009f00 <MBX_StopMailboxHandler+0xd8>
    do
    {
        pMbx = GetOutOfMbxQueue(&sMbxSendQueue);
 8009f1e:	4816      	ldr	r0, [pc, #88]	; (8009f78 <MBX_StopMailboxHandler+0x150>)
 8009f20:	f7ff fe59 	bl	8009bd6 <GetOutOfMbxQueue>
 8009f24:	6078      	str	r0, [r7, #4]
        if (pMbx)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d004      	beq.n	8009f36 <MBX_StopMailboxHandler+0x10e>
        {
            APPL_FreeMailboxBuffer(pMbx);
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f002 ff73 	bl	800ce18 <free>
            pMbx = NULL;
 8009f32:	2300      	movs	r3, #0
 8009f34:	607b      	str	r3, [r7, #4]
        }
    } while (pMbx != NULL);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d1f0      	bne.n	8009f1e <MBX_StopMailboxHandler+0xf6>

}
 8009f3c:	bf00      	nop
 8009f3e:	bf00      	nop
 8009f40:	3708      	adds	r7, #8
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}
 8009f46:	bf00      	nop
 8009f48:	20000876 	.word	0x20000876
 8009f4c:	20000a90 	.word	0x20000a90
 8009f50:	20000a94 	.word	0x20000a94
 8009f54:	20000a8c 	.word	0x20000a8c
 8009f58:	20000650 	.word	0x20000650
 8009f5c:	20000877 	.word	0x20000877
 8009f60:	20000875 	.word	0x20000875
 8009f64:	20000874 	.word	0x20000874
 8009f68:	20000a84 	.word	0x20000a84
 8009f6c:	20000880 	.word	0x20000880
 8009f70:	20000881 	.word	0x20000881
 8009f74:	20000acc 	.word	0x20000acc
 8009f78:	20000a98 	.word	0x20000a98

08009f7c <MailboxServiceInd>:
 \brief    The function checks the mailbox header for the requested service and calls the
 \brief    corresponding XXXX_ServiceInd-function
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 MailboxServiceInd(TMBX MBXMEM *pMbx)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b084      	sub	sp, #16
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
    UINT8 result;


    switch ( (pMbx->MbxHeader.Flags[MBX_OFFS_TYPE] & MBX_MASK_TYPE) >> MBX_SHIFT_TYPE )
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	889b      	ldrh	r3, [r3, #4]
 8009f88:	121b      	asrs	r3, r3, #8
 8009f8a:	f003 030f 	and.w	r3, r3, #15
 8009f8e:	2b04      	cmp	r3, #4
 8009f90:	d011      	beq.n	8009fb6 <MailboxServiceInd+0x3a>
 8009f92:	2b04      	cmp	r3, #4
 8009f94:	dc15      	bgt.n	8009fc2 <MailboxServiceInd+0x46>
 8009f96:	2b02      	cmp	r3, #2
 8009f98:	d007      	beq.n	8009faa <MailboxServiceInd+0x2e>
 8009f9a:	2b03      	cmp	r3, #3
 8009f9c:	d111      	bne.n	8009fc2 <MailboxServiceInd+0x46>
    {
    case MBX_TYPE_COE:
        /* CoE datagram received */
        result = COE_ServiceInd((TCOEMBX MBXMEM *) pMbx);
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f7fc fd04 	bl	80069ac <COE_ServiceInd>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	73fb      	strb	r3, [r7, #15]
        break;
 8009fa8:	e00e      	b.n	8009fc8 <MailboxServiceInd+0x4c>

    case MBX_TYPE_EOE:
        /* EoE datagram received */
        result = EOE_ServiceInd(pMbx);
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f7fc fd64 	bl	8006a78 <EOE_ServiceInd>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	73fb      	strb	r3, [r7, #15]
        break;
 8009fb4:	e008      	b.n	8009fc8 <MailboxServiceInd+0x4c>

    case MBX_TYPE_FOE:
        /* FoE datagram received */
        result = FOE_ServiceInd((TFOEMBX MBXMEM *) pMbx);
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f7fd f872 	bl	80070a0 <FOE_ServiceInd>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	73fb      	strb	r3, [r7, #15]
        break;
 8009fc0:	e002      	b.n	8009fc8 <MailboxServiceInd+0x4c>

    default:

        result = MBXERR_UNSUPPORTEDPROTOCOL;
 8009fc2:	2302      	movs	r3, #2
 8009fc4:	73fb      	strb	r3, [r7, #15]
        break;
 8009fc6:	bf00      	nop
    }

    return result;
 8009fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3710      	adds	r7, #16
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}
	...

08009fd4 <MBX_MailboxWriteInd>:
 \brief    The function checks the mailbox header for the requested service and calls the
 \brief    corresponding XXXX_ServiceInd-function
*////////////////////////////////////////////////////////////////////////////////////////

void MBX_MailboxWriteInd(TMBX MBXMEM *pMbx)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b084      	sub	sp, #16
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
    UINT8 result = 0;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	73fb      	strb	r3, [r7, #15]
    UINT8 mbxCounter = pMbx->MbxHeader.Flags[MBX_OFFS_COUNTER] >> MBX_SHIFT_COUNTER;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	889b      	ldrh	r3, [r3, #4]
 8009fe4:	0b1b      	lsrs	r3, r3, #12
 8009fe6:	b29b      	uxth	r3, r3
 8009fe8:	73bb      	strb	r3, [r7, #14]
    UINT16 MbxLen = SWAPWORD(pMbx->MbxHeader.Length);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	881b      	ldrh	r3, [r3, #0]
 8009fee:	81bb      	strh	r3, [r7, #12]

    if(MbxLen > MAX_MBX_SIZE)
 8009ff0:	89bb      	ldrh	r3, [r7, #12]
 8009ff2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ff6:	d914      	bls.n	800a022 <MBX_MailboxWriteInd+0x4e>
    {
        /* Mailbox error response: size specified in mailbox header too large*/
        pMbx->MbxHeader.Length     = 4;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2204      	movs	r2, #4
 8009ffc:	801a      	strh	r2, [r3, #0]
        pMbx->MbxHeader.Flags[MBX_OFFS_TYPE]        &= ~MBX_MASK_TYPE;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	889b      	ldrh	r3, [r3, #4]
 800a002:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a006:	b29a      	uxth	r2, r3
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	809a      	strh	r2, [r3, #4]
        pMbx->Data[0]                        = SWAPWORD(MBXSERVICE_MBXERRORCMD);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2201      	movs	r2, #1
 800a010:	80da      	strh	r2, [r3, #6]
        pMbx->Data[1]                        = SWAPWORD(MBXERR_INVALIDSIZE);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2208      	movs	r2, #8
 800a016:	811a      	strh	r2, [r3, #8]
        MBX_MailboxSendReq(pMbx, 0);
 800a018:	2100      	movs	r1, #0
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f000 f906 	bl	800a22c <MBX_MailboxSendReq>
    else
    {
        APPL_FreeMailboxBuffer(pMbx);
        pMbx = NULL;
    }
}
 800a020:	e02f      	b.n	800a082 <MBX_MailboxWriteInd+0xae>
    if ( mbxCounter == 0 || mbxCounter != u8MbxWriteCounter )
 800a022:	7bbb      	ldrb	r3, [r7, #14]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d004      	beq.n	800a032 <MBX_MailboxWriteInd+0x5e>
 800a028:	4b18      	ldr	r3, [pc, #96]	; (800a08c <MBX_MailboxWriteInd+0xb8>)
 800a02a:	781b      	ldrb	r3, [r3, #0]
 800a02c:	7bba      	ldrb	r2, [r7, #14]
 800a02e:	429a      	cmp	r2, r3
 800a030:	d021      	beq.n	800a076 <MBX_MailboxWriteInd+0xa2>
        u8MbxWriteCounter = mbxCounter;
 800a032:	4a16      	ldr	r2, [pc, #88]	; (800a08c <MBX_MailboxWriteInd+0xb8>)
 800a034:	7bbb      	ldrb	r3, [r7, #14]
 800a036:	7013      	strb	r3, [r2, #0]
            result = PutInMbxQueue(pMbx, &sMbxReceiveQueue);
 800a038:	4915      	ldr	r1, [pc, #84]	; (800a090 <MBX_MailboxWriteInd+0xbc>)
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f7ff fda2 	bl	8009b84 <PutInMbxQueue>
 800a040:	4603      	mov	r3, r0
 800a042:	73fb      	strb	r3, [r7, #15]
        if ( result != 0 )
 800a044:	7bfb      	ldrb	r3, [r7, #15]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d01b      	beq.n	800a082 <MBX_MailboxWriteInd+0xae>
            pMbx->MbxHeader.Length     = 4;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2204      	movs	r2, #4
 800a04e:	801a      	strh	r2, [r3, #0]
            pMbx->MbxHeader.Flags[MBX_OFFS_TYPE]        &= ~MBX_MASK_TYPE;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	889b      	ldrh	r3, [r3, #4]
 800a054:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a058:	b29a      	uxth	r2, r3
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	809a      	strh	r2, [r3, #4]
            pMbx->Data[0]                        = SWAPWORD(MBXSERVICE_MBXERRORCMD);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2201      	movs	r2, #1
 800a062:	80da      	strh	r2, [r3, #6]
            pMbx->Data[1]                        = SWAPWORD(result);
 800a064:	7bfb      	ldrb	r3, [r7, #15]
 800a066:	b29a      	uxth	r2, r3
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	811a      	strh	r2, [r3, #8]
            MBX_MailboxSendReq(pMbx, 0);
 800a06c:	2100      	movs	r1, #0
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f000 f8dc 	bl	800a22c <MBX_MailboxSendReq>
        if ( result != 0 )
 800a074:	e005      	b.n	800a082 <MBX_MailboxWriteInd+0xae>
        APPL_FreeMailboxBuffer(pMbx);
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f002 fece 	bl	800ce18 <free>
        pMbx = NULL;
 800a07c:	2300      	movs	r3, #0
 800a07e:	607b      	str	r3, [r7, #4]
}
 800a080:	e7ff      	b.n	800a082 <MBX_MailboxWriteInd+0xae>
 800a082:	bf00      	nop
 800a084:	3710      	adds	r7, #16
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}
 800a08a:	bf00      	nop
 800a08c:	20000880 	.word	0x20000880
 800a090:	20000acc 	.word	0x20000acc

0800a094 <MBX_MailboxReadInd>:
/**
 \brief This function is called when the Master has read the Send-Mailbox.
*////////////////////////////////////////////////////////////////////////////////////////

void MBX_MailboxReadInd(void)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b082      	sub	sp, #8
 800a098:	af00      	add	r7, sp, #0
    bSendMbxIsFull = FALSE;
 800a09a:	4b3e      	ldr	r3, [pc, #248]	; (800a194 <MBX_MailboxReadInd+0x100>)
 800a09c:	2200      	movs	r2, #0
 800a09e:	701a      	strb	r2, [r3, #0]
    // HBu 02.05.06: the pointer psRepeatMbx is only free if there is no stored
    //               mailbox service from the last repeat
    if ( psRepeatMbx && psStoreMbx == NULL )
 800a0a0:	4b3d      	ldr	r3, [pc, #244]	; (800a198 <MBX_MailboxReadInd+0x104>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d00b      	beq.n	800a0c0 <MBX_MailboxReadInd+0x2c>
 800a0a8:	4b3c      	ldr	r3, [pc, #240]	; (800a19c <MBX_MailboxReadInd+0x108>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d107      	bne.n	800a0c0 <MBX_MailboxReadInd+0x2c>
    {
    /* the last sent service is not stored for repeat any longer */
        APPL_FreeMailboxBuffer(psRepeatMbx);
 800a0b0:	4b39      	ldr	r3, [pc, #228]	; (800a198 <MBX_MailboxReadInd+0x104>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f002 feaf 	bl	800ce18 <free>
        psRepeatMbx = NULL;
 800a0ba:	4b37      	ldr	r3, [pc, #220]	; (800a198 <MBX_MailboxReadInd+0x104>)
 800a0bc:	2200      	movs	r2, #0
 800a0be:	601a      	str	r2, [r3, #0]
    }

    /* the actual sent service has to be stored for repeat */
    psRepeatMbx = psReadMbx;
 800a0c0:	4b37      	ldr	r3, [pc, #220]	; (800a1a0 <MBX_MailboxReadInd+0x10c>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	4a34      	ldr	r2, [pc, #208]	; (800a198 <MBX_MailboxReadInd+0x104>)
 800a0c6:	6013      	str	r3, [r2, #0]

      if ( psStoreMbx )
 800a0c8:	4b34      	ldr	r3, [pc, #208]	; (800a19c <MBX_MailboxReadInd+0x108>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d008      	beq.n	800a0e2 <MBX_MailboxReadInd+0x4e>
      {
        /* there was a buffer stored */
        MBX_CopyToSendMailbox(psStoreMbx);
 800a0d0:	4b32      	ldr	r3, [pc, #200]	; (800a19c <MBX_MailboxReadInd+0x108>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	f000 f9b7 	bl	800a448 <MBX_CopyToSendMailbox>
        /* no more buffer to be stored any more */
        psStoreMbx = NULL;
 800a0da:	4b30      	ldr	r3, [pc, #192]	; (800a19c <MBX_MailboxReadInd+0x108>)
 800a0dc:	2200      	movs	r2, #0
 800a0de:	601a      	str	r2, [r3, #0]
 800a0e0:	e009      	b.n	800a0f6 <MBX_MailboxReadInd+0x62>
      }
      else
    {
        TMBX MBXMEM *pMbx = GetOutOfMbxQueue(&sMbxSendQueue);
 800a0e2:	4830      	ldr	r0, [pc, #192]	; (800a1a4 <MBX_MailboxReadInd+0x110>)
 800a0e4:	f7ff fd77 	bl	8009bd6 <GetOutOfMbxQueue>
 800a0e8:	6078      	str	r0, [r7, #4]
        if (pMbx)
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d002      	beq.n	800a0f6 <MBX_MailboxReadInd+0x62>
        {
            MBX_CopyToSendMailbox(pMbx);
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f000 f9a9 	bl	800a448 <MBX_CopyToSendMailbox>
        }
    }

      if ( u8MailboxSendReqStored )
 800a0f6:	4b2c      	ldr	r3, [pc, #176]	; (800a1a8 <MBX_MailboxReadInd+0x114>)
 800a0f8:	781b      	ldrb	r3, [r3, #0]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d045      	beq.n	800a18a <MBX_MailboxReadInd+0xf6>
    {
        /* there are mailbox services stored to be sent */
        if ( u8MailboxSendReqStored & COE_SERVICE )
 800a0fe:	4b2a      	ldr	r3, [pc, #168]	; (800a1a8 <MBX_MailboxReadInd+0x114>)
 800a100:	781b      	ldrb	r3, [r3, #0]
 800a102:	f003 0302 	and.w	r3, r3, #2
 800a106:	2b00      	cmp	r3, #0
 800a108:	d01a      	beq.n	800a140 <MBX_MailboxReadInd+0xac>
        {
           UINT8 result = 0;
 800a10a:	2300      	movs	r3, #0
 800a10c:	70fb      	strb	r3, [r7, #3]
            /* reset the flag indicating that CoE service to be sent was stored */
            u8MailboxSendReqStored &= ~COE_SERVICE;
 800a10e:	4b26      	ldr	r3, [pc, #152]	; (800a1a8 <MBX_MailboxReadInd+0x114>)
 800a110:	781b      	ldrb	r3, [r3, #0]
 800a112:	f023 0302 	bic.w	r3, r3, #2
 800a116:	b2da      	uxtb	r2, r3
 800a118:	4b23      	ldr	r3, [pc, #140]	; (800a1a8 <MBX_MailboxReadInd+0x114>)
 800a11a:	701a      	strb	r2, [r3, #0]

            /* call CoE function that will send the stored CoE service */
            result = COE_ContinueInd(psWriteMbx);
 800a11c:	4b23      	ldr	r3, [pc, #140]	; (800a1ac <MBX_MailboxReadInd+0x118>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	4618      	mov	r0, r3
 800a122:	f7fc fc7b 	bl	8006a1c <COE_ContinueInd>
 800a126:	4603      	mov	r3, r0
 800a128:	70fb      	strb	r3, [r7, #3]

            if (result != 0)
 800a12a:	78fb      	ldrb	r3, [r7, #3]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d02c      	beq.n	800a18a <MBX_MailboxReadInd+0xf6>
            {
                /*Set the pending CoE indication is an error occurred during the continue indication*/
                u8MailboxSendReqStored |= COE_SERVICE;
 800a130:	4b1d      	ldr	r3, [pc, #116]	; (800a1a8 <MBX_MailboxReadInd+0x114>)
 800a132:	781b      	ldrb	r3, [r3, #0]
 800a134:	f043 0302 	orr.w	r3, r3, #2
 800a138:	b2da      	uxtb	r2, r3
 800a13a:	4b1b      	ldr	r3, [pc, #108]	; (800a1a8 <MBX_MailboxReadInd+0x114>)
 800a13c:	701a      	strb	r2, [r3, #0]
        }
        else
        {
        }
    }
}
 800a13e:	e024      	b.n	800a18a <MBX_MailboxReadInd+0xf6>
        if ( u8MailboxSendReqStored & EOE_SERVICE )
 800a140:	4b19      	ldr	r3, [pc, #100]	; (800a1a8 <MBX_MailboxReadInd+0x114>)
 800a142:	781b      	ldrb	r3, [r3, #0]
 800a144:	f003 0308 	and.w	r3, r3, #8
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d00c      	beq.n	800a166 <MBX_MailboxReadInd+0xd2>
            u8MailboxSendReqStored &= ~EOE_SERVICE;
 800a14c:	4b16      	ldr	r3, [pc, #88]	; (800a1a8 <MBX_MailboxReadInd+0x114>)
 800a14e:	781b      	ldrb	r3, [r3, #0]
 800a150:	f023 0308 	bic.w	r3, r3, #8
 800a154:	b2da      	uxtb	r2, r3
 800a156:	4b14      	ldr	r3, [pc, #80]	; (800a1a8 <MBX_MailboxReadInd+0x114>)
 800a158:	701a      	strb	r2, [r3, #0]
            EOE_ContinueInd(psWriteMbx);
 800a15a:	4b14      	ldr	r3, [pc, #80]	; (800a1ac <MBX_MailboxReadInd+0x118>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	4618      	mov	r0, r3
 800a160:	f7fc ff40 	bl	8006fe4 <EOE_ContinueInd>
}
 800a164:	e011      	b.n	800a18a <MBX_MailboxReadInd+0xf6>
        if ( u8MailboxSendReqStored & FOE_SERVICE )
 800a166:	4b10      	ldr	r3, [pc, #64]	; (800a1a8 <MBX_MailboxReadInd+0x114>)
 800a168:	781b      	ldrb	r3, [r3, #0]
 800a16a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d00b      	beq.n	800a18a <MBX_MailboxReadInd+0xf6>
            u8MailboxSendReqStored &= ~FOE_SERVICE;
 800a172:	4b0d      	ldr	r3, [pc, #52]	; (800a1a8 <MBX_MailboxReadInd+0x114>)
 800a174:	781b      	ldrb	r3, [r3, #0]
 800a176:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a17a:	b2da      	uxtb	r2, r3
 800a17c:	4b0a      	ldr	r3, [pc, #40]	; (800a1a8 <MBX_MailboxReadInd+0x114>)
 800a17e:	701a      	strb	r2, [r3, #0]
            FOE_ContinueInd(psWriteMbx);
 800a180:	4b0a      	ldr	r3, [pc, #40]	; (800a1ac <MBX_MailboxReadInd+0x118>)
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	4618      	mov	r0, r3
 800a186:	f7fd f94b 	bl	8007420 <FOE_ContinueInd>
}
 800a18a:	bf00      	nop
 800a18c:	3708      	adds	r7, #8
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}
 800a192:	bf00      	nop
 800a194:	20000875 	.word	0x20000875
 800a198:	20000a90 	.word	0x20000a90
 800a19c:	20000a94 	.word	0x20000a94
 800a1a0:	20000a8c 	.word	0x20000a8c
 800a1a4:	20000a98 	.word	0x20000a98
 800a1a8:	20000a84 	.word	0x20000a84
 800a1ac:	20000a88 	.word	0x20000a88

0800a1b0 <MBX_MailboxRepeatReq>:
 \brief This function is called if the Master has requested a resending of the last
 \brief sent mailbox
*////////////////////////////////////////////////////////////////////////////////////////

void MBX_MailboxRepeatReq(void)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b082      	sub	sp, #8
 800a1b4:	af00      	add	r7, sp, #0
    if (psRepeatMbx)
 800a1b6:	4b18      	ldr	r3, [pc, #96]	; (800a218 <MBX_MailboxRepeatReq+0x68>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d01d      	beq.n	800a1fa <MBX_MailboxRepeatReq+0x4a>
    {
        TMBX MBXMEM *pMbx = psRepeatMbx;
 800a1be:	4b16      	ldr	r3, [pc, #88]	; (800a218 <MBX_MailboxRepeatReq+0x68>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	607b      	str	r3, [r7, #4]
        /* HBu 13.10.06: if a repeat request is received (again) before the previously repeated mailbox telegram
           was read from the master (psStoreMbx != NULL) the next mailbox telegram to be sent is still in the
            read mailbox so it has not to updated exchanged */
        ENTER_MBX_CRITICAL;

       if (bSendMbxIsFull && psStoreMbx == NULL)
 800a1c4:	4b15      	ldr	r3, [pc, #84]	; (800a21c <MBX_MailboxRepeatReq+0x6c>)
 800a1c6:	781b      	ldrb	r3, [r3, #0]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d010      	beq.n	800a1ee <MBX_MailboxRepeatReq+0x3e>
 800a1cc:	4b14      	ldr	r3, [pc, #80]	; (800a220 <MBX_MailboxRepeatReq+0x70>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d10c      	bne.n	800a1ee <MBX_MailboxRepeatReq+0x3e>
        {
            /* mailbox is full, take the buffer off */
/*ECATCHANGE_START(V5.11) HW1*/
            DisableSyncManChannel(MAILBOX_READ);
 800a1d4:	2001      	movs	r0, #1
 800a1d6:	f7fd f9bd 	bl	8007554 <DisableSyncManChannel>

            /* store the buffer to be sent next */
            psStoreMbx = psReadMbx;
 800a1da:	4b12      	ldr	r3, [pc, #72]	; (800a224 <MBX_MailboxRepeatReq+0x74>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	4a10      	ldr	r2, [pc, #64]	; (800a220 <MBX_MailboxRepeatReq+0x70>)
 800a1e0:	6013      	str	r3, [r2, #0]
            /* enable the mailbox again */
            EnableSyncManChannel(MAILBOX_READ);
 800a1e2:	2001      	movs	r0, #1
 800a1e4:	f7fd f9de 	bl	80075a4 <EnableSyncManChannel>
/*ECATCHANGE_END(V5.11) HW1*/

            /* HBu 15.02.06: flag has to be reset otherwise the mailbox service
                             will not be copied by MBX_CopyToSendMailbox */
            bSendMbxIsFull = FALSE;
 800a1e8:	4b0c      	ldr	r3, [pc, #48]	; (800a21c <MBX_MailboxRepeatReq+0x6c>)
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	701a      	strb	r2, [r3, #0]
        }


        MBX_CopyToSendMailbox(pMbx);
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f000 f92a 	bl	800a448 <MBX_CopyToSendMailbox>
        // HBu 17.06.06: psRepeatMbx has to be set to 0, when it was repeated, otherwise it would be returned twice
        // to the empty queue (MAILBOX_QUEUE=1) or a buffer get lost, if the the next repeat request will happen before
        // the repeated buffer was read
        psRepeatMbx = NULL;
 800a1f4:	4b08      	ldr	r3, [pc, #32]	; (800a218 <MBX_MailboxRepeatReq+0x68>)
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	601a      	str	r2, [r3, #0]
        LEAVE_MBX_CRITICAL;
    }

    // Repeat was finished, toggle the acknowledge bit
    bMbxRepeatToggle = !bMbxRepeatToggle;
 800a1fa:	4b0b      	ldr	r3, [pc, #44]	; (800a228 <MBX_MailboxRepeatReq+0x78>)
 800a1fc:	781b      	ldrb	r3, [r3, #0]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	bf0c      	ite	eq
 800a202:	2301      	moveq	r3, #1
 800a204:	2300      	movne	r3, #0
 800a206:	b2db      	uxtb	r3, r3
 800a208:	461a      	mov	r2, r3
 800a20a:	4b07      	ldr	r3, [pc, #28]	; (800a228 <MBX_MailboxRepeatReq+0x78>)
 800a20c:	701a      	strb	r2, [r3, #0]
}
 800a20e:	bf00      	nop
 800a210:	3708      	adds	r7, #8
 800a212:	46bd      	mov	sp, r7
 800a214:	bd80      	pop	{r7, pc}
 800a216:	bf00      	nop
 800a218:	20000a90 	.word	0x20000a90
 800a21c:	20000875 	.word	0x20000875
 800a220:	20000a94 	.word	0x20000a94
 800a224:	20000a8c 	.word	0x20000a8c
 800a228:	20000877 	.word	0x20000877

0800a22c <MBX_MailboxSendReq>:

 \brief        This function puts a new Mailbox service in the Send Mailbox
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 MBX_MailboxSendReq( TMBX MBXMEM * pMbx, UINT8 flags )
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b084      	sub	sp, #16
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
 800a234:	460b      	mov	r3, r1
 800a236:	70fb      	strb	r3, [r7, #3]
    UINT8 result = 0;
 800a238:	2300      	movs	r3, #0
 800a23a:	73fb      	strb	r3, [r7, #15]

    /* HBu 06.02.06: in INIT-state a mailbox send request shall be refused */
    if ( (nAlStatus & STATE_MASK) == STATE_INIT )
 800a23c:	4b2d      	ldr	r3, [pc, #180]	; (800a2f4 <MBX_MailboxSendReq+0xc8>)
 800a23e:	781b      	ldrb	r3, [r3, #0]
 800a240:	f003 030f 	and.w	r3, r3, #15
 800a244:	2b01      	cmp	r3, #1
 800a246:	d101      	bne.n	800a24c <MBX_MailboxSendReq+0x20>
        return ERROR_INVALIDSTATE;
 800a248:	23f0      	movs	r3, #240	; 0xf0
 800a24a:	e04e      	b.n	800a2ea <MBX_MailboxSendReq+0xbe>
    ENTER_MBX_CRITICAL;
    DISABLE_MBX_INT;

    /* the counter in the mailbox header has to be incremented with every new mailbox service to be sent
       if the mailbox data link layer is supported (software switch MAILBOX_REPEAT_SUPPORTED set)*/
    pMbx->MbxHeader.Flags[MBX_OFFS_COUNTER] &= ~MBX_MASK_COUNTER;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	889b      	ldrh	r3, [r3, #4]
 800a250:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a254:	b29a      	uxth	r2, r3
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	809a      	strh	r2, [r3, #4]
    /* HBu 13.02.06: Repeat-Counter was incremented too much if the mailbox service could not be sent */
    /* u8MbxCounter holds the actual counter for the mailbox header, only the values
       1-7 are allowed if the mailbox data link layer is supported  */
    if ( (u8MbxReadCounter & 0x07) == 0 )
 800a25a:	4b27      	ldr	r3, [pc, #156]	; (800a2f8 <MBX_MailboxSendReq+0xcc>)
 800a25c:	781b      	ldrb	r3, [r3, #0]
 800a25e:	f003 0307 	and.w	r3, r3, #7
 800a262:	2b00      	cmp	r3, #0
 800a264:	d102      	bne.n	800a26c <MBX_MailboxSendReq+0x40>
        u8MbxReadCounter = 1;
 800a266:	4b24      	ldr	r3, [pc, #144]	; (800a2f8 <MBX_MailboxSendReq+0xcc>)
 800a268:	2201      	movs	r2, #1
 800a26a:	701a      	strb	r2, [r3, #0]

    pMbx->MbxHeader.Flags[MBX_OFFS_COUNTER] |= u8MbxReadCounter << MBX_SHIFT_COUNTER;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	889b      	ldrh	r3, [r3, #4]
 800a270:	b21a      	sxth	r2, r3
 800a272:	4b21      	ldr	r3, [pc, #132]	; (800a2f8 <MBX_MailboxSendReq+0xcc>)
 800a274:	781b      	ldrb	r3, [r3, #0]
 800a276:	031b      	lsls	r3, r3, #12
 800a278:	b21b      	sxth	r3, r3
 800a27a:	4313      	orrs	r3, r2
 800a27c:	b21b      	sxth	r3, r3
 800a27e:	b29a      	uxth	r2, r3
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	809a      	strh	r2, [r3, #4]

    /* try to copy the mailbox command in the ESC */
    if ( MBX_CopyToSendMailbox(pMbx) != 0 )
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f000 f8df 	bl	800a448 <MBX_CopyToSendMailbox>
 800a28a:	4603      	mov	r3, r0
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d014      	beq.n	800a2ba <MBX_MailboxSendReq+0x8e>
    {
        /* no success, send mailbox was full, set flag  */
        result = PutInMbxQueue(pMbx, &sMbxSendQueue);
 800a290:	491a      	ldr	r1, [pc, #104]	; (800a2fc <MBX_MailboxSendReq+0xd0>)
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f7ff fc76 	bl	8009b84 <PutInMbxQueue>
 800a298:	4603      	mov	r3, r0
 800a29a:	73fb      	strb	r3, [r7, #15]
        if (result != 0)
 800a29c:	7bfb      	ldrb	r3, [r7, #15]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d004      	beq.n	800a2ac <MBX_MailboxSendReq+0x80>
            flags |= FRAGMENTS_FOLLOW;
 800a2a2:	78fb      	ldrb	r3, [r7, #3]
 800a2a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a2a8:	70fb      	strb	r3, [r7, #3]
 800a2aa:	e00c      	b.n	800a2c6 <MBX_MailboxSendReq+0x9a>
        else
            u8MbxReadCounter++;
 800a2ac:	4b12      	ldr	r3, [pc, #72]	; (800a2f8 <MBX_MailboxSendReq+0xcc>)
 800a2ae:	781b      	ldrb	r3, [r3, #0]
 800a2b0:	3301      	adds	r3, #1
 800a2b2:	b2da      	uxtb	r2, r3
 800a2b4:	4b10      	ldr	r3, [pc, #64]	; (800a2f8 <MBX_MailboxSendReq+0xcc>)
 800a2b6:	701a      	strb	r2, [r3, #0]
 800a2b8:	e005      	b.n	800a2c6 <MBX_MailboxSendReq+0x9a>
    }
    /* HBu 13.02.06: Repeat-Counter was incremented too much if the mailbox service could not be sent */
    else
    {
        u8MbxReadCounter++;
 800a2ba:	4b0f      	ldr	r3, [pc, #60]	; (800a2f8 <MBX_MailboxSendReq+0xcc>)
 800a2bc:	781b      	ldrb	r3, [r3, #0]
 800a2be:	3301      	adds	r3, #1
 800a2c0:	b2da      	uxtb	r2, r3
 800a2c2:	4b0d      	ldr	r3, [pc, #52]	; (800a2f8 <MBX_MailboxSendReq+0xcc>)
 800a2c4:	701a      	strb	r2, [r3, #0]
    }

    if ( flags & FRAGMENTS_FOLLOW )
 800a2c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	da0c      	bge.n	800a2e8 <MBX_MailboxSendReq+0xbc>
    {
        /* store the mailbox service that the corresponding XXX_ContinueInd function will
           be called when the send mailbox will have been read by the master because there
           are mailbox commands to be sent for this service */
        u8MailboxSendReqStored |= (flags & ((UINT8) ~FRAGMENTS_FOLLOW));
 800a2ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a2d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2d6:	b25a      	sxtb	r2, r3
 800a2d8:	4b09      	ldr	r3, [pc, #36]	; (800a300 <MBX_MailboxSendReq+0xd4>)
 800a2da:	781b      	ldrb	r3, [r3, #0]
 800a2dc:	b25b      	sxtb	r3, r3
 800a2de:	4313      	orrs	r3, r2
 800a2e0:	b25b      	sxtb	r3, r3
 800a2e2:	b2da      	uxtb	r2, r3
 800a2e4:	4b06      	ldr	r3, [pc, #24]	; (800a300 <MBX_MailboxSendReq+0xd4>)
 800a2e6:	701a      	strb	r2, [r3, #0]
    }

    ENABLE_MBX_INT;
    LEAVE_MBX_CRITICAL;

    return result;
 800a2e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3710      	adds	r7, #16
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}
 800a2f2:	bf00      	nop
 800a2f4:	200006b2 	.word	0x200006b2
 800a2f8:	20000881 	.word	0x20000881
 800a2fc:	20000a98 	.word	0x20000a98
 800a300:	20000a84 	.word	0x20000a84

0800a304 <MBX_CheckAndCopyMailbox>:

        Also the contents of the Receive Mailbox will be copied in the variable sMbx.
*////////////////////////////////////////////////////////////////////////////////////////

void MBX_CheckAndCopyMailbox( void )
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b082      	sub	sp, #8
 800a308:	af00      	add	r7, sp, #0
    UINT16 mbxLen;

    /* get the size of the received mailbox command and acknowledge the event*/
    HW_EscReadWord(mbxLen,u16EscAddrReceiveMbx);
 800a30a:	4b47      	ldr	r3, [pc, #284]	; (800a428 <MBX_CheckAndCopyMailbox+0x124>)
 800a30c:	8819      	ldrh	r1, [r3, #0]
 800a30e:	1cbb      	adds	r3, r7, #2
 800a310:	2202      	movs	r2, #2
 800a312:	4618      	mov	r0, r3
 800a314:	f7ff f85a 	bl	80093cc <HW_EscRead>
    
    /* the size has to be swapped here, all other bytes of the mailbox service will be swapped later */
    mbxLen = SWAPWORD(mbxLen);
 800a318:	887b      	ldrh	r3, [r7, #2]
 800a31a:	807b      	strh	r3, [r7, #2]

/* ECATCHANGE_START(V5.11) MBX2*/
    if(bNoMbxMemoryAvailable == TRUE)
 800a31c:	4b43      	ldr	r3, [pc, #268]	; (800a42c <MBX_CheckAndCopyMailbox+0x128>)
 800a31e:	781b      	ldrb	r3, [r3, #0]
 800a320:	2b01      	cmp	r3, #1
 800a322:	d123      	bne.n	800a36c <MBX_CheckAndCopyMailbox+0x68>
    {
        /* Return a no memory error in case of any mailbox request*/
        TMBX MBXMEM *pMbx = (TMBX MBXMEM *) APPL_AllocMailboxBuffer(10); /* a mailbox error datagram length*/
 800a324:	200a      	movs	r0, #10
 800a326:	f002 fd6f 	bl	800ce08 <malloc>
 800a32a:	4603      	mov	r3, r0
 800a32c:	607b      	str	r3, [r7, #4]

        if(pMbx != NULL)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d01b      	beq.n	800a36c <MBX_CheckAndCopyMailbox+0x68>
        {
            HMEMSET(pMbx,0x00,10);
 800a334:	220a      	movs	r2, #10
 800a336:	2100      	movs	r1, #0
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f002 fd93 	bl	800ce64 <memset>

            /* Mailbox error response: type 0 (mailbox service protocol) */
            pMbx->MbxHeader.Length     = 4;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2204      	movs	r2, #4
 800a342:	801a      	strh	r2, [r3, #0]
            pMbx->MbxHeader.Flags[MBX_OFFS_TYPE]        &= ~(MBX_MASK_TYPE);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	889b      	ldrh	r3, [r3, #4]
 800a348:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a34c:	b29a      	uxth	r2, r3
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	809a      	strh	r2, [r3, #4]
            pMbx->Data[0]                        = SWAPWORD(MBXSERVICE_MBXERRORCMD);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2201      	movs	r2, #1
 800a356:	80da      	strh	r2, [r3, #6]
            pMbx->Data[1]                        = SWAPWORD(MBXERR_NOMOREMEMORY);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2207      	movs	r2, #7
 800a35c:	811a      	strh	r2, [r3, #8]
            MBX_MailboxSendReq(pMbx, 0);
 800a35e:	2100      	movs	r1, #0
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f7ff ff63 	bl	800a22c <MBX_MailboxSendReq>

            APPL_FreeMailboxBuffer(pMbx);
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f002 fd56 	bl	800ce18 <free>
        }
    }
/* ECATCHANGE_END(V5.11) MBX2*/
    /* the length of the mailbox data is in the first two bytes of the mailbox,
       so the length of the mailbox header has to be added */
    mbxLen += MBX_HEADER_SIZE;
 800a36c:	887b      	ldrh	r3, [r7, #2]
 800a36e:	3306      	adds	r3, #6
 800a370:	b29b      	uxth	r3, r3
 800a372:	807b      	strh	r3, [r7, #2]

    /* in this example there are only two mailbox buffers available in the firmware (one for processing and
       one to stored the last sent response for a possible repeat request), so a
       received mailbox service can only be processed if a free buffer is available */
    if ( ( bSendMbxIsFull )                /* a received mailbox service will not be processed
 800a374:	4b2e      	ldr	r3, [pc, #184]	; (800a430 <MBX_CheckAndCopyMailbox+0x12c>)
 800a376:	781b      	ldrb	r3, [r3, #0]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d103      	bne.n	800a384 <MBX_CheckAndCopyMailbox+0x80>
                                                    as long as the send mailbox is still full
                                                    (waits to be read from the master) */
        ||( u8MailboxSendReqStored )    /* a mailbox service to be sent is still stored
 800a37c:	4b2d      	ldr	r3, [pc, #180]	; (800a434 <MBX_CheckAndCopyMailbox+0x130>)
 800a37e:	781b      	ldrb	r3, [r3, #0]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d003      	beq.n	800a38c <MBX_CheckAndCopyMailbox+0x88>
                                                    until all stored mailbox services are sent */
        )
    {
        /* set flag that the processing of the mailbox service will be checked in the
            function MBX_Main (called from ECAT_Main) */
        bReceiveMbxIsLocked = TRUE;
 800a384:	4b2c      	ldr	r3, [pc, #176]	; (800a438 <MBX_CheckAndCopyMailbox+0x134>)
 800a386:	2201      	movs	r2, #1
 800a388:	701a      	strb	r2, [r3, #0]
 800a38a:	e04a      	b.n	800a422 <MBX_CheckAndCopyMailbox+0x11e>
    }
    else
    {
        /* received mailbox command can be processed, reset flag */
        bReceiveMbxIsLocked = FALSE;
 800a38c:	4b2a      	ldr	r3, [pc, #168]	; (800a438 <MBX_CheckAndCopyMailbox+0x134>)
 800a38e:	2200      	movs	r2, #0
 800a390:	701a      	strb	r2, [r3, #0]

        /* if the read mailbox size is too big for the buffer, set the copy size to the maximum buffer size, otherwise
           memory could be overwritten,
           the evaluation of the mailbox size will be done in the mailbox protocols called from MBX_WriteMailboxInd */

        if (mbxLen > u16ReceiveMbxSize)
 800a392:	887a      	ldrh	r2, [r7, #2]
 800a394:	4b29      	ldr	r3, [pc, #164]	; (800a43c <MBX_CheckAndCopyMailbox+0x138>)
 800a396:	881b      	ldrh	r3, [r3, #0]
 800a398:	429a      	cmp	r2, r3
 800a39a:	d902      	bls.n	800a3a2 <MBX_CheckAndCopyMailbox+0x9e>
            mbxLen = u16ReceiveMbxSize;
 800a39c:	4b27      	ldr	r3, [pc, #156]	; (800a43c <MBX_CheckAndCopyMailbox+0x138>)
 800a39e:	881b      	ldrh	r3, [r3, #0]
 800a3a0:	807b      	strh	r3, [r7, #2]

        psWriteMbx = (TMBX MBXMEM *) APPL_AllocMailboxBuffer(u16ReceiveMbxSize);
 800a3a2:	4b26      	ldr	r3, [pc, #152]	; (800a43c <MBX_CheckAndCopyMailbox+0x138>)
 800a3a4:	881b      	ldrh	r3, [r3, #0]
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f002 fd2e 	bl	800ce08 <malloc>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	461a      	mov	r2, r3
 800a3b0:	4b23      	ldr	r3, [pc, #140]	; (800a440 <MBX_CheckAndCopyMailbox+0x13c>)
 800a3b2:	601a      	str	r2, [r3, #0]

        /* if there is no more memory for mailbox buffer, the mailbox should not be read */
        if (psWriteMbx == NULL)
 800a3b4:	4b22      	ldr	r3, [pc, #136]	; (800a440 <MBX_CheckAndCopyMailbox+0x13c>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d103      	bne.n	800a3c4 <MBX_CheckAndCopyMailbox+0xc0>
        {
            /* set flag that the processing of the mailbox service will be checked in the
                function MBX_Main (called from ECAT_Main) */
            bReceiveMbxIsLocked = TRUE;
 800a3bc:	4b1e      	ldr	r3, [pc, #120]	; (800a438 <MBX_CheckAndCopyMailbox+0x134>)
 800a3be:	2201      	movs	r2, #1
 800a3c0:	701a      	strb	r2, [r3, #0]
 800a3c2:	e02e      	b.n	800a422 <MBX_CheckAndCopyMailbox+0x11e>
            return;
        }
        /* copy the mailbox header and data*/
        HW_EscReadMbxMem((MEM_ADDR MBXMEM *) psWriteMbx,u16EscAddrReceiveMbx,mbxLen);
 800a3c4:	4b1e      	ldr	r3, [pc, #120]	; (800a440 <MBX_CheckAndCopyMailbox+0x13c>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	4a17      	ldr	r2, [pc, #92]	; (800a428 <MBX_CheckAndCopyMailbox+0x124>)
 800a3ca:	8811      	ldrh	r1, [r2, #0]
 800a3cc:	887a      	ldrh	r2, [r7, #2]
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f7fe fffc 	bl	80093cc <HW_EscRead>


        {
        /*Read Control and Status of SyncManager 0 to check if the buffer is unlocked*/
        VARVOLATILE UINT16 smstate = 0x00;
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	803b      	strh	r3, [r7, #0]
        HW_EscReadWord(smstate,ESC_SYNCMAN_CONTROL_OFFSET);
 800a3d8:	463b      	mov	r3, r7
 800a3da:	2202      	movs	r2, #2
 800a3dc:	f640 0104 	movw	r1, #2052	; 0x804
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	f7fe fff3 	bl	80093cc <HW_EscRead>
/*ECATCHANGE_START(V5.11) ECAT7*/
        smstate = SWAPWORD(smstate);
 800a3e6:	883b      	ldrh	r3, [r7, #0]
 800a3e8:	b29b      	uxth	r3, r3
 800a3ea:	803b      	strh	r3, [r7, #0]
/*ECATCHANGE_END(V5.11) ECAT7*/

        if(smstate & SM_STATUS_MBX_BUFFER_FULL)
 800a3ec:	883b      	ldrh	r3, [r7, #0]
 800a3ee:	b29b      	uxth	r3, r3
 800a3f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d00f      	beq.n	800a418 <MBX_CheckAndCopyMailbox+0x114>
        {
            /*Unlock the mailbox SyncManger buffer*/
            u16dummy = 0;
 800a3f8:	4b12      	ldr	r3, [pc, #72]	; (800a444 <MBX_CheckAndCopyMailbox+0x140>)
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	801a      	strh	r2, [r3, #0]
            HW_EscReadWord(u16dummy,(u16EscAddrReceiveMbx + u16ReceiveMbxSize - 2));
 800a3fe:	4b0a      	ldr	r3, [pc, #40]	; (800a428 <MBX_CheckAndCopyMailbox+0x124>)
 800a400:	881a      	ldrh	r2, [r3, #0]
 800a402:	4b0e      	ldr	r3, [pc, #56]	; (800a43c <MBX_CheckAndCopyMailbox+0x138>)
 800a404:	881b      	ldrh	r3, [r3, #0]
 800a406:	4413      	add	r3, r2
 800a408:	b29b      	uxth	r3, r3
 800a40a:	3b02      	subs	r3, #2
 800a40c:	b29b      	uxth	r3, r3
 800a40e:	2202      	movs	r2, #2
 800a410:	4619      	mov	r1, r3
 800a412:	480c      	ldr	r0, [pc, #48]	; (800a444 <MBX_CheckAndCopyMailbox+0x140>)
 800a414:	f7fe ffda 	bl	80093cc <HW_EscRead>
        }

        }

        /* in MBX_MailboxWriteInd the mailbox protocol will be processed */
        MBX_MailboxWriteInd( psWriteMbx );
 800a418:	4b09      	ldr	r3, [pc, #36]	; (800a440 <MBX_CheckAndCopyMailbox+0x13c>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	4618      	mov	r0, r3
 800a41e:	f7ff fdd9 	bl	8009fd4 <MBX_MailboxWriteInd>

    }
}
 800a422:	3708      	adds	r7, #8
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}
 800a428:	2000087c 	.word	0x2000087c
 800a42c:	20000b00 	.word	0x20000b00
 800a430:	20000875 	.word	0x20000875
 800a434:	20000a84 	.word	0x20000a84
 800a438:	20000874 	.word	0x20000874
 800a43c:	2000087a 	.word	0x2000087a
 800a440:	20000a88 	.word	0x20000a88
 800a444:	200006bc 	.word	0x200006bc

0800a448 <MBX_CopyToSendMailbox>:

 \brief    This function copies data to the Send Mailbox.
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 MBX_CopyToSendMailbox( TMBX MBXMEM *pMbx )
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b086      	sub	sp, #24
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
    if ( (nAlStatus & STATE_MASK) == STATE_INIT)
 800a450:	4b39      	ldr	r3, [pc, #228]	; (800a538 <MBX_CopyToSendMailbox+0xf0>)
 800a452:	781b      	ldrb	r3, [r3, #0]
 800a454:	f003 030f 	and.w	r3, r3, #15
 800a458:	2b01      	cmp	r3, #1
 800a45a:	d101      	bne.n	800a460 <MBX_CopyToSendMailbox+0x18>
    {
        /* the mailbox is disabled if the slave is in the INIT state */
        return( ERROR_INVALIDSTATE );
 800a45c:	23f0      	movs	r3, #240	; 0xf0
 800a45e:	e067      	b.n	800a530 <MBX_CopyToSendMailbox+0xe8>
    }


    if ( !bMbxRunning )
 800a460:	4b36      	ldr	r3, [pc, #216]	; (800a53c <MBX_CopyToSendMailbox+0xf4>)
 800a462:	781b      	ldrb	r3, [r3, #0]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d101      	bne.n	800a46c <MBX_CopyToSendMailbox+0x24>
    {
        /* the mailbox is disabled if the slave is in the INIT state */
        return( ERROR_INVALIDSTATE );
 800a468:	23f0      	movs	r3, #240	; 0xf0
 800a46a:	e061      	b.n	800a530 <MBX_CopyToSendMailbox+0xe8>
    }

    if ( bSendMbxIsFull )
 800a46c:	4b34      	ldr	r3, [pc, #208]	; (800a540 <MBX_CopyToSendMailbox+0xf8>)
 800a46e:	781b      	ldrb	r3, [r3, #0]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d001      	beq.n	800a478 <MBX_CopyToSendMailbox+0x30>
    {
        /* mailbox service cannot be sent because the send mailbox is still full */
        return MBXERR_NOMOREMEMORY;
 800a474:	2307      	movs	r3, #7
 800a476:	e05b      	b.n	800a530 <MBX_CopyToSendMailbox+0xe8>
    }
    else
    {
        /* the variable mbxSize contains the size of the mailbox data to be sent */
        UINT16 mbxSize = pMbx->MbxHeader.Length;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	881b      	ldrh	r3, [r3, #0]
 800a47c:	82fb      	strh	r3, [r7, #22]
        HW_EscWriteMbxMem((MEM_ADDR *)pMbx, u16EscAddrSendMbx, (mbxSize + MBX_HEADER_SIZE));
 800a47e:	4b31      	ldr	r3, [pc, #196]	; (800a544 <MBX_CopyToSendMailbox+0xfc>)
 800a480:	8819      	ldrh	r1, [r3, #0]
 800a482:	8afb      	ldrh	r3, [r7, #22]
 800a484:	3306      	adds	r3, #6
 800a486:	b29b      	uxth	r3, r3
 800a488:	461a      	mov	r2, r3
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f7fe fffa 	bl	8009484 <HW_EscWrite>
/* ECATCHANGE_HW(V5.10) HW1*/

        {
        /*Read Control and Status of SyncManager 1 to check if the buffer is still marked as empty*/
        VARVOLATILE UINT16 smstate = 0x00;
 800a490:	2300      	movs	r3, #0
 800a492:	81fb      	strh	r3, [r7, #14]
        HW_EscReadWord(smstate,(ESC_SYNCMAN_CONTROL_OFFSET + SIZEOF_SM_REGISTER));
 800a494:	f107 030e 	add.w	r3, r7, #14
 800a498:	2202      	movs	r2, #2
 800a49a:	f640 010c 	movw	r1, #2060	; 0x80c
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f7fe ff94 	bl	80093cc <HW_EscRead>
/*ECATCHANGE_START(V5.11) ECAT7*/
        smstate = SWAPWORD(smstate);
 800a4a4:	89fb      	ldrh	r3, [r7, #14]
 800a4a6:	b29b      	uxth	r3, r3
 800a4a8:	81fb      	strh	r3, [r7, #14]
/*ECATCHANGE_END(V5.11) ECAT7*/

        if(!(smstate & SM_STATUS_MBX_BUFFER_FULL))
 800a4aa:	89fb      	ldrh	r3, [r7, #14]
 800a4ac:	b29b      	uxth	r3, r3
 800a4ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d12a      	bne.n	800a50c <MBX_CopyToSendMailbox+0xc4>
        {
            UINT8 BytesLeft = u16SendMbxSize - (mbxSize + MBX_HEADER_SIZE);
 800a4b6:	4b24      	ldr	r3, [pc, #144]	; (800a548 <MBX_CopyToSendMailbox+0x100>)
 800a4b8:	881b      	ldrh	r3, [r3, #0]
 800a4ba:	b2da      	uxtb	r2, r3
 800a4bc:	8afb      	ldrh	r3, [r7, #22]
 800a4be:	b2db      	uxtb	r3, r3
 800a4c0:	1ad3      	subs	r3, r2, r3
 800a4c2:	b2db      	uxtb	r3, r3
 800a4c4:	3b06      	subs	r3, #6
 800a4c6:	757b      	strb	r3, [r7, #21]

            /*Write last Byte to trigger mailbox full flag*/
            /*Read last 2 Bytes and write them again (required if low Byte of the WORD were written before)*/
            u16dummy = 0;
 800a4c8:	4b20      	ldr	r3, [pc, #128]	; (800a54c <MBX_CopyToSendMailbox+0x104>)
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	801a      	strh	r2, [r3, #0]
            if(BytesLeft < 2)
 800a4ce:	7d7b      	ldrb	r3, [r7, #21]
 800a4d0:	2b01      	cmp	r3, #1
 800a4d2:	d80e      	bhi.n	800a4f2 <MBX_CopyToSendMailbox+0xaa>
            {
                /*The last 2Bytes are overlapping the already written buffer*/
                                
                /*Get the valid 16Bit address*/
                UINT32 LastDataAddress = ((mbxSize + MBX_HEADER_SIZE)/2)*2;
 800a4d4:	8afb      	ldrh	r3, [r7, #22]
 800a4d6:	3306      	adds	r3, #6
 800a4d8:	f023 0301 	bic.w	r3, r3, #1
 800a4dc:	613b      	str	r3, [r7, #16]
            
                /*Copy the buffer to overwrite*/
                MEMCPY((UINT16 *)&u16dummy,(((UINT8 *)pMbx) + LastDataAddress),(2 - BytesLeft));
 800a4de:	687a      	ldr	r2, [r7, #4]
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	18d1      	adds	r1, r2, r3
 800a4e4:	7d7b      	ldrb	r3, [r7, #21]
 800a4e6:	f1c3 0302 	rsb	r3, r3, #2
 800a4ea:	461a      	mov	r2, r3
 800a4ec:	4817      	ldr	r0, [pc, #92]	; (800a54c <MBX_CopyToSendMailbox+0x104>)
 800a4ee:	f002 fcab 	bl	800ce48 <memcpy>
            }
            
            HW_EscWriteWord(u16dummy,(u16EscAddrSendMbx + u16SendMbxSize - 2));
 800a4f2:	4b14      	ldr	r3, [pc, #80]	; (800a544 <MBX_CopyToSendMailbox+0xfc>)
 800a4f4:	881a      	ldrh	r2, [r3, #0]
 800a4f6:	4b14      	ldr	r3, [pc, #80]	; (800a548 <MBX_CopyToSendMailbox+0x100>)
 800a4f8:	881b      	ldrh	r3, [r3, #0]
 800a4fa:	4413      	add	r3, r2
 800a4fc:	b29b      	uxth	r3, r3
 800a4fe:	3b02      	subs	r3, #2
 800a500:	b29b      	uxth	r3, r3
 800a502:	2202      	movs	r2, #2
 800a504:	4619      	mov	r1, r3
 800a506:	4811      	ldr	r0, [pc, #68]	; (800a54c <MBX_CopyToSendMailbox+0x104>)
 800a508:	f7fe ffbc 	bl	8009484 <HW_EscWrite>
            the other one the actual service to be sent (psReadMbx),
            there is no buffer available for a mailbox receive service
            until the last sent buffer was read from the master
            the exception is after the INIT2PREOP transition, in that
            case there is no last sent service (psReadMbx = 0) */
        if ( psReadMbx )
 800a50c:	4b10      	ldr	r3, [pc, #64]	; (800a550 <MBX_CopyToSendMailbox+0x108>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d003      	beq.n	800a51c <MBX_CopyToSendMailbox+0xd4>
            psWriteMbx = NULL;
 800a514:	4b0f      	ldr	r3, [pc, #60]	; (800a554 <MBX_CopyToSendMailbox+0x10c>)
 800a516:	2200      	movs	r2, #0
 800a518:	601a      	str	r2, [r3, #0]
 800a51a:	e002      	b.n	800a522 <MBX_CopyToSendMailbox+0xda>
        else
        {
            /* only the first time after the INIT2PREOP-transition */
            psWriteMbx = &asMbx[1];
 800a51c:	4b0d      	ldr	r3, [pc, #52]	; (800a554 <MBX_CopyToSendMailbox+0x10c>)
 800a51e:	4a0e      	ldr	r2, [pc, #56]	; (800a558 <MBX_CopyToSendMailbox+0x110>)
 800a520:	601a      	str	r2, [r3, #0]
        }
        // HBu 17.06.06: psRepeatMbx was already updated in MBX_MailboxReadInd
        // psRepeatMbx = psReadMbx;
        psReadMbx = pMbx;
 800a522:	4a0b      	ldr	r2, [pc, #44]	; (800a550 <MBX_CopyToSendMailbox+0x108>)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	6013      	str	r3, [r2, #0]

        /* set flag that send mailbox is full now */
        bSendMbxIsFull = TRUE;
 800a528:	4b05      	ldr	r3, [pc, #20]	; (800a540 <MBX_CopyToSendMailbox+0xf8>)
 800a52a:	2201      	movs	r2, #1
 800a52c:	701a      	strb	r2, [r3, #0]


        return 0;
 800a52e:	2300      	movs	r3, #0
    }
}
 800a530:	4618      	mov	r0, r3
 800a532:	3718      	adds	r7, #24
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}
 800a538:	200006b2 	.word	0x200006b2
 800a53c:	20000876 	.word	0x20000876
 800a540:	20000875 	.word	0x20000875
 800a544:	2000087e 	.word	0x2000087e
 800a548:	20000878 	.word	0x20000878
 800a54c:	200006bc 	.word	0x200006bc
 800a550:	20000a8c 	.word	0x20000a8c
 800a554:	20000a88 	.word	0x20000a88
 800a558:	20000984 	.word	0x20000984

0800a55c <MBX_Main>:
 \brief    This function is called cyclically to check if a received Mailbox service was
             stored.
*////////////////////////////////////////////////////////////////////////////////////////

void MBX_Main(void)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b082      	sub	sp, #8
 800a560:	af00      	add	r7, sp, #0
    TMBX MBXMEM *pMbx = NULL;
 800a562:	2300      	movs	r3, #0
 800a564:	603b      	str	r3, [r7, #0]

    do
    {
        UINT8 result = 0;
 800a566:	2300      	movs	r3, #0
 800a568:	71fb      	strb	r3, [r7, #7]

        pMbx = GetOutOfMbxQueue(&sMbxReceiveQueue);
 800a56a:	4818      	ldr	r0, [pc, #96]	; (800a5cc <MBX_Main+0x70>)
 800a56c:	f7ff fb33 	bl	8009bd6 <GetOutOfMbxQueue>
 800a570:	6038      	str	r0, [r7, #0]
        if ( pMbx )
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d004      	beq.n	800a582 <MBX_Main+0x26>
            result = MailboxServiceInd(pMbx);
 800a578:	6838      	ldr	r0, [r7, #0]
 800a57a:	f7ff fcff 	bl	8009f7c <MailboxServiceInd>
 800a57e:	4603      	mov	r3, r0
 800a580:	71fb      	strb	r3, [r7, #7]

        if ( result != 0 )
 800a582:	79fb      	ldrb	r3, [r7, #7]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d014      	beq.n	800a5b2 <MBX_Main+0x56>
        {
            /* Mailbox error response: type 0 (mailbox service protocol) */
            pMbx->MbxHeader.Length     = 4;
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	2204      	movs	r2, #4
 800a58c:	801a      	strh	r2, [r3, #0]
            pMbx->MbxHeader.Flags[MBX_OFFS_TYPE]        &= ~(MBX_MASK_TYPE);
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	889b      	ldrh	r3, [r3, #4]
 800a592:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a596:	b29a      	uxth	r2, r3
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	809a      	strh	r2, [r3, #4]
            pMbx->Data[0]                        = SWAPWORD(MBXSERVICE_MBXERRORCMD);
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	2201      	movs	r2, #1
 800a5a0:	80da      	strh	r2, [r3, #6]
            pMbx->Data[1]                        = SWAPWORD(result);
 800a5a2:	79fb      	ldrb	r3, [r7, #7]
 800a5a4:	b29a      	uxth	r2, r3
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	811a      	strh	r2, [r3, #8]
            MBX_MailboxSendReq(pMbx, 0);
 800a5aa:	2100      	movs	r1, #0
 800a5ac:	6838      	ldr	r0, [r7, #0]
 800a5ae:	f7ff fe3d 	bl	800a22c <MBX_MailboxSendReq>
        }
    }
    while ( pMbx != NULL );
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d1d6      	bne.n	800a566 <MBX_Main+0xa>



      if ( bReceiveMbxIsLocked )
 800a5b8:	4b05      	ldr	r3, [pc, #20]	; (800a5d0 <MBX_Main+0x74>)
 800a5ba:	781b      	ldrb	r3, [r3, #0]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d001      	beq.n	800a5c4 <MBX_Main+0x68>
      {
          /* the work on the receive mailbox is locked, check if it can be unlocked (if all
             mailbox commands has been sent */
          MBX_CheckAndCopyMailbox();
 800a5c0:	f7ff fea0 	bl	800a304 <MBX_CheckAndCopyMailbox>
      }
}
 800a5c4:	bf00      	nop
 800a5c6:	3708      	adds	r7, #8
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	bd80      	pop	{r7, pc}
 800a5cc:	20000acc 	.word	0x20000acc
 800a5d0:	20000874 	.word	0x20000874

0800a5d4 <OBJ_GetObjectHandle>:
             and returns a handle if found.

*////////////////////////////////////////////////////////////////////////////////////////

OBJCONST TOBJECT OBJMEM *  OBJ_GetObjectHandle( UINT16 index )
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b084      	sub	sp, #16
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	4603      	mov	r3, r0
 800a5dc:	80fb      	strh	r3, [r7, #6]
    OBJCONST TOBJECT OBJMEM * pObjEntry = (OBJCONST TOBJECT OBJMEM *) COE_GetObjectDictionary();
 800a5de:	f7fb fd19 	bl	8006014 <COE_GetObjectDictionary>
 800a5e2:	60f8      	str	r0, [r7, #12]

    while (pObjEntry!= NULL)
 800a5e4:	e009      	b.n	800a5fa <OBJ_GetObjectHandle+0x26>
    {
        if (pObjEntry->Index == index)
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	891b      	ldrh	r3, [r3, #8]
 800a5ea:	88fa      	ldrh	r2, [r7, #6]
 800a5ec:	429a      	cmp	r2, r3
 800a5ee:	d101      	bne.n	800a5f4 <OBJ_GetObjectHandle+0x20>
            return pObjEntry;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	e006      	b.n	800a602 <OBJ_GetObjectHandle+0x2e>
        pObjEntry = (TOBJECT OBJMEM *) pObjEntry->pNext;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	685b      	ldr	r3, [r3, #4]
 800a5f8:	60fb      	str	r3, [r7, #12]
    while (pObjEntry!= NULL)
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d1f2      	bne.n	800a5e6 <OBJ_GetObjectHandle+0x12>
    }
    return 0;
 800a600:	2300      	movs	r3, #0
}
 800a602:	4618      	mov	r0, r3
 800a604:	3710      	adds	r7, #16
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}

0800a60a <OBJ_GetObjectLength>:

 \brief     This function returns the size of the requested entry. If bCompleteaccess is set the size of the complete object is returned (the returned size is byte packed, gaps based on the used platform/compiler are not taken into account)

*////////////////////////////////////////////////////////////////////////////////////////
UINT32 OBJ_GetObjectLength( UINT16 index, UINT8 subindex, OBJCONST TOBJECT OBJMEM * pObjEntry, UINT8 bCompleteAccess)
{
 800a60a:	b480      	push	{r7}
 800a60c:	b085      	sub	sp, #20
 800a60e:	af00      	add	r7, sp, #0
 800a610:	603a      	str	r2, [r7, #0]
 800a612:	461a      	mov	r2, r3
 800a614:	4603      	mov	r3, r0
 800a616:	80fb      	strh	r3, [r7, #6]
 800a618:	460b      	mov	r3, r1
 800a61a:	717b      	strb	r3, [r7, #5]
 800a61c:	4613      	mov	r3, r2
 800a61e:	713b      	strb	r3, [r7, #4]
    /* get the information of ObjCode and MaxSubindex in local variables to support different types of microcontroller */
    UINT8 objCode = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_OBJCODEMASK) >> OBJFLAGS_OBJCODESHIFT;
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	899b      	ldrh	r3, [r3, #12]
 800a624:	121b      	asrs	r3, r3, #8
 800a626:	b2db      	uxtb	r3, r3
 800a628:	f003 030f 	and.w	r3, r3, #15
 800a62c:	72bb      	strb	r3, [r7, #10]
    UINT8 maxSubindex = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_MAXSUBINDEXMASK) >> OBJFLAGS_MAXSUBINDEXSHIFT;
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	899b      	ldrh	r3, [r3, #12]
 800a632:	727b      	strb	r3, [r7, #9]
    UINT32 size = 0;
 800a634:	2300      	movs	r3, #0
 800a636:	60fb      	str	r3, [r7, #12]

    if ( bCompleteAccess )
 800a638:	793b      	ldrb	r3, [r7, #4]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d043      	beq.n	800a6c6 <OBJ_GetObjectLength+0xbc>
    {
        if ( objCode == OBJCODE_VAR )
 800a63e:	7abb      	ldrb	r3, [r7, #10]
 800a640:	2b07      	cmp	r3, #7
 800a642:	d101      	bne.n	800a648 <OBJ_GetObjectLength+0x3e>
            return 0;
 800a644:	2300      	movs	r3, #0
 800a646:	e061      	b.n	800a70c <OBJ_GetObjectLength+0x102>
        else if ((objCode == OBJCODE_ARR)
 800a648:	7abb      	ldrb	r3, [r7, #10]
 800a64a:	2b08      	cmp	r3, #8
 800a64c:	d118      	bne.n	800a680 <OBJ_GetObjectLength+0x76>
            )
        {

            /* we have to get the maxSubindex from the actual value of subindex 0,
                which is stored as UINT16 at the beginning of the object's variable */
            maxSubindex = (UINT8) ((UINT16 MBXMEM *) (pObjEntry->pVarPtr))[0];
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	699b      	ldr	r3, [r3, #24]
 800a652:	881b      	ldrh	r3, [r3, #0]
 800a654:	727b      	strb	r3, [r7, #9]


            size = pObjEntry->pEntryDesc[1].BitLength *maxSubindex;
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	691b      	ldr	r3, [r3, #16]
 800a65a:	3306      	adds	r3, #6
 800a65c:	885b      	ldrh	r3, [r3, #2]
 800a65e:	461a      	mov	r2, r3
 800a660:	7a7b      	ldrb	r3, [r7, #9]
 800a662:	fb02 f303 	mul.w	r3, r2, r3
 800a666:	60fb      	str	r3, [r7, #12]

/* no padding required: Bit entries within an array object may overlap byte borders*/

            /* we have to convert the size in bytes */
            size = BIT2BYTE(size);
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	3307      	adds	r3, #7
 800a66c:	08db      	lsrs	r3, r3, #3
 800a66e:	60fb      	str	r3, [r7, #12]

            if ( subindex == 0 )
 800a670:	797b      	ldrb	r3, [r7, #5]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d102      	bne.n	800a67c <OBJ_GetObjectLength+0x72>
            {
                /* add size for subindex 0 (is transmitted as UINT16) */
                size += 2;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	3302      	adds	r3, #2
 800a67a:	60fb      	str	r3, [r7, #12]
            }
            return size;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	e045      	b.n	800a70c <OBJ_GetObjectLength+0x102>
        else
        {
            UINT8 i;

            /* add the sizes of all entries */
            for (i = 1; i <= maxSubindex; i++)
 800a680:	2301      	movs	r3, #1
 800a682:	72fb      	strb	r3, [r7, #11]
 800a684:	e00f      	b.n	800a6a6 <OBJ_GetObjectLength+0x9c>
            {
                size += pObjEntry->pEntryDesc[i].BitLength;
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	6919      	ldr	r1, [r3, #16]
 800a68a:	7afa      	ldrb	r2, [r7, #11]
 800a68c:	4613      	mov	r3, r2
 800a68e:	005b      	lsls	r3, r3, #1
 800a690:	4413      	add	r3, r2
 800a692:	005b      	lsls	r3, r3, #1
 800a694:	440b      	add	r3, r1
 800a696:	885b      	ldrh	r3, [r3, #2]
 800a698:	461a      	mov	r2, r3
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	4413      	add	r3, r2
 800a69e:	60fb      	str	r3, [r7, #12]
            for (i = 1; i <= maxSubindex; i++)
 800a6a0:	7afb      	ldrb	r3, [r7, #11]
 800a6a2:	3301      	adds	r3, #1
 800a6a4:	72fb      	strb	r3, [r7, #11]
 800a6a6:	7afa      	ldrb	r2, [r7, #11]
 800a6a8:	7a7b      	ldrb	r3, [r7, #9]
 800a6aa:	429a      	cmp	r2, r3
 800a6ac:	d9eb      	bls.n	800a686 <OBJ_GetObjectLength+0x7c>
            }
            /* we have to convert the size in bytes */
            size = BIT2BYTE(size);
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	3307      	adds	r3, #7
 800a6b2:	08db      	lsrs	r3, r3, #3
 800a6b4:	60fb      	str	r3, [r7, #12]

            if ( subindex == 0 )
 800a6b6:	797b      	ldrb	r3, [r7, #5]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d102      	bne.n	800a6c2 <OBJ_GetObjectLength+0xb8>
            {
                /* add size for subindex 0 (is transmitted as UINT16) */
                size += 2;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	3302      	adds	r3, #2
 800a6c0:	60fb      	str	r3, [r7, #12]
            }
            return size;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	e022      	b.n	800a70c <OBJ_GetObjectLength+0x102>
        }
    }
    else
    {
        if ( objCode == OBJCODE_VAR )
 800a6c6:	7abb      	ldrb	r3, [r7, #10]
 800a6c8:	2b07      	cmp	r3, #7
 800a6ca:	d105      	bne.n	800a6d8 <OBJ_GetObjectLength+0xce>
        {
            return (BIT2BYTE(pObjEntry->pEntryDesc->BitLength));
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	691b      	ldr	r3, [r3, #16]
 800a6d0:	885b      	ldrh	r3, [r3, #2]
 800a6d2:	3307      	adds	r3, #7
 800a6d4:	10db      	asrs	r3, r3, #3
 800a6d6:	e019      	b.n	800a70c <OBJ_GetObjectLength+0x102>

        }
        else if ( subindex == 0 )
 800a6d8:	797b      	ldrb	r3, [r7, #5]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d101      	bne.n	800a6e2 <OBJ_GetObjectLength+0xd8>
        {
            /* for single access subindex 0 is transmitted as UINT8 */
            return 1;
 800a6de:	2301      	movs	r3, #1
 800a6e0:	e014      	b.n	800a70c <OBJ_GetObjectLength+0x102>
        }
        else if((objCode == OBJCODE_ARR)
 800a6e2:	7abb      	ldrb	r3, [r7, #10]
 800a6e4:	2b08      	cmp	r3, #8
 800a6e6:	d106      	bne.n	800a6f6 <OBJ_GetObjectLength+0xec>
            )
        {
            return (BIT2BYTE(pObjEntry->pEntryDesc[1].BitLength));
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	691b      	ldr	r3, [r3, #16]
 800a6ec:	3306      	adds	r3, #6
 800a6ee:	885b      	ldrh	r3, [r3, #2]
 800a6f0:	3307      	adds	r3, #7
 800a6f2:	10db      	asrs	r3, r3, #3
 800a6f4:	e00a      	b.n	800a70c <OBJ_GetObjectLength+0x102>
        }
        else
        {
                return (BIT2BYTE(pObjEntry->pEntryDesc[subindex].BitLength));
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	6919      	ldr	r1, [r3, #16]
 800a6fa:	797a      	ldrb	r2, [r7, #5]
 800a6fc:	4613      	mov	r3, r2
 800a6fe:	005b      	lsls	r3, r3, #1
 800a700:	4413      	add	r3, r2
 800a702:	005b      	lsls	r3, r3, #1
 800a704:	440b      	add	r3, r1
 800a706:	885b      	ldrh	r3, [r3, #2]
 800a708:	3307      	adds	r3, #7
 800a70a:	10db      	asrs	r3, r3, #3
        }
    }
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	3714      	adds	r7, #20
 800a710:	46bd      	mov	sp, r7
 800a712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a716:	4770      	bx	lr

0800a718 <OBJ_CopyNumberToString>:
         which shall be initialized with 000

*////////////////////////////////////////////////////////////////////////////////////////

void OBJ_CopyNumberToString(UCHAR MBXMEM *pStr, UINT8 Number)
{
 800a718:	b480      	push	{r7}
 800a71a:	b085      	sub	sp, #20
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
 800a720:	460b      	mov	r3, r1
 800a722:	70fb      	strb	r3, [r7, #3]
    UINT8 Modulo;

    pStr[2] = '0';
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	3302      	adds	r3, #2
 800a728:	2230      	movs	r2, #48	; 0x30
 800a72a:	701a      	strb	r2, [r3, #0]
    pStr[0] += (Number / 100);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	781a      	ldrb	r2, [r3, #0]
 800a730:	78fb      	ldrb	r3, [r7, #3]
 800a732:	491d      	ldr	r1, [pc, #116]	; (800a7a8 <OBJ_CopyNumberToString+0x90>)
 800a734:	fba1 1303 	umull	r1, r3, r1, r3
 800a738:	095b      	lsrs	r3, r3, #5
 800a73a:	b2db      	uxtb	r3, r3
 800a73c:	4413      	add	r3, r2
 800a73e:	b2da      	uxtb	r2, r3
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	701a      	strb	r2, [r3, #0]
    Modulo = Number % 100;
 800a744:	78fb      	ldrb	r3, [r7, #3]
 800a746:	4a18      	ldr	r2, [pc, #96]	; (800a7a8 <OBJ_CopyNumberToString+0x90>)
 800a748:	fba2 1203 	umull	r1, r2, r2, r3
 800a74c:	0952      	lsrs	r2, r2, #5
 800a74e:	2164      	movs	r1, #100	; 0x64
 800a750:	fb01 f202 	mul.w	r2, r1, r2
 800a754:	1a9b      	subs	r3, r3, r2
 800a756:	73fb      	strb	r3, [r7, #15]
    pStr[1] += (Modulo / 10);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	3301      	adds	r3, #1
 800a75c:	7819      	ldrb	r1, [r3, #0]
 800a75e:	7bfb      	ldrb	r3, [r7, #15]
 800a760:	4a12      	ldr	r2, [pc, #72]	; (800a7ac <OBJ_CopyNumberToString+0x94>)
 800a762:	fba2 2303 	umull	r2, r3, r2, r3
 800a766:	08db      	lsrs	r3, r3, #3
 800a768:	b2da      	uxtb	r2, r3
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	3301      	adds	r3, #1
 800a76e:	440a      	add	r2, r1
 800a770:	b2d2      	uxtb	r2, r2
 800a772:	701a      	strb	r2, [r3, #0]
    pStr[2] += (Modulo % 10);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	3302      	adds	r3, #2
 800a778:	7818      	ldrb	r0, [r3, #0]
 800a77a:	7bfa      	ldrb	r2, [r7, #15]
 800a77c:	4b0b      	ldr	r3, [pc, #44]	; (800a7ac <OBJ_CopyNumberToString+0x94>)
 800a77e:	fba3 1302 	umull	r1, r3, r3, r2
 800a782:	08d9      	lsrs	r1, r3, #3
 800a784:	460b      	mov	r3, r1
 800a786:	009b      	lsls	r3, r3, #2
 800a788:	440b      	add	r3, r1
 800a78a:	005b      	lsls	r3, r3, #1
 800a78c:	1ad3      	subs	r3, r2, r3
 800a78e:	b2da      	uxtb	r2, r3
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	3302      	adds	r3, #2
 800a794:	4402      	add	r2, r0
 800a796:	b2d2      	uxtb	r2, r2
 800a798:	701a      	strb	r2, [r3, #0]
}
 800a79a:	bf00      	nop
 800a79c:	3714      	adds	r7, #20
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a4:	4770      	bx	lr
 800a7a6:	bf00      	nop
 800a7a8:	51eb851f 	.word	0x51eb851f
 800a7ac:	cccccccd 	.word	0xcccccccd

0800a7b0 <OBJ_GetNoOfObjects>:
 \brief    The function counts the number of objects of the requested list type

*////////////////////////////////////////////////////////////////////////////////////////

UINT16    OBJ_GetNoOfObjects(UINT8 listType)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b086      	sub	sp, #24
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	71fb      	strb	r3, [r7, #7]
    /* the variable listFlags contains the mask used for the ObjAccess in the Entry-Desc
       see the structure TSDOINFOENTRYDESC in sdoserv.h, listType = 0 indicates that
       all objects has to be counted */
    
    UINT16 listFlags = 0x0020 << listType;
 800a7ba:	79fb      	ldrb	r3, [r7, #7]
 800a7bc:	2220      	movs	r2, #32
 800a7be:	fa02 f303 	lsl.w	r3, r2, r3
 800a7c2:	81bb      	strh	r3, [r7, #12]
    
    /* set pObjEntry to the beginning of the object dictionary */
    OBJCONST TOBJECT OBJMEM * pObjEntry = (OBJCONST TOBJECT OBJMEM *) COE_GetObjectDictionary();
 800a7c4:	f7fb fc26 	bl	8006014 <COE_GetObjectDictionary>
 800a7c8:	6178      	str	r0, [r7, #20]
    UINT16 n = 0;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	827b      	strh	r3, [r7, #18]


    while (pObjEntry != NULL)
 800a7ce:	e032      	b.n	800a836 <OBJ_GetNoOfObjects+0x86>
    {
        /* count the objects of the requested list type */
        if ( pObjEntry->Index >= 0x1000 )
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	891b      	ldrh	r3, [r3, #8]
 800a7d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7d8:	d32a      	bcc.n	800a830 <OBJ_GetNoOfObjects+0x80>
        {
            UINT8 t = listType;
 800a7da:	79fb      	ldrb	r3, [r7, #7]
 800a7dc:	747b      	strb	r3, [r7, #17]
            if ( t )
 800a7de:	7c7b      	ldrb	r3, [r7, #17]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d01f      	beq.n	800a824 <OBJ_GetNoOfObjects+0x74>
            {
                UINT8 maxSubindex = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_MAXSUBINDEXMASK) >> OBJFLAGS_MAXSUBINDEXSHIFT;
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	899b      	ldrh	r3, [r3, #12]
 800a7e8:	72fb      	strb	r3, [r7, #11]
                UINT16 i = 0;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	81fb      	strh	r3, [r7, #14]

                while ( t && i <= maxSubindex )
 800a7ee:	e011      	b.n	800a814 <OBJ_GetNoOfObjects+0x64>
                {
                    if ( OBJ_GetEntryDesc(pObjEntry,(UINT8) i)->ObjAccess & listFlags )
 800a7f0:	89fb      	ldrh	r3, [r7, #14]
 800a7f2:	b2db      	uxtb	r3, r3
 800a7f4:	4619      	mov	r1, r3
 800a7f6:	6978      	ldr	r0, [r7, #20]
 800a7f8:	f000 f936 	bl	800aa68 <OBJ_GetEntryDesc>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	889a      	ldrh	r2, [r3, #4]
 800a800:	89bb      	ldrh	r3, [r7, #12]
 800a802:	4013      	ands	r3, r2
 800a804:	b29b      	uxth	r3, r3
 800a806:	2b00      	cmp	r3, #0
 800a808:	d001      	beq.n	800a80e <OBJ_GetNoOfObjects+0x5e>
                        t = 0;
 800a80a:	2300      	movs	r3, #0
 800a80c:	747b      	strb	r3, [r7, #17]
                    i++;
 800a80e:	89fb      	ldrh	r3, [r7, #14]
 800a810:	3301      	adds	r3, #1
 800a812:	81fb      	strh	r3, [r7, #14]
                while ( t && i <= maxSubindex )
 800a814:	7c7b      	ldrb	r3, [r7, #17]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d004      	beq.n	800a824 <OBJ_GetNoOfObjects+0x74>
 800a81a:	7afb      	ldrb	r3, [r7, #11]
 800a81c:	b29b      	uxth	r3, r3
 800a81e:	89fa      	ldrh	r2, [r7, #14]
 800a820:	429a      	cmp	r2, r3
 800a822:	d9e5      	bls.n	800a7f0 <OBJ_GetNoOfObjects+0x40>
                }
            }
            if ( !t )
 800a824:	7c7b      	ldrb	r3, [r7, #17]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d102      	bne.n	800a830 <OBJ_GetNoOfObjects+0x80>
            {
                /* object from listType found */
                n++;
 800a82a:	8a7b      	ldrh	r3, [r7, #18]
 800a82c:	3301      	adds	r3, #1
 800a82e:	827b      	strh	r3, [r7, #18]
            }
        }
        /* next object in object dictionary */
        pObjEntry = (TOBJECT OBJMEM *) pObjEntry->pNext;
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	685b      	ldr	r3, [r3, #4]
 800a834:	617b      	str	r3, [r7, #20]
    while (pObjEntry != NULL)
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d1c9      	bne.n	800a7d0 <OBJ_GetNoOfObjects+0x20>
    }

    return n;
 800a83c:	8a7b      	ldrh	r3, [r7, #18]
}
 800a83e:	4618      	mov	r0, r3
 800a840:	3718      	adds	r7, #24
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}
	...

0800a848 <OBJ_GetObjectList>:

 \brief    The function copies (the part of) the object list in the mailbox buffer

*////////////////////////////////////////////////////////////////////////////////////////
UINT16    OBJ_GetObjectList(UINT16 listType, UINT16 *pIndex, UINT16 size, UINT16 MBXMEM *pData,UINT8 *pAbort)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b088      	sub	sp, #32
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	60b9      	str	r1, [r7, #8]
 800a850:	607b      	str	r3, [r7, #4]
 800a852:	4603      	mov	r3, r0
 800a854:	81fb      	strh	r3, [r7, #14]
 800a856:	4613      	mov	r3, r2
 800a858:	81bb      	strh	r3, [r7, #12]
    /* the variable listFlags contains the mask used for the ObjAccess in the Entry-Desc
       see the structure TSDOINFOENTRYDESC in sdoserv.h, listType = 0 indicates that
       all objects has to be counted */
    UINT16 listFlags = 0x0020 << listType;
 800a85a:	89fb      	ldrh	r3, [r7, #14]
 800a85c:	2220      	movs	r2, #32
 800a85e:	fa02 f303 	lsl.w	r3, r2, r3
 800a862:	82fb      	strh	r3, [r7, #22]
    OBJCONST TOBJECT OBJMEM * pObjEntry;


    if ( pIndex[0] == 0x1000 )
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	881b      	ldrh	r3, [r3, #0]
 800a868:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a86c:	d10c      	bne.n	800a888 <OBJ_GetObjectList+0x40>
    {
        /* beginning of object list, set pObjEntry to the beginning of the object dictionary */
       pObjEntry = (OBJCONST TOBJECT OBJMEM *) COE_GetObjectDictionary();
 800a86e:	f7fb fbd1 	bl	8006014 <COE_GetObjectDictionary>
 800a872:	61f8      	str	r0, [r7, #28]
        // set abort code if no object dictionary is available
        if((pObjEntry == NULL) && (pAbort != NULL))
 800a874:	69fb      	ldr	r3, [r7, #28]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d109      	bne.n	800a88e <OBJ_GetObjectList+0x46>
 800a87a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d006      	beq.n	800a88e <OBJ_GetObjectList+0x46>
        {
            *pAbort = ABORTIDX_NO_OBJECT_DICTIONARY_IS_PRESENT;
 800a880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a882:	221b      	movs	r2, #27
 800a884:	701a      	strb	r2, [r3, #0]
 800a886:	e002      	b.n	800a88e <OBJ_GetObjectList+0x46>
        }
    }
    else
    {
        /* next fragment, the next object to be handled was stored in pSdoInfoObjEntry */
        pObjEntry = pSdoInfoObjEntry;
 800a888:	4b2c      	ldr	r3, [pc, #176]	; (800a93c <OBJ_GetObjectList+0xf4>)
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	61fb      	str	r3, [r7, #28]
    }

    if ( pObjEntry != NULL )
 800a88e:	69fb      	ldr	r3, [r7, #28]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d03e      	beq.n	800a912 <OBJ_GetObjectList+0xca>
    {
        while (pObjEntry != NULL && size > 1 )
 800a894:	e037      	b.n	800a906 <OBJ_GetObjectList+0xbe>
        {
            /* get the next index of the requested object list if there is enough space in the mailbox buffer */
            if ( pObjEntry->Index >= 0x1000 )
 800a896:	69fb      	ldr	r3, [r7, #28]
 800a898:	891b      	ldrh	r3, [r3, #8]
 800a89a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a89e:	d32f      	bcc.n	800a900 <OBJ_GetObjectList+0xb8>
            {
                /* UINT8 was changed to UINT16 */
                UINT16 t = listType;
 800a8a0:	89fb      	ldrh	r3, [r7, #14]
 800a8a2:	837b      	strh	r3, [r7, #26]
                if ( t )
 800a8a4:	8b7b      	ldrh	r3, [r7, #26]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d01d      	beq.n	800a8e6 <OBJ_GetObjectList+0x9e>
                {
                    UINT8 maxSubindex = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_MAXSUBINDEXMASK) >> OBJFLAGS_MAXSUBINDEXSHIFT;
 800a8aa:	69fb      	ldr	r3, [r7, #28]
 800a8ac:	899b      	ldrh	r3, [r3, #12]
 800a8ae:	757b      	strb	r3, [r7, #21]
                    UINT8 i = 0;
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	767b      	strb	r3, [r7, #25]

                    while ( t && i <= maxSubindex )
 800a8b4:	e010      	b.n	800a8d8 <OBJ_GetObjectList+0x90>
                    {
                        if ( OBJ_GetEntryDesc(pObjEntry, i)->ObjAccess & listFlags )
 800a8b6:	7e7b      	ldrb	r3, [r7, #25]
 800a8b8:	4619      	mov	r1, r3
 800a8ba:	69f8      	ldr	r0, [r7, #28]
 800a8bc:	f000 f8d4 	bl	800aa68 <OBJ_GetEntryDesc>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	889a      	ldrh	r2, [r3, #4]
 800a8c4:	8afb      	ldrh	r3, [r7, #22]
 800a8c6:	4013      	ands	r3, r2
 800a8c8:	b29b      	uxth	r3, r3
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d001      	beq.n	800a8d2 <OBJ_GetObjectList+0x8a>
                            t = 0;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	837b      	strh	r3, [r7, #26]
                        i++;
 800a8d2:	7e7b      	ldrb	r3, [r7, #25]
 800a8d4:	3301      	adds	r3, #1
 800a8d6:	767b      	strb	r3, [r7, #25]
                    while ( t && i <= maxSubindex )
 800a8d8:	8b7b      	ldrh	r3, [r7, #26]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d003      	beq.n	800a8e6 <OBJ_GetObjectList+0x9e>
 800a8de:	7e7a      	ldrb	r2, [r7, #25]
 800a8e0:	7d7b      	ldrb	r3, [r7, #21]
 800a8e2:	429a      	cmp	r2, r3
 800a8e4:	d9e7      	bls.n	800a8b6 <OBJ_GetObjectList+0x6e>
                    }
                }
                if ( !t )
 800a8e6:	8b7b      	ldrh	r3, [r7, #26]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d109      	bne.n	800a900 <OBJ_GetObjectList+0xb8>
                {
                    /* store the index in the mailbox buffer */
                    *pData = SWAPWORD(pObjEntry->Index);
 800a8ec:	69fb      	ldr	r3, [r7, #28]
 800a8ee:	891a      	ldrh	r2, [r3, #8]
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	801a      	strh	r2, [r3, #0]
                    pData++;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	3302      	adds	r3, #2
 800a8f8:	607b      	str	r3, [r7, #4]
                    size -= 2;
 800a8fa:	89bb      	ldrh	r3, [r7, #12]
 800a8fc:	3b02      	subs	r3, #2
 800a8fe:	81bb      	strh	r3, [r7, #12]
                }
            }
        pObjEntry = (TOBJECT OBJMEM *) pObjEntry->pNext;
 800a900:	69fb      	ldr	r3, [r7, #28]
 800a902:	685b      	ldr	r3, [r3, #4]
 800a904:	61fb      	str	r3, [r7, #28]
        while (pObjEntry != NULL && size > 1 )
 800a906:	69fb      	ldr	r3, [r7, #28]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d002      	beq.n	800a912 <OBJ_GetObjectList+0xca>
 800a90c:	89bb      	ldrh	r3, [r7, #12]
 800a90e:	2b01      	cmp	r3, #1
 800a910:	d8c1      	bhi.n	800a896 <OBJ_GetObjectList+0x4e>
        }
    }

        /* return the next Index to be handled */
        if(pObjEntry != NULL)
 800a912:	69fb      	ldr	r3, [r7, #28]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d004      	beq.n	800a922 <OBJ_GetObjectList+0xda>
        {
            pIndex[0] = pObjEntry->Index;
 800a918:	69fb      	ldr	r3, [r7, #28]
 800a91a:	891a      	ldrh	r2, [r3, #8]
 800a91c:	68bb      	ldr	r3, [r7, #8]
 800a91e:	801a      	strh	r2, [r3, #0]
 800a920:	e003      	b.n	800a92a <OBJ_GetObjectList+0xe2>
        }
        else
        {
            /*last entry reached*/
            pIndex[0] = 0xFFFF;
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a928:	801a      	strh	r2, [r3, #0]
        }

    /* store object description pointer and index for next fragment */
    pSdoInfoObjEntry = pObjEntry;
 800a92a:	4a04      	ldr	r2, [pc, #16]	; (800a93c <OBJ_GetObjectList+0xf4>)
 800a92c:	69fb      	ldr	r3, [r7, #28]
 800a92e:	6013      	str	r3, [r2, #0]

    /* return the size of the available mailbox buffer which was not copied to */
    return size;
 800a930:	89bb      	ldrh	r3, [r7, #12]
}
 800a932:	4618      	mov	r0, r3
 800a934:	3720      	adds	r7, #32
 800a936:	46bd      	mov	sp, r7
 800a938:	bd80      	pop	{r7, pc}
 800a93a:	bf00      	nop
 800a93c:	20000bbc 	.word	0x20000bbc

0800a940 <OBJ_GetDesc>:
                0xFF                                            <br>
            }
*////////////////////////////////////////////////////////////////////////////////////////

UINT16 OBJ_GetDesc( UINT16 index, UINT8 subindex, OBJCONST TOBJECT OBJMEM * pObjEntry, UINT16 MBXMEM * pData )
{
 800a940:	b590      	push	{r4, r7, lr}
 800a942:	b08d      	sub	sp, #52	; 0x34
 800a944:	af00      	add	r7, sp, #0
 800a946:	60ba      	str	r2, [r7, #8]
 800a948:	607b      	str	r3, [r7, #4]
 800a94a:	4603      	mov	r3, r0
 800a94c:	81fb      	strh	r3, [r7, #14]
 800a94e:	460b      	mov	r3, r1
 800a950:	737b      	strb	r3, [r7, #13]
    UINT16 strSize = 0;
 800a952:	2300      	movs	r3, #0
 800a954:	85fb      	strh	r3, [r7, #46]	; 0x2e
    OBJCONST UCHAR OBJMEM * pDesc = (OBJCONST UCHAR OBJMEM *) pObjEntry->pName;
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	695b      	ldr	r3, [r3, #20]
 800a95a:	627b      	str	r3, [r7, #36]	; 0x24
/* get the information of ObjCode and MaxSubindex in local variables to support different types of microcontroller */
    UINT8 objCode = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_OBJCODEMASK) >> OBJFLAGS_OBJCODESHIFT;
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	899b      	ldrh	r3, [r3, #12]
 800a960:	121b      	asrs	r3, r3, #8
 800a962:	b2db      	uxtb	r3, r3
 800a964:	f003 030f 	and.w	r3, r3, #15
 800a968:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    if ( (subindex == 0) || (objCode == OBJCODE_VAR) )
 800a96c:	7b7b      	ldrb	r3, [r7, #13]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d003      	beq.n	800a97a <OBJ_GetDesc+0x3a>
 800a972:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a976:	2b07      	cmp	r3, #7
 800a978:	d10e      	bne.n	800a998 <OBJ_GetDesc+0x58>
    {
        // Get object description length
        strSize = OBJSTRLEN( (OBJCONST CHAR OBJMEM *) pDesc );
 800a97a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a97c:	f7f5 fc42 	bl	8000204 <strlen>
 800a980:	4603      	mov	r3, r0
 800a982:	85fb      	strh	r3, [r7, #46]	; 0x2e

        // If there is a pointer given, copy data:
        if ( pData )
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d067      	beq.n	800aa5a <OBJ_GetDesc+0x11a>
        {
            OBJTOMBXSTRCPY( pData, pDesc, strSize );
 800a98a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a98c:	461a      	mov	r2, r3
 800a98e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f002 fa59 	bl	800ce48 <memcpy>
        if ( pData )
 800a996:	e060      	b.n	800aa5a <OBJ_GetDesc+0x11a>
        }
    }
    else
    {
        if ( objCode == OBJCODE_REC )
 800a998:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a99c:	2b09      	cmp	r3, #9
 800a99e:	d13c      	bne.n	800aa1a <OBJ_GetDesc+0xda>
        {
            {
            // get pointer to description of subindex 1 :
            // 16bit variable to avoid overflow if subindex 0xFF is read
            UINT16 i = 1;
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	85bb      	strh	r3, [r7, #44]	; 0x2c
            UINT16 tmpSubindex = subindex;
 800a9a4:	7b7b      	ldrb	r3, [r7, #13]
 800a9a6:	843b      	strh	r3, [r7, #32]

            {

            OBJCONST UCHAR OBJMEM * pSubDesc = (OBJCONST UCHAR OBJMEM *) OBJGETNEXTSTR( pDesc );
 800a9a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a9aa:	f7f5 fc2b 	bl	8000204 <strlen>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	3301      	adds	r3, #1
 800a9b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9b4:	4413      	add	r3, r2
 800a9b6:	62bb      	str	r3, [r7, #40]	; 0x28
            while (( i <= tmpSubindex )
 800a9b8:	e023      	b.n	800aa02 <OBJ_GetDesc+0xc2>
                &&( pSubDesc[0] != 0xFF && pSubDesc[0] != 0xFE ))
            {
                if ( i == tmpSubindex )
 800a9ba:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800a9bc:	8c3b      	ldrh	r3, [r7, #32]
 800a9be:	429a      	cmp	r2, r3
 800a9c0:	d114      	bne.n	800a9ec <OBJ_GetDesc+0xac>
                {
                    strSize = OBJSTRLEN( (OBJCONST CHAR OBJMEM *) pSubDesc );
 800a9c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9c4:	f7f5 fc1e 	bl	8000204 <strlen>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	85fb      	strh	r3, [r7, #46]	; 0x2e
                    if ( pData && strSize )
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d009      	beq.n	800a9e6 <OBJ_GetDesc+0xa6>
 800a9d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d006      	beq.n	800a9e6 <OBJ_GetDesc+0xa6>
                        OBJTOMBXSTRCPY( pData, pSubDesc, strSize );
 800a9d8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a9da:	461a      	mov	r2, r3
 800a9dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f002 fa32 	bl	800ce48 <memcpy>
/* ECATCHANGE_START(V5.11) SDO6*/
                    else
                        strSize = 0;
/* ECATCHANGE_END(V5.11) SDO6*/

                    break;
 800a9e4:	e019      	b.n	800aa1a <OBJ_GetDesc+0xda>
                        strSize = 0;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	85fb      	strh	r3, [r7, #46]	; 0x2e
                    break;
 800a9ea:	e016      	b.n	800aa1a <OBJ_GetDesc+0xda>
                }
                else
                {
                    i++;
 800a9ec:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a9ee:	3301      	adds	r3, #1
 800a9f0:	85bb      	strh	r3, [r7, #44]	; 0x2c
                    pSubDesc = (OBJCONST UCHAR OBJMEM *) OBJGETNEXTSTR( pSubDesc );
 800a9f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9f4:	f7f5 fc06 	bl	8000204 <strlen>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	3301      	adds	r3, #1
 800a9fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a9fe:	4413      	add	r3, r2
 800aa00:	62bb      	str	r3, [r7, #40]	; 0x28
            while (( i <= tmpSubindex )
 800aa02:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800aa04:	8c3b      	ldrh	r3, [r7, #32]
 800aa06:	429a      	cmp	r2, r3
 800aa08:	d807      	bhi.n	800aa1a <OBJ_GetDesc+0xda>
                &&( pSubDesc[0] != 0xFF && pSubDesc[0] != 0xFE ))
 800aa0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa0c:	781b      	ldrb	r3, [r3, #0]
 800aa0e:	2bff      	cmp	r3, #255	; 0xff
 800aa10:	d003      	beq.n	800aa1a <OBJ_GetDesc+0xda>
 800aa12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa14:	781b      	ldrb	r3, [r3, #0]
 800aa16:	2bfe      	cmp	r3, #254	; 0xfe
 800aa18:	d1cf      	bne.n	800a9ba <OBJ_GetDesc+0x7a>
            }
            }
            }
        }

        if ( strSize == 0 )
 800aa1a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d11c      	bne.n	800aa5a <OBJ_GetDesc+0x11a>
        {
            // no string found for subindex x -> name is Subindex x
            strSize =    12;
 800aa20:	230c      	movs	r3, #12
 800aa22:	85fb      	strh	r3, [r7, #46]	; 0x2e

            if ( pData )
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d017      	beq.n	800aa5a <OBJ_GetDesc+0x11a>
            {
                UCHAR OBJMEM         TmpDescr[13];
                OBJSTRCPY(TmpDescr,aSubindexDesc,SIZEOF(TmpDescr));
 800aa2a:	4b0e      	ldr	r3, [pc, #56]	; (800aa64 <OBJ_GetDesc+0x124>)
 800aa2c:	f107 0410 	add.w	r4, r7, #16
 800aa30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800aa32:	c407      	stmia	r4!, {r0, r1, r2}
 800aa34:	7023      	strb	r3, [r4, #0]
                
                OBJ_CopyNumberToString( &TmpDescr[9], subindex );
 800aa36:	7b7a      	ldrb	r2, [r7, #13]
 800aa38:	f107 0310 	add.w	r3, r7, #16
 800aa3c:	3309      	adds	r3, #9
 800aa3e:	4611      	mov	r1, r2
 800aa40:	4618      	mov	r0, r3
 800aa42:	f7ff fe69 	bl	800a718 <OBJ_CopyNumberToString>
                MBXSTRCPY( pData, TmpDescr, SIZEOF(TmpDescr) );
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	461c      	mov	r4, r3
 800aa4a:	f107 0310 	add.w	r3, r7, #16
 800aa4e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800aa50:	6020      	str	r0, [r4, #0]
 800aa52:	6061      	str	r1, [r4, #4]
 800aa54:	60a2      	str	r2, [r4, #8]
 800aa56:	781b      	ldrb	r3, [r3, #0]
 800aa58:	7323      	strb	r3, [r4, #12]
            }
        }
    }

    return strSize;
 800aa5a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	3734      	adds	r7, #52	; 0x34
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd90      	pop	{r4, r7, pc}
 800aa64:	20000360 	.word	0x20000360

0800aa68 <OBJ_GetEntryDesc>:
         to define the object dictionary independent of the sdoserv-files

*////////////////////////////////////////////////////////////////////////////////////////

OBJCONST TSDOINFOENTRYDESC OBJMEM * OBJ_GetEntryDesc(OBJCONST TOBJECT OBJMEM * pObjEntry, UINT8 Subindex)
{
 800aa68:	b480      	push	{r7}
 800aa6a:	b085      	sub	sp, #20
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
 800aa70:	460b      	mov	r3, r1
 800aa72:	70fb      	strb	r3, [r7, #3]
    OBJCONST TSDOINFOENTRYDESC OBJMEM *pEntry;
    UINT8 objCode = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_OBJCODEMASK) >> OBJFLAGS_OBJCODESHIFT;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	899b      	ldrh	r3, [r3, #12]
 800aa78:	121b      	asrs	r3, r3, #8
 800aa7a:	b2db      	uxtb	r3, r3
 800aa7c:	f003 030f 	and.w	r3, r3, #15
 800aa80:	72fb      	strb	r3, [r7, #11]

    if ((objCode == OBJCODE_ARR)
 800aa82:	7afb      	ldrb	r3, [r7, #11]
 800aa84:	2b08      	cmp	r3, #8
 800aa86:	d10b      	bne.n	800aaa0 <OBJ_GetEntryDesc+0x38>
        )
    {
        /* object is an array */
        if ( Subindex == 0 )
 800aa88:	78fb      	ldrb	r3, [r7, #3]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d103      	bne.n	800aa96 <OBJ_GetEntryDesc+0x2e>
            /* subindex 0 has a description */
            pEntry = &pObjEntry->pEntryDesc[0];
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	691b      	ldr	r3, [r3, #16]
 800aa92:	60fb      	str	r3, [r7, #12]
 800aa94:	e00d      	b.n	800aab2 <OBJ_GetEntryDesc+0x4a>
        else
            /* and all other elements have the same description */
            pEntry = &pObjEntry->pEntryDesc[1];
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	691b      	ldr	r3, [r3, #16]
 800aa9a:	3306      	adds	r3, #6
 800aa9c:	60fb      	str	r3, [r7, #12]
 800aa9e:	e008      	b.n	800aab2 <OBJ_GetEntryDesc+0x4a>
    }
    else
    {
        {
            /* object is a variable or a record return the corresponding entry */
            pEntry = &pObjEntry->pEntryDesc[Subindex];
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	6919      	ldr	r1, [r3, #16]
 800aaa4:	78fa      	ldrb	r2, [r7, #3]
 800aaa6:	4613      	mov	r3, r2
 800aaa8:	005b      	lsls	r3, r3, #1
 800aaaa:	4413      	add	r3, r2
 800aaac:	005b      	lsls	r3, r3, #1
 800aaae:	440b      	add	r3, r1
 800aab0:	60fb      	str	r3, [r7, #12]
        }
    }

    return pEntry;
 800aab2:	68fb      	ldr	r3, [r7, #12]
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	3714      	adds	r7, #20
 800aab8:	46bd      	mov	sp, r7
 800aaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabe:	4770      	bx	lr

0800aac0 <OBJ_GetObjDesc>:
         to define the object dictionary independent of the sdoserv-files

*////////////////////////////////////////////////////////////////////////////////////////

OBJCONST TSDOINFOOBJDESC OBJMEM * OBJ_GetObjDesc(OBJCONST TOBJECT OBJMEM * pObjEntry)
{
 800aac0:	b480      	push	{r7}
 800aac2:	b083      	sub	sp, #12
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
    return &pObjEntry->ObjDesc;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	330a      	adds	r3, #10
}
 800aacc:	4618      	mov	r0, r3
 800aace:	370c      	adds	r7, #12
 800aad0:	46bd      	mov	sp, r7
 800aad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad6:	4770      	bx	lr

0800aad8 <OBJ_GetEntryOffset>:

 \brief    This function calculates the bit offset of the entry in the object's variable
*////////////////////////////////////////////////////////////////////////////////////////

UINT16 OBJ_GetEntryOffset(UINT8 subindex, OBJCONST TOBJECT OBJMEM * pObjEntry)
{
 800aad8:	b480      	push	{r7}
 800aada:	b087      	sub	sp, #28
 800aadc:	af00      	add	r7, sp, #0
 800aade:	4603      	mov	r3, r0
 800aae0:	6039      	str	r1, [r7, #0]
 800aae2:	71fb      	strb	r3, [r7, #7]
    UINT16 i;
    /* bitOffset will be initialized with the bit offset of subindex 1 */
/*ECATCHANGE_START(V5.11) OBJ1*/
    UINT16 bitOffset = 0;
 800aae4:	2300      	movs	r3, #0
 800aae6:	82bb      	strh	r3, [r7, #20]
    UINT8 objCode = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_OBJCODEMASK) >> OBJFLAGS_OBJCODESHIFT;
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	899b      	ldrh	r3, [r3, #12]
 800aaec:	121b      	asrs	r3, r3, #8
 800aaee:	b2db      	uxtb	r3, r3
 800aaf0:	f003 030f 	and.w	r3, r3, #15
 800aaf4:	73fb      	strb	r3, [r7, #15]
    OBJCONST TSDOINFOENTRYDESC OBJMEM *pEntry;

    if(subindex > 0)
 800aaf6:	79fb      	ldrb	r3, [r7, #7]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d002      	beq.n	800ab02 <OBJ_GetEntryOffset+0x2a>
    {
        /*subindex 1 has an offset of 16Bit (even if Si0 is only an UINT8) */
        bitOffset +=16;
 800aafc:	8abb      	ldrh	r3, [r7, #20]
 800aafe:	3310      	adds	r3, #16
 800ab00:	82bb      	strh	r3, [r7, #20]
    }
/*ECATCHANGE_END(V5.11) OBJ1*/

    if (objCode == OBJCODE_VAR)
 800ab02:	7bfb      	ldrb	r3, [r7, #15]
 800ab04:	2b07      	cmp	r3, #7
 800ab06:	d101      	bne.n	800ab0c <OBJ_GetEntryOffset+0x34>
        return 0;
 800ab08:	2300      	movs	r3, #0
 800ab0a:	e0e0      	b.n	800acce <OBJ_GetEntryOffset+0x1f6>

    for (i = 1; i <= subindex; i++)
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	82fb      	strh	r3, [r7, #22]
 800ab10:	e0d6      	b.n	800acc0 <OBJ_GetEntryOffset+0x1e8>
    {
        /* get the entry description */
        if ((objCode == OBJCODE_ARR)
 800ab12:	7bfb      	ldrb	r3, [r7, #15]
 800ab14:	2b08      	cmp	r3, #8
 800ab16:	d104      	bne.n	800ab22 <OBJ_GetEntryOffset+0x4a>
           )
            pEntry = &pObjEntry->pEntryDesc[1];
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	691b      	ldr	r3, [r3, #16]
 800ab1c:	3306      	adds	r3, #6
 800ab1e:	613b      	str	r3, [r7, #16]
 800ab20:	e008      	b.n	800ab34 <OBJ_GetEntryOffset+0x5c>
        else
        {
            pEntry = &pObjEntry->pEntryDesc[i];
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	6919      	ldr	r1, [r3, #16]
 800ab26:	8afa      	ldrh	r2, [r7, #22]
 800ab28:	4613      	mov	r3, r2
 800ab2a:	005b      	lsls	r3, r3, #1
 800ab2c:	4413      	add	r3, r2
 800ab2e:	005b      	lsls	r3, r3, #1
 800ab30:	440b      	add	r3, r1
 800ab32:	613b      	str	r3, [r7, #16]
        }

        switch (pEntry->DataType)
 800ab34:	693b      	ldr	r3, [r7, #16]
 800ab36:	881b      	ldrh	r3, [r3, #0]
 800ab38:	f5b3 7f19 	cmp.w	r3, #612	; 0x264
 800ab3c:	f280 80ad 	bge.w	800ac9a <OBJ_GetEntryOffset+0x1c2>
 800ab40:	f240 2262 	movw	r2, #610	; 0x262
 800ab44:	4293      	cmp	r3, r2
 800ab46:	f280 8087 	bge.w	800ac58 <OBJ_GetEntryOffset+0x180>
 800ab4a:	2b2f      	cmp	r3, #47	; 0x2f
 800ab4c:	dc64      	bgt.n	800ac18 <OBJ_GetEntryOffset+0x140>
 800ab4e:	2b03      	cmp	r3, #3
 800ab50:	f2c0 80a3 	blt.w	800ac9a <OBJ_GetEntryOffset+0x1c2>
 800ab54:	3b03      	subs	r3, #3
 800ab56:	2b2c      	cmp	r3, #44	; 0x2c
 800ab58:	f200 809f 	bhi.w	800ac9a <OBJ_GetEntryOffset+0x1c2>
 800ab5c:	a201      	add	r2, pc, #4	; (adr r2, 800ab64 <OBJ_GetEntryOffset+0x8c>)
 800ab5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab62:	bf00      	nop
 800ab64:	0800ac1f 	.word	0x0800ac1f
 800ab68:	0800ac59 	.word	0x0800ac59
 800ab6c:	0800ac9b 	.word	0x0800ac9b
 800ab70:	0800ac1f 	.word	0x0800ac1f
 800ab74:	0800ac59 	.word	0x0800ac59
 800ab78:	0800ac59 	.word	0x0800ac59
 800ab7c:	0800ac9b 	.word	0x0800ac9b
 800ab80:	0800ac9b 	.word	0x0800ac9b
 800ab84:	0800ac1f 	.word	0x0800ac1f
 800ab88:	0800ac9b 	.word	0x0800ac9b
 800ab8c:	0800ac9b 	.word	0x0800ac9b
 800ab90:	0800ac9b 	.word	0x0800ac9b
 800ab94:	0800ac9b 	.word	0x0800ac9b
 800ab98:	0800ac9b 	.word	0x0800ac9b
 800ab9c:	0800ac9b 	.word	0x0800ac9b
 800aba0:	0800ac9b 	.word	0x0800ac9b
 800aba4:	0800ac9b 	.word	0x0800ac9b
 800aba8:	0800ac9b 	.word	0x0800ac9b
 800abac:	0800ac9b 	.word	0x0800ac9b
 800abb0:	0800ac9b 	.word	0x0800ac9b
 800abb4:	0800ac9b 	.word	0x0800ac9b
 800abb8:	0800ac9b 	.word	0x0800ac9b
 800abbc:	0800ac9b 	.word	0x0800ac9b
 800abc0:	0800ac9b 	.word	0x0800ac9b
 800abc4:	0800ac9b 	.word	0x0800ac9b
 800abc8:	0800ac9b 	.word	0x0800ac9b
 800abcc:	0800ac9b 	.word	0x0800ac9b
 800abd0:	0800ac9b 	.word	0x0800ac9b
 800abd4:	0800ac1f 	.word	0x0800ac1f
 800abd8:	0800ac59 	.word	0x0800ac59
 800abdc:	0800ac9b 	.word	0x0800ac9b
 800abe0:	0800ac9b 	.word	0x0800ac9b
 800abe4:	0800ac9b 	.word	0x0800ac9b
 800abe8:	0800ac9b 	.word	0x0800ac9b
 800abec:	0800ac9b 	.word	0x0800ac9b
 800abf0:	0800ac9b 	.word	0x0800ac9b
 800abf4:	0800ac9b 	.word	0x0800ac9b
 800abf8:	0800ac9b 	.word	0x0800ac9b
 800abfc:	0800ac9b 	.word	0x0800ac9b
 800ac00:	0800ac9b 	.word	0x0800ac9b
 800ac04:	0800ac9b 	.word	0x0800ac9b
 800ac08:	0800ac9b 	.word	0x0800ac9b
 800ac0c:	0800ac9b 	.word	0x0800ac9b
 800ac10:	0800ac1f 	.word	0x0800ac1f
 800ac14:	0800ac59 	.word	0x0800ac59
 800ac18:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800ac1c:	d13d      	bne.n	800ac9a <OBJ_GetEntryOffset+0x1c2>
/*ECATCHANGE_END(V5.11) SDO9*/

#if OBJ_WORD_ALIGN    || OBJ_DWORD_ALIGN
            /* the 16-bit variables in the structure are word-aligned,
               align the actual bitOffset to a word */
            bitOffset = (bitOffset+15) & 0xFFF0;
 800ac1e:	8abb      	ldrh	r3, [r7, #20]
 800ac20:	330f      	adds	r3, #15
 800ac22:	b29b      	uxth	r3, r3
 800ac24:	f023 030f 	bic.w	r3, r3, #15
 800ac28:	82bb      	strh	r3, [r7, #20]
#endif


/*ECATCHANGE_START(V5.11) SDO9*/
            if (i < subindex)
 800ac2a:	79fb      	ldrb	r3, [r7, #7]
 800ac2c:	b29b      	uxth	r3, r3
 800ac2e:	8afa      	ldrh	r2, [r7, #22]
 800ac30:	429a      	cmp	r2, r3
 800ac32:	d23d      	bcs.n	800acb0 <OBJ_GetEntryOffset+0x1d8>
            {
                if((pEntry->DataType == DEFTYPE_UNICODE_STRING)
 800ac34:	693b      	ldr	r3, [r7, #16]
 800ac36:	881b      	ldrh	r3, [r3, #0]
 800ac38:	2b0b      	cmp	r3, #11
 800ac3a:	d004      	beq.n	800ac46 <OBJ_GetEntryOffset+0x16e>
                    ||(pEntry->DataType == DEFTYPE_ARRAY_OF_INT))
 800ac3c:	693b      	ldr	r3, [r7, #16]
 800ac3e:	881b      	ldrh	r3, [r3, #0]
 800ac40:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800ac44:	d104      	bne.n	800ac50 <OBJ_GetEntryOffset+0x178>
                {
                    bitOffset += pEntry->BitLength;
 800ac46:	693b      	ldr	r3, [r7, #16]
 800ac48:	885a      	ldrh	r2, [r3, #2]
 800ac4a:	8abb      	ldrh	r3, [r7, #20]
 800ac4c:	4413      	add	r3, r2
 800ac4e:	82bb      	strh	r3, [r7, #20]
                }

                bitOffset += 16;
 800ac50:	8abb      	ldrh	r3, [r7, #20]
 800ac52:	3310      	adds	r3, #16
 800ac54:	82bb      	strh	r3, [r7, #20]
            }
/*ECATCHANGE_END(V5.11) SDO9*/
            break;
 800ac56:	e02b      	b.n	800acb0 <OBJ_GetEntryOffset+0x1d8>
        case    DEFTYPE_ARRAY_OF_UDINT:
/*ECATCHANGE_END(V5.11) SDO9*/
#if OBJ_DWORD_ALIGN
            /* the 32-bit variables in the structure are dword-aligned,
               align the actual bitOffset to a dword */
            bitOffset = (bitOffset+31) & 0xFFE0;
 800ac58:	8abb      	ldrh	r3, [r7, #20]
 800ac5a:	331f      	adds	r3, #31
 800ac5c:	b29b      	uxth	r3, r3
 800ac5e:	f023 031f 	bic.w	r3, r3, #31
 800ac62:	82bb      	strh	r3, [r7, #20]
               align the actual bitOffset to a word */
            bitOffset = (bitOffset+15) & 0xFFF0;
#endif

/*ECATCHANGE_START(V5.11) SDO9*/
            if (i < subindex)
 800ac64:	79fb      	ldrb	r3, [r7, #7]
 800ac66:	b29b      	uxth	r3, r3
 800ac68:	8afa      	ldrh	r2, [r7, #22]
 800ac6a:	429a      	cmp	r2, r3
 800ac6c:	d222      	bcs.n	800acb4 <OBJ_GetEntryOffset+0x1dc>
            {
                if((pEntry->DataType == DEFTYPE_ARRAY_OF_DINT)
 800ac6e:	693b      	ldr	r3, [r7, #16]
 800ac70:	881b      	ldrh	r3, [r3, #0]
 800ac72:	f240 2262 	movw	r2, #610	; 0x262
 800ac76:	4293      	cmp	r3, r2
 800ac78:	d005      	beq.n	800ac86 <OBJ_GetEntryOffset+0x1ae>
                    ||(pEntry->DataType == DEFTYPE_ARRAY_OF_UDINT))
 800ac7a:	693b      	ldr	r3, [r7, #16]
 800ac7c:	881b      	ldrh	r3, [r3, #0]
 800ac7e:	f240 2263 	movw	r2, #611	; 0x263
 800ac82:	4293      	cmp	r3, r2
 800ac84:	d105      	bne.n	800ac92 <OBJ_GetEntryOffset+0x1ba>
                {
                    bitOffset += pEntry->BitLength;
 800ac86:	693b      	ldr	r3, [r7, #16]
 800ac88:	885a      	ldrh	r2, [r3, #2]
 800ac8a:	8abb      	ldrh	r3, [r7, #20]
 800ac8c:	4413      	add	r3, r2
 800ac8e:	82bb      	strh	r3, [r7, #20]
                }
                else
                   bitOffset += 32;
            }
/*ECATCHANGE_END(V5.11) SDO9*/
            break;
 800ac90:	e010      	b.n	800acb4 <OBJ_GetEntryOffset+0x1dc>
                   bitOffset += 32;
 800ac92:	8abb      	ldrh	r3, [r7, #20]
 800ac94:	3320      	adds	r3, #32
 800ac96:	82bb      	strh	r3, [r7, #20]
            break;
 800ac98:	e00c      	b.n	800acb4 <OBJ_GetEntryOffset+0x1dc>
        default:
            /* align the actual bitOffset to a byte */
            if (i < subindex)
 800ac9a:	79fb      	ldrb	r3, [r7, #7]
 800ac9c:	b29b      	uxth	r3, r3
 800ac9e:	8afa      	ldrh	r2, [r7, #22]
 800aca0:	429a      	cmp	r2, r3
 800aca2:	d209      	bcs.n	800acb8 <OBJ_GetEntryOffset+0x1e0>
                bitOffset += pEntry->BitLength;
 800aca4:	693b      	ldr	r3, [r7, #16]
 800aca6:	885a      	ldrh	r2, [r3, #2]
 800aca8:	8abb      	ldrh	r3, [r7, #20]
 800acaa:	4413      	add	r3, r2
 800acac:	82bb      	strh	r3, [r7, #20]
            break;
 800acae:	e003      	b.n	800acb8 <OBJ_GetEntryOffset+0x1e0>
            break;
 800acb0:	bf00      	nop
 800acb2:	e002      	b.n	800acba <OBJ_GetEntryOffset+0x1e2>
            break;
 800acb4:	bf00      	nop
 800acb6:	e000      	b.n	800acba <OBJ_GetEntryOffset+0x1e2>
            break;
 800acb8:	bf00      	nop
    for (i = 1; i <= subindex; i++)
 800acba:	8afb      	ldrh	r3, [r7, #22]
 800acbc:	3301      	adds	r3, #1
 800acbe:	82fb      	strh	r3, [r7, #22]
 800acc0:	79fb      	ldrb	r3, [r7, #7]
 800acc2:	b29b      	uxth	r3, r3
 800acc4:	8afa      	ldrh	r2, [r7, #22]
 800acc6:	429a      	cmp	r2, r3
 800acc8:	f67f af23 	bls.w	800ab12 <OBJ_GetEntryOffset+0x3a>
        }
    }

    return bitOffset;
 800accc:	8abb      	ldrh	r3, [r7, #20]
}
 800acce:	4618      	mov	r0, r3
 800acd0:	371c      	adds	r7, #28
 800acd2:	46bd      	mov	sp, r7
 800acd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd8:	4770      	bx	lr
 800acda:	bf00      	nop

0800acdc <CheckSyncTypeValue>:
 \return    result                Result of the value validation

 \brief    Checks if the new Sync type value is valid
*////////////////////////////////////////////////////////////////////////////////////////
UINT8 CheckSyncTypeValue(UINT16 index, UINT16 NewSyncType)
{
 800acdc:	b480      	push	{r7}
 800acde:	b083      	sub	sp, #12
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	4603      	mov	r3, r0
 800ace4:	460a      	mov	r2, r1
 800ace6:	80fb      	strh	r3, [r7, #6]
 800ace8:	4613      	mov	r3, r2
 800acea:	80bb      	strh	r3, [r7, #4]
    /*ECATCHANGE_START(V5.11) ESM7*/
    switch (NewSyncType)
 800acec:	88bb      	ldrh	r3, [r7, #4]
 800acee:	2b22      	cmp	r3, #34	; 0x22
 800acf0:	f200 80be 	bhi.w	800ae70 <CheckSyncTypeValue+0x194>
 800acf4:	a201      	add	r2, pc, #4	; (adr r2, 800acfc <CheckSyncTypeValue+0x20>)
 800acf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acfa:	bf00      	nop
 800acfc:	0800ad89 	.word	0x0800ad89
 800ad00:	0800ad8d 	.word	0x0800ad8d
 800ad04:	0800adfb 	.word	0x0800adfb
 800ad08:	0800ae2f 	.word	0x0800ae2f
 800ad0c:	0800ae71 	.word	0x0800ae71
 800ad10:	0800ae71 	.word	0x0800ae71
 800ad14:	0800ae71 	.word	0x0800ae71
 800ad18:	0800ae71 	.word	0x0800ae71
 800ad1c:	0800ae71 	.word	0x0800ae71
 800ad20:	0800ae71 	.word	0x0800ae71
 800ad24:	0800ae71 	.word	0x0800ae71
 800ad28:	0800ae71 	.word	0x0800ae71
 800ad2c:	0800ae71 	.word	0x0800ae71
 800ad30:	0800ae71 	.word	0x0800ae71
 800ad34:	0800ae71 	.word	0x0800ae71
 800ad38:	0800ae71 	.word	0x0800ae71
 800ad3c:	0800ae71 	.word	0x0800ae71
 800ad40:	0800ae71 	.word	0x0800ae71
 800ad44:	0800ae71 	.word	0x0800ae71
 800ad48:	0800ae71 	.word	0x0800ae71
 800ad4c:	0800ae71 	.word	0x0800ae71
 800ad50:	0800ae71 	.word	0x0800ae71
 800ad54:	0800ae71 	.word	0x0800ae71
 800ad58:	0800ae71 	.word	0x0800ae71
 800ad5c:	0800ae71 	.word	0x0800ae71
 800ad60:	0800ae71 	.word	0x0800ae71
 800ad64:	0800ae71 	.word	0x0800ae71
 800ad68:	0800ae71 	.word	0x0800ae71
 800ad6c:	0800ae71 	.word	0x0800ae71
 800ad70:	0800ae71 	.word	0x0800ae71
 800ad74:	0800ae71 	.word	0x0800ae71
 800ad78:	0800ae71 	.word	0x0800ae71
 800ad7c:	0800ae71 	.word	0x0800ae71
 800ad80:	0800ae71 	.word	0x0800ae71
 800ad84:	0800add9 	.word	0x0800add9
    {
    case SYNCTYPE_FREERUN:
        return 0; //free run sync mode is always accepted
 800ad88:	2300      	movs	r3, #0
 800ad8a:	e072      	b.n	800ae72 <CheckSyncTypeValue+0x196>
        break;

    case SYNCTYPE_SM_SYNCHRON:
        if ((index == 0x1C32) 
 800ad8c:	88fb      	ldrh	r3, [r7, #6]
 800ad8e:	f641 4232 	movw	r2, #7218	; 0x1c32
 800ad92:	4293      	cmp	r3, r2
 800ad94:	d10b      	bne.n	800adae <CheckSyncTypeValue+0xd2>
            && (nPdOutputSize > 0) 
 800ad96:	4b3a      	ldr	r3, [pc, #232]	; (800ae80 <CheckSyncTypeValue+0x1a4>)
 800ad98:	881b      	ldrh	r3, [r3, #0]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d007      	beq.n	800adae <CheckSyncTypeValue+0xd2>
            && ((sSyncManOutPar.u16SyncTypesSupported & SYNCTYPE_SYNCHRONSUPP) > 0))
 800ad9e:	4b39      	ldr	r3, [pc, #228]	; (800ae84 <CheckSyncTypeValue+0x1a8>)
 800ada0:	899b      	ldrh	r3, [r3, #12]
 800ada2:	f003 0302 	and.w	r3, r3, #2
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	dd01      	ble.n	800adae <CheckSyncTypeValue+0xd2>
        {
            /*SyncManager sync mode is supported and output process data is configured*/
            return 0;
 800adaa:	2300      	movs	r3, #0
 800adac:	e061      	b.n	800ae72 <CheckSyncTypeValue+0x196>
        }
        else
        if ((index == 0x1C33) 
 800adae:	88fb      	ldrh	r3, [r7, #6]
 800adb0:	f641 4233 	movw	r2, #7219	; 0x1c33
 800adb4:	4293      	cmp	r3, r2
 800adb6:	d154      	bne.n	800ae62 <CheckSyncTypeValue+0x186>
            && ((sSyncManInPar.u16SyncTypesSupported & SYNCTYPE_SYNCHRONSUPP) > 0)
 800adb8:	4b33      	ldr	r3, [pc, #204]	; (800ae88 <CheckSyncTypeValue+0x1ac>)
 800adba:	899b      	ldrh	r3, [r3, #12]
 800adbc:	f003 0302 	and.w	r3, r3, #2
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	dd4e      	ble.n	800ae62 <CheckSyncTypeValue+0x186>
            && (nPdOutputSize == 0) 
 800adc4:	4b2e      	ldr	r3, [pc, #184]	; (800ae80 <CheckSyncTypeValue+0x1a4>)
 800adc6:	881b      	ldrh	r3, [r3, #0]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d14a      	bne.n	800ae62 <CheckSyncTypeValue+0x186>
            && (nPdInputSize > 0))
 800adcc:	4b2f      	ldr	r3, [pc, #188]	; (800ae8c <CheckSyncTypeValue+0x1b0>)
 800adce:	881b      	ldrh	r3, [r3, #0]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d046      	beq.n	800ae62 <CheckSyncTypeValue+0x186>
            {
                /*SyncManager sync mode is supported and input only shall be configured*/
                return 0;
 800add4:	2300      	movs	r3, #0
 800add6:	e04c      	b.n	800ae72 <CheckSyncTypeValue+0x196>
            }
        break;

    case SYNCTYPE_SM2_SYNCHRON:
        if ((index == 0x1C33) 
 800add8:	88fb      	ldrh	r3, [r7, #6]
 800adda:	f641 4233 	movw	r2, #7219	; 0x1c33
 800adde:	4293      	cmp	r3, r2
 800ade0:	d141      	bne.n	800ae66 <CheckSyncTypeValue+0x18a>
            && ((sSyncManInPar.u16SyncTypesSupported & SYNCTYPE_SYNCHRONSUPP) > 0)
 800ade2:	4b29      	ldr	r3, [pc, #164]	; (800ae88 <CheckSyncTypeValue+0x1ac>)
 800ade4:	899b      	ldrh	r3, [r3, #12]
 800ade6:	f003 0302 	and.w	r3, r3, #2
 800adea:	2b00      	cmp	r3, #0
 800adec:	dd3b      	ble.n	800ae66 <CheckSyncTypeValue+0x18a>
            && (nPdOutputSize > 0))
 800adee:	4b24      	ldr	r3, [pc, #144]	; (800ae80 <CheckSyncTypeValue+0x1a4>)
 800adf0:	881b      	ldrh	r3, [r3, #0]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d037      	beq.n	800ae66 <CheckSyncTypeValue+0x18a>
            {
                /*SyncManager sync mode is supported and outputs are defined*/
                return 0;
 800adf6:	2300      	movs	r3, #0
 800adf8:	e03b      	b.n	800ae72 <CheckSyncTypeValue+0x196>
            }
        break;

    case SYNCTYPE_DCSYNC0:
        if ((index == 0x1C32) && ((sSyncManOutPar.u16SyncTypesSupported & SYNCTYPE_DCSYNC0SUPP) > 0))
 800adfa:	88fb      	ldrh	r3, [r7, #6]
 800adfc:	f641 4232 	movw	r2, #7218	; 0x1c32
 800ae00:	4293      	cmp	r3, r2
 800ae02:	d107      	bne.n	800ae14 <CheckSyncTypeValue+0x138>
 800ae04:	4b1f      	ldr	r3, [pc, #124]	; (800ae84 <CheckSyncTypeValue+0x1a8>)
 800ae06:	899b      	ldrh	r3, [r3, #12]
 800ae08:	f003 0304 	and.w	r3, r3, #4
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	dd01      	ble.n	800ae14 <CheckSyncTypeValue+0x138>
        {
            return 0;
 800ae10:	2300      	movs	r3, #0
 800ae12:	e02e      	b.n	800ae72 <CheckSyncTypeValue+0x196>
        }
        else
        if ((index == 0x1C33) && ((sSyncManInPar.u16SyncTypesSupported & SYNCTYPE_DCSYNC0SUPP) > 0))
 800ae14:	88fb      	ldrh	r3, [r7, #6]
 800ae16:	f641 4233 	movw	r2, #7219	; 0x1c33
 800ae1a:	4293      	cmp	r3, r2
 800ae1c:	d125      	bne.n	800ae6a <CheckSyncTypeValue+0x18e>
 800ae1e:	4b1a      	ldr	r3, [pc, #104]	; (800ae88 <CheckSyncTypeValue+0x1ac>)
 800ae20:	899b      	ldrh	r3, [r3, #12]
 800ae22:	f003 0304 	and.w	r3, r3, #4
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	dd1f      	ble.n	800ae6a <CheckSyncTypeValue+0x18e>
        {
            return 0;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	e021      	b.n	800ae72 <CheckSyncTypeValue+0x196>
        }
        break;

    case SYNCTYPE_DCSYNC1:
        if ((index == 0x1C32) && ((sSyncManOutPar.u16SyncTypesSupported & SYNCTYPE_DCSYNC1SUPP) > 0))
 800ae2e:	88fb      	ldrh	r3, [r7, #6]
 800ae30:	f641 4232 	movw	r2, #7218	; 0x1c32
 800ae34:	4293      	cmp	r3, r2
 800ae36:	d107      	bne.n	800ae48 <CheckSyncTypeValue+0x16c>
 800ae38:	4b12      	ldr	r3, [pc, #72]	; (800ae84 <CheckSyncTypeValue+0x1a8>)
 800ae3a:	899b      	ldrh	r3, [r3, #12]
 800ae3c:	f003 0308 	and.w	r3, r3, #8
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	dd01      	ble.n	800ae48 <CheckSyncTypeValue+0x16c>
        {
            return 0;
 800ae44:	2300      	movs	r3, #0
 800ae46:	e014      	b.n	800ae72 <CheckSyncTypeValue+0x196>
        }
        else
        if ((index == 0x1C33) && ((sSyncManInPar.u16SyncTypesSupported & SYNCTYPE_DCSYNC1SUPP) > 0))
 800ae48:	88fb      	ldrh	r3, [r7, #6]
 800ae4a:	f641 4233 	movw	r2, #7219	; 0x1c33
 800ae4e:	4293      	cmp	r3, r2
 800ae50:	d10d      	bne.n	800ae6e <CheckSyncTypeValue+0x192>
 800ae52:	4b0d      	ldr	r3, [pc, #52]	; (800ae88 <CheckSyncTypeValue+0x1ac>)
 800ae54:	899b      	ldrh	r3, [r3, #12]
 800ae56:	f003 0308 	and.w	r3, r3, #8
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	dd07      	ble.n	800ae6e <CheckSyncTypeValue+0x192>
        {
            return 0;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	e007      	b.n	800ae72 <CheckSyncTypeValue+0x196>
        break;
 800ae62:	bf00      	nop
 800ae64:	e004      	b.n	800ae70 <CheckSyncTypeValue+0x194>
        break;
 800ae66:	bf00      	nop
 800ae68:	e002      	b.n	800ae70 <CheckSyncTypeValue+0x194>
        break;
 800ae6a:	bf00      	nop
 800ae6c:	e000      	b.n	800ae70 <CheckSyncTypeValue+0x194>
        }
        break;
 800ae6e:	bf00      	nop
    } //switch 
/*ECATCHANGE_END(V5.11) ESM7*/
    return ABORTIDX_VALUE_EXCEEDED;
 800ae70:	2312      	movs	r3, #18

}
 800ae72:	4618      	mov	r0, r3
 800ae74:	370c      	adds	r7, #12
 800ae76:	46bd      	mov	sp, r7
 800ae78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7c:	4770      	bx	lr
 800ae7e:	bf00      	nop
 800ae80:	200006ac 	.word	0x200006ac
 800ae84:	20000b08 	.word	0x20000b08
 800ae88:	20000b4c 	.word	0x20000b4c
 800ae8c:	200006aa 	.word	0x200006aa

0800ae90 <OBJ_Read>:

 \brief    This function reads the requested object
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 OBJ_Read( UINT16 index, UINT8 subindex, UINT32 objSize, OBJCONST TOBJECT OBJMEM * pObjEntry, UINT16 MBXMEM * pData, UINT8 bCompleteAccess )
{
 800ae90:	b590      	push	{r4, r7, lr}
 800ae92:	b093      	sub	sp, #76	; 0x4c
 800ae94:	af02      	add	r7, sp, #8
 800ae96:	60ba      	str	r2, [r7, #8]
 800ae98:	607b      	str	r3, [r7, #4]
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	81fb      	strh	r3, [r7, #14]
 800ae9e:	460b      	mov	r3, r1
 800aea0:	737b      	strb	r3, [r7, #13]
    UINT16 i = subindex;
 800aea2:	7b7b      	ldrb	r3, [r7, #13]
 800aea4:	87fb      	strh	r3, [r7, #62]	; 0x3e
    /* get the information of ObjCode and MaxSubindex in local variables to support different types of microcontroller */
    UINT8 objCode = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_OBJCODEMASK) >> OBJFLAGS_OBJCODESHIFT;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	899b      	ldrh	r3, [r3, #12]
 800aeaa:	121b      	asrs	r3, r3, #8
 800aeac:	b2db      	uxtb	r3, r3
 800aeae:	f003 030f 	and.w	r3, r3, #15
 800aeb2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    UINT16 maxSubindex = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_MAXSUBINDEXMASK) >> OBJFLAGS_MAXSUBINDEXSHIFT;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	899b      	ldrh	r3, [r3, #12]
 800aeba:	b2db      	uxtb	r3, r3
 800aebc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    OBJCONST TSDOINFOENTRYDESC OBJMEM *pEntry;
    /* lastSubindex is used for complete access to make loop over the requested entries
    to be read, we initialize this variable with the requested subindex that only
    one loop will be done for a single access */
    UINT16 lastSubindex = subindex;
 800aebe:	7b7b      	ldrb	r3, [r7, #13]
 800aec0:	877b      	strh	r3, [r7, #58]	; 0x3a

    if ( objCode != OBJCODE_VAR && index >= 0x1000 )
 800aec2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800aec6:	2b07      	cmp	r3, #7
 800aec8:	d008      	beq.n	800aedc <OBJ_Read+0x4c>
 800aeca:	89fb      	ldrh	r3, [r7, #14]
 800aecc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aed0:	d304      	bcc.n	800aedc <OBJ_Read+0x4c>
    {
        /* if the object is an array or record we have to get the maxSubindex from the
        actual value of subindex 0, which is stored as UINT16 at the beginning of the
        object's variable */
        maxSubindex = (*((UINT16 *) (pObjEntry->pVarPtr))) & 0x00FF;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	699b      	ldr	r3, [r3, #24]
 800aed6:	881b      	ldrh	r3, [r3, #0]
 800aed8:	b2db      	uxtb	r3, r3
 800aeda:	87bb      	strh	r3, [r7, #60]	; 0x3c

    }

    if ( bCompleteAccess )
 800aedc:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d00c      	beq.n	800aefe <OBJ_Read+0x6e>
    {
        if ( objCode == OBJCODE_VAR || index < 0x1000 )
 800aee4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800aee8:	2b07      	cmp	r3, #7
 800aeea:	d003      	beq.n	800aef4 <OBJ_Read+0x64>
 800aeec:	89fb      	ldrh	r3, [r7, #14]
 800aeee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aef2:	d201      	bcs.n	800aef8 <OBJ_Read+0x68>
        {
            /* complete access is not supported with simple objects or ENUM descriptions */
            return ABORTIDX_UNSUPPORTED_ACCESS;
 800aef4:	2305      	movs	r3, #5
 800aef6:	e31b      	b.n	800b530 <OBJ_Read+0x6a0>
        }

        /* we read until the maximum subindex */
        lastSubindex = maxSubindex;
 800aef8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800aefa:	877b      	strh	r3, [r7, #58]	; 0x3a
 800aefc:	e028      	b.n	800af50 <OBJ_Read+0xc0>
    }
    else
        if ( subindex > maxSubindex )
 800aefe:	7b7b      	ldrb	r3, [r7, #13]
 800af00:	b29b      	uxth	r3, r3
 800af02:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800af04:	429a      	cmp	r2, r3
 800af06:	d201      	bcs.n	800af0c <OBJ_Read+0x7c>
        {
            /* the maximum subindex is reached */
            return ABORTIDX_SUBINDEX_NOT_EXISTING;
 800af08:	2311      	movs	r3, #17
 800af0a:	e311      	b.n	800b530 <OBJ_Read+0x6a0>
        }
        else
        {
            /* get the corresponding entry description */
            pEntry = OBJ_GetEntryDesc(pObjEntry, (UINT8)i);
 800af0c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800af0e:	b2db      	uxtb	r3, r3
 800af10:	4619      	mov	r1, r3
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f7ff fda8 	bl	800aa68 <OBJ_GetEntryDesc>
 800af18:	6278      	str	r0, [r7, #36]	; 0x24

            /*Check access only for non-align entries*/
            if(pEntry->ObjAccess != 0x0)
 800af1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af1c:	889b      	ldrh	r3, [r3, #4]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d016      	beq.n	800af50 <OBJ_Read+0xc0>
            {
                /* check if we have read access (bits 0-2 (PREOP, SAFEOP, OP) of ObjAccess)
                by comparing with the actual state (bits 1-3 (PREOP, SAFEOP, OP) of AL Status) */
                if ( ((UINT8) ((pEntry->ObjAccess & ACCESS_READ)<<1)) < (nAlStatus & STATE_MASK) )
 800af22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af24:	889b      	ldrh	r3, [r3, #4]
 800af26:	b2db      	uxtb	r3, r3
 800af28:	005b      	lsls	r3, r3, #1
 800af2a:	b2db      	uxtb	r3, r3
 800af2c:	f003 020e 	and.w	r2, r3, #14
 800af30:	4b87      	ldr	r3, [pc, #540]	; (800b150 <OBJ_Read+0x2c0>)
 800af32:	781b      	ldrb	r3, [r3, #0]
 800af34:	f003 030f 	and.w	r3, r3, #15
 800af38:	429a      	cmp	r2, r3
 800af3a:	da09      	bge.n	800af50 <OBJ_Read+0xc0>
                {
                    /* we don't have read access */
                    if ( (pEntry->ObjAccess & ACCESS_READ) == 0 )
 800af3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af3e:	889b      	ldrh	r3, [r3, #4]
 800af40:	f003 0307 	and.w	r3, r3, #7
 800af44:	2b00      	cmp	r3, #0
 800af46:	d101      	bne.n	800af4c <OBJ_Read+0xbc>
                    {
                        /* it is a write only entry */
                        return ABORTIDX_WRITE_ONLY_ENTRY;
 800af48:	2306      	movs	r3, #6
 800af4a:	e2f1      	b.n	800b530 <OBJ_Read+0x6a0>
                    }
                    else
                    {
                        /* we don't have read access in this state */
                        return ABORTIDX_IN_THIS_STATE_DATA_CANNOT_BE_READ_OR_STORED;
 800af4c:	231a      	movs	r3, #26
 800af4e:	e2ef      	b.n	800b530 <OBJ_Read+0x6a0>
                    }
                }
            }
        }
        if ( pObjEntry->Read != NULL )
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	69db      	ldr	r3, [r3, #28]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d00b      	beq.n	800af70 <OBJ_Read+0xe0>
        {
            /* Read function is defined, we call the object specific read function */
            return pObjEntry->Read(index, subindex, objSize, pData, bCompleteAccess);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	69dc      	ldr	r4, [r3, #28]
 800af5c:	7b79      	ldrb	r1, [r7, #13]
 800af5e:	89f8      	ldrh	r0, [r7, #14]
 800af60:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800af64:	9300      	str	r3, [sp, #0]
 800af66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af68:	68ba      	ldr	r2, [r7, #8]
 800af6a:	47a0      	blx	r4
 800af6c:	4603      	mov	r3, r0
 800af6e:	e2df      	b.n	800b530 <OBJ_Read+0x6a0>
        }
        else if ( index < 0x1000 && subindex != 0 )
 800af70:	89fb      	ldrh	r3, [r7, #14]
 800af72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af76:	d27c      	bcs.n	800b072 <OBJ_Read+0x1e2>
 800af78:	7b7b      	ldrb	r3, [r7, #13]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d079      	beq.n	800b072 <OBJ_Read+0x1e2>
        {
            /* an ENUM description is read */
            UINT16 size;
            UINT16 MBXMEM *pVarPtr = (UINT16 MBXMEM *) pObjEntry->pVarPtr;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	699b      	ldr	r3, [r3, #24]
 800af82:	637b      	str	r3, [r7, #52]	; 0x34
            CHAR **p;

            /* we get the corresponding entry description */
            pEntry = OBJ_GetEntryDesc(pObjEntry, subindex);
 800af84:	7b7b      	ldrb	r3, [r7, #13]
 800af86:	4619      	mov	r1, r3
 800af88:	6878      	ldr	r0, [r7, #4]
 800af8a:	f7ff fd6d 	bl	800aa68 <OBJ_GetEntryDesc>
 800af8e:	6278      	str	r0, [r7, #36]	; 0x24
            size = BIT2BYTE(pEntry->BitLength);
 800af90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af92:	885b      	ldrh	r3, [r3, #2]
 800af94:	3307      	adds	r3, #7
 800af96:	10db      	asrs	r3, r3, #3
 800af98:	847b      	strh	r3, [r7, #34]	; 0x22

            p = (CHAR **) pVarPtr;
 800af9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af9c:	61fb      	str	r3, [r7, #28]
            pVarPtr = (UINT16 MBXMEM *)p[subindex-1];
 800af9e:	7b7b      	ldrb	r3, [r7, #13]
 800afa0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800afa4:	3b01      	subs	r3, #1
 800afa6:	009b      	lsls	r3, r3, #2
 800afa8:	69fa      	ldr	r2, [r7, #28]
 800afaa:	4413      	add	r3, r2
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	637b      	str	r3, [r7, #52]	; 0x34

            if((((UINT16)pVarPtr) & 0x1) == 0x1)
 800afb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afb2:	b29b      	uxth	r3, r3
 800afb4:	f003 0301 	and.w	r3, r3, #1
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d043      	beq.n	800b044 <OBJ_Read+0x1b4>
            {
                /*enum is stored at an odd address*/
                UINT16 cnt = 0;
 800afbc:	2300      	movs	r3, #0
 800afbe:	867b      	strh	r3, [r7, #50]	; 0x32

                //get last even WORD address
/*ECATCHANGE_START(V5.11) SDO3*/
                pVarPtr = (UINT16 MBXMEM *)(((MEM_ADDR)pVarPtr)& ~(MEM_ADDR)0x1);
 800afc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afc2:	f023 0301 	bic.w	r3, r3, #1
 800afc6:	637b      	str	r3, [r7, #52]	; 0x34
/*ECATCHANGE_END(V5.11) SDO3*/

                for(cnt = 0; cnt < (size / 2);cnt++)
 800afc8:	2300      	movs	r3, #0
 800afca:	867b      	strh	r3, [r7, #50]	; 0x32
 800afcc:	e01b      	b.n	800b006 <OBJ_Read+0x176>
                {
                    //clear destination buffer
                    pData[0] = (pVarPtr[0] & 0xFF00) >> 8;
 800afce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afd0:	881b      	ldrh	r3, [r3, #0]
 800afd2:	0a1b      	lsrs	r3, r3, #8
 800afd4:	b29a      	uxth	r2, r3
 800afd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800afd8:	801a      	strh	r2, [r3, #0]
                    pData[0] |= (pVarPtr[1] & 0xFF) << 8;
 800afda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800afdc:	881b      	ldrh	r3, [r3, #0]
 800afde:	b21a      	sxth	r2, r3
 800afe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afe2:	3302      	adds	r3, #2
 800afe4:	881b      	ldrh	r3, [r3, #0]
 800afe6:	021b      	lsls	r3, r3, #8
 800afe8:	b21b      	sxth	r3, r3
 800afea:	4313      	orrs	r3, r2
 800afec:	b21b      	sxth	r3, r3
 800afee:	b29a      	uxth	r2, r3
 800aff0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aff2:	801a      	strh	r2, [r3, #0]

                    pData++;
 800aff4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aff6:	3302      	adds	r3, #2
 800aff8:	653b      	str	r3, [r7, #80]	; 0x50
                    pVarPtr++;
 800affa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800affc:	3302      	adds	r3, #2
 800affe:	637b      	str	r3, [r7, #52]	; 0x34
                for(cnt = 0; cnt < (size / 2);cnt++)
 800b000:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b002:	3301      	adds	r3, #1
 800b004:	867b      	strh	r3, [r7, #50]	; 0x32
 800b006:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b008:	085b      	lsrs	r3, r3, #1
 800b00a:	b29b      	uxth	r3, r3
 800b00c:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800b00e:	429a      	cmp	r2, r3
 800b010:	d3dd      	bcc.n	800afce <OBJ_Read+0x13e>
                }

                if((size % 2) == 1)
 800b012:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b014:	f003 0301 	and.w	r3, r3, #1
 800b018:	b29b      	uxth	r3, r3
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	f000 8286 	beq.w	800b52c <OBJ_Read+0x69c>
                {
                    pData[0] &= 0xFF00; //Clear last Byte
 800b020:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b022:	881b      	ldrh	r3, [r3, #0]
 800b024:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b028:	b29a      	uxth	r2, r3
 800b02a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b02c:	801a      	strh	r2, [r3, #0]
                    pData[0] |= (pVarPtr[0] & 0xFF00) >> 8; //Write last byte
 800b02e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b030:	881a      	ldrh	r2, [r3, #0]
 800b032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b034:	881b      	ldrh	r3, [r3, #0]
 800b036:	0a1b      	lsrs	r3, r3, #8
 800b038:	b29b      	uxth	r3, r3
 800b03a:	4313      	orrs	r3, r2
 800b03c:	b29a      	uxth	r2, r3
 800b03e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b040:	801a      	strh	r2, [r3, #0]
        {
 800b042:	e273      	b.n	800b52c <OBJ_Read+0x69c>
                }
            }
            else
            {
            // Get enum value (first 32Bit)
            pData[0] = pVarPtr[0];
 800b044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b046:	881a      	ldrh	r2, [r3, #0]
 800b048:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b04a:	801a      	strh	r2, [r3, #0]
            pData[1] = pVarPtr[1];
 800b04c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b04e:	3302      	adds	r3, #2
 800b050:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b052:	8852      	ldrh	r2, [r2, #2]
 800b054:	801a      	strh	r2, [r3, #0]
            pData += 2;
 800b056:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b058:	3304      	adds	r3, #4
 800b05a:	653b      	str	r3, [r7, #80]	; 0x50
            pVarPtr += 2;
 800b05c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b05e:	3304      	adds	r3, #4
 800b060:	637b      	str	r3, [r7, #52]	; 0x34

            // Get enum description
            OBJTOMBXSTRCPY(pData,pVarPtr,size-4);
 800b062:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b064:	3b04      	subs	r3, #4
 800b066:	461a      	mov	r2, r3
 800b068:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b06a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800b06c:	f001 feec 	bl	800ce48 <memcpy>
        {
 800b070:	e25c      	b.n	800b52c <OBJ_Read+0x69c>
            }
        }
        else
        {
            UINT8 bRead = 0x0;
 800b072:	2300      	movs	r3, #0
 800b074:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
            UINT8 result = 0;
 800b078:	2300      	movs	r3, #0
 800b07a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30


            /* a variable object is read */
            for (i = subindex; i <= lastSubindex; i++)
 800b07e:	7b7b      	ldrb	r3, [r7, #13]
 800b080:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800b082:	e245      	b.n	800b510 <OBJ_Read+0x680>
            {
                /* if only a single entry is requested, this loop will only be done once */
                UINT16 MBXMEM *pVarPtr = (UINT16 MBXMEM *) pObjEntry->pVarPtr;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	699b      	ldr	r3, [r3, #24]
 800b088:	61bb      	str	r3, [r7, #24]
                UINT16 bitOffset = 0;
 800b08a:	2300      	movs	r3, #0
 800b08c:	85fb      	strh	r3, [r7, #46]	; 0x2e

                if (i == 0)
 800b08e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b090:	2b00      	cmp	r3, #0
 800b092:	d00b      	beq.n	800b0ac <OBJ_Read+0x21c>
                {
                    /* subindex 0 is requested, the entry's data is at the beginning of the object's variable */
                }
                else if ( index >= 0x1000 )
 800b094:	89fb      	ldrh	r3, [r7, #14]
 800b096:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b09a:	d307      	bcc.n	800b0ac <OBJ_Read+0x21c>
                {
                    /* subindex 1-n of an variable object is requested, we get the offset of the variable here */
                    bitOffset = OBJ_GetEntryOffset((UINT8)i, pObjEntry);
 800b09c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b09e:	b2db      	uxtb	r3, r3
 800b0a0:	6879      	ldr	r1, [r7, #4]
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	f7ff fd18 	bl	800aad8 <OBJ_GetEntryOffset>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	85fb      	strh	r3, [r7, #46]	; 0x2e
                }

                /* we increment the variable pointer to the corresponding word address */
                pVarPtr += (bitOffset >> 4);
 800b0ac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b0ae:	091b      	lsrs	r3, r3, #4
 800b0b0:	b29b      	uxth	r3, r3
 800b0b2:	005b      	lsls	r3, r3, #1
 800b0b4:	69ba      	ldr	r2, [r7, #24]
 800b0b6:	4413      	add	r3, r2
 800b0b8:	61bb      	str	r3, [r7, #24]

                /* get the corresponding entry description */
                pEntry = OBJ_GetEntryDesc(pObjEntry, (UINT8)i);
 800b0ba:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b0bc:	b2db      	uxtb	r3, r3
 800b0be:	4619      	mov	r1, r3
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f7ff fcd1 	bl	800aa68 <OBJ_GetEntryDesc>
 800b0c6:	6278      	str	r0, [r7, #36]	; 0x24

                if ( ((UINT8) ((pEntry->ObjAccess & ACCESS_READ)<<1)) >= (nAlStatus & STATE_MASK) )
 800b0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ca:	889b      	ldrh	r3, [r3, #4]
 800b0cc:	b2db      	uxtb	r3, r3
 800b0ce:	005b      	lsls	r3, r3, #1
 800b0d0:	b2db      	uxtb	r3, r3
 800b0d2:	f003 020e 	and.w	r2, r3, #14
 800b0d6:	4b1e      	ldr	r3, [pc, #120]	; (800b150 <OBJ_Read+0x2c0>)
 800b0d8:	781b      	ldrb	r3, [r3, #0]
 800b0da:	f003 030f 	and.w	r3, r3, #15
 800b0de:	429a      	cmp	r2, r3
 800b0e0:	f2c0 81ce 	blt.w	800b480 <OBJ_Read+0x5f0>
                {
                    if ( i == subindex                                     /* requested entry */
 800b0e4:	7b7b      	ldrb	r3, [r7, #13]
 800b0e6:	b29b      	uxth	r3, r3
 800b0e8:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800b0ea:	429a      	cmp	r2, r3
 800b0ec:	d00a      	beq.n	800b104 <OBJ_Read+0x274>
                        || (bCompleteAccess && i >= subindex) )       /* complete access and entry should be read */
 800b0ee:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	f000 8209 	beq.w	800b50a <OBJ_Read+0x67a>
 800b0f8:	7b7b      	ldrb	r3, [r7, #13]
 800b0fa:	b29b      	uxth	r3, r3
 800b0fc:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800b0fe:	429a      	cmp	r2, r3
 800b100:	f0c0 8203 	bcc.w	800b50a <OBJ_Read+0x67a>
                    {
                        UINT16 bitMask;

                        /* we have to copy the entry */
                        if ( i == 0 && objCode != OBJCODE_VAR )
 800b104:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b106:	2b00      	cmp	r3, #0
 800b108:	d10a      	bne.n	800b120 <OBJ_Read+0x290>
 800b10a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800b10e:	2b07      	cmp	r3, #7
 800b110:	d006      	beq.n	800b120 <OBJ_Read+0x290>
                        {
                            /* we read subindex 0 of an array or record */
                            {
                                pData[0] = SWAPWORD((UINT16)maxSubindex);
 800b112:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b114:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800b116:	801a      	strh	r2, [r3, #0]
                            }

                            /* we increment the destination pointer by 2 because the subindex 0 will be
                            transmitted as UINT16 for a complete access */
                            pData++;
 800b118:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b11a:	3302      	adds	r3, #2
 800b11c:	653b      	str	r3, [r7, #80]	; 0x50
 800b11e:	e1f4      	b.n	800b50a <OBJ_Read+0x67a>
                        }
                        else
                        {
                            UINT16 dataType = pEntry->DataType;
 800b120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b122:	881b      	ldrh	r3, [r3, #0]
 800b124:	85bb      	strh	r3, [r7, #44]	; 0x2c
                            if (pEntry->DataType >= 0x700)
 800b126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b128:	881b      	ldrh	r3, [r3, #0]
 800b12a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b12e:	d317      	bcc.n	800b160 <OBJ_Read+0x2d0>
                            {
                                /* the ENUM data types are defined from index 0x700 in this example
                                convert in standard data type for the read access */
                                if ( pEntry->BitLength <= 8 )
 800b130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b132:	885b      	ldrh	r3, [r3, #2]
 800b134:	2b08      	cmp	r3, #8
 800b136:	d804      	bhi.n	800b142 <OBJ_Read+0x2b2>
                                    dataType = DEFTYPE_BIT1-1+pEntry->BitLength;
 800b138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b13a:	885b      	ldrh	r3, [r3, #2]
 800b13c:	332f      	adds	r3, #47	; 0x2f
 800b13e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800b140:	e00e      	b.n	800b160 <OBJ_Read+0x2d0>
                                else if ( pEntry->BitLength == 16 )
 800b142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b144:	885b      	ldrh	r3, [r3, #2]
 800b146:	2b10      	cmp	r3, #16
 800b148:	d104      	bne.n	800b154 <OBJ_Read+0x2c4>
                                    dataType = DEFTYPE_UNSIGNED16;
 800b14a:	2306      	movs	r3, #6
 800b14c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800b14e:	e007      	b.n	800b160 <OBJ_Read+0x2d0>
 800b150:	200006b2 	.word	0x200006b2
                                else if ( pEntry->BitLength == 32 )
 800b154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b156:	885b      	ldrh	r3, [r3, #2]
 800b158:	2b20      	cmp	r3, #32
 800b15a:	d101      	bne.n	800b160 <OBJ_Read+0x2d0>
                                    dataType = DEFTYPE_UNSIGNED32;
 800b15c:	2307      	movs	r3, #7
 800b15e:	85bb      	strh	r3, [r7, #44]	; 0x2c
                            }

                            switch (dataType)
 800b160:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b162:	2b37      	cmp	r3, #55	; 0x37
 800b164:	dc78      	bgt.n	800b258 <OBJ_Read+0x3c8>
 800b166:	2b00      	cmp	r3, #0
 800b168:	f2c0 817f 	blt.w	800b46a <OBJ_Read+0x5da>
 800b16c:	2b37      	cmp	r3, #55	; 0x37
 800b16e:	f200 817c 	bhi.w	800b46a <OBJ_Read+0x5da>
 800b172:	a201      	add	r2, pc, #4	; (adr r2, 800b178 <OBJ_Read+0x2e8>)
 800b174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b178:	0800b265 	.word	0x0800b265
 800b17c:	0800b2a9 	.word	0x0800b2a9
 800b180:	0800b2a9 	.word	0x0800b2a9
 800b184:	0800b34d 	.word	0x0800b34d
 800b188:	0800b36b 	.word	0x0800b36b
 800b18c:	0800b2a9 	.word	0x0800b2a9
 800b190:	0800b34d 	.word	0x0800b34d
 800b194:	0800b36b 	.word	0x0800b36b
 800b198:	0800b36b 	.word	0x0800b36b
 800b19c:	0800b41d 	.word	0x0800b41d
 800b1a0:	0800b3cf 	.word	0x0800b3cf
 800b1a4:	0800b3cf 	.word	0x0800b3cf
 800b1a8:	0800b46b 	.word	0x0800b46b
 800b1ac:	0800b46b 	.word	0x0800b46b
 800b1b0:	0800b46b 	.word	0x0800b46b
 800b1b4:	0800b46b 	.word	0x0800b46b
 800b1b8:	0800b46b 	.word	0x0800b46b
 800b1bc:	0800b393 	.word	0x0800b393
 800b1c0:	0800b46b 	.word	0x0800b46b
 800b1c4:	0800b46b 	.word	0x0800b46b
 800b1c8:	0800b46b 	.word	0x0800b46b
 800b1cc:	0800b393 	.word	0x0800b393
 800b1d0:	0800b46b 	.word	0x0800b46b
 800b1d4:	0800b46b 	.word	0x0800b46b
 800b1d8:	0800b46b 	.word	0x0800b46b
 800b1dc:	0800b46b 	.word	0x0800b46b
 800b1e0:	0800b46b 	.word	0x0800b46b
 800b1e4:	0800b393 	.word	0x0800b393
 800b1e8:	0800b46b 	.word	0x0800b46b
 800b1ec:	0800b46b 	.word	0x0800b46b
 800b1f0:	0800b2a9 	.word	0x0800b2a9
 800b1f4:	0800b34d 	.word	0x0800b34d
 800b1f8:	0800b36b 	.word	0x0800b36b
 800b1fc:	0800b46b 	.word	0x0800b46b
 800b200:	0800b46b 	.word	0x0800b46b
 800b204:	0800b46b 	.word	0x0800b46b
 800b208:	0800b46b 	.word	0x0800b46b
 800b20c:	0800b46b 	.word	0x0800b46b
 800b210:	0800b46b 	.word	0x0800b46b
 800b214:	0800b46b 	.word	0x0800b46b
 800b218:	0800b46b 	.word	0x0800b46b
 800b21c:	0800b46b 	.word	0x0800b46b
 800b220:	0800b46b 	.word	0x0800b46b
 800b224:	0800b46b 	.word	0x0800b46b
 800b228:	0800b46b 	.word	0x0800b46b
 800b22c:	0800b2a9 	.word	0x0800b2a9
 800b230:	0800b34d 	.word	0x0800b34d
 800b234:	0800b36b 	.word	0x0800b36b
 800b238:	0800b2a9 	.word	0x0800b2a9
 800b23c:	0800b2a9 	.word	0x0800b2a9
 800b240:	0800b2a9 	.word	0x0800b2a9
 800b244:	0800b2a9 	.word	0x0800b2a9
 800b248:	0800b2a9 	.word	0x0800b2a9
 800b24c:	0800b2a9 	.word	0x0800b2a9
 800b250:	0800b2a9 	.word	0x0800b2a9
 800b254:	0800b2a9 	.word	0x0800b2a9
 800b258:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800b25c:	2b03      	cmp	r3, #3
 800b25e:	f200 8104 	bhi.w	800b46a <OBJ_Read+0x5da>
 800b262:	e0b4      	b.n	800b3ce <OBJ_Read+0x53e>
                            {
                            case DEFTYPE_NULL:
                                if(bCompleteAccess)
 800b264:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d01b      	beq.n	800b2a4 <OBJ_Read+0x414>
                                {
                                    /*Handle alignment entry*/
                                    if (((pEntry->BitLength & 0xF) > 0)
 800b26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b26e:	885b      	ldrh	r3, [r3, #2]
 800b270:	f003 030f 	and.w	r3, r3, #15
 800b274:	2b00      	cmp	r3, #0
 800b276:	dd0b      	ble.n	800b290 <OBJ_Read+0x400>
                                        && (((bitOffset + pEntry->BitLength) & 0x0F) == 0 ))
 800b278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b27a:	885a      	ldrh	r2, [r3, #2]
 800b27c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b27e:	4413      	add	r3, r2
 800b280:	b29b      	uxth	r3, r3
 800b282:	f003 030f 	and.w	r3, r3, #15
 800b286:	2b00      	cmp	r3, #0
 800b288:	d102      	bne.n	800b290 <OBJ_Read+0x400>
                                    {
                                        /* we have reached the UINT16 border */
                                        pData++;
 800b28a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b28c:	3302      	adds	r3, #2
 800b28e:	653b      	str	r3, [r7, #80]	; 0x50
                                    }

                                    /*increment WORD offset*/
                                    pData += ((pEntry->BitLength & 0xF0) >> 4);
 800b290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b292:	885b      	ldrh	r3, [r3, #2]
 800b294:	111b      	asrs	r3, r3, #4
 800b296:	f003 030f 	and.w	r3, r3, #15
 800b29a:	005b      	lsls	r3, r3, #1
 800b29c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b29e:	4413      	add	r3, r2
 800b2a0:	653b      	str	r3, [r7, #80]	; 0x50
                                }
                                else
                                {
                                    return ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
                                }
                                break;
 800b2a2:	e0e9      	b.n	800b478 <OBJ_Read+0x5e8>
                                    return ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
 800b2a4:	2318      	movs	r3, #24
 800b2a6:	e143      	b.n	800b530 <OBJ_Read+0x6a0>
/*ECATCHANGE_START(V5.11) SDO9*/
                            case    DEFTYPE_BYTE :
/*ECATCHANGE_END(V5.11) SDO9*/
                                {
                                    /* depending on the bitOffset we have to copy the Hi or the Lo-Byte */
                                    UINT16 TmpValue = 0x0000;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	82fb      	strh	r3, [r7, #22]

                                    bitMask = cBitMask[pEntry->BitLength] << (bitOffset & 0x0F);
 800b2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ae:	885b      	ldrh	r3, [r3, #2]
 800b2b0:	461a      	mov	r2, r3
 800b2b2:	4b9d      	ldr	r3, [pc, #628]	; (800b528 <OBJ_Read+0x698>)
 800b2b4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800b2b8:	461a      	mov	r2, r3
 800b2ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b2bc:	f003 030f 	and.w	r3, r3, #15
 800b2c0:	fa02 f303 	lsl.w	r3, r2, r3
 800b2c4:	82bb      	strh	r3, [r7, #20]

                                    /*Swap object data (if required); all masks and offsets are defined for little endian format*/
                                    TmpValue = SWAPWORD(pVarPtr[0]);
 800b2c6:	69bb      	ldr	r3, [r7, #24]
 800b2c8:	881b      	ldrh	r3, [r3, #0]
 800b2ca:	82fb      	strh	r3, [r7, #22]

                                    /*Clear pData if the first bits within the WORD memory will be copied*/
                                    if ((bitOffset & 0x0F) == 0) 
 800b2cc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b2ce:	f003 030f 	and.w	r3, r3, #15
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d102      	bne.n	800b2dc <OBJ_Read+0x44c>
                                    {
                                        pData[0] = 0;
 800b2d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2d8:	2200      	movs	r2, #0
 800b2da:	801a      	strh	r2, [r3, #0]
                                    }

/* ECATCHANGE_START(V5.11) SDO7*/
                                    pData[0] = SWAPWORD(pData[0]);
 800b2dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2de:	881a      	ldrh	r2, [r3, #0]
 800b2e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2e2:	801a      	strh	r2, [r3, #0]

                                    if (bCompleteAccess) 
 800b2e4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d00a      	beq.n	800b302 <OBJ_Read+0x472>
                                    {
                                        /*shifting is not required for Complete access because the bits are set to the correct offset by the master*/
                                        pData[0] |= TmpValue & bitMask;
 800b2ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2ee:	881a      	ldrh	r2, [r3, #0]
 800b2f0:	8af9      	ldrh	r1, [r7, #22]
 800b2f2:	8abb      	ldrh	r3, [r7, #20]
 800b2f4:	400b      	ands	r3, r1
 800b2f6:	b29b      	uxth	r3, r3
 800b2f8:	4313      	orrs	r3, r2
 800b2fa:	b29a      	uxth	r2, r3
 800b2fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2fe:	801a      	strh	r2, [r3, #0]
 800b300:	e012      	b.n	800b328 <OBJ_Read+0x498>
                                    }
                                    else
                                    {
                                        /*Shift Bits to the beginning of the mailbox memory*/
                                        pData[0] |= ((TmpValue & bitMask) >> (bitOffset & 0x0F));
 800b302:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b304:	881b      	ldrh	r3, [r3, #0]
 800b306:	b21a      	sxth	r2, r3
 800b308:	8af9      	ldrh	r1, [r7, #22]
 800b30a:	8abb      	ldrh	r3, [r7, #20]
 800b30c:	400b      	ands	r3, r1
 800b30e:	b29b      	uxth	r3, r3
 800b310:	4619      	mov	r1, r3
 800b312:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b314:	f003 030f 	and.w	r3, r3, #15
 800b318:	fa41 f303 	asr.w	r3, r1, r3
 800b31c:	b21b      	sxth	r3, r3
 800b31e:	4313      	orrs	r3, r2
 800b320:	b21b      	sxth	r3, r3
 800b322:	b29a      	uxth	r2, r3
 800b324:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b326:	801a      	strh	r2, [r3, #0]
                                    }

                                    pData[0] = SWAPWORD(pData[0]);
 800b328:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b32a:	881a      	ldrh	r2, [r3, #0]
 800b32c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b32e:	801a      	strh	r2, [r3, #0]
/* ECATCHANGE_END(V5.11) SDO7*/
                                    if ( ((bitOffset + pEntry->BitLength) & 0x0F) == 0 )
 800b330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b332:	885a      	ldrh	r2, [r3, #2]
 800b334:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b336:	4413      	add	r3, r2
 800b338:	b29b      	uxth	r3, r3
 800b33a:	f003 030f 	and.w	r3, r3, #15
 800b33e:	2b00      	cmp	r3, #0
 800b340:	f040 8095 	bne.w	800b46e <OBJ_Read+0x5de>
                                    {
                                        /* we have reached the UINT16 border */
                                        pData++;
 800b344:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b346:	3302      	adds	r3, #2
 800b348:	653b      	str	r3, [r7, #80]	; 0x50
                                    }

                                }
                                break;
 800b34a:	e090      	b.n	800b46e <OBJ_Read+0x5de>
                            case    DEFTYPE_BITARR16:
/*ECATCHANGE_START(V5.11) SDO9*/
                            case    DEFTYPE_WORD:
/*ECATCHANGE_END(V5.11) SDO9*/
/*ECATCHANGE_START(V5.11) SDO1*/
                                if(bitOffset & 0xF)
 800b34c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b34e:	f003 030f 	and.w	r3, r3, #15
 800b352:	2b00      	cmp	r3, #0
 800b354:	d001      	beq.n	800b35a <OBJ_Read+0x4ca>
                                {
                                    /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                    return ABORTIDX_UNSUPPORTED_ACCESS;
 800b356:	2305      	movs	r3, #5
 800b358:	e0ea      	b.n	800b530 <OBJ_Read+0x6a0>
                                }
/*ECATCHANGE_END(V5.11) SDO1*/
                                /* in this example the objects are defined in that way,
                                that the 16 bit type are always starting at an exact WORD offset */
                                pData[0] = SWAPWORD(pVarPtr[0]);
 800b35a:	69bb      	ldr	r3, [r7, #24]
 800b35c:	881a      	ldrh	r2, [r3, #0]
 800b35e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b360:	801a      	strh	r2, [r3, #0]
                                pData++;
 800b362:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b364:	3302      	adds	r3, #2
 800b366:	653b      	str	r3, [r7, #80]	; 0x50
                                break;
 800b368:	e086      	b.n	800b478 <OBJ_Read+0x5e8>
                            case    DEFTYPE_BITARR32:
/*ECATCHANGE_START(V5.11) SDO9*/
                            case    DEFTYPE_DWORD:
/*ECATCHANGE_END(V5.11) SDO9*/
/*ECATCHANGE_START(V5.11) SDO1*/
                                if(bitOffset & 0xF)
 800b36a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b36c:	f003 030f 	and.w	r3, r3, #15
 800b370:	2b00      	cmp	r3, #0
 800b372:	d001      	beq.n	800b378 <OBJ_Read+0x4e8>
                                {
                                    /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                    return ABORTIDX_UNSUPPORTED_ACCESS;
 800b374:	2305      	movs	r3, #5
 800b376:	e0db      	b.n	800b530 <OBJ_Read+0x6a0>
                                }
/*ECATCHANGE_END(V5.11) SDO1*/

                                /* in this example the objects are defined in that way,
                                that the 32 bit type are always starting at an exact WORD offset */
                                pData[0] = pVarPtr[0];
 800b378:	69bb      	ldr	r3, [r7, #24]
 800b37a:	881a      	ldrh	r2, [r3, #0]
 800b37c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b37e:	801a      	strh	r2, [r3, #0]
                                pData[1] = pVarPtr[1];
 800b380:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b382:	3302      	adds	r3, #2
 800b384:	69ba      	ldr	r2, [r7, #24]
 800b386:	8852      	ldrh	r2, [r2, #2]
 800b388:	801a      	strh	r2, [r3, #0]
                                pData += 2;
 800b38a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b38c:	3304      	adds	r3, #4
 800b38e:	653b      	str	r3, [r7, #80]	; 0x50
                                break;
 800b390:	e072      	b.n	800b478 <OBJ_Read+0x5e8>
                            case    DEFTYPE_REAL64:
                            case 	DEFTYPE_INTEGER64:
                            case    DEFTYPE_UNSIGNED64:
/*ECATCHANGE_START(V5.11) SDO1*/
                                if(bitOffset & 0xF)
 800b392:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b394:	f003 030f 	and.w	r3, r3, #15
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d001      	beq.n	800b3a0 <OBJ_Read+0x510>
                                {
                                    /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                    return ABORTIDX_UNSUPPORTED_ACCESS;
 800b39c:	2305      	movs	r3, #5
 800b39e:	e0c7      	b.n	800b530 <OBJ_Read+0x6a0>
                                }
/*ECATCHANGE_END(V5.11) SDO1*/

                                /* in this example the objects are defined in that way,
                                that the 64 bit type are always starting at an exact WORD offset */
                                pData[0] = pVarPtr[0];
 800b3a0:	69bb      	ldr	r3, [r7, #24]
 800b3a2:	881a      	ldrh	r2, [r3, #0]
 800b3a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3a6:	801a      	strh	r2, [r3, #0]
                                pData[1] = pVarPtr[1];
 800b3a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3aa:	3302      	adds	r3, #2
 800b3ac:	69ba      	ldr	r2, [r7, #24]
 800b3ae:	8852      	ldrh	r2, [r2, #2]
 800b3b0:	801a      	strh	r2, [r3, #0]
                                pData[2] = pVarPtr[2];
 800b3b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3b4:	3304      	adds	r3, #4
 800b3b6:	69ba      	ldr	r2, [r7, #24]
 800b3b8:	8892      	ldrh	r2, [r2, #4]
 800b3ba:	801a      	strh	r2, [r3, #0]
                                pData[3] = pVarPtr[3];
 800b3bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3be:	3306      	adds	r3, #6
 800b3c0:	69ba      	ldr	r2, [r7, #24]
 800b3c2:	88d2      	ldrh	r2, [r2, #6]
 800b3c4:	801a      	strh	r2, [r3, #0]
                                pData += 4;
 800b3c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3c8:	3308      	adds	r3, #8
 800b3ca:	653b      	str	r3, [r7, #80]	; 0x50
                                break;
 800b3cc:	e054      	b.n	800b478 <OBJ_Read+0x5e8>
                            case DEFTYPE_ARRAY_OF_SINT :
                            case DEFTYPE_ARRAY_OF_DINT :
                            case DEFTYPE_ARRAY_OF_UDINT:
/*ECATCHANGE_END(V5.11) SDO9*/
/*ECATCHANGE_START(V5.11) SDO1*/
                                if(bitOffset & 0xF)
 800b3ce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b3d0:	f003 030f 	and.w	r3, r3, #15
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d001      	beq.n	800b3dc <OBJ_Read+0x54c>
                                {
                                    /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                    return ABORTIDX_UNSUPPORTED_ACCESS;
 800b3d8:	2305      	movs	r3, #5
 800b3da:	e0a9      	b.n	800b530 <OBJ_Read+0x6a0>
                                }
/*ECATCHANGE_END(V5.11) SDO1*/

                                OBJTOMBXMEMCPY(pData, pVarPtr, BIT2BYTE(pEntry->BitLength));
 800b3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3de:	885b      	ldrh	r3, [r3, #2]
 800b3e0:	3307      	adds	r3, #7
 800b3e2:	10db      	asrs	r3, r3, #3
 800b3e4:	461a      	mov	r2, r3
 800b3e6:	69b9      	ldr	r1, [r7, #24]
 800b3e8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800b3ea:	f001 fd2d 	bl	800ce48 <memcpy>

/*ECATCHANGE_START(V5.11) SDO2*/
                                pData += BIT2WORD((pEntry->BitLength & ~0xF));
 800b3ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3f0:	885b      	ldrh	r3, [r3, #2]
 800b3f2:	f023 030f 	bic.w	r3, r3, #15
 800b3f6:	330f      	adds	r3, #15
 800b3f8:	111b      	asrs	r3, r3, #4
 800b3fa:	005b      	lsls	r3, r3, #1
 800b3fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b3fe:	4413      	add	r3, r2
 800b400:	653b      	str	r3, [r7, #80]	; 0x50
                                
                                if((pEntry->BitLength & 0xF) != 0)
 800b402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b404:	885b      	ldrh	r3, [r3, #2]
 800b406:	f003 030f 	and.w	r3, r3, #15
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d031      	beq.n	800b472 <OBJ_Read+0x5e2>
                                {
                                    /*current entry has an odd word length => clear last byte of next word*/
                                    *pData &= 0xFF;
 800b40e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b410:	881b      	ldrh	r3, [r3, #0]
 800b412:	b2db      	uxtb	r3, r3
 800b414:	b29a      	uxth	r2, r3
 800b416:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b418:	801a      	strh	r2, [r3, #0]
                                }
/*ECATCHANGE_END(V5.11) SDO2*/

                                break;
 800b41a:	e02a      	b.n	800b472 <OBJ_Read+0x5e2>
                            case    DEFTYPE_VISIBLESTRING:
/*ECATCHANGE_START(V5.11) SDO1*/
                                if(bitOffset & 0xF)
 800b41c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b41e:	f003 030f 	and.w	r3, r3, #15
 800b422:	2b00      	cmp	r3, #0
 800b424:	d001      	beq.n	800b42a <OBJ_Read+0x59a>
                                {
                                    /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                    return ABORTIDX_UNSUPPORTED_ACCESS;
 800b426:	2305      	movs	r3, #5
 800b428:	e082      	b.n	800b530 <OBJ_Read+0x6a0>
                                }
/*ECATCHANGE_END(V5.11) SDO1*/

                                /* in this example the objects are defined in that way,
                                that these types are always starting at an even WORD offset */
                                OBJTOMBXSTRCPY(pData, pVarPtr, BIT2BYTE(pEntry->BitLength));
 800b42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b42c:	885b      	ldrh	r3, [r3, #2]
 800b42e:	3307      	adds	r3, #7
 800b430:	10db      	asrs	r3, r3, #3
 800b432:	461a      	mov	r2, r3
 800b434:	69b9      	ldr	r1, [r7, #24]
 800b436:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800b438:	f001 fd06 	bl	800ce48 <memcpy>
/*ECATCHANGE_START(V5.11) SDO2*/
                                pData += BIT2WORD((pEntry->BitLength & ~0xF));
 800b43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b43e:	885b      	ldrh	r3, [r3, #2]
 800b440:	f023 030f 	bic.w	r3, r3, #15
 800b444:	330f      	adds	r3, #15
 800b446:	111b      	asrs	r3, r3, #4
 800b448:	005b      	lsls	r3, r3, #1
 800b44a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b44c:	4413      	add	r3, r2
 800b44e:	653b      	str	r3, [r7, #80]	; 0x50

                                if((pEntry->BitLength & 0xF) != 0)
 800b450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b452:	885b      	ldrh	r3, [r3, #2]
 800b454:	f003 030f 	and.w	r3, r3, #15
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d00c      	beq.n	800b476 <OBJ_Read+0x5e6>
                                {
                                    /*current entry has an odd word length => clear last byte of next word*/
                                    *pData &= 0xFF;
 800b45c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b45e:	881b      	ldrh	r3, [r3, #0]
 800b460:	b2db      	uxtb	r3, r3
 800b462:	b29a      	uxth	r2, r3
 800b464:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b466:	801a      	strh	r2, [r3, #0]
                                }
/*ECATCHANGE_END(V5.11) SDO2*/
                                
                                break;
 800b468:	e005      	b.n	800b476 <OBJ_Read+0x5e6>
                            default:
                                /* other data types are not supported from this example */
                                return ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
 800b46a:	2318      	movs	r3, #24
 800b46c:	e060      	b.n	800b530 <OBJ_Read+0x6a0>
                                break;
 800b46e:	bf00      	nop
 800b470:	e002      	b.n	800b478 <OBJ_Read+0x5e8>
                                break;
 800b472:	bf00      	nop
 800b474:	e000      	b.n	800b478 <OBJ_Read+0x5e8>
                                break;
 800b476:	bf00      	nop
                            } //switch (deftype)

                            bRead = 1;
 800b478:	2301      	movs	r3, #1
 800b47a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 800b47e:	e044      	b.n	800b50a <OBJ_Read+0x67a>
                    }
                }
                else
                {
                    /*No access to current object entry => shift pData if required*/
                    UINT8 cnt = 0;
 800b480:	2300      	movs	r3, #0
 800b482:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

                    /*If this entry is the first in the 16Bit block clear the memory*/
                    if ((bitOffset & 0x0F) == 0) 
 800b486:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b488:	f003 030f 	and.w	r3, r3, #15
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d102      	bne.n	800b496 <OBJ_Read+0x606>
                    {
                        *pData = 0;
 800b490:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b492:	2200      	movs	r2, #0
 800b494:	801a      	strh	r2, [r3, #0]
                    }

                    /*Handle Bit/Byte Offset*/
                    if (((pEntry->BitLength & 0xF) > 0)
 800b496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b498:	885b      	ldrh	r3, [r3, #2]
 800b49a:	f003 030f 	and.w	r3, r3, #15
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	dd0e      	ble.n	800b4c0 <OBJ_Read+0x630>
                        && (((bitOffset + pEntry->BitLength) & 0x0F) == 0 ))
 800b4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4a4:	885a      	ldrh	r2, [r3, #2]
 800b4a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b4a8:	4413      	add	r3, r2
 800b4aa:	b29b      	uxth	r3, r3
 800b4ac:	f003 030f 	and.w	r3, r3, #15
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d105      	bne.n	800b4c0 <OBJ_Read+0x630>
                    {
                        /* we have reached the UINT16 border */
                        pData++;
 800b4b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4b6:	3302      	adds	r3, #2
 800b4b8:	653b      	str	r3, [r7, #80]	; 0x50
                        
                        /*Clear new buffer*/
                        *pData = 0;
 800b4ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4bc:	2200      	movs	r2, #0
 800b4be:	801a      	strh	r2, [r3, #0]
                    }

                    /*increment WORD offset*/
                    for(cnt = 0; cnt <((pEntry->BitLength & 0xF0) >> 4); cnt++)
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4c6:	e00a      	b.n	800b4de <OBJ_Read+0x64e>
                    {
                        /*current 16Bit are skipped => clear current buffer */
                        pData++;
 800b4c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4ca:	3302      	adds	r3, #2
 800b4cc:	653b      	str	r3, [r7, #80]	; 0x50

                        /*Clear new buffer*/
                        *pData = 0;
 800b4ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	801a      	strh	r2, [r3, #0]
                    for(cnt = 0; cnt <((pEntry->BitLength & 0xF0) >> 4); cnt++)
 800b4d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b4d8:	3301      	adds	r3, #1
 800b4da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4de:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800b4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4e4:	885b      	ldrh	r3, [r3, #2]
 800b4e6:	111b      	asrs	r3, r3, #4
 800b4e8:	f003 030f 	and.w	r3, r3, #15
 800b4ec:	429a      	cmp	r2, r3
 800b4ee:	dbeb      	blt.n	800b4c8 <OBJ_Read+0x638>


                    

                    /* we don't have read access */
                    if ( (pEntry->ObjAccess & ACCESS_READ) == 0 )
 800b4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4f2:	889b      	ldrh	r3, [r3, #4]
 800b4f4:	f003 0307 	and.w	r3, r3, #7
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d103      	bne.n	800b504 <OBJ_Read+0x674>
                    {
                        /* it is a write only entry */
                        result = ABORTIDX_WRITE_ONLY_ENTRY;
 800b4fc:	2306      	movs	r3, #6
 800b4fe:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 800b502:	e002      	b.n	800b50a <OBJ_Read+0x67a>
                    }
                    else
                    {
                        /* we don't have read access in this state */
                        result = ABORTIDX_IN_THIS_STATE_DATA_CANNOT_BE_READ_OR_STORED;
 800b504:	231a      	movs	r3, #26
 800b506:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
            for (i = subindex; i <= lastSubindex; i++)
 800b50a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b50c:	3301      	adds	r3, #1
 800b50e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800b510:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800b512:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b514:	429a      	cmp	r2, r3
 800b516:	f67f adb5 	bls.w	800b084 <OBJ_Read+0x1f4>
                    }
                }
            }

            if(bRead == 0)
 800b51a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d105      	bne.n	800b52e <OBJ_Read+0x69e>
                return result;
 800b522:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800b526:	e003      	b.n	800b530 <OBJ_Read+0x6a0>
 800b528:	0800db5c 	.word	0x0800db5c
        {
 800b52c:	bf00      	nop
        }

    return 0;
 800b52e:	2300      	movs	r3, #0
}
 800b530:	4618      	mov	r0, r3
 800b532:	3744      	adds	r7, #68	; 0x44
 800b534:	46bd      	mov	sp, r7
 800b536:	bd90      	pop	{r4, r7, pc}

0800b538 <OBJ_Write>:

 \brief    This function writes the requested object
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 OBJ_Write( UINT16 index, UINT8 subindex, UINT32 dataSize, OBJCONST TOBJECT OBJMEM * pObjEntry, UINT16 MBXMEM * pData, UINT8 bCompleteAccess )
{
 800b538:	b590      	push	{r4, r7, lr}
 800b53a:	b091      	sub	sp, #68	; 0x44
 800b53c:	af02      	add	r7, sp, #8
 800b53e:	60ba      	str	r2, [r7, #8]
 800b540:	607b      	str	r3, [r7, #4]
 800b542:	4603      	mov	r3, r0
 800b544:	81fb      	strh	r3, [r7, #14]
 800b546:	460b      	mov	r3, r1
 800b548:	737b      	strb	r3, [r7, #13]
    UINT16 i = subindex;
 800b54a:	7b7b      	ldrb	r3, [r7, #13]
 800b54c:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* get the information of ObjCode and MaxSubindex in local variables to support different types of microcontroller */
    UINT8 objCode = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_OBJCODEMASK) >> OBJFLAGS_OBJCODESHIFT;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	899b      	ldrh	r3, [r3, #12]
 800b552:	121b      	asrs	r3, r3, #8
 800b554:	b2db      	uxtb	r3, r3
 800b556:	f003 030f 	and.w	r3, r3, #15
 800b55a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    UINT16 maxSubindex = 0;
 800b55e:	2300      	movs	r3, #0
 800b560:	86bb      	strh	r3, [r7, #52]	; 0x34
    UINT16 maxConfiguredSubindex = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_MAXSUBINDEXMASK) >> OBJFLAGS_MAXSUBINDEXSHIFT; //required to check if value for Subindex0 is valid
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	899b      	ldrh	r3, [r3, #12]
 800b566:	b2db      	uxtb	r3, r3
 800b568:	843b      	strh	r3, [r7, #32]
    OBJCONST TSDOINFOENTRYDESC OBJMEM *pEntry;
    BOOL bClearSubindex0Required = FALSE;
 800b56a:	2300      	movs	r3, #0
 800b56c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    /* lastSubindex is used for complete access to make loop over the requested entries
       to be read, we initialize this variable with the requested subindex that only
       one loop will be done for a single access */
    UINT16 lastSubindex = subindex;
 800b570:	7b7b      	ldrb	r3, [r7, #13]
 800b572:	863b      	strh	r3, [r7, #48]	; 0x30

    /* if subindex 0 is writable, the maximum subindex should be checked in an object specific function,
        because for the PDO mapping and PDO assign the object shall only be written if subindex 0 is 0. */
    if ( objCode != OBJCODE_VAR )
 800b574:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b578:	2b07      	cmp	r3, #7
 800b57a:	d023      	beq.n	800b5c4 <OBJ_Write+0x8c>
    {
        /* if the object is an array or record we have to get the maxSubindex from the
           actual value of subindex 0, which is stored as UINT16 at the beginning of the
            object's variable */
        maxSubindex = (UINT8) ((UINT16 MBXMEM *) (pObjEntry->pVarPtr))[0];
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	699b      	ldr	r3, [r3, #24]
 800b580:	881b      	ldrh	r3, [r3, #0]
 800b582:	b2db      	uxtb	r3, r3
 800b584:	86bb      	strh	r3, [r7, #52]	; 0x34

        /*If the subindex0 of a PDO assign or PDO mapping object is 0 the maximum subindex is specified by the object description*/
        if(maxSubindex == 0 && (IS_PDO_ASSIGN(index) || IS_RX_PDO(index) || IS_TX_PDO(index)))
 800b586:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d11b      	bne.n	800b5c4 <OBJ_Write+0x8c>
 800b58c:	89fb      	ldrh	r3, [r7, #14]
 800b58e:	f641 420f 	movw	r2, #7183	; 0x1c0f
 800b592:	4293      	cmp	r3, r2
 800b594:	d904      	bls.n	800b5a0 <OBJ_Write+0x68>
 800b596:	89fb      	ldrh	r3, [r7, #14]
 800b598:	f641 422f 	movw	r2, #7215	; 0x1c2f
 800b59c:	4293      	cmp	r3, r2
 800b59e:	d90f      	bls.n	800b5c0 <OBJ_Write+0x88>
 800b5a0:	89fb      	ldrh	r3, [r7, #14]
 800b5a2:	f5b3 5fb0 	cmp.w	r3, #5632	; 0x1600
 800b5a6:	d303      	bcc.n	800b5b0 <OBJ_Write+0x78>
 800b5a8:	89fb      	ldrh	r3, [r7, #14]
 800b5aa:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800b5ae:	d307      	bcc.n	800b5c0 <OBJ_Write+0x88>
 800b5b0:	89fb      	ldrh	r3, [r7, #14]
 800b5b2:	f5b3 5fd0 	cmp.w	r3, #6656	; 0x1a00
 800b5b6:	d305      	bcc.n	800b5c4 <OBJ_Write+0x8c>
 800b5b8:	89fb      	ldrh	r3, [r7, #14]
 800b5ba:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800b5be:	d201      	bcs.n	800b5c4 <OBJ_Write+0x8c>
        {
            maxSubindex = maxConfiguredSubindex;
 800b5c0:	8c3b      	ldrh	r3, [r7, #32]
 800b5c2:	86bb      	strh	r3, [r7, #52]	; 0x34
        }
    }


    if ( bCompleteAccess )
 800b5c4:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d012      	beq.n	800b5f2 <OBJ_Write+0xba>
    {
        if ( objCode == OBJCODE_VAR )
 800b5cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b5d0:	2b07      	cmp	r3, #7
 800b5d2:	d101      	bne.n	800b5d8 <OBJ_Write+0xa0>
            /* complete access is not supported with simple objects */
            return ABORTIDX_UNSUPPORTED_ACCESS;
 800b5d4:	2305      	movs	r3, #5
 800b5d6:	e307      	b.n	800bbe8 <OBJ_Write+0x6b0>

        if ((subindex == 0) && (dataSize > 0))
 800b5d8:	7b7b      	ldrb	r3, [r7, #13]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d106      	bne.n	800b5ec <OBJ_Write+0xb4>
 800b5de:	68bb      	ldr	r3, [r7, #8]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d003      	beq.n	800b5ec <OBJ_Write+0xb4>
        {
            /* we change the subindex 0 */
            maxSubindex = (UINT8) SWAPWORD(pData[0]);
 800b5e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b5e6:	881b      	ldrh	r3, [r3, #0]
 800b5e8:	b2db      	uxtb	r3, r3
 800b5ea:	86bb      	strh	r3, [r7, #52]	; 0x34
        }

        /* we write until the maximum subindex */
        lastSubindex = maxSubindex;
 800b5ec:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800b5ee:	863b      	strh	r3, [r7, #48]	; 0x30
 800b5f0:	e022      	b.n	800b638 <OBJ_Write+0x100>
    }
    else
    if (subindex > maxSubindex)
 800b5f2:	7b7b      	ldrb	r3, [r7, #13]
 800b5f4:	b29b      	uxth	r3, r3
 800b5f6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800b5f8:	429a      	cmp	r2, r3
 800b5fa:	d201      	bcs.n	800b600 <OBJ_Write+0xc8>
    {
        /* the maximum subindex is reached */
        return ABORTIDX_SUBINDEX_NOT_EXISTING;
 800b5fc:	2311      	movs	r3, #17
 800b5fe:	e2f3      	b.n	800bbe8 <OBJ_Write+0x6b0>
    {
        /* we check the write access for single accesses here, a complete write access
           is allowed if at least one entry is writable (in this case the values for the
            read only entries shall be ignored) */
        /* we get the corresponding entry description */
        pEntry = OBJ_GetEntryDesc(pObjEntry, subindex);
 800b600:	7b7b      	ldrb	r3, [r7, #13]
 800b602:	4619      	mov	r1, r3
 800b604:	6878      	ldr	r0, [r7, #4]
 800b606:	f7ff fa2f 	bl	800aa68 <OBJ_GetEntryDesc>
 800b60a:	61f8      	str	r0, [r7, #28]

        /* check if we have write access (bits 3-5 (PREOP, SAFEOP, OP) of ObjAccess)
           by comparing with the actual state (bits 1-3 (PREOP, SAFEOP, OP) of AL Status) */
        if ( ((UINT8) ((pEntry->ObjAccess & ACCESS_WRITE) >> 2)) < (nAlStatus & STATE_MASK) )
 800b60c:	69fb      	ldr	r3, [r7, #28]
 800b60e:	889b      	ldrh	r3, [r3, #4]
 800b610:	109b      	asrs	r3, r3, #2
 800b612:	b2db      	uxtb	r3, r3
 800b614:	f003 020e 	and.w	r2, r3, #14
 800b618:	4ba4      	ldr	r3, [pc, #656]	; (800b8ac <OBJ_Write+0x374>)
 800b61a:	781b      	ldrb	r3, [r3, #0]
 800b61c:	f003 030f 	and.w	r3, r3, #15
 800b620:	429a      	cmp	r2, r3
 800b622:	da09      	bge.n	800b638 <OBJ_Write+0x100>
        {
            /* we don't have write access */
            if ( (pEntry->ObjAccess & ACCESS_WRITE) == 0 )
 800b624:	69fb      	ldr	r3, [r7, #28]
 800b626:	889b      	ldrh	r3, [r3, #4]
 800b628:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d101      	bne.n	800b634 <OBJ_Write+0xfc>
            {
                /* it is a read only entry */
                return ABORTIDX_READ_ONLY_ENTRY;
 800b630:	2307      	movs	r3, #7
 800b632:	e2d9      	b.n	800bbe8 <OBJ_Write+0x6b0>
            }
            else
            {
                /* we don't have write access in this state */
                return ABORTIDX_IN_THIS_STATE_DATA_CANNOT_BE_READ_OR_STORED;
 800b634:	231a      	movs	r3, #26
 800b636:	e2d7      	b.n	800bbe8 <OBJ_Write+0x6b0>
        }
    }

    /* Subindex 0 shall be set to zero if a single PDO / PDO assign entry is written
    or a complete access without subindex0 is requested */
    if((subindex > 0) &&
 800b638:	7b7b      	ldrb	r3, [r7, #13]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d024      	beq.n	800b688 <OBJ_Write+0x150>
 800b63e:	89fb      	ldrh	r3, [r7, #14]
 800b640:	f641 420f 	movw	r2, #7183	; 0x1c0f
 800b644:	4293      	cmp	r3, r2
 800b646:	d904      	bls.n	800b652 <OBJ_Write+0x11a>
        (IS_PDO_ASSIGN(index) || IS_RX_PDO(index)|| IS_TX_PDO(index))
 800b648:	89fb      	ldrh	r3, [r7, #14]
 800b64a:	f641 422f 	movw	r2, #7215	; 0x1c2f
 800b64e:	4293      	cmp	r3, r2
 800b650:	d90f      	bls.n	800b672 <OBJ_Write+0x13a>
 800b652:	89fb      	ldrh	r3, [r7, #14]
 800b654:	f5b3 5fb0 	cmp.w	r3, #5632	; 0x1600
 800b658:	d303      	bcc.n	800b662 <OBJ_Write+0x12a>
 800b65a:	89fb      	ldrh	r3, [r7, #14]
 800b65c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800b660:	d307      	bcc.n	800b672 <OBJ_Write+0x13a>
 800b662:	89fb      	ldrh	r3, [r7, #14]
 800b664:	f5b3 5fd0 	cmp.w	r3, #6656	; 0x1a00
 800b668:	d30e      	bcc.n	800b688 <OBJ_Write+0x150>
 800b66a:	89fb      	ldrh	r3, [r7, #14]
 800b66c:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800b670:	d20a      	bcs.n	800b688 <OBJ_Write+0x150>
        )
    {
        /*Check if Subindex0 was cleared before*/
        UINT16 Subindex0 = (*(UINT16 *)pObjEntry->pVarPtr) & 0x00FF;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	699b      	ldr	r3, [r3, #24]
 800b676:	881b      	ldrh	r3, [r3, #0]
 800b678:	b2db      	uxtb	r3, r3
 800b67a:	837b      	strh	r3, [r7, #26]
        if(Subindex0 != 0x00)
 800b67c:	8b7b      	ldrh	r3, [r7, #26]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d002      	beq.n	800b688 <OBJ_Write+0x150>
            bClearSubindex0Required = TRUE;
 800b682:	2301      	movs	r3, #1
 800b684:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }

    if ( pObjEntry->Write != NULL )
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	6a1b      	ldr	r3, [r3, #32]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d00b      	beq.n	800b6a8 <OBJ_Write+0x170>
    {
        /* Write function is defined, we call the object specific write function */
        return pObjEntry->Write(index, subindex, dataSize, pData, bCompleteAccess);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	6a1c      	ldr	r4, [r3, #32]
 800b694:	7b79      	ldrb	r1, [r7, #13]
 800b696:	89f8      	ldrh	r0, [r7, #14]
 800b698:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800b69c:	9300      	str	r3, [sp, #0]
 800b69e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b6a0:	68ba      	ldr	r2, [r7, #8]
 800b6a2:	47a0      	blx	r4
 800b6a4:	4603      	mov	r3, r0
 800b6a6:	e29f      	b.n	800bbe8 <OBJ_Write+0x6b0>
    }
    else
    {
        UINT8 bWritten = 0;
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        UINT8 result = ABORTIDX_READ_ONLY_ENTRY;
 800b6ae:	2307      	movs	r3, #7
 800b6b0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

/*ECATCHANGE_START(V5.11) ECAT*/
        if (dataSize == 0)
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d101      	bne.n	800b6be <OBJ_Write+0x186>
        {
           return 0; //no error
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	e294      	b.n	800bbe8 <OBJ_Write+0x6b0>
        }
/*ECATCHANGE_END(V5.11) ECAT*/

        /* we use the standard write function */
        for (i = subindex; i <= lastSubindex; i++)
 800b6be:	7b7b      	ldrb	r3, [r7, #13]
 800b6c0:	86fb      	strh	r3, [r7, #54]	; 0x36
 800b6c2:	e284      	b.n	800bbce <OBJ_Write+0x696>
        {
            /* if only a single entry is requested, this loop will only be done once */
            UINT16 MBXMEM *pVarPtr = (UINT16 MBXMEM *) pObjEntry->pVarPtr;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	699b      	ldr	r3, [r3, #24]
 800b6c8:	62bb      	str	r3, [r7, #40]	; 0x28
            UINT16 bitOffset = 0;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	833b      	strh	r3, [r7, #24]

            /* we get the corresponding entry description */
            pEntry = OBJ_GetEntryDesc(pObjEntry,(UINT8) i);
 800b6ce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b6d0:	b2db      	uxtb	r3, r3
 800b6d2:	4619      	mov	r1, r3
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f7ff f9c7 	bl	800aa68 <OBJ_GetEntryDesc>
 800b6da:	61f8      	str	r0, [r7, #28]

            /*Get the bitOffset before check the access rights to calculate pData offset*/
            bitOffset = OBJ_GetEntryOffset((UINT8)i, pObjEntry);
 800b6dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b6de:	b2db      	uxtb	r3, r3
 800b6e0:	6879      	ldr	r1, [r7, #4]
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f7ff f9f8 	bl	800aad8 <OBJ_GetEntryOffset>
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	833b      	strh	r3, [r7, #24]

            /* we check if we have write access (bits 3-5 (PREOP, SAFEOP, OP) of ObjAccess)
               by comparing with the actual state (bits 1-3 (PREOP, SAFEOP, OP) of AL Status) */
            if ( ((UINT8)((pEntry->ObjAccess & ACCESS_WRITE) >> 2)) >= (nAlStatus & STATE_MASK) )
 800b6ec:	69fb      	ldr	r3, [r7, #28]
 800b6ee:	889b      	ldrh	r3, [r3, #4]
 800b6f0:	109b      	asrs	r3, r3, #2
 800b6f2:	b2db      	uxtb	r3, r3
 800b6f4:	f003 020e 	and.w	r2, r3, #14
 800b6f8:	4b6c      	ldr	r3, [pc, #432]	; (800b8ac <OBJ_Write+0x374>)
 800b6fa:	781b      	ldrb	r3, [r3, #0]
 800b6fc:	f003 030f 	and.w	r3, r3, #15
 800b700:	429a      	cmp	r2, r3
 800b702:	f2c0 823d 	blt.w	800bb80 <OBJ_Write+0x648>
            {
                /* we have write access for this entry */
                if (i != 0)
 800b706:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d006      	beq.n	800b71a <OBJ_Write+0x1e2>
                {
                    /* we increment the variable pointer to the corresponding word address */
                    pVarPtr += (bitOffset >> 4);
 800b70c:	8b3b      	ldrh	r3, [r7, #24]
 800b70e:	091b      	lsrs	r3, r3, #4
 800b710:	b29b      	uxth	r3, r3
 800b712:	005b      	lsls	r3, r3, #1
 800b714:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b716:	4413      	add	r3, r2
 800b718:	62bb      	str	r3, [r7, #40]	; 0x28
                }


                if ( i == subindex                                     /* requested entry */
 800b71a:	7b7b      	ldrb	r3, [r7, #13]
 800b71c:	b29b      	uxth	r3, r3
 800b71e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b720:	429a      	cmp	r2, r3
 800b722:	d00a      	beq.n	800b73a <OBJ_Write+0x202>
                  || (bCompleteAccess && i >= subindex) )       /* complete access and entry should be read */
 800b724:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800b728:	2b00      	cmp	r3, #0
 800b72a:	f000 824d 	beq.w	800bbc8 <OBJ_Write+0x690>
 800b72e:	7b7b      	ldrb	r3, [r7, #13]
 800b730:	b29b      	uxth	r3, r3
 800b732:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b734:	429a      	cmp	r2, r3
 800b736:	f0c0 8247 	bcc.w	800bbc8 <OBJ_Write+0x690>
                {
                    UINT16 bitMask;

                    /* we have to copy the entry */
                    if (i == 0 && objCode != OBJCODE_VAR)
 800b73a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d115      	bne.n	800b76c <OBJ_Write+0x234>
 800b740:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b744:	2b07      	cmp	r3, #7
 800b746:	d011      	beq.n	800b76c <OBJ_Write+0x234>
                    {
                        /*check if the value for subindex0 is valid */
                        UINT8 NewSubindex0 = (UINT8) SWAPWORD(pData[0]);
 800b748:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b74a:	881b      	ldrh	r3, [r3, #0]
 800b74c:	75fb      	strb	r3, [r7, #23]
                        if(maxConfiguredSubindex < NewSubindex0)
 800b74e:	7dfb      	ldrb	r3, [r7, #23]
 800b750:	b29b      	uxth	r3, r3
 800b752:	8c3a      	ldrh	r2, [r7, #32]
 800b754:	429a      	cmp	r2, r3
 800b756:	d201      	bcs.n	800b75c <OBJ_Write+0x224>
                        {
                            return ABORTIDX_VALUE_TOO_GREAT;
 800b758:	2313      	movs	r3, #19
 800b75a:	e245      	b.n	800bbe8 <OBJ_Write+0x6b0>
                        }

                        /* subindex 0 of an array or record shall be written */
/* ECATCHANGE_START(V5.11) SDO5*/
                        pVarPtr[0] = SWAPWORD(pData[0]);
 800b75c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b75e:	881a      	ldrh	r2, [r3, #0]
 800b760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b762:	801a      	strh	r2, [r3, #0]
/* ECATCHANGE_END(V5.11) SDO5*/
                        /* we increment the destination pointer by 2 because the subindex 0 will be
                           transmitted as UINT16 for a complete access */
                        pData++;
 800b764:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b766:	3302      	adds	r3, #2
 800b768:	64bb      	str	r3, [r7, #72]	; 0x48
                    {
 800b76a:	e200      	b.n	800bb6e <OBJ_Write+0x636>
                    }
                    else
                    {
                        UINT16 dataType = pEntry->DataType;
 800b76c:	69fb      	ldr	r3, [r7, #28]
 800b76e:	881b      	ldrh	r3, [r3, #0]
 800b770:	84fb      	strh	r3, [r7, #38]	; 0x26
                        if (pEntry->DataType >= 0x700)
 800b772:	69fb      	ldr	r3, [r7, #28]
 800b774:	881b      	ldrh	r3, [r3, #0]
 800b776:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b77a:	d315      	bcc.n	800b7a8 <OBJ_Write+0x270>
                        {
                            /* the ENUM data types are defined from index 0x700 in this example
                               convert in standard data type for the write access */
                            if ( pEntry->BitLength <= 8 )
 800b77c:	69fb      	ldr	r3, [r7, #28]
 800b77e:	885b      	ldrh	r3, [r3, #2]
 800b780:	2b08      	cmp	r3, #8
 800b782:	d804      	bhi.n	800b78e <OBJ_Write+0x256>
                                dataType = DEFTYPE_BIT1-1+pEntry->BitLength;
 800b784:	69fb      	ldr	r3, [r7, #28]
 800b786:	885b      	ldrh	r3, [r3, #2]
 800b788:	332f      	adds	r3, #47	; 0x2f
 800b78a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800b78c:	e00c      	b.n	800b7a8 <OBJ_Write+0x270>
                            else if ( pEntry->BitLength == 16 )
 800b78e:	69fb      	ldr	r3, [r7, #28]
 800b790:	885b      	ldrh	r3, [r3, #2]
 800b792:	2b10      	cmp	r3, #16
 800b794:	d102      	bne.n	800b79c <OBJ_Write+0x264>
                                dataType = DEFTYPE_UNSIGNED16;
 800b796:	2306      	movs	r3, #6
 800b798:	84fb      	strh	r3, [r7, #38]	; 0x26
 800b79a:	e005      	b.n	800b7a8 <OBJ_Write+0x270>
                            else if ( pEntry->BitLength == 32 )
 800b79c:	69fb      	ldr	r3, [r7, #28]
 800b79e:	885b      	ldrh	r3, [r3, #2]
 800b7a0:	2b20      	cmp	r3, #32
 800b7a2:	d101      	bne.n	800b7a8 <OBJ_Write+0x270>
                                dataType = DEFTYPE_UNSIGNED32;
 800b7a4:	2307      	movs	r3, #7
 800b7a6:	84fb      	strh	r3, [r7, #38]	; 0x26
                        }

                        switch (dataType)
 800b7a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b7aa:	2b37      	cmp	r3, #55	; 0x37
 800b7ac:	dc78      	bgt.n	800b8a0 <OBJ_Write+0x368>
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	f2c0 81da 	blt.w	800bb68 <OBJ_Write+0x630>
 800b7b4:	2b37      	cmp	r3, #55	; 0x37
 800b7b6:	f200 81d7 	bhi.w	800bb68 <OBJ_Write+0x630>
 800b7ba:	a201      	add	r2, pc, #4	; (adr r2, 800b7c0 <OBJ_Write+0x288>)
 800b7bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7c0:	0800b8b1 	.word	0x0800b8b1
 800b7c4:	0800b8f5 	.word	0x0800b8f5
 800b7c8:	0800b8f5 	.word	0x0800b8f5
 800b7cc:	0800b9b1 	.word	0x0800b9b1
 800b7d0:	0800ba71 	.word	0x0800ba71
 800b7d4:	0800b8f5 	.word	0x0800b8f5
 800b7d8:	0800b9b1 	.word	0x0800b9b1
 800b7dc:	0800ba71 	.word	0x0800ba71
 800b7e0:	0800ba71 	.word	0x0800ba71
 800b7e4:	0800bafd 	.word	0x0800bafd
 800b7e8:	0800bb33 	.word	0x0800bb33
 800b7ec:	0800bb33 	.word	0x0800bb33
 800b7f0:	0800bb69 	.word	0x0800bb69
 800b7f4:	0800bb69 	.word	0x0800bb69
 800b7f8:	0800bb69 	.word	0x0800bb69
 800b7fc:	0800bb69 	.word	0x0800bb69
 800b800:	0800bb69 	.word	0x0800bb69
 800b804:	0800bac1 	.word	0x0800bac1
 800b808:	0800bb69 	.word	0x0800bb69
 800b80c:	0800bb69 	.word	0x0800bb69
 800b810:	0800bb69 	.word	0x0800bb69
 800b814:	0800bac1 	.word	0x0800bac1
 800b818:	0800bb69 	.word	0x0800bb69
 800b81c:	0800bb69 	.word	0x0800bb69
 800b820:	0800bb69 	.word	0x0800bb69
 800b824:	0800bb69 	.word	0x0800bb69
 800b828:	0800bb69 	.word	0x0800bb69
 800b82c:	0800bac1 	.word	0x0800bac1
 800b830:	0800bb69 	.word	0x0800bb69
 800b834:	0800bb69 	.word	0x0800bb69
 800b838:	0800b8f5 	.word	0x0800b8f5
 800b83c:	0800b9b1 	.word	0x0800b9b1
 800b840:	0800ba71 	.word	0x0800ba71
 800b844:	0800bb69 	.word	0x0800bb69
 800b848:	0800bb69 	.word	0x0800bb69
 800b84c:	0800bb69 	.word	0x0800bb69
 800b850:	0800bb69 	.word	0x0800bb69
 800b854:	0800bb69 	.word	0x0800bb69
 800b858:	0800bb69 	.word	0x0800bb69
 800b85c:	0800bb69 	.word	0x0800bb69
 800b860:	0800bb69 	.word	0x0800bb69
 800b864:	0800bb69 	.word	0x0800bb69
 800b868:	0800bb69 	.word	0x0800bb69
 800b86c:	0800bb69 	.word	0x0800bb69
 800b870:	0800bb69 	.word	0x0800bb69
 800b874:	0800b8f5 	.word	0x0800b8f5
 800b878:	0800b9b1 	.word	0x0800b9b1
 800b87c:	0800ba71 	.word	0x0800ba71
 800b880:	0800b8f5 	.word	0x0800b8f5
 800b884:	0800b8f5 	.word	0x0800b8f5
 800b888:	0800b8f5 	.word	0x0800b8f5
 800b88c:	0800b8f5 	.word	0x0800b8f5
 800b890:	0800b8f5 	.word	0x0800b8f5
 800b894:	0800b8f5 	.word	0x0800b8f5
 800b898:	0800b8f5 	.word	0x0800b8f5
 800b89c:	0800b8f5 	.word	0x0800b8f5
 800b8a0:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800b8a4:	2b03      	cmp	r3, #3
 800b8a6:	f200 815f 	bhi.w	800bb68 <OBJ_Write+0x630>
 800b8aa:	e142      	b.n	800bb32 <OBJ_Write+0x5fa>
 800b8ac:	200006b2 	.word	0x200006b2
                        {
                        case DEFTYPE_NULL:
                            if(bCompleteAccess)
 800b8b0:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d01b      	beq.n	800b8f0 <OBJ_Write+0x3b8>
                            {
                                /*Handle alignment entry*/
                                if (((pEntry->BitLength & 0xF) > 0)
 800b8b8:	69fb      	ldr	r3, [r7, #28]
 800b8ba:	885b      	ldrh	r3, [r3, #2]
 800b8bc:	f003 030f 	and.w	r3, r3, #15
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	dd0b      	ble.n	800b8dc <OBJ_Write+0x3a4>
                                    && (((bitOffset + pEntry->BitLength) & 0x0F) == 0 ))
 800b8c4:	69fb      	ldr	r3, [r7, #28]
 800b8c6:	885a      	ldrh	r2, [r3, #2]
 800b8c8:	8b3b      	ldrh	r3, [r7, #24]
 800b8ca:	4413      	add	r3, r2
 800b8cc:	b29b      	uxth	r3, r3
 800b8ce:	f003 030f 	and.w	r3, r3, #15
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d102      	bne.n	800b8dc <OBJ_Write+0x3a4>
                                {
                                    /* we have reached the UINT16 border */
                                    pData++;
 800b8d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b8d8:	3302      	adds	r3, #2
 800b8da:	64bb      	str	r3, [r7, #72]	; 0x48
                                }

                                /*increment WORD offset*/
                                pData += ((pEntry->BitLength & 0xF0) >> 4);
 800b8dc:	69fb      	ldr	r3, [r7, #28]
 800b8de:	885b      	ldrh	r3, [r3, #2]
 800b8e0:	111b      	asrs	r3, r3, #4
 800b8e2:	f003 030f 	and.w	r3, r3, #15
 800b8e6:	005b      	lsls	r3, r3, #1
 800b8e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b8ea:	4413      	add	r3, r2
 800b8ec:	64bb      	str	r3, [r7, #72]	; 0x48
                            }
                            else
                            {
                                return ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
                            }
                            break;
 800b8ee:	e13e      	b.n	800bb6e <OBJ_Write+0x636>
                                return ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
 800b8f0:	2318      	movs	r3, #24
 800b8f2:	e179      	b.n	800bbe8 <OBJ_Write+0x6b0>
/*ECATCHANGE_START(V5.11) SDO9*/
                        case    DEFTYPE_BYTE :
/*ECATCHANGE_END(V5.11) SDO9*/
                        {
                            /* depending on the bitOffset we have to copy the Hi or the Lo-Byte */
                            UINT16 TmpValue = 0x0000;
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	84bb      	strh	r3, [r7, #36]	; 0x24

                            bitMask = cBitMask[pEntry->BitLength] << (bitOffset & 0x0F);
 800b8f8:	69fb      	ldr	r3, [r7, #28]
 800b8fa:	885b      	ldrh	r3, [r3, #2]
 800b8fc:	461a      	mov	r2, r3
 800b8fe:	4b9e      	ldr	r3, [pc, #632]	; (800bb78 <OBJ_Write+0x640>)
 800b900:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800b904:	461a      	mov	r2, r3
 800b906:	8b3b      	ldrh	r3, [r7, #24]
 800b908:	f003 030f 	and.w	r3, r3, #15
 800b90c:	fa02 f303 	lsl.w	r3, r2, r3
 800b910:	827b      	strh	r3, [r7, #18]

                            /*Swap object data (if required); all masks and offsets are defined for little endian format*/
                            TmpValue = SWAPWORD(pVarPtr[0]);
 800b912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b914:	881b      	ldrh	r3, [r3, #0]
 800b916:	84bb      	strh	r3, [r7, #36]	; 0x24

                            /*Clear corresponding bits*/
                            TmpValue &= ~bitMask;
 800b918:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b91c:	43db      	mvns	r3, r3
 800b91e:	b21a      	sxth	r2, r3
 800b920:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800b924:	4013      	ands	r3, r2
 800b926:	b21b      	sxth	r3, r3
 800b928:	84bb      	strh	r3, [r7, #36]	; 0x24

/* ECATCHANGE_START(V5.11) SDO7*/
                            if (bCompleteAccess) 
 800b92a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d008      	beq.n	800b944 <OBJ_Write+0x40c>
                            {
                                /*shifting is not required for Complete access because the bits are set to the correct offset by the master*/
                                TmpValue |= (SWAPWORD(pData[0]) & bitMask);
 800b932:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b934:	881a      	ldrh	r2, [r3, #0]
 800b936:	8a7b      	ldrh	r3, [r7, #18]
 800b938:	4013      	ands	r3, r2
 800b93a:	b29a      	uxth	r2, r3
 800b93c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b93e:	4313      	orrs	r3, r2
 800b940:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b942:	e024      	b.n	800b98e <OBJ_Write+0x456>
                            }
                            else
                            {
                                if((SWAPWORD(pData[0]) & ~cBitMask[pEntry->BitLength]))
 800b944:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b946:	881b      	ldrh	r3, [r3, #0]
 800b948:	461a      	mov	r2, r3
 800b94a:	69fb      	ldr	r3, [r7, #28]
 800b94c:	885b      	ldrh	r3, [r3, #2]
 800b94e:	4619      	mov	r1, r3
 800b950:	4b89      	ldr	r3, [pc, #548]	; (800bb78 <OBJ_Write+0x640>)
 800b952:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800b956:	43db      	mvns	r3, r3
 800b958:	4013      	ands	r3, r2
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d001      	beq.n	800b962 <OBJ_Write+0x42a>
                                {
                                    /*written value exceed entry range*/
                                    return ABORTIDX_VALUE_EXCEEDED;
 800b95e:	2312      	movs	r3, #18
 800b960:	e142      	b.n	800bbe8 <OBJ_Write+0x6b0>
                                }
                                else
                                {
                                    /*Shift Bits to corresponding offset within the object memory*/
                                    TmpValue |= ((SWAPWORD(pData[0]) & cBitMask[pEntry->BitLength]) << (bitOffset & 0x0F));
 800b962:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b964:	881a      	ldrh	r2, [r3, #0]
 800b966:	69fb      	ldr	r3, [r7, #28]
 800b968:	885b      	ldrh	r3, [r3, #2]
 800b96a:	4619      	mov	r1, r3
 800b96c:	4b82      	ldr	r3, [pc, #520]	; (800bb78 <OBJ_Write+0x640>)
 800b96e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800b972:	4013      	ands	r3, r2
 800b974:	b29b      	uxth	r3, r3
 800b976:	461a      	mov	r2, r3
 800b978:	8b3b      	ldrh	r3, [r7, #24]
 800b97a:	f003 030f 	and.w	r3, r3, #15
 800b97e:	fa02 f303 	lsl.w	r3, r2, r3
 800b982:	b21a      	sxth	r2, r3
 800b984:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800b988:	4313      	orrs	r3, r2
 800b98a:	b21b      	sxth	r3, r3
 800b98c:	84bb      	strh	r3, [r7, #36]	; 0x24
                                }
                            }
/* ECATCHANGE_END(V5.11) SDO7*/

                            /*Swap written data to big endian format (if required)*/
                            pVarPtr[0] = SWAPWORD(TmpValue);
 800b98e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b990:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b992:	801a      	strh	r2, [r3, #0]

                            if ( ((bitOffset+pEntry->BitLength) & 0x0F) == 0 )
 800b994:	69fb      	ldr	r3, [r7, #28]
 800b996:	885a      	ldrh	r2, [r3, #2]
 800b998:	8b3b      	ldrh	r3, [r7, #24]
 800b99a:	4413      	add	r3, r2
 800b99c:	b29b      	uxth	r3, r3
 800b99e:	f003 030f 	and.w	r3, r3, #15
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	f040 80e2 	bne.w	800bb6c <OBJ_Write+0x634>
                                /* we have reached the UINT16 border */
                                pData++;
 800b9a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b9aa:	3302      	adds	r3, #2
 800b9ac:	64bb      	str	r3, [r7, #72]	; 0x48
                        }
                            break;
 800b9ae:	e0dd      	b.n	800bb6c <OBJ_Write+0x634>
                        case    DEFTYPE_BITARR16:
/*ECATCHANGE_START(V5.11) SDO9*/
                        case    DEFTYPE_WORD:
/*ECATCHANGE_END(V5.11) SDO9*/
/*ECATCHANGE_START(V5.11) SDO1*/
                            if(bitOffset & 0xF)
 800b9b0:	8b3b      	ldrh	r3, [r7, #24]
 800b9b2:	f003 030f 	and.w	r3, r3, #15
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d001      	beq.n	800b9be <OBJ_Write+0x486>
                            {
                                /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                return ABORTIDX_UNSUPPORTED_ACCESS;
 800b9ba:	2305      	movs	r3, #5
 800b9bc:	e114      	b.n	800bbe8 <OBJ_Write+0x6b0>
/*ECATCHANGE_END(V5.11) SDO1*/

                            {
                            /* in this example the objects are defined in that way,
                            that the 16 bit type are always starting at an exact WORD offset */
                            UINT16 u16NewData = SWAPWORD(pData[0]);
 800b9be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b9c0:	881b      	ldrh	r3, [r3, #0]
 800b9c2:	82bb      	strh	r3, [r7, #20]
                            if(bClearSubindex0Required && (pVarPtr[0] != u16NewData))
 800b9c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d006      	beq.n	800b9da <OBJ_Write+0x4a2>
 800b9cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ce:	881b      	ldrh	r3, [r3, #0]
 800b9d0:	8aba      	ldrh	r2, [r7, #20]
 800b9d2:	429a      	cmp	r2, r3
 800b9d4:	d001      	beq.n	800b9da <OBJ_Write+0x4a2>
                            {
                                /* try to write new data when subindex0 shall be reset*/
                                return ABORTIDX_ENTRY_CANT_BE_WRITTEN_SI0_NOT_0;
 800b9d6:	231c      	movs	r3, #28
 800b9d8:	e106      	b.n	800bbe8 <OBJ_Write+0x6b0>
                            }

                            /*check value if a new PDO assign entry should be written*/
                            if(IS_PDO_ASSIGN(index))  //PDO assign
 800b9da:	89fb      	ldrh	r3, [r7, #14]
 800b9dc:	f641 420f 	movw	r2, #7183	; 0x1c0f
 800b9e0:	4293      	cmp	r3, r2
 800b9e2:	d919      	bls.n	800ba18 <OBJ_Write+0x4e0>
 800b9e4:	89fb      	ldrh	r3, [r7, #14]
 800b9e6:	f641 422f 	movw	r2, #7215	; 0x1c2f
 800b9ea:	4293      	cmp	r3, r2
 800b9ec:	d814      	bhi.n	800ba18 <OBJ_Write+0x4e0>
                            {
                                if (!IS_RX_PDO(u16NewData) && !IS_TX_PDO(u16NewData) && (u16NewData != 0)) //check if the new assign entry value is valid
 800b9ee:	8abb      	ldrh	r3, [r7, #20]
 800b9f0:	f5b3 5fb0 	cmp.w	r3, #5632	; 0x1600
 800b9f4:	d303      	bcc.n	800b9fe <OBJ_Write+0x4c6>
 800b9f6:	8abb      	ldrh	r3, [r7, #20]
 800b9f8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800b9fc:	d30c      	bcc.n	800ba18 <OBJ_Write+0x4e0>
 800b9fe:	8abb      	ldrh	r3, [r7, #20]
 800ba00:	f5b3 5fd0 	cmp.w	r3, #6656	; 0x1a00
 800ba04:	d303      	bcc.n	800ba0e <OBJ_Write+0x4d6>
 800ba06:	8abb      	ldrh	r3, [r7, #20]
 800ba08:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800ba0c:	d304      	bcc.n	800ba18 <OBJ_Write+0x4e0>
 800ba0e:	8abb      	ldrh	r3, [r7, #20]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d001      	beq.n	800ba18 <OBJ_Write+0x4e0>
                                {
                                    return ABORTIDX_VALUE_EXCEEDED;
 800ba14:	2312      	movs	r3, #18
 800ba16:	e0e7      	b.n	800bbe8 <OBJ_Write+0x6b0>
                                }
                            }

                            if((index == 0x1C32 || index == 0x1C33) && (i == 1))
 800ba18:	89fb      	ldrh	r3, [r7, #14]
 800ba1a:	f641 4232 	movw	r2, #7218	; 0x1c32
 800ba1e:	4293      	cmp	r3, r2
 800ba20:	d004      	beq.n	800ba2c <OBJ_Write+0x4f4>
 800ba22:	89fb      	ldrh	r3, [r7, #14]
 800ba24:	f641 4233 	movw	r2, #7219	; 0x1c33
 800ba28:	4293      	cmp	r3, r2
 800ba2a:	d11a      	bne.n	800ba62 <OBJ_Write+0x52a>
 800ba2c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ba2e:	2b01      	cmp	r3, #1
 800ba30:	d117      	bne.n	800ba62 <OBJ_Write+0x52a>
                            {
                                /* The Synchronisation type (0x1C3x.1) was written by the user => the Sync type will not be calculated based on the register settings (if they don't match an error will be returned P_2_S)*/
                                if(pVarPtr[0] != u16NewData)
 800ba32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba34:	881b      	ldrh	r3, [r3, #0]
 800ba36:	8aba      	ldrh	r2, [r7, #20]
 800ba38:	429a      	cmp	r2, r3
 800ba3a:	d00f      	beq.n	800ba5c <OBJ_Write+0x524>
                                {
                                    result = CheckSyncTypeValue(index,u16NewData);
 800ba3c:	8aba      	ldrh	r2, [r7, #20]
 800ba3e:	89fb      	ldrh	r3, [r7, #14]
 800ba40:	4611      	mov	r1, r2
 800ba42:	4618      	mov	r0, r3
 800ba44:	f7ff f94a 	bl	800acdc <CheckSyncTypeValue>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

                                    if(result != 0)
 800ba4e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d002      	beq.n	800ba5c <OBJ_Write+0x524>
                                        return result;
 800ba56:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ba5a:	e0c5      	b.n	800bbe8 <OBJ_Write+0x6b0>
                                }

                                /* The user may force to current Sync Mode for that reason the flag has also to be set if the same value was written */
                                bSyncSetByUser = TRUE;
 800ba5c:	4b47      	ldr	r3, [pc, #284]	; (800bb7c <OBJ_Write+0x644>)
 800ba5e:	2201      	movs	r2, #1
 800ba60:	701a      	strb	r2, [r3, #0]
                            }

                            pVarPtr[0] = u16NewData;
 800ba62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba64:	8aba      	ldrh	r2, [r7, #20]
 800ba66:	801a      	strh	r2, [r3, #0]
                            pData++;
 800ba68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba6a:	3302      	adds	r3, #2
 800ba6c:	64bb      	str	r3, [r7, #72]	; 0x48
                            }
                            break;
 800ba6e:	e07e      	b.n	800bb6e <OBJ_Write+0x636>
                        case    DEFTYPE_BITARR32:
/*ECATCHANGE_START(V5.11) SDO9*/
                        case    DEFTYPE_DWORD:
/*ECATCHANGE_END(V5.11) SDO9*/
/*ECATCHANGE_START(V5.11) SDO1*/
                            if(bitOffset & 0xF)
 800ba70:	8b3b      	ldrh	r3, [r7, #24]
 800ba72:	f003 030f 	and.w	r3, r3, #15
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d001      	beq.n	800ba7e <OBJ_Write+0x546>
                            {
                                /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                return ABORTIDX_UNSUPPORTED_ACCESS;
 800ba7a:	2305      	movs	r3, #5
 800ba7c:	e0b4      	b.n	800bbe8 <OBJ_Write+0x6b0>
/*ECATCHANGE_END(V5.11) SDO1*/
                            {

                            /* in this example the objects are defined in that way,
                               that the 32 bit type are always starting at an exact WORD offset */
                            if(bClearSubindex0Required && 
 800ba7e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d00f      	beq.n	800baa6 <OBJ_Write+0x56e>
                                ((pVarPtr[0] != pData[0])
 800ba86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba88:	881a      	ldrh	r2, [r3, #0]
 800ba8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba8c:	881b      	ldrh	r3, [r3, #0]
                            if(bClearSubindex0Required && 
 800ba8e:	429a      	cmp	r2, r3
 800ba90:	d107      	bne.n	800baa2 <OBJ_Write+0x56a>
                                || (pVarPtr[1] != pData[1])))
 800ba92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba94:	3302      	adds	r3, #2
 800ba96:	881a      	ldrh	r2, [r3, #0]
 800ba98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba9a:	3302      	adds	r3, #2
 800ba9c:	881b      	ldrh	r3, [r3, #0]
 800ba9e:	429a      	cmp	r2, r3
 800baa0:	d001      	beq.n	800baa6 <OBJ_Write+0x56e>
                            {
                                /* try to write new data when subindex0 shall be reset*/
                                return ABORTIDX_ENTRY_CANT_BE_WRITTEN_SI0_NOT_0;
 800baa2:	231c      	movs	r3, #28
 800baa4:	e0a0      	b.n	800bbe8 <OBJ_Write+0x6b0>
                            }

                            pVarPtr[0] = pData[0];
 800baa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800baa8:	881a      	ldrh	r2, [r3, #0]
 800baaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baac:	801a      	strh	r2, [r3, #0]
                            pVarPtr[1] = pData[1];
 800baae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bab0:	3302      	adds	r3, #2
 800bab2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bab4:	8852      	ldrh	r2, [r2, #2]
 800bab6:	801a      	strh	r2, [r3, #0]
                            pData += 2;
 800bab8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800baba:	3304      	adds	r3, #4
 800babc:	64bb      	str	r3, [r7, #72]	; 0x48
                            }
                            break;
 800babe:	e056      	b.n	800bb6e <OBJ_Write+0x636>
                        case    DEFTYPE_REAL64:
                        case 	DEFTYPE_INTEGER64:
                        case    DEFTYPE_UNSIGNED64:
/*ECATCHANGE_START(V5.11) SDO1*/
                            if(bitOffset & 0xF)
 800bac0:	8b3b      	ldrh	r3, [r7, #24]
 800bac2:	f003 030f 	and.w	r3, r3, #15
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d001      	beq.n	800bace <OBJ_Write+0x596>
                            {
                                /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                return ABORTIDX_UNSUPPORTED_ACCESS;
 800baca:	2305      	movs	r3, #5
 800bacc:	e08c      	b.n	800bbe8 <OBJ_Write+0x6b0>
                            }
/*ECATCHANGE_END(V5.11) SDO1*/
                            /* in this example the objects are defined in that way,
                               that the 64 bit type are always starting at an exact WORD offset */
                            pVarPtr[0] = pData[0];
 800bace:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bad0:	881a      	ldrh	r2, [r3, #0]
 800bad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bad4:	801a      	strh	r2, [r3, #0]
                            pVarPtr[1] = pData[1];
 800bad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bad8:	3302      	adds	r3, #2
 800bada:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800badc:	8852      	ldrh	r2, [r2, #2]
 800bade:	801a      	strh	r2, [r3, #0]
                            pVarPtr[2] = pData[2];
 800bae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bae2:	3304      	adds	r3, #4
 800bae4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bae6:	8892      	ldrh	r2, [r2, #4]
 800bae8:	801a      	strh	r2, [r3, #0]
                            pVarPtr[3] = pData[3];
 800baea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baec:	3306      	adds	r3, #6
 800baee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800baf0:	88d2      	ldrh	r2, [r2, #6]
 800baf2:	801a      	strh	r2, [r3, #0]
                            pData += 4;
 800baf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800baf6:	3308      	adds	r3, #8
 800baf8:	64bb      	str	r3, [r7, #72]	; 0x48
                            break;
 800bafa:	e038      	b.n	800bb6e <OBJ_Write+0x636>
                        case    DEFTYPE_VISIBLESTRING:
/*ECATCHANGE_START(V5.11) SDO1*/
                            if(bitOffset & 0xF)
 800bafc:	8b3b      	ldrh	r3, [r7, #24]
 800bafe:	f003 030f 	and.w	r3, r3, #15
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d001      	beq.n	800bb0a <OBJ_Write+0x5d2>
                            {
                                /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                return ABORTIDX_UNSUPPORTED_ACCESS;
 800bb06:	2305      	movs	r3, #5
 800bb08:	e06e      	b.n	800bbe8 <OBJ_Write+0x6b0>
                            }
/*ECATCHANGE_END(V5.11) SDO1*/

                            OBJTOMBXSTRCPY(pVarPtr, pData, BIT2BYTE(pEntry->BitLength));
 800bb0a:	69fb      	ldr	r3, [r7, #28]
 800bb0c:	885b      	ldrh	r3, [r3, #2]
 800bb0e:	3307      	adds	r3, #7
 800bb10:	10db      	asrs	r3, r3, #3
 800bb12:	461a      	mov	r2, r3
 800bb14:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800bb16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb18:	f001 f996 	bl	800ce48 <memcpy>

/*ECATCHANGE_START(V5.11) SDO2*/
                            pData += BIT2WORD((pEntry->BitLength)& ~0xF);
 800bb1c:	69fb      	ldr	r3, [r7, #28]
 800bb1e:	885b      	ldrh	r3, [r3, #2]
 800bb20:	f023 030f 	bic.w	r3, r3, #15
 800bb24:	330f      	adds	r3, #15
 800bb26:	111b      	asrs	r3, r3, #4
 800bb28:	005b      	lsls	r3, r3, #1
 800bb2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bb2c:	4413      	add	r3, r2
 800bb2e:	64bb      	str	r3, [r7, #72]	; 0x48
/*ECATCHANGE_END(V5.11) SDO2*/
                            break;
 800bb30:	e01d      	b.n	800bb6e <OBJ_Write+0x636>
                            case DEFTYPE_ARRAY_OF_SINT :
                            case DEFTYPE_ARRAY_OF_DINT :
                            case DEFTYPE_ARRAY_OF_UDINT:
/*ECATCHANGE_END(V5.11) SDO9*/
/*ECATCHANGE_START(V5.11) SDO1*/
                            if(bitOffset & 0xF)
 800bb32:	8b3b      	ldrh	r3, [r7, #24]
 800bb34:	f003 030f 	and.w	r3, r3, #15
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d001      	beq.n	800bb40 <OBJ_Write+0x608>
                            {
                                /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                return ABORTIDX_UNSUPPORTED_ACCESS;
 800bb3c:	2305      	movs	r3, #5
 800bb3e:	e053      	b.n	800bbe8 <OBJ_Write+0x6b0>
                            }
/*ECATCHANGE_END(V5.11) SDO1*/

                            /* in this example the objects are defined in that way,
                               that the other types are always starting at an even byte offset */
                            OBJTOMBXMEMCPY(pVarPtr, pData, BIT2BYTE(pEntry->BitLength));
 800bb40:	69fb      	ldr	r3, [r7, #28]
 800bb42:	885b      	ldrh	r3, [r3, #2]
 800bb44:	3307      	adds	r3, #7
 800bb46:	10db      	asrs	r3, r3, #3
 800bb48:	461a      	mov	r2, r3
 800bb4a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800bb4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb4e:	f001 f97b 	bl	800ce48 <memcpy>
/*ECATCHANGE_START(V5.11) SDO2*/
                            pData += BIT2WORD((pEntry->BitLength) & ~0xF);
 800bb52:	69fb      	ldr	r3, [r7, #28]
 800bb54:	885b      	ldrh	r3, [r3, #2]
 800bb56:	f023 030f 	bic.w	r3, r3, #15
 800bb5a:	330f      	adds	r3, #15
 800bb5c:	111b      	asrs	r3, r3, #4
 800bb5e:	005b      	lsls	r3, r3, #1
 800bb60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bb62:	4413      	add	r3, r2
 800bb64:	64bb      	str	r3, [r7, #72]	; 0x48
/*ECATCHANGE_END(V5.11) SDO2*/

                            break;
 800bb66:	e002      	b.n	800bb6e <OBJ_Write+0x636>
                        default:
                            /* other data types are not supported from this example */
                            return ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
 800bb68:	2318      	movs	r3, #24
 800bb6a:	e03d      	b.n	800bbe8 <OBJ_Write+0x6b0>
                            break;
 800bb6c:	bf00      	nop
                        }
                    }

                    /* set flag */
                    bWritten = 1;
 800bb6e:	2301      	movs	r3, #1
 800bb70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800bb74:	e028      	b.n	800bbc8 <OBJ_Write+0x690>
 800bb76:	bf00      	nop
 800bb78:	0800db5c 	.word	0x0800db5c
 800bb7c:	20000b01 	.word	0x20000b01

                }
            }
            else
            {
                if(i == 0)
 800bb80:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d103      	bne.n	800bb8e <OBJ_Write+0x656>
                {
                    /* For SubIndex0 16Bit are reserved even if the BitLength is 8 */
                    pData++;
 800bb86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb88:	3302      	adds	r3, #2
 800bb8a:	64bb      	str	r3, [r7, #72]	; 0x48
 800bb8c:	e019      	b.n	800bbc2 <OBJ_Write+0x68a>
                }
                else
                {
                    /*Handle Bit/Byte Offset*/
                    if (((pEntry->BitLength & 0xF) > 0)
 800bb8e:	69fb      	ldr	r3, [r7, #28]
 800bb90:	885b      	ldrh	r3, [r3, #2]
 800bb92:	f003 030f 	and.w	r3, r3, #15
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	dd0b      	ble.n	800bbb2 <OBJ_Write+0x67a>
                        && (((bitOffset + pEntry->BitLength) & 0x0F) == 0 ))
 800bb9a:	69fb      	ldr	r3, [r7, #28]
 800bb9c:	885a      	ldrh	r2, [r3, #2]
 800bb9e:	8b3b      	ldrh	r3, [r7, #24]
 800bba0:	4413      	add	r3, r2
 800bba2:	b29b      	uxth	r3, r3
 800bba4:	f003 030f 	and.w	r3, r3, #15
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d102      	bne.n	800bbb2 <OBJ_Write+0x67a>
                    {
                        /* we have reached the UINT16 border */
                        pData++;
 800bbac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bbae:	3302      	adds	r3, #2
 800bbb0:	64bb      	str	r3, [r7, #72]	; 0x48
                    }

                    /*increment WORD offset*/
/*ECATCHANGE_START(V5.11) SDO9*/
                    pData += ((pEntry->BitLength & 0xFFF0) >> 4);
 800bbb2:	69fb      	ldr	r3, [r7, #28]
 800bbb4:	885b      	ldrh	r3, [r3, #2]
 800bbb6:	091b      	lsrs	r3, r3, #4
 800bbb8:	b29b      	uxth	r3, r3
 800bbba:	005b      	lsls	r3, r3, #1
 800bbbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bbbe:	4413      	add	r3, r2
 800bbc0:	64bb      	str	r3, [r7, #72]	; 0x48
/*ECATCHANGE_END(V5.11) SDO9*/
                }
                /*If no other entry was written this result will be returned*/
                result = ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
 800bbc2:	2318      	movs	r3, #24
 800bbc4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        for (i = subindex; i <= lastSubindex; i++)
 800bbc8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bbca:	3301      	adds	r3, #1
 800bbcc:	86fb      	strh	r3, [r7, #54]	; 0x36
 800bbce:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800bbd0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800bbd2:	429a      	cmp	r2, r3
 800bbd4:	f67f ad76 	bls.w	800b6c4 <OBJ_Write+0x18c>
            }
        }

        if (bWritten == 0)
 800bbd8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d102      	bne.n	800bbe6 <OBJ_Write+0x6ae>
            /* we didn't write anything, so we have to return the stored error code */
            return result;
 800bbe0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800bbe4:	e000      	b.n	800bbe8 <OBJ_Write+0x6b0>
    }

    return 0;
 800bbe6:	2300      	movs	r3, #0
}
 800bbe8:	4618      	mov	r0, r3
 800bbea:	373c      	adds	r7, #60	; 0x3c
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd90      	pop	{r4, r7, pc}

0800bbf0 <SdoDownloadSegmentInd>:
            the data will be written to the object dictionary. The
            function sends a response by itself.
*////////////////////////////////////////////////////////////////////////////////////////

static UINT8 SdoDownloadSegmentInd( TDOWNLOADSDOSEGREQMBX MBXMEM * pSdoInd )
{
 800bbf0:	b5b0      	push	{r4, r5, r7, lr}
 800bbf2:	b088      	sub	sp, #32
 800bbf4:	af02      	add	r7, sp, #8
 800bbf6:	6078      	str	r0, [r7, #4]
    UINT8 abort = 0;
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	75fb      	strb	r3, [r7, #23]
    UINT32 bytesToSave = 0;
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	613b      	str	r3, [r7, #16]

    if ( (pSdoInd->SdoHeader.SegHeader & SEGHEADER_TOGGLE) == bSdoSegLastToggle )
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	891b      	ldrh	r3, [r3, #8]
 800bc04:	f003 0310 	and.w	r3, r3, #16
 800bc08:	4a95      	ldr	r2, [pc, #596]	; (800be60 <SdoDownloadSegmentInd+0x270>)
 800bc0a:	7812      	ldrb	r2, [r2, #0]
 800bc0c:	4293      	cmp	r3, r2
 800bc0e:	d102      	bne.n	800bc16 <SdoDownloadSegmentInd+0x26>
    {
        /* toggle bit has not toggled... */
        abort = ABORTIDX_TOGGLE_BIT_NOT_CHANGED;
 800bc10:	2301      	movs	r3, #1
 800bc12:	75fb      	strb	r3, [r7, #23]
 800bc14:	e157      	b.n	800bec6 <SdoDownloadSegmentInd+0x2d6>
    }
    else
    {
        /* maxData contains the maximum data to be received with a SDO-DownloadSegment */
        UINT16 maxData =    u16ReceiveMbxSize - MBX_HEADER_SIZE - SEGMENT_NORM_HEADER_SIZE;
 800bc16:	4b93      	ldr	r3, [pc, #588]	; (800be64 <SdoDownloadSegmentInd+0x274>)
 800bc18:	881b      	ldrh	r3, [r3, #0]
 800bc1a:	3b09      	subs	r3, #9
 800bc1c:	81bb      	strh	r3, [r7, #12]
        /* the new toggle bit is stored in bSdoSegLastToggle */
        bSdoSegLastToggle = pSdoInd->SdoHeader.SegHeader & SEGHEADER_TOGGLE;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	891b      	ldrh	r3, [r3, #8]
 800bc22:	b2db      	uxtb	r3, r3
 800bc24:	f003 0310 	and.w	r3, r3, #16
 800bc28:	b2da      	uxtb	r2, r3
 800bc2a:	4b8d      	ldr	r3, [pc, #564]	; (800be60 <SdoDownloadSegmentInd+0x270>)
 800bc2c:	701a      	strb	r2, [r3, #0]

        /* a SDO-Download Segment is only allowed if a SDO-Download Request was received before,
           in that case a buffer for the received data was allocated in SDOS_SdoInd before */
        if ( pSdoSegData )
 800bc2e:	4b8e      	ldr	r3, [pc, #568]	; (800be68 <SdoDownloadSegmentInd+0x278>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	f000 8145 	beq.w	800bec2 <SdoDownloadSegmentInd+0x2d2>
        {
            /* bytesToSave contains the remaining data with this and maybe the following
               SDO-Download Segment services */
            bytesToSave = nSdoSegCompleteSize - nSdoSegBytesToHandle;
 800bc38:	4b8c      	ldr	r3, [pc, #560]	; (800be6c <SdoDownloadSegmentInd+0x27c>)
 800bc3a:	681a      	ldr	r2, [r3, #0]
 800bc3c:	4b8c      	ldr	r3, [pc, #560]	; (800be70 <SdoDownloadSegmentInd+0x280>)
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	1ad3      	subs	r3, r2, r3
 800bc42:	613b      	str	r3, [r7, #16]

            if ( pSdoInd->SdoHeader.SegHeader & SEGHEADER_NOMOREFOLLOWS )
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	891b      	ldrh	r3, [r3, #8]
 800bc48:	f003 0301 	and.w	r3, r3, #1
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d02a      	beq.n	800bca6 <SdoDownloadSegmentInd+0xb6>
            {
                /* the last segment is received, check if the length of the remaining data is the
                   same as the length of the received data */
                if ( bytesToSave <= maxData )
 800bc50:	89bb      	ldrh	r3, [r7, #12]
 800bc52:	693a      	ldr	r2, [r7, #16]
 800bc54:	429a      	cmp	r2, r3
 800bc56:	d823      	bhi.n	800bca0 <SdoDownloadSegmentInd+0xb0>
                {
/* ECATCHANGE_START(V5.11) ECAT7*/
                    UINT16 mbxSize = SWAPWORD(pSdoInd->MbxHeader.Length);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	881b      	ldrh	r3, [r3, #0]
 800bc5c:	817b      	strh	r3, [r7, #10]

                    /* for the check it is distinguished if the remaining bytes are less than 8 (in that
                       case 7 data bytes were sent and the SDO-Download Segment header contains the information
                        how much bytes are valid (CAN-compatibility)), otherwise the length has to match exactly
                        and the SDO-Download Segment-Headerbyte is ignored */
                    if (((bytesToSave <= (UINT32)(mbxSize - SEGMENT_NORM_HEADER_SIZE))
 800bc5e:	897b      	ldrh	r3, [r7, #10]
 800bc60:	3b03      	subs	r3, #3
 800bc62:	461a      	mov	r2, r3
 800bc64:	693b      	ldr	r3, [r7, #16]
 800bc66:	4293      	cmp	r3, r2
 800bc68:	d80a      	bhi.n	800bc80 <SdoDownloadSegmentInd+0x90>
                         &&( bytesToSave == ((UINT16) (MIN_SEGMENTED_DATA - ((pSdoInd->SdoHeader.SegHeader & SEGHEADER_SEGDATASIZE) >> SEGHEADERSHIFT_SEGDATASIZE))) )
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	891b      	ldrh	r3, [r3, #8]
 800bc6e:	105b      	asrs	r3, r3, #1
 800bc70:	b29b      	uxth	r3, r3
 800bc72:	43db      	mvns	r3, r3
 800bc74:	b29b      	uxth	r3, r3
 800bc76:	f003 0307 	and.w	r3, r3, #7
 800bc7a:	693a      	ldr	r2, [r7, #16]
 800bc7c:	429a      	cmp	r2, r3
 800bc7e:	d008      	beq.n	800bc92 <SdoDownloadSegmentInd+0xa2>
                          )
                        ||( ( bytesToSave > MIN_SEGMENTED_DATA )
 800bc80:	693b      	ldr	r3, [r7, #16]
 800bc82:	2b07      	cmp	r3, #7
 800bc84:	d909      	bls.n	800bc9a <SdoDownloadSegmentInd+0xaa>
                        && (bytesToSave == (mbxSize - SEGMENT_NORM_HEADER_SIZE))
 800bc86:	897b      	ldrh	r3, [r7, #10]
 800bc88:	3b03      	subs	r3, #3
 800bc8a:	461a      	mov	r2, r3
 800bc8c:	693b      	ldr	r3, [r7, #16]
 800bc8e:	4293      	cmp	r3, r2
 800bc90:	d103      	bne.n	800bc9a <SdoDownloadSegmentInd+0xaa>
                        ) )
/* ECATCHANGE_END(V5.11) ECAT7*/
                    {
                        /* length is correct */
                        bSdoSegFollows = FALSE;
 800bc92:	4b78      	ldr	r3, [pc, #480]	; (800be74 <SdoDownloadSegmentInd+0x284>)
 800bc94:	2200      	movs	r2, #0
 800bc96:	701a      	strb	r2, [r3, #0]
 800bc98:	e011      	b.n	800bcbe <SdoDownloadSegmentInd+0xce>
                    }
                    else
                        abort = ABORTIDX_PARAM_LENGTH_ERROR;
 800bc9a:	230e      	movs	r3, #14
 800bc9c:	75fb      	strb	r3, [r7, #23]
 800bc9e:	e00e      	b.n	800bcbe <SdoDownloadSegmentInd+0xce>
                }
                else
                    abort = ABORTIDX_PARAM_LENGTH_ERROR;
 800bca0:	230e      	movs	r3, #14
 800bca2:	75fb      	strb	r3, [r7, #23]
 800bca4:	e00b      	b.n	800bcbe <SdoDownloadSegmentInd+0xce>
            }
            else
            {
                /* its not the last segment */
                bSdoSegFollows = TRUE;
 800bca6:	4b73      	ldr	r3, [pc, #460]	; (800be74 <SdoDownloadSegmentInd+0x284>)
 800bca8:	2201      	movs	r2, #1
 800bcaa:	701a      	strb	r2, [r3, #0]
                /* we have to check if we expect less bytes than the maximum size which can be send with a single
                   SDO Download Segment */
                if ( bytesToSave <= maxData )
 800bcac:	89bb      	ldrh	r3, [r7, #12]
 800bcae:	693a      	ldr	r2, [r7, #16]
 800bcb0:	429a      	cmp	r2, r3
 800bcb2:	d802      	bhi.n	800bcba <SdoDownloadSegmentInd+0xca>
                    abort = ABORTIDX_PARAM_LENGTH_ERROR;
 800bcb4:	230e      	movs	r3, #14
 800bcb6:	75fb      	strb	r3, [r7, #23]
 800bcb8:	e001      	b.n	800bcbe <SdoDownloadSegmentInd+0xce>
                else
                    /* length is okay, bytesToSave contains the data size to be copied */
                    bytesToSave = maxData;
 800bcba:	89bb      	ldrh	r3, [r7, #12]
 800bcbc:	613b      	str	r3, [r7, #16]
            }

            if ( abort == 0 )
 800bcbe:	7dfb      	ldrb	r3, [r7, #23]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	f040 8100 	bne.w	800bec6 <SdoDownloadSegmentInd+0x2d6>
            {
                /* the received data is copied in the buffer */
                UINT16 i = 0;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	81fb      	strh	r3, [r7, #14]

                if ((nSdoSegBytesToHandle & 0x1) == 0x01)
 800bcca:	4b69      	ldr	r3, [pc, #420]	; (800be70 <SdoDownloadSegmentInd+0x280>)
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	f003 0301 	and.w	r3, r3, #1
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d03c      	beq.n	800bd50 <SdoDownloadSegmentInd+0x160>
                {	
                    // Data0 will be copied to an odd address of pSdoSegData, Data1 to an even address (Segment 2, 4, ...)
                    // Read Data0
                    pSdoSegData[(nSdoSegBytesToHandle >> 1)] &= ~SEGHDATA_MASK;
 800bcd6:	4b64      	ldr	r3, [pc, #400]	; (800be68 <SdoDownloadSegmentInd+0x278>)
 800bcd8:	681a      	ldr	r2, [r3, #0]
 800bcda:	4b65      	ldr	r3, [pc, #404]	; (800be70 <SdoDownloadSegmentInd+0x280>)
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	085b      	lsrs	r3, r3, #1
 800bce0:	005b      	lsls	r3, r3, #1
 800bce2:	4413      	add	r3, r2
 800bce4:	8819      	ldrh	r1, [r3, #0]
 800bce6:	4b60      	ldr	r3, [pc, #384]	; (800be68 <SdoDownloadSegmentInd+0x278>)
 800bce8:	681a      	ldr	r2, [r3, #0]
 800bcea:	4b61      	ldr	r3, [pc, #388]	; (800be70 <SdoDownloadSegmentInd+0x280>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	085b      	lsrs	r3, r3, #1
 800bcf0:	005b      	lsls	r3, r3, #1
 800bcf2:	4413      	add	r3, r2
 800bcf4:	b2ca      	uxtb	r2, r1
 800bcf6:	b292      	uxth	r2, r2
 800bcf8:	801a      	strh	r2, [r3, #0]
                    pSdoSegData[(nSdoSegBytesToHandle >> 1)] |= (pSdoInd->SdoHeader.SegHeader & SEGHDATA_MASK);
 800bcfa:	4b5b      	ldr	r3, [pc, #364]	; (800be68 <SdoDownloadSegmentInd+0x278>)
 800bcfc:	681a      	ldr	r2, [r3, #0]
 800bcfe:	4b5c      	ldr	r3, [pc, #368]	; (800be70 <SdoDownloadSegmentInd+0x280>)
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	085b      	lsrs	r3, r3, #1
 800bd04:	005b      	lsls	r3, r3, #1
 800bd06:	4413      	add	r3, r2
 800bd08:	881b      	ldrh	r3, [r3, #0]
 800bd0a:	b21a      	sxth	r2, r3
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	891b      	ldrh	r3, [r3, #8]
 800bd10:	b21b      	sxth	r3, r3
 800bd12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800bd16:	b21b      	sxth	r3, r3
 800bd18:	4313      	orrs	r3, r2
 800bd1a:	b219      	sxth	r1, r3
 800bd1c:	4b52      	ldr	r3, [pc, #328]	; (800be68 <SdoDownloadSegmentInd+0x278>)
 800bd1e:	681a      	ldr	r2, [r3, #0]
 800bd20:	4b53      	ldr	r3, [pc, #332]	; (800be70 <SdoDownloadSegmentInd+0x280>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	085b      	lsrs	r3, r3, #1
 800bd26:	005b      	lsls	r3, r3, #1
 800bd28:	4413      	add	r3, r2
 800bd2a:	b28a      	uxth	r2, r1
 800bd2c:	801a      	strh	r2, [r3, #0]
                    // Copy Data1 - DataN
                    MBXMEMCPY(&pSdoSegData[(nSdoSegBytesToHandle >> 1) + 1],pSdoInd->SdoHeader.Data, bytesToSave - 1 );
 800bd2e:	4b4e      	ldr	r3, [pc, #312]	; (800be68 <SdoDownloadSegmentInd+0x278>)
 800bd30:	681a      	ldr	r2, [r3, #0]
 800bd32:	4b4f      	ldr	r3, [pc, #316]	; (800be70 <SdoDownloadSegmentInd+0x280>)
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	085b      	lsrs	r3, r3, #1
 800bd38:	3301      	adds	r3, #1
 800bd3a:	005b      	lsls	r3, r3, #1
 800bd3c:	18d0      	adds	r0, r2, r3
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f103 010a 	add.w	r1, r3, #10
 800bd44:	693b      	ldr	r3, [r7, #16]
 800bd46:	3b01      	subs	r3, #1
 800bd48:	461a      	mov	r2, r3
 800bd4a:	f001 f87d 	bl	800ce48 <memcpy>
 800bd4e:	e03e      	b.n	800bdce <SdoDownloadSegmentInd+0x1de>
                }
                else
                {	// Data0 will be copied to an even address of pSdoSegData, Data1 to an odd address (Segment 1, 3,...)
                    // Read Data0 and Data1
                    pSdoSegData[( nSdoSegBytesToHandle >> 1)] = ((pSdoInd->SdoHeader.SegHeader >> SEGDATASHIFT) &~SEGHDATA_MASK) | ((pSdoInd->SdoHeader.Data[0] << 8) & SEGHDATA_MASK);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	891b      	ldrh	r3, [r3, #8]
 800bd54:	0a1b      	lsrs	r3, r3, #8
 800bd56:	b29b      	uxth	r3, r3
 800bd58:	b21a      	sxth	r2, r3
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	895b      	ldrh	r3, [r3, #10]
 800bd5e:	021b      	lsls	r3, r3, #8
 800bd60:	b21b      	sxth	r3, r3
 800bd62:	4313      	orrs	r3, r2
 800bd64:	b219      	sxth	r1, r3
 800bd66:	4b40      	ldr	r3, [pc, #256]	; (800be68 <SdoDownloadSegmentInd+0x278>)
 800bd68:	681a      	ldr	r2, [r3, #0]
 800bd6a:	4b41      	ldr	r3, [pc, #260]	; (800be70 <SdoDownloadSegmentInd+0x280>)
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	085b      	lsrs	r3, r3, #1
 800bd70:	005b      	lsls	r3, r3, #1
 800bd72:	4413      	add	r3, r2
 800bd74:	b28a      	uxth	r2, r1
 800bd76:	801a      	strh	r2, [r3, #0]
                    
                    // Copy Data2 - DataN
                    for (i = 1; i <((bytesToSave + 1)  >> 1); i++)
 800bd78:	2301      	movs	r3, #1
 800bd7a:	81fb      	strh	r3, [r7, #14]
 800bd7c:	e021      	b.n	800bdc2 <SdoDownloadSegmentInd+0x1d2>
                    {
                        pSdoSegData[(nSdoSegBytesToHandle >> 1) + i] = ((pSdoInd->SdoHeader.Data[i - 1] >> SEGDATASHIFT) & ~SEGHDATA_MASK) | ((pSdoInd->SdoHeader.Data[i] << 8) & SEGHDATA_MASK);
 800bd7e:	89fb      	ldrh	r3, [r7, #14]
 800bd80:	3b01      	subs	r3, #1
 800bd82:	687a      	ldr	r2, [r7, #4]
 800bd84:	3304      	adds	r3, #4
 800bd86:	005b      	lsls	r3, r3, #1
 800bd88:	4413      	add	r3, r2
 800bd8a:	885b      	ldrh	r3, [r3, #2]
 800bd8c:	0a1b      	lsrs	r3, r3, #8
 800bd8e:	b29b      	uxth	r3, r3
 800bd90:	b21a      	sxth	r2, r3
 800bd92:	89fb      	ldrh	r3, [r7, #14]
 800bd94:	6879      	ldr	r1, [r7, #4]
 800bd96:	3304      	adds	r3, #4
 800bd98:	005b      	lsls	r3, r3, #1
 800bd9a:	440b      	add	r3, r1
 800bd9c:	885b      	ldrh	r3, [r3, #2]
 800bd9e:	021b      	lsls	r3, r3, #8
 800bda0:	b21b      	sxth	r3, r3
 800bda2:	4313      	orrs	r3, r2
 800bda4:	b218      	sxth	r0, r3
 800bda6:	4b30      	ldr	r3, [pc, #192]	; (800be68 <SdoDownloadSegmentInd+0x278>)
 800bda8:	681a      	ldr	r2, [r3, #0]
 800bdaa:	4b31      	ldr	r3, [pc, #196]	; (800be70 <SdoDownloadSegmentInd+0x280>)
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	0859      	lsrs	r1, r3, #1
 800bdb0:	89fb      	ldrh	r3, [r7, #14]
 800bdb2:	440b      	add	r3, r1
 800bdb4:	005b      	lsls	r3, r3, #1
 800bdb6:	4413      	add	r3, r2
 800bdb8:	b282      	uxth	r2, r0
 800bdba:	801a      	strh	r2, [r3, #0]
                    for (i = 1; i <((bytesToSave + 1)  >> 1); i++)
 800bdbc:	89fb      	ldrh	r3, [r7, #14]
 800bdbe:	3301      	adds	r3, #1
 800bdc0:	81fb      	strh	r3, [r7, #14]
 800bdc2:	89fa      	ldrh	r2, [r7, #14]
 800bdc4:	693b      	ldr	r3, [r7, #16]
 800bdc6:	3301      	adds	r3, #1
 800bdc8:	085b      	lsrs	r3, r3, #1
 800bdca:	429a      	cmp	r2, r3
 800bdcc:	d3d7      	bcc.n	800bd7e <SdoDownloadSegmentInd+0x18e>
                            // (If bytesToSave is odd, one byte too much is copied. But, that is not a problem.)
                    }
                }

                if ( bSdoSegFollows == FALSE    )
 800bdce:	4b29      	ldr	r3, [pc, #164]	; (800be74 <SdoDownloadSegmentInd+0x284>)
 800bdd0:	781b      	ldrb	r3, [r3, #0]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d177      	bne.n	800bec6 <SdoDownloadSegmentInd+0x2d6>
                {
                    /* it was the last segment, OBJ_Write will called to make the Write-operation */
                    abort = OBJ_Write( nSdoSegIndex, nSdoSegSubindex, nSdoSegCompleteSize, pSdoSegObjEntry, (UINT16 MBXMEM *) pSdoSegData, bSdoSegAccess );
 800bdd6:	4b28      	ldr	r3, [pc, #160]	; (800be78 <SdoDownloadSegmentInd+0x288>)
 800bdd8:	8818      	ldrh	r0, [r3, #0]
 800bdda:	4b28      	ldr	r3, [pc, #160]	; (800be7c <SdoDownloadSegmentInd+0x28c>)
 800bddc:	7819      	ldrb	r1, [r3, #0]
 800bdde:	4b23      	ldr	r3, [pc, #140]	; (800be6c <SdoDownloadSegmentInd+0x27c>)
 800bde0:	681c      	ldr	r4, [r3, #0]
 800bde2:	4b27      	ldr	r3, [pc, #156]	; (800be80 <SdoDownloadSegmentInd+0x290>)
 800bde4:	681d      	ldr	r5, [r3, #0]
 800bde6:	4b20      	ldr	r3, [pc, #128]	; (800be68 <SdoDownloadSegmentInd+0x278>)
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	4a26      	ldr	r2, [pc, #152]	; (800be84 <SdoDownloadSegmentInd+0x294>)
 800bdec:	7812      	ldrb	r2, [r2, #0]
 800bdee:	9201      	str	r2, [sp, #4]
 800bdf0:	9300      	str	r3, [sp, #0]
 800bdf2:	462b      	mov	r3, r5
 800bdf4:	4622      	mov	r2, r4
 800bdf6:	f7ff fb9f 	bl	800b538 <OBJ_Write>
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	75fb      	strb	r3, [r7, #23]
                    if ( abort == ABORTIDX_WORKING )
 800bdfe:	7dfb      	ldrb	r3, [r7, #23]
 800be00:	2bff      	cmp	r3, #255	; 0xff
 800be02:	d155      	bne.n	800beb0 <SdoDownloadSegmentInd+0x2c0>
                    {
                        /* the application generates the SDO-Response later on by calling SDOS_SdoRes (only possible if object access function pointer is defined) */
                        u8PendingSdo = SDO_PENDING_SEG_WRITE;
 800be04:	4b20      	ldr	r3, [pc, #128]	; (800be88 <SdoDownloadSegmentInd+0x298>)
 800be06:	2202      	movs	r2, #2
 800be08:	701a      	strb	r2, [r3, #0]
                        bStoreCompleteAccess = bSdoSegAccess;
 800be0a:	4b1e      	ldr	r3, [pc, #120]	; (800be84 <SdoDownloadSegmentInd+0x294>)
 800be0c:	781a      	ldrb	r2, [r3, #0]
 800be0e:	4b1f      	ldr	r3, [pc, #124]	; (800be8c <SdoDownloadSegmentInd+0x29c>)
 800be10:	701a      	strb	r2, [r3, #0]
                        u8StoreSubindex = nSdoSegSubindex;
 800be12:	4b1a      	ldr	r3, [pc, #104]	; (800be7c <SdoDownloadSegmentInd+0x28c>)
 800be14:	781a      	ldrb	r2, [r3, #0]
 800be16:	4b1e      	ldr	r3, [pc, #120]	; (800be90 <SdoDownloadSegmentInd+0x2a0>)
 800be18:	701a      	strb	r2, [r3, #0]
                        u16StoreIndex = nSdoSegIndex;
 800be1a:	4b17      	ldr	r3, [pc, #92]	; (800be78 <SdoDownloadSegmentInd+0x288>)
 800be1c:	881a      	ldrh	r2, [r3, #0]
 800be1e:	4b1d      	ldr	r3, [pc, #116]	; (800be94 <SdoDownloadSegmentInd+0x2a4>)
 800be20:	801a      	strh	r2, [r3, #0]
                        u32StoreDataSize = nSdoSegCompleteSize;
 800be22:	4b12      	ldr	r3, [pc, #72]	; (800be6c <SdoDownloadSegmentInd+0x27c>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	4a1c      	ldr	r2, [pc, #112]	; (800be98 <SdoDownloadSegmentInd+0x2a8>)
 800be28:	6013      	str	r3, [r2, #0]
                        pStoreData = pSdoSegData;
 800be2a:	4b0f      	ldr	r3, [pc, #60]	; (800be68 <SdoDownloadSegmentInd+0x278>)
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	4a1b      	ldr	r2, [pc, #108]	; (800be9c <SdoDownloadSegmentInd+0x2ac>)
 800be30:	6013      	str	r3, [r2, #0]

                        pSdoPendFunc = pSdoSegObjEntry->Write;
 800be32:	4b13      	ldr	r3, [pc, #76]	; (800be80 <SdoDownloadSegmentInd+0x290>)
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	6a1b      	ldr	r3, [r3, #32]
 800be38:	4a19      	ldr	r2, [pc, #100]	; (800bea0 <SdoDownloadSegmentInd+0x2b0>)
 800be3a:	6013      	str	r3, [r2, #0]

                        bSdoInWork = TRUE;
 800be3c:	4b19      	ldr	r3, [pc, #100]	; (800bea4 <SdoDownloadSegmentInd+0x2b4>)
 800be3e:	2201      	movs	r2, #1
 800be40:	701a      	strb	r2, [r3, #0]
                        pSdoResStored = (TINITSDOMBX MBXMEM *) pSdoInd;
 800be42:	4a19      	ldr	r2, [pc, #100]	; (800bea8 <SdoDownloadSegmentInd+0x2b8>)
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	6013      	str	r3, [r2, #0]

                        bSdoSegFollows = FALSE;
 800be48:	4b0a      	ldr	r3, [pc, #40]	; (800be74 <SdoDownloadSegmentInd+0x284>)
 800be4a:	2200      	movs	r2, #0
 800be4c:	701a      	strb	r2, [r3, #0]
                        nSdoSegService    = 0;
 800be4e:	4b17      	ldr	r3, [pc, #92]	; (800beac <SdoDownloadSegmentInd+0x2bc>)
 800be50:	2200      	movs	r2, #0
 800be52:	701a      	strb	r2, [r3, #0]
                        nSdoSegBytesToHandle = 0;
 800be54:	4b06      	ldr	r3, [pc, #24]	; (800be70 <SdoDownloadSegmentInd+0x280>)
 800be56:	2200      	movs	r2, #0
 800be58:	601a      	str	r2, [r3, #0]

                        return ABORTIDX_WORKING;
 800be5a:	23ff      	movs	r3, #255	; 0xff
 800be5c:	e07a      	b.n	800bf54 <SdoDownloadSegmentInd+0x364>
 800be5e:	bf00      	nop
 800be60:	20000bd0 	.word	0x20000bd0
 800be64:	2000087a 	.word	0x2000087a
 800be68:	20000bb4 	.word	0x20000bb4
 800be6c:	20000bd4 	.word	0x20000bd4
 800be70:	20000bcc 	.word	0x20000bcc
 800be74:	20000bc6 	.word	0x20000bc6
 800be78:	20000bc8 	.word	0x20000bc8
 800be7c:	20000bca 	.word	0x20000bca
 800be80:	20000bd8 	.word	0x20000bd8
 800be84:	20000bc7 	.word	0x20000bc7
 800be88:	20000b90 	.word	0x20000b90
 800be8c:	20000b91 	.word	0x20000b91
 800be90:	20000b92 	.word	0x20000b92
 800be94:	20000b94 	.word	0x20000b94
 800be98:	20000b98 	.word	0x20000b98
 800be9c:	20000b9c 	.word	0x20000b9c
 800bea0:	20000ba0 	.word	0x20000ba0
 800bea4:	20000bc4 	.word	0x20000bc4
 800bea8:	20000bc0 	.word	0x20000bc0
 800beac:	20000bc5 	.word	0x20000bc5
                    }
                    else
                    {
                        /* the allocated buffer can be released */
                        FREEMEM( (UINT16 VARMEM *) pSdoSegData );
 800beb0:	4b2a      	ldr	r3, [pc, #168]	; (800bf5c <SdoDownloadSegmentInd+0x36c>)
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	4618      	mov	r0, r3
 800beb6:	f000 ffaf 	bl	800ce18 <free>
                        pSdoSegData = NULL;
 800beba:	4b28      	ldr	r3, [pc, #160]	; (800bf5c <SdoDownloadSegmentInd+0x36c>)
 800bebc:	2200      	movs	r2, #0
 800bebe:	601a      	str	r2, [r3, #0]
 800bec0:	e001      	b.n	800bec6 <SdoDownloadSegmentInd+0x2d6>
                }
            }
        }
        else
        {
            abort = ABORTIDX_COMMAND_SPECIFIER_UNKNOWN;
 800bec2:	2303      	movs	r3, #3
 800bec4:	75fb      	strb	r3, [r7, #23]
        }
    }

    if ( abort == 0)
 800bec6:	7dfb      	ldrb	r3, [r7, #23]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d12d      	bne.n	800bf28 <SdoDownloadSegmentInd+0x338>
    {
        /* send the SDO Download Segment response */
        pSdoInd->MbxHeader.Length = SEGMENT_NORM_RES_SIZE;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	220a      	movs	r2, #10
 800bed0:	801a      	strh	r2, [r3, #0]
        pSdoInd->CoeHeader &= ~COEHEADER_COESERVICEMASK;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	88db      	ldrh	r3, [r3, #6]
 800bed6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800beda:	b29a      	uxth	r2, r3
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	80da      	strh	r2, [r3, #6]
        pSdoInd->CoeHeader |= ((UINT16)COESERVICE_SDORESPONSE) << COEHEADER_COESERVICESHIFT;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	88db      	ldrh	r3, [r3, #6]
 800bee4:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800bee8:	b29a      	uxth	r2, r3
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	80da      	strh	r2, [r3, #6]
        /* the SDO Download Segment header depends if it was the last segment or not */
        if ( bSdoSegLastToggle )
 800beee:	4b1c      	ldr	r3, [pc, #112]	; (800bf60 <SdoDownloadSegmentInd+0x370>)
 800bef0:	781b      	ldrb	r3, [r3, #0]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d003      	beq.n	800befe <SdoDownloadSegmentInd+0x30e>
        {
           pSdoInd->SdoHeader.SegHeader        = SDOSERVICE_DOWNLOADSEGMENTRES|SEGHEADER_TOGGLE;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	2230      	movs	r2, #48	; 0x30
 800befa:	811a      	strh	r2, [r3, #8]
 800befc:	e002      	b.n	800bf04 <SdoDownloadSegmentInd+0x314>
        }
        else
           pSdoInd->SdoHeader.SegHeader        = SDOSERVICE_DOWNLOADSEGMENTRES;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	2220      	movs	r2, #32
 800bf02:	811a      	strh	r2, [r3, #8]

        if ( bSdoSegFollows == TRUE )
 800bf04:	4b17      	ldr	r3, [pc, #92]	; (800bf64 <SdoDownloadSegmentInd+0x374>)
 800bf06:	781b      	ldrb	r3, [r3, #0]
 800bf08:	2b01      	cmp	r3, #1
 800bf0a:	d106      	bne.n	800bf1a <SdoDownloadSegmentInd+0x32a>
        {
            /* segments are still expected, nSdoSegBytesToHandle contains the number of received data bytes */
            nSdoSegBytesToHandle += bytesToSave;
 800bf0c:	4b16      	ldr	r3, [pc, #88]	; (800bf68 <SdoDownloadSegmentInd+0x378>)
 800bf0e:	681a      	ldr	r2, [r3, #0]
 800bf10:	693b      	ldr	r3, [r7, #16]
 800bf12:	4413      	add	r3, r2
 800bf14:	4a14      	ldr	r2, [pc, #80]	; (800bf68 <SdoDownloadSegmentInd+0x378>)
 800bf16:	6013      	str	r3, [r2, #0]
 800bf18:	e01b      	b.n	800bf52 <SdoDownloadSegmentInd+0x362>
        }
        else
        {
            /* the last segment was received, the variables are reset */
            nSdoSegBytesToHandle = 0;
 800bf1a:	4b13      	ldr	r3, [pc, #76]	; (800bf68 <SdoDownloadSegmentInd+0x378>)
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	601a      	str	r2, [r3, #0]
            nSdoSegService    = 0;
 800bf20:	4b12      	ldr	r3, [pc, #72]	; (800bf6c <SdoDownloadSegmentInd+0x37c>)
 800bf22:	2200      	movs	r2, #0
 800bf24:	701a      	strb	r2, [r3, #0]
 800bf26:	e014      	b.n	800bf52 <SdoDownloadSegmentInd+0x362>
        }
    }
    else 
    {
        /* the Abort-Response will be sent in SDOS_SdoInd*/
        bSdoSegFollows = FALSE;
 800bf28:	4b0e      	ldr	r3, [pc, #56]	; (800bf64 <SdoDownloadSegmentInd+0x374>)
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	701a      	strb	r2, [r3, #0]
        nSdoSegService    = 0;
 800bf2e:	4b0f      	ldr	r3, [pc, #60]	; (800bf6c <SdoDownloadSegmentInd+0x37c>)
 800bf30:	2200      	movs	r2, #0
 800bf32:	701a      	strb	r2, [r3, #0]
        if (pSdoSegData)
 800bf34:	4b09      	ldr	r3, [pc, #36]	; (800bf5c <SdoDownloadSegmentInd+0x36c>)
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d007      	beq.n	800bf4c <SdoDownloadSegmentInd+0x35c>
        {
            /* the memory has to be released if it is not released before.
            In case of AbortIdx_Working the buffer will be freed in SDOS_SdoRes*/
            FREEMEM( (UINT16 VARMEM *) pSdoSegData );
 800bf3c:	4b07      	ldr	r3, [pc, #28]	; (800bf5c <SdoDownloadSegmentInd+0x36c>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	4618      	mov	r0, r3
 800bf42:	f000 ff69 	bl	800ce18 <free>
            pSdoSegData = NULL;
 800bf46:	4b05      	ldr	r3, [pc, #20]	; (800bf5c <SdoDownloadSegmentInd+0x36c>)
 800bf48:	2200      	movs	r2, #0
 800bf4a:	601a      	str	r2, [r3, #0]
        }

        nSdoSegBytesToHandle = 0;
 800bf4c:	4b06      	ldr	r3, [pc, #24]	; (800bf68 <SdoDownloadSegmentInd+0x378>)
 800bf4e:	2200      	movs	r2, #0
 800bf50:	601a      	str	r2, [r3, #0]
    }

    return abort;
 800bf52:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf54:	4618      	mov	r0, r3
 800bf56:	3718      	adds	r7, #24
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	bdb0      	pop	{r4, r5, r7, pc}
 800bf5c:	20000bb4 	.word	0x20000bb4
 800bf60:	20000bd0 	.word	0x20000bd0
 800bf64:	20000bc6 	.word	0x20000bc6
 800bf68:	20000bcc 	.word	0x20000bcc
 800bf6c:	20000bc5 	.word	0x20000bc5

0800bf70 <SdoUploadSegmentInd>:
            is received from the master. It prepares and operates the
            response and sends it by itself.
*////////////////////////////////////////////////////////////////////////////////////////

static UINT8 SdoUploadSegmentInd( TUPLOADSDOSEGREQMBX MBXMEM * pSdoInd )
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b088      	sub	sp, #32
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
    UINT8 abort = 0;
 800bf78:	2300      	movs	r3, #0
 800bf7a:	77fb      	strb	r3, [r7, #31]
    TUPLOADSDOSEGRESMBX MBXMEM * pSdoSegRes = (TUPLOADSDOSEGRESMBX MBXMEM *)pSdoInd;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	613b      	str	r3, [r7, #16]

   if ( (pSdoInd->SegHeader & SEGHEADER_TOGGLE) == bSdoSegLastToggle )
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	7a1b      	ldrb	r3, [r3, #8]
 800bf84:	f003 0310 	and.w	r3, r3, #16
 800bf88:	4a84      	ldr	r2, [pc, #528]	; (800c19c <SdoUploadSegmentInd+0x22c>)
 800bf8a:	7812      	ldrb	r2, [r2, #0]
 800bf8c:	4293      	cmp	r3, r2
 800bf8e:	d102      	bne.n	800bf96 <SdoUploadSegmentInd+0x26>
    {
        /* toggle bit has not toggled... */
        abort = ABORTIDX_TOGGLE_BIT_NOT_CHANGED;
 800bf90:	2301      	movs	r3, #1
 800bf92:	77fb      	strb	r3, [r7, #31]
 800bf94:	e0fc      	b.n	800c190 <SdoUploadSegmentInd+0x220>
    }
    else
    {
        /* maxData contains the maximum data to be sent with a SDO-Upload Segment response */
         
        UINT32 size = 0;
 800bf96:	2300      	movs	r3, #0
 800bf98:	61bb      	str	r3, [r7, #24]
        UINT16 maxData;
        {
            maxData =    u16SendMbxSize - MBX_HEADER_SIZE - SEGMENT_NORM_HEADER_SIZE;
 800bf9a:	4b81      	ldr	r3, [pc, #516]	; (800c1a0 <SdoUploadSegmentInd+0x230>)
 800bf9c:	881b      	ldrh	r3, [r3, #0]
 800bf9e:	3b09      	subs	r3, #9
 800bfa0:	81fb      	strh	r3, [r7, #14]
        }

        /* the new toggle bit is stored in bSdoSegLastToggle */
        bSdoSegLastToggle = pSdoInd->SegHeader & SEGHEADER_TOGGLE;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	7a1b      	ldrb	r3, [r3, #8]
 800bfa6:	f003 0310 	and.w	r3, r3, #16
 800bfaa:	b2da      	uxtb	r2, r3
 800bfac:	4b7b      	ldr	r3, [pc, #492]	; (800c19c <SdoUploadSegmentInd+0x22c>)
 800bfae:	701a      	strb	r2, [r3, #0]

        if ( nSdoSegCompleteSize < (nSdoSegBytesToHandle + maxData) )
 800bfb0:	89fa      	ldrh	r2, [r7, #14]
 800bfb2:	4b7c      	ldr	r3, [pc, #496]	; (800c1a4 <SdoUploadSegmentInd+0x234>)
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	441a      	add	r2, r3
 800bfb8:	4b7b      	ldr	r3, [pc, #492]	; (800c1a8 <SdoUploadSegmentInd+0x238>)
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	429a      	cmp	r2, r3
 800bfbe:	d909      	bls.n	800bfd4 <SdoUploadSegmentInd+0x64>
        {
            /* the remaining data can be send with one SDO Upload Segment response,
               size contains the data to be copied */
            size = nSdoSegCompleteSize - nSdoSegBytesToHandle;
 800bfc0:	4b79      	ldr	r3, [pc, #484]	; (800c1a8 <SdoUploadSegmentInd+0x238>)
 800bfc2:	681a      	ldr	r2, [r3, #0]
 800bfc4:	4b77      	ldr	r3, [pc, #476]	; (800c1a4 <SdoUploadSegmentInd+0x234>)
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	1ad3      	subs	r3, r2, r3
 800bfca:	61bb      	str	r3, [r7, #24]
            bSdoSegFollows = FALSE;
 800bfcc:	4b77      	ldr	r3, [pc, #476]	; (800c1ac <SdoUploadSegmentInd+0x23c>)
 800bfce:	2200      	movs	r2, #0
 800bfd0:	701a      	strb	r2, [r3, #0]
 800bfd2:	e004      	b.n	800bfde <SdoUploadSegmentInd+0x6e>
        }
        else
        {
            /* more data will follow, size contains the data to be copied */
            size = maxData;
 800bfd4:	89fb      	ldrh	r3, [r7, #14]
 800bfd6:	61bb      	str	r3, [r7, #24]
            bSdoSegFollows = TRUE;
 800bfd8:	4b74      	ldr	r3, [pc, #464]	; (800c1ac <SdoUploadSegmentInd+0x23c>)
 800bfda:	2201      	movs	r2, #1
 800bfdc:	701a      	strb	r2, [r3, #0]
        }

        /* copy the object data in the SDO Upload segment response */
        // Clear Data0
        pSdoSegRes->SdoHeader.SegHeader &= ~SEGHDATA_MASK;
 800bfde:	693b      	ldr	r3, [r7, #16]
 800bfe0:	891b      	ldrh	r3, [r3, #8]
 800bfe2:	b2db      	uxtb	r3, r3
 800bfe4:	b29a      	uxth	r2, r3
 800bfe6:	693b      	ldr	r3, [r7, #16]
 800bfe8:	811a      	strh	r2, [r3, #8]
        if ((nSdoSegBytesToHandle & 0x1) == 0x01)
 800bfea:	4b6e      	ldr	r3, [pc, #440]	; (800c1a4 <SdoUploadSegmentInd+0x234>)
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	f003 0301 	and.w	r3, r3, #1
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d024      	beq.n	800c040 <SdoUploadSegmentInd+0xd0>
        {	// Data starts at odd byte number (Segment 2, 4,...): Data0 is at high byte, Data1 lies at an even address
            // Write Data0
            pSdoSegRes->SdoHeader.SegHeader |= (pSdoSegData[(nSdoSegBytesToHandle >> 1)] & SEGHDATA_MASK);
 800bff6:	693b      	ldr	r3, [r7, #16]
 800bff8:	891b      	ldrh	r3, [r3, #8]
 800bffa:	b21a      	sxth	r2, r3
 800bffc:	4b6c      	ldr	r3, [pc, #432]	; (800c1b0 <SdoUploadSegmentInd+0x240>)
 800bffe:	6819      	ldr	r1, [r3, #0]
 800c000:	4b68      	ldr	r3, [pc, #416]	; (800c1a4 <SdoUploadSegmentInd+0x234>)
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	085b      	lsrs	r3, r3, #1
 800c006:	005b      	lsls	r3, r3, #1
 800c008:	440b      	add	r3, r1
 800c00a:	881b      	ldrh	r3, [r3, #0]
 800c00c:	b21b      	sxth	r3, r3
 800c00e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c012:	b21b      	sxth	r3, r3
 800c014:	4313      	orrs	r3, r2
 800c016:	b21b      	sxth	r3, r3
 800c018:	b29a      	uxth	r2, r3
 800c01a:	693b      	ldr	r3, [r7, #16]
 800c01c:	811a      	strh	r2, [r3, #8]
            // Copy Data1 - DataN
            MBXMEMCPY( pSdoSegRes->SdoHeader.Data, &pSdoSegData[(nSdoSegBytesToHandle >> 1) + 1], size - 1);
 800c01e:	693b      	ldr	r3, [r7, #16]
 800c020:	f103 000a 	add.w	r0, r3, #10
 800c024:	4b62      	ldr	r3, [pc, #392]	; (800c1b0 <SdoUploadSegmentInd+0x240>)
 800c026:	681a      	ldr	r2, [r3, #0]
 800c028:	4b5e      	ldr	r3, [pc, #376]	; (800c1a4 <SdoUploadSegmentInd+0x234>)
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	085b      	lsrs	r3, r3, #1
 800c02e:	3301      	adds	r3, #1
 800c030:	005b      	lsls	r3, r3, #1
 800c032:	18d1      	adds	r1, r2, r3
 800c034:	69bb      	ldr	r3, [r7, #24]
 800c036:	3b01      	subs	r3, #1
 800c038:	461a      	mov	r2, r3
 800c03a:	f000 ff05 	bl	800ce48 <memcpy>
 800c03e:	e045      	b.n	800c0cc <SdoUploadSegmentInd+0x15c>
        }
        else
        {	
            UINT16 i = 0;
 800c040:	2300      	movs	r3, #0
 800c042:	82fb      	strh	r3, [r7, #22]
            UINT32 nIndexOffset = nSdoSegBytesToHandle >> 1;
 800c044:	4b57      	ldr	r3, [pc, #348]	; (800c1a4 <SdoUploadSegmentInd+0x234>)
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	085b      	lsrs	r3, r3, #1
 800c04a:	60bb      	str	r3, [r7, #8]
            // Data starts at even byte number (Segment 1,3, ...): Data0 is at low byte, Data1 lies at an odd address
            // Write Data0
            pSdoSegRes->SdoHeader.SegHeader |= ((pSdoSegData[(nSdoSegBytesToHandle >> 1)] << SEGDATASHIFT) & SEGHDATA_MASK);
 800c04c:	693b      	ldr	r3, [r7, #16]
 800c04e:	891b      	ldrh	r3, [r3, #8]
 800c050:	b21a      	sxth	r2, r3
 800c052:	4b57      	ldr	r3, [pc, #348]	; (800c1b0 <SdoUploadSegmentInd+0x240>)
 800c054:	6819      	ldr	r1, [r3, #0]
 800c056:	4b53      	ldr	r3, [pc, #332]	; (800c1a4 <SdoUploadSegmentInd+0x234>)
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	085b      	lsrs	r3, r3, #1
 800c05c:	005b      	lsls	r3, r3, #1
 800c05e:	440b      	add	r3, r1
 800c060:	881b      	ldrh	r3, [r3, #0]
 800c062:	021b      	lsls	r3, r3, #8
 800c064:	b21b      	sxth	r3, r3
 800c066:	4313      	orrs	r3, r2
 800c068:	b21b      	sxth	r3, r3
 800c06a:	b29a      	uxth	r2, r3
 800c06c:	693b      	ldr	r3, [r7, #16]
 800c06e:	811a      	strh	r2, [r3, #8]
            // Copy Data1 - DataN
            
            for (i = 0; i < (size >> 1);i++)
 800c070:	2300      	movs	r3, #0
 800c072:	82fb      	strh	r3, [r7, #22]
 800c074:	e025      	b.n	800c0c2 <SdoUploadSegmentInd+0x152>
            {
                pSdoSegRes->SdoHeader.Data[i] = ((pSdoSegData[i + nIndexOffset] & SEGHDATA_MASK) >> 8) | ((pSdoSegData[i + nIndexOffset + 1] & ~SEGHDATA_MASK) << 8);
 800c076:	4b4e      	ldr	r3, [pc, #312]	; (800c1b0 <SdoUploadSegmentInd+0x240>)
 800c078:	681a      	ldr	r2, [r3, #0]
 800c07a:	8af9      	ldrh	r1, [r7, #22]
 800c07c:	68bb      	ldr	r3, [r7, #8]
 800c07e:	440b      	add	r3, r1
 800c080:	005b      	lsls	r3, r3, #1
 800c082:	4413      	add	r3, r2
 800c084:	881b      	ldrh	r3, [r3, #0]
 800c086:	0a1b      	lsrs	r3, r3, #8
 800c088:	b29b      	uxth	r3, r3
 800c08a:	b21a      	sxth	r2, r3
 800c08c:	4b48      	ldr	r3, [pc, #288]	; (800c1b0 <SdoUploadSegmentInd+0x240>)
 800c08e:	6819      	ldr	r1, [r3, #0]
 800c090:	8af8      	ldrh	r0, [r7, #22]
 800c092:	68bb      	ldr	r3, [r7, #8]
 800c094:	4403      	add	r3, r0
 800c096:	3301      	adds	r3, #1
 800c098:	005b      	lsls	r3, r3, #1
 800c09a:	440b      	add	r3, r1
 800c09c:	881b      	ldrh	r3, [r3, #0]
 800c09e:	021b      	lsls	r3, r3, #8
 800c0a0:	b21b      	sxth	r3, r3
 800c0a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c0a6:	b21b      	sxth	r3, r3
 800c0a8:	4313      	orrs	r3, r2
 800c0aa:	b21a      	sxth	r2, r3
 800c0ac:	8afb      	ldrh	r3, [r7, #22]
 800c0ae:	b291      	uxth	r1, r2
 800c0b0:	693a      	ldr	r2, [r7, #16]
 800c0b2:	3304      	adds	r3, #4
 800c0b4:	005b      	lsls	r3, r3, #1
 800c0b6:	4413      	add	r3, r2
 800c0b8:	460a      	mov	r2, r1
 800c0ba:	805a      	strh	r2, [r3, #2]
            for (i = 0; i < (size >> 1);i++)
 800c0bc:	8afb      	ldrh	r3, [r7, #22]
 800c0be:	3301      	adds	r3, #1
 800c0c0:	82fb      	strh	r3, [r7, #22]
 800c0c2:	8afa      	ldrh	r2, [r7, #22]
 800c0c4:	69bb      	ldr	r3, [r7, #24]
 800c0c6:	085b      	lsrs	r3, r3, #1
 800c0c8:	429a      	cmp	r2, r3
 800c0ca:	d3d4      	bcc.n	800c076 <SdoUploadSegmentInd+0x106>
                    // (If size is even, one byte too much is copied. But, that is not a problem.)
            }
        }
        
        /* the SDO Upload Segment header depends if there is still data to be sent */
        pSdoSegRes->CoeHeader &= ~COEHEADER_COESERVICEMASK;
 800c0cc:	693b      	ldr	r3, [r7, #16]
 800c0ce:	88db      	ldrh	r3, [r3, #6]
 800c0d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c0d4:	b29a      	uxth	r2, r3
 800c0d6:	693b      	ldr	r3, [r7, #16]
 800c0d8:	80da      	strh	r2, [r3, #6]
        pSdoSegRes->CoeHeader |= ((UINT16)COESERVICE_SDORESPONSE) << COEHEADER_COESERVICESHIFT;
 800c0da:	693b      	ldr	r3, [r7, #16]
 800c0dc:	88db      	ldrh	r3, [r3, #6]
 800c0de:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800c0e2:	b29a      	uxth	r2, r3
 800c0e4:	693b      	ldr	r3, [r7, #16]
 800c0e6:	80da      	strh	r2, [r3, #6]

        /*Clear SDO header*/
        pSdoSegRes->SdoHeader.SegHeader &= ~SEGHEADER_MASK;
 800c0e8:	693b      	ldr	r3, [r7, #16]
 800c0ea:	891b      	ldrh	r3, [r3, #8]
 800c0ec:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c0f0:	b29a      	uxth	r2, r3
 800c0f2:	693b      	ldr	r3, [r7, #16]
 800c0f4:	811a      	strh	r2, [r3, #8]
        if (bSdoSegFollows)
 800c0f6:	4b2d      	ldr	r3, [pc, #180]	; (800c1ac <SdoUploadSegmentInd+0x23c>)
 800c0f8:	781b      	ldrb	r3, [r3, #0]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d009      	beq.n	800c112 <SdoUploadSegmentInd+0x1a2>
            pSdoSegRes->SdoHeader.SegHeader        |= SDOSERVICE_UPLOADSEGMENTRES | bSdoSegLastToggle;
 800c0fe:	693b      	ldr	r3, [r7, #16]
 800c100:	891a      	ldrh	r2, [r3, #8]
 800c102:	4b26      	ldr	r3, [pc, #152]	; (800c19c <SdoUploadSegmentInd+0x22c>)
 800c104:	781b      	ldrb	r3, [r3, #0]
 800c106:	b29b      	uxth	r3, r3
 800c108:	4313      	orrs	r3, r2
 800c10a:	b29a      	uxth	r2, r3
 800c10c:	693b      	ldr	r3, [r7, #16]
 800c10e:	811a      	strh	r2, [r3, #8]
 800c110:	e00b      	b.n	800c12a <SdoUploadSegmentInd+0x1ba>
        else
            pSdoSegRes->SdoHeader.SegHeader        |= SDOSERVICE_UPLOADSEGMENTRES | bSdoSegLastToggle | SEGHEADER_NOMOREFOLLOWS;
 800c112:	693b      	ldr	r3, [r7, #16]
 800c114:	891a      	ldrh	r2, [r3, #8]
 800c116:	4b21      	ldr	r3, [pc, #132]	; (800c19c <SdoUploadSegmentInd+0x22c>)
 800c118:	781b      	ldrb	r3, [r3, #0]
 800c11a:	f043 0301 	orr.w	r3, r3, #1
 800c11e:	b2db      	uxtb	r3, r3
 800c120:	b29b      	uxth	r3, r3
 800c122:	4313      	orrs	r3, r2
 800c124:	b29a      	uxth	r2, r3
 800c126:	693b      	ldr	r3, [r7, #16]
 800c128:	811a      	strh	r2, [r3, #8]

        // operate CAN specific flag segDataSize:
        /* HBu 06.02.06: the sizes were wrong */
        if ( size < MIN_SEGMENTED_DATA )
 800c12a:	69bb      	ldr	r3, [r7, #24]
 800c12c:	2b06      	cmp	r3, #6
 800c12e:	d810      	bhi.n	800c152 <SdoUploadSegmentInd+0x1e2>
        {
            // at least    MIN_SEGMENTED_DATA bytes have to be send:
            pSdoSegRes->MbxHeader.Length = SEGMENT_NORM_RES_SIZE;
 800c130:	693b      	ldr	r3, [r7, #16]
 800c132:	220a      	movs	r2, #10
 800c134:	801a      	strh	r2, [r3, #0]
            pSdoSegRes->SdoHeader.SegHeader    |= (MIN_SEGMENTED_DATA - size) << SEGHEADERSHIFT_SEGDATASIZE;
 800c136:	693b      	ldr	r3, [r7, #16]
 800c138:	891a      	ldrh	r2, [r3, #8]
 800c13a:	69bb      	ldr	r3, [r7, #24]
 800c13c:	b29b      	uxth	r3, r3
 800c13e:	f1c3 0307 	rsb	r3, r3, #7
 800c142:	b29b      	uxth	r3, r3
 800c144:	005b      	lsls	r3, r3, #1
 800c146:	b29b      	uxth	r3, r3
 800c148:	4313      	orrs	r3, r2
 800c14a:	b29a      	uxth	r2, r3
 800c14c:	693b      	ldr	r3, [r7, #16]
 800c14e:	811a      	strh	r2, [r3, #8]
 800c150:	e005      	b.n	800c15e <SdoUploadSegmentInd+0x1ee>
        }
        else
        {
            pSdoSegRes->MbxHeader.Length         = ((UINT16) size) + SEGMENT_NORM_HEADER_SIZE;
 800c152:	69bb      	ldr	r3, [r7, #24]
 800c154:	b29b      	uxth	r3, r3
 800c156:	3303      	adds	r3, #3
 800c158:	b29a      	uxth	r2, r3
 800c15a:	693b      	ldr	r3, [r7, #16]
 800c15c:	801a      	strh	r2, [r3, #0]
        }

        if ( bSdoSegFollows == TRUE )
 800c15e:	4b13      	ldr	r3, [pc, #76]	; (800c1ac <SdoUploadSegmentInd+0x23c>)
 800c160:	781b      	ldrb	r3, [r3, #0]
 800c162:	2b01      	cmp	r3, #1
 800c164:	d106      	bne.n	800c174 <SdoUploadSegmentInd+0x204>
            // updating the value of send bytes:
            nSdoSegBytesToHandle += size;
 800c166:	4b0f      	ldr	r3, [pc, #60]	; (800c1a4 <SdoUploadSegmentInd+0x234>)
 800c168:	681a      	ldr	r2, [r3, #0]
 800c16a:	69bb      	ldr	r3, [r7, #24]
 800c16c:	4413      	add	r3, r2
 800c16e:	4a0d      	ldr	r2, [pc, #52]	; (800c1a4 <SdoUploadSegmentInd+0x234>)
 800c170:	6013      	str	r3, [r2, #0]
 800c172:	e00d      	b.n	800c190 <SdoUploadSegmentInd+0x220>
        else
        {
            FREEMEM( (UINT16 VARMEM *) pSdoSegData );
 800c174:	4b0e      	ldr	r3, [pc, #56]	; (800c1b0 <SdoUploadSegmentInd+0x240>)
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	4618      	mov	r0, r3
 800c17a:	f000 fe4d 	bl	800ce18 <free>
            pSdoSegData = NULL;
 800c17e:	4b0c      	ldr	r3, [pc, #48]	; (800c1b0 <SdoUploadSegmentInd+0x240>)
 800c180:	2200      	movs	r2, #0
 800c182:	601a      	str	r2, [r3, #0]
            nSdoSegBytesToHandle = 0;
 800c184:	4b07      	ldr	r3, [pc, #28]	; (800c1a4 <SdoUploadSegmentInd+0x234>)
 800c186:	2200      	movs	r2, #0
 800c188:	601a      	str	r2, [r3, #0]
            nSdoSegService    = 0;
 800c18a:	4b0a      	ldr	r3, [pc, #40]	; (800c1b4 <SdoUploadSegmentInd+0x244>)
 800c18c:	2200      	movs	r2, #0
 800c18e:	701a      	strb	r2, [r3, #0]
        }
    }

    return abort;
 800c190:	7ffb      	ldrb	r3, [r7, #31]
}
 800c192:	4618      	mov	r0, r3
 800c194:	3720      	adds	r7, #32
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}
 800c19a:	bf00      	nop
 800c19c:	20000bd0 	.word	0x20000bd0
 800c1a0:	20000878 	.word	0x20000878
 800c1a4:	20000bcc 	.word	0x20000bcc
 800c1a8:	20000bd4 	.word	0x20000bd4
 800c1ac:	20000bc6 	.word	0x20000bc6
 800c1b0:	20000bb4 	.word	0x20000bb4
 800c1b4:	20000bc5 	.word	0x20000bc5

0800c1b8 <SdoRes>:

 \brief    This function is called when a SDO response shall be sent
*////////////////////////////////////////////////////////////////////////////////////////

void SdoRes(UINT8 abort, UINT8 command, UINT8 completeAccess, UINT16 dataSize, UINT32 objLength, TINITSDOMBX MBXMEM *pSdoRes)
{
 800c1b8:	b590      	push	{r4, r7, lr}
 800c1ba:	b083      	sub	sp, #12
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	4604      	mov	r4, r0
 800c1c0:	4608      	mov	r0, r1
 800c1c2:	4611      	mov	r1, r2
 800c1c4:	461a      	mov	r2, r3
 800c1c6:	4623      	mov	r3, r4
 800c1c8:	71fb      	strb	r3, [r7, #7]
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	71bb      	strb	r3, [r7, #6]
 800c1ce:	460b      	mov	r3, r1
 800c1d0:	717b      	strb	r3, [r7, #5]
 800c1d2:	4613      	mov	r3, r2
 800c1d4:	807b      	strh	r3, [r7, #2]
    /* for an upload segment response the toggle bit was overwritten */
    if ((command != SDOSERVICE_UPLOADSEGMENTREQ) && (command != SDOSERVICE_DOWNLOADSEGMENTREQ))
 800c1d6:	79bb      	ldrb	r3, [r7, #6]
 800c1d8:	2b60      	cmp	r3, #96	; 0x60
 800c1da:	d009      	beq.n	800c1f0 <SdoRes+0x38>
 800c1dc:	79bb      	ldrb	r3, [r7, #6]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d006      	beq.n	800c1f0 <SdoRes+0x38>
    {
        pSdoRes->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] &= 0xFF00;
 800c1e2:	69fb      	ldr	r3, [r7, #28]
 800c1e4:	891b      	ldrh	r3, [r3, #8]
 800c1e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c1ea:	b29a      	uxth	r2, r3
 800c1ec:	69fb      	ldr	r3, [r7, #28]
 800c1ee:	811a      	strh	r2, [r3, #8]
    }
    if ( abort == 0 )
 800c1f0:	79fb      	ldrb	r3, [r7, #7]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d172      	bne.n	800c2dc <SdoRes+0x124>
    {
        /* SDO-Download or SDO-Upload was successful, generate the SDO- and CoE-Header */
        pSdoRes->CoeHeader &= ~COEHEADER_COESERVICEMASK;
 800c1f6:	69fb      	ldr	r3, [r7, #28]
 800c1f8:	88db      	ldrh	r3, [r3, #6]
 800c1fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c1fe:	b29a      	uxth	r2, r3
 800c200:	69fb      	ldr	r3, [r7, #28]
 800c202:	80da      	strh	r2, [r3, #6]
        pSdoRes->CoeHeader |= ((UINT16)COESERVICE_SDORESPONSE) << COEHEADER_COESERVICESHIFT;
 800c204:	69fb      	ldr	r3, [r7, #28]
 800c206:	88db      	ldrh	r3, [r3, #6]
 800c208:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800c20c:	b29a      	uxth	r2, r3
 800c20e:	69fb      	ldr	r3, [r7, #28]
 800c210:	80da      	strh	r2, [r3, #6]
        if ( command == SDOSERVICE_INITIATEUPLOADREQ )
 800c212:	79bb      	ldrb	r3, [r7, #6]
 800c214:	2b40      	cmp	r3, #64	; 0x40
 800c216:	d145      	bne.n	800c2a4 <SdoRes+0xec>
        {
            // HBu 06.02.06: Complete Access Bit in the SDO-Upload-Response too */
            if ( (objLength <= 4) && (objLength > 0) )
 800c218:	69bb      	ldr	r3, [r7, #24]
 800c21a:	2b04      	cmp	r3, #4
 800c21c:	d81d      	bhi.n	800c25a <SdoRes+0xa2>
 800c21e:	69bb      	ldr	r3, [r7, #24]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d01a      	beq.n	800c25a <SdoRes+0xa2>
            {
                /* Expedited Upload Response */
                pSdoRes->MbxHeader.Length             =         EXPEDITED_FRAME_SIZE;
 800c224:	69fb      	ldr	r3, [r7, #28]
 800c226:	220a      	movs	r2, #10
 800c228:	801a      	strh	r2, [r3, #0]
                pSdoRes->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET]    |=     SDOHEADER_SIZEINDICATOR     |
 800c22a:	69fb      	ldr	r3, [r7, #28]
 800c22c:	891a      	ldrh	r2, [r3, #8]
                                                                                        SDOHEADER_TRANSFERTYPE        |
                                                                                        completeAccess |
 800c22e:	797b      	ldrb	r3, [r7, #5]
 800c230:	f043 0303 	orr.w	r3, r3, #3
 800c234:	b2db      	uxtb	r3, r3
 800c236:	b219      	sxth	r1, r3
                                                                                        ((MAX_EXPEDITED_DATA - ((UINT8)objLength)) << SDOHEADERSHIFT_DATASETSIZE) |
 800c238:	69bb      	ldr	r3, [r7, #24]
 800c23a:	b2db      	uxtb	r3, r3
 800c23c:	f1c3 0304 	rsb	r3, r3, #4
 800c240:	009b      	lsls	r3, r3, #2
                                                                                        completeAccess |
 800c242:	b21b      	sxth	r3, r3
 800c244:	430b      	orrs	r3, r1
 800c246:	b21b      	sxth	r3, r3
                pSdoRes->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET]    |=     SDOHEADER_SIZEINDICATOR     |
 800c248:	b29b      	uxth	r3, r3
 800c24a:	4313      	orrs	r3, r2
 800c24c:	b29b      	uxth	r3, r3
 800c24e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c252:	b29a      	uxth	r2, r3
 800c254:	69fb      	ldr	r3, [r7, #28]
 800c256:	811a      	strh	r2, [r3, #8]
 800c258:	e05a      	b.n	800c310 <SdoRes+0x158>
                                                                                        SDOSERVICE_INITIATEUPLOADRES;
            }
            else
            {
                /* Normal or Segmented Upload Response */
                if (dataSize <  objLength)
 800c25a:	887b      	ldrh	r3, [r7, #2]
 800c25c:	69ba      	ldr	r2, [r7, #24]
 800c25e:	429a      	cmp	r2, r3
 800c260:	d905      	bls.n	800c26e <SdoRes+0xb6>
                {
                    pSdoRes->MbxHeader.Length         =         UPLOAD_NORM_RES_SIZE+dataSize;
 800c262:	887b      	ldrh	r3, [r7, #2]
 800c264:	330a      	adds	r3, #10
 800c266:	b29a      	uxth	r2, r3
 800c268:	69fb      	ldr	r3, [r7, #28]
 800c26a:	801a      	strh	r2, [r3, #0]
 800c26c:	e005      	b.n	800c27a <SdoRes+0xc2>
                }
                else
                {
                    pSdoRes->MbxHeader.Length         =         UPLOAD_NORM_RES_SIZE+((UINT16)objLength);
 800c26e:	69bb      	ldr	r3, [r7, #24]
 800c270:	b29b      	uxth	r3, r3
 800c272:	330a      	adds	r3, #10
 800c274:	b29a      	uxth	r2, r3
 800c276:	69fb      	ldr	r3, [r7, #28]
 800c278:	801a      	strh	r2, [r3, #0]
                }
                   ((TINITSDOUPLOADNORMRESMBX MBXMEM *) pSdoRes)->CompleteSize[0] = SWAPWORD((UINT16)objLength);
 800c27a:	69bb      	ldr	r3, [r7, #24]
 800c27c:	b29a      	uxth	r2, r3
 800c27e:	69fb      	ldr	r3, [r7, #28]
 800c280:	819a      	strh	r2, [r3, #12]
                   ((TINITSDOUPLOADNORMRESMBX MBXMEM *) pSdoRes)->CompleteSize[1] = SWAPWORD((UINT16)(objLength>>16));
 800c282:	69bb      	ldr	r3, [r7, #24]
 800c284:	0c1b      	lsrs	r3, r3, #16
 800c286:	b29a      	uxth	r2, r3
 800c288:	69fb      	ldr	r3, [r7, #28]
 800c28a:	81da      	strh	r2, [r3, #14]
                pSdoRes->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET]    |=     SDOHEADER_SIZEINDICATOR     |
 800c28c:	69fb      	ldr	r3, [r7, #28]
 800c28e:	891a      	ldrh	r2, [r3, #8]
 800c290:	797b      	ldrb	r3, [r7, #5]
 800c292:	f043 0341 	orr.w	r3, r3, #65	; 0x41
 800c296:	b2db      	uxtb	r3, r3
 800c298:	b29b      	uxth	r3, r3
 800c29a:	4313      	orrs	r3, r2
 800c29c:	b29a      	uxth	r2, r3
 800c29e:	69fb      	ldr	r3, [r7, #28]
 800c2a0:	811a      	strh	r2, [r3, #8]
 800c2a2:	e035      	b.n	800c310 <SdoRes+0x158>
                                                                                        completeAccess |
                                                                                        SDOSERVICE_INITIATEUPLOADRES;
            }
        }
        /* for a segmented response the command was wrong in the response */
        else if ( command == SDOSERVICE_DOWNLOADSEGMENTREQ )
 800c2a4:	79bb      	ldrb	r3, [r7, #6]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d10a      	bne.n	800c2c0 <SdoRes+0x108>
        {
            /* Download segmented response */
            pSdoRes->MbxHeader.Length         = DOWNLOAD_NORM_RES_SIZE;
 800c2aa:	69fb      	ldr	r3, [r7, #28]
 800c2ac:	220a      	movs	r2, #10
 800c2ae:	801a      	strh	r2, [r3, #0]
            pSdoRes->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET]    |= SDOSERVICE_DOWNLOADSEGMENTRES;
 800c2b0:	69fb      	ldr	r3, [r7, #28]
 800c2b2:	891b      	ldrh	r3, [r3, #8]
 800c2b4:	f043 0320 	orr.w	r3, r3, #32
 800c2b8:	b29a      	uxth	r2, r3
 800c2ba:	69fb      	ldr	r3, [r7, #28]
 800c2bc:	811a      	strh	r2, [r3, #8]
 800c2be:	e027      	b.n	800c310 <SdoRes+0x158>
      }
        else if ( command != SDOSERVICE_UPLOADSEGMENTREQ )
 800c2c0:	79bb      	ldrb	r3, [r7, #6]
 800c2c2:	2b60      	cmp	r3, #96	; 0x60
 800c2c4:	d024      	beq.n	800c310 <SdoRes+0x158>
        {
            /* Download response */
            pSdoRes->MbxHeader.Length         = DOWNLOAD_NORM_RES_SIZE;
 800c2c6:	69fb      	ldr	r3, [r7, #28]
 800c2c8:	220a      	movs	r2, #10
 800c2ca:	801a      	strh	r2, [r3, #0]
            pSdoRes->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET]    |= SDOSERVICE_INITIATEDOWNLOADRES;
 800c2cc:	69fb      	ldr	r3, [r7, #28]
 800c2ce:	891b      	ldrh	r3, [r3, #8]
 800c2d0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800c2d4:	b29a      	uxth	r2, r3
 800c2d6:	69fb      	ldr	r3, [r7, #28]
 800c2d8:	811a      	strh	r2, [r3, #8]
 800c2da:	e019      	b.n	800c310 <SdoRes+0x158>
        }
    }
    else
    {
        /* generate a SDO-Abort-Request */
        pSdoRes->MbxHeader.Length         = ABORT_NORM_RES_SIZE;
 800c2dc:	69fb      	ldr	r3, [r7, #28]
 800c2de:	220a      	movs	r2, #10
 800c2e0:	801a      	strh	r2, [r3, #0]
        pSdoRes->CoeHeader &= ~COEHEADER_COESERVICEMASK;
 800c2e2:	69fb      	ldr	r3, [r7, #28]
 800c2e4:	88db      	ldrh	r3, [r3, #6]
 800c2e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c2ea:	b29a      	uxth	r2, r3
 800c2ec:	69fb      	ldr	r3, [r7, #28]
 800c2ee:	80da      	strh	r2, [r3, #6]
        pSdoRes->CoeHeader |= ((UINT16)COESERVICE_SDOREQUEST) << COEHEADER_COESERVICESHIFT;
 800c2f0:	69fb      	ldr	r3, [r7, #28]
 800c2f2:	88db      	ldrh	r3, [r3, #6]
 800c2f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c2f8:	b29a      	uxth	r2, r3
 800c2fa:	69fb      	ldr	r3, [r7, #28]
 800c2fc:	80da      	strh	r2, [r3, #6]
        pSdoRes->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET]    = SDOSERVICE_ABORTTRANSFER;
 800c2fe:	69fb      	ldr	r3, [r7, #28]
 800c300:	2280      	movs	r2, #128	; 0x80
 800c302:	811a      	strh	r2, [r3, #8]
        ((TABORTSDOTRANSFERREQMBX MBXMEM *) pSdoRes)->AbortCode = SWAPDWORD(cAbortCode[abort]);
 800c304:	79fb      	ldrb	r3, [r7, #7]
 800c306:	4a09      	ldr	r2, [pc, #36]	; (800c32c <SdoRes+0x174>)
 800c308:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c30c:	69fb      	ldr	r3, [r7, #28]
 800c30e:	60da      	str	r2, [r3, #12]
    }

    // HBu 02.05.06: if the CoE-response could not be sent because the
    //               send mailbox is full it should be stored
    if (MBX_MailboxSendReq((TMBX MBXMEM *) pSdoRes, COE_SERVICE) != 0)
 800c310:	2102      	movs	r1, #2
 800c312:	69f8      	ldr	r0, [r7, #28]
 800c314:	f7fd ff8a 	bl	800a22c <MBX_MailboxSendReq>
 800c318:	4603      	mov	r3, r0
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d002      	beq.n	800c324 <SdoRes+0x16c>
    {
        /* we store the CoE mailbox service to send it later (in COE_ContinueInd) when the mailbox is read */
        pCoeSendStored = (TMBX MBXMEM *) pSdoRes;
 800c31e:	4a04      	ldr	r2, [pc, #16]	; (800c330 <SdoRes+0x178>)
 800c320:	69fb      	ldr	r3, [r7, #28]
 800c322:	6013      	str	r3, [r2, #0]
    }
}
 800c324:	bf00      	nop
 800c326:	370c      	adds	r7, #12
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd90      	pop	{r4, r7, pc}
 800c32c:	0800db7c 	.word	0x0800db7c
 800c330:	2000064c 	.word	0x2000064c

0800c334 <SDOS_SdoInd>:
            is received from the master and calls depending from
            the command the concerning function.
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 SDOS_SdoInd(TINITSDOMBX MBXMEM *pSdoInd)
{
 800c334:	b590      	push	{r4, r7, lr}
 800c336:	b08f      	sub	sp, #60	; 0x3c
 800c338:	af02      	add	r7, sp, #8
 800c33a:	6078      	str	r0, [r7, #4]
    UINT8 abort = 0;
 800c33c:	2300      	movs	r3, #0
 800c33e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    UINT8 sdoHeader = pSdoInd->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] & SDOHEADER_COMMANDMASK;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	891b      	ldrh	r3, [r3, #8]
 800c346:	76bb      	strb	r3, [r7, #26]
    /* the SDO-command is in bit 5-7 of the first SDO-Byte */
    UINT8 command = (sdoHeader & SDOHEADER_COMMAND);
 800c348:	7ebb      	ldrb	r3, [r7, #26]
 800c34a:	f023 031f 	bic.w	r3, r3, #31
 800c34e:	767b      	strb	r3, [r7, #25]
    /* mbxSize contains the size of the mailbox (CoE-Header (2 Bytes) + SDO-Header (8 Bytes) + SDO-Data (if the data length is greater than 4)) */
    UINT16 mbxSize = SWAPWORD(pSdoInd->MbxHeader.Length);
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	881b      	ldrh	r3, [r3, #0]
 800c354:	82fb      	strh	r3, [r7, #22]
    UINT16 index;
    UINT8 subindex;
    OBJCONST TOBJECT OBJMEM * pObjEntry;
    /* this variable contains the information, if all entries of an object will be read (bCompleteAccess > 0) or a single entry */
    UINT8 bCompleteAccess = 0;
 800c356:	2300      	movs	r3, #0
 800c358:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    UINT32 objLength = 0;
 800c35c:	2300      	movs	r3, #0
 800c35e:	62bb      	str	r3, [r7, #40]	; 0x28
    UINT32 dataSize = 0;
 800c360:	2300      	movs	r3, #0
 800c362:	627b      	str	r3, [r7, #36]	; 0x24

    if ( bSdoInWork )
 800c364:	4b99      	ldr	r3, [pc, #612]	; (800c5cc <SDOS_SdoInd+0x298>)
 800c366:	781b      	ldrb	r3, [r3, #0]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d001      	beq.n	800c370 <SDOS_SdoInd+0x3c>
    {
        /* the last SDO is still in work */
        return MBXERR_SERVICEINWORK;
 800c36c:	2309      	movs	r3, #9
 800c36e:	e272      	b.n	800c856 <SDOS_SdoInd+0x522>
    }


    switch (command)
 800c370:	7e7b      	ldrb	r3, [r7, #25]
 800c372:	2b60      	cmp	r3, #96	; 0x60
 800c374:	f000 823b 	beq.w	800c7ee <SDOS_SdoInd+0x4ba>
 800c378:	2b60      	cmp	r3, #96	; 0x60
 800c37a:	f300 8252 	bgt.w	800c822 <SDOS_SdoInd+0x4ee>
 800c37e:	2b40      	cmp	r3, #64	; 0x40
 800c380:	d008      	beq.n	800c394 <SDOS_SdoInd+0x60>
 800c382:	2b40      	cmp	r3, #64	; 0x40
 800c384:	f300 824d 	bgt.w	800c822 <SDOS_SdoInd+0x4ee>
 800c388:	2b00      	cmp	r3, #0
 800c38a:	f000 8230 	beq.w	800c7ee <SDOS_SdoInd+0x4ba>
 800c38e:	2b20      	cmp	r3, #32
 800c390:	f040 8247 	bne.w	800c822 <SDOS_SdoInd+0x4ee>
    {
    case SDOSERVICE_INITIATEDOWNLOADREQ:
    case SDOSERVICE_INITIATEUPLOADREQ:
        /* the variable index contains the requested index of the SDO service */
        index = pSdoInd->SdoHeader.Sdo[SDOHEADER_INDEXHIOFFSET] & SDOHEADER_INDEXHIMASK;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	895b      	ldrh	r3, [r3, #10]
 800c398:	b2db      	uxtb	r3, r3
 800c39a:	82bb      	strh	r3, [r7, #20]
        index <<= 8;
 800c39c:	8abb      	ldrh	r3, [r7, #20]
 800c39e:	021b      	lsls	r3, r3, #8
 800c3a0:	82bb      	strh	r3, [r7, #20]
        index += pSdoInd->SdoHeader.Sdo[SDOHEADER_INDEXLOOFFSET] >> SDOHEADER_INDEXLOSHIFT;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	891b      	ldrh	r3, [r3, #8]
 800c3a6:	0a1b      	lsrs	r3, r3, #8
 800c3a8:	b29a      	uxth	r2, r3
 800c3aa:	8abb      	ldrh	r3, [r7, #20]
 800c3ac:	4413      	add	r3, r2
 800c3ae:	82bb      	strh	r3, [r7, #20]
        /* the variable subindex contains the requested subindex of the SDO service */
        subindex    = pSdoInd->SdoHeader.Sdo[SDOHEADER_SUBINDEXOFFSET] >> SDOHEADER_SUBINDEXSHIFT;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	895b      	ldrh	r3, [r3, #10]
 800c3b4:	0a1b      	lsrs	r3, r3, #8
 800c3b6:	b29b      	uxth	r3, r3
 800c3b8:	74fb      	strb	r3, [r7, #19]

        /* OBJ_GetObjectHandle checks if the requested index is defined in the object dictionary */
        pObjEntry = OBJ_GetObjectHandle( index );
 800c3ba:	8abb      	ldrh	r3, [r7, #20]
 800c3bc:	4618      	mov	r0, r3
 800c3be:	f7fe f909 	bl	800a5d4 <OBJ_GetObjectHandle>
 800c3c2:	60f8      	str	r0, [r7, #12]

        if ( pObjEntry )
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	f000 820d 	beq.w	800c7e6 <SDOS_SdoInd+0x4b2>
        {
            /* transferType contains the information if the SDO Download Request or the SDO Upload Response
               can be an expedited service (SDO data length <= 4, that means the data is stored in the
                SDO-Header completely */
            UINT8 bTransferType = 0;
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            /* pData is the pointer to the received (SDO-Download) or sent (SDO-Upload) SDO data in the mailbox */
            UINT16 MBXMEM * pData = NULL;
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	61fb      	str	r3, [r7, #28]
            UINT8 segTransfer = 0;
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	76fb      	strb	r3, [r7, #27]

            {
                dataSize = objLength = OBJ_GetObjectLength( index, subindex, pObjEntry, (UINT8) (sdoHeader & SDOHEADER_COMPLETEACCESS) );
 800c3da:	7ebb      	ldrb	r3, [r7, #26]
 800c3dc:	f003 0310 	and.w	r3, r3, #16
 800c3e0:	b2db      	uxtb	r3, r3
 800c3e2:	7cf9      	ldrb	r1, [r7, #19]
 800c3e4:	8ab8      	ldrh	r0, [r7, #20]
 800c3e6:	68fa      	ldr	r2, [r7, #12]
 800c3e8:	f7fe f90f 	bl	800a60a <OBJ_GetObjectLength>
 800c3ec:	62b8      	str	r0, [r7, #40]	; 0x28
 800c3ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3f0:	627b      	str	r3, [r7, #36]	; 0x24

                if ( command == SDOSERVICE_INITIATEUPLOADREQ )
 800c3f2:	7e7b      	ldrb	r3, [r7, #25]
 800c3f4:	2b40      	cmp	r3, #64	; 0x40
 800c3f6:	d127      	bne.n	800c448 <SDOS_SdoInd+0x114>
                {
                    /* SDO Upload */
                    if ( mbxSize != EXPEDITED_FRAME_SIZE )
 800c3f8:	8afb      	ldrh	r3, [r7, #22]
 800c3fa:	2b0a      	cmp	r3, #10
 800c3fc:	d001      	beq.n	800c402 <SDOS_SdoInd+0xce>
                        /* a SDO Upload request has always a fixed size (2 Byte CoE-Header plus 8 Byte SDO-Header) */
                        return MBXERR_INVALIDSIZE;
 800c3fe:	2308      	movs	r3, #8
 800c400:	e229      	b.n	800c856 <SDOS_SdoInd+0x522>
                    /* distinguish between expedited and normal upload response within the length of the response data */
                    if ( (objLength <= MAX_EXPEDITED_DATA) && objLength != 0 )
 800c402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c404:	2b04      	cmp	r3, #4
 800c406:	d810      	bhi.n	800c42a <SDOS_SdoInd+0xf6>
 800c408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d00d      	beq.n	800c42a <SDOS_SdoInd+0xf6>
                    {
                        /* Expedited Upload */
                        bTransferType = 1;
 800c40e:	2301      	movs	r3, #1
 800c410:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                        /* pData is the pointer where the object data has to be copied for the response */
                        pData = ((TINITSDOUPLOADEXPRESMBX MBXMEM *) pSdoInd)->Data;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	330c      	adds	r3, #12
 800c418:	61fb      	str	r3, [r7, #28]
                        /* initialize the 4 data bytes of the SDO upload response because the requested object data
                           could be less than 4 */
                        pData[0] = 0;
 800c41a:	69fb      	ldr	r3, [r7, #28]
 800c41c:	2200      	movs	r2, #0
 800c41e:	801a      	strh	r2, [r3, #0]
                        pData[1] = 0;
 800c420:	69fb      	ldr	r3, [r7, #28]
 800c422:	3302      	adds	r3, #2
 800c424:	2200      	movs	r2, #0
 800c426:	801a      	strh	r2, [r3, #0]
 800c428:	e013      	b.n	800c452 <SDOS_SdoInd+0x11e>
                    }
                    else
                    {
                        /* HBu 06.02.06: the variable dataSize has to be set to the available size in one mailbox */
                    dataSize = u16SendMbxSize - MBX_HEADER_SIZE - UPLOAD_NORM_RES_SIZE;
 800c42a:	4b69      	ldr	r3, [pc, #420]	; (800c5d0 <SDOS_SdoInd+0x29c>)
 800c42c:	881b      	ldrh	r3, [r3, #0]
 800c42e:	3b10      	subs	r3, #16
 800c430:	627b      	str	r3, [r7, #36]	; 0x24
                        if ( dataSize < objLength )
 800c432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c436:	429a      	cmp	r2, r3
 800c438:	d202      	bcs.n	800c440 <SDOS_SdoInd+0x10c>
                            /* Segmented Upload */
                            segTransfer = 1;
 800c43a:	2301      	movs	r3, #1
 800c43c:	76fb      	strb	r3, [r7, #27]
 800c43e:	e008      	b.n	800c452 <SDOS_SdoInd+0x11e>
                        else
                            /* Normal Upload */
                            pData = ((TINITSDOUPLOADNORMRESMBX MBXMEM *) pSdoInd)->Data;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	3310      	adds	r3, #16
 800c444:	61fb      	str	r3, [r7, #28]
 800c446:	e004      	b.n	800c452 <SDOS_SdoInd+0x11e>
                    }
                }
                else
                {
                    /* SDO-Download: store if the request is a expedited or normal request  */
                    bTransferType = sdoHeader & SDOHEADER_TRANSFERTYPE;
 800c448:	7ebb      	ldrb	r3, [r7, #26]
 800c44a:	f003 0302 	and.w	r3, r3, #2
 800c44e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                }
            }

            if ( command == SDOSERVICE_INITIATEDOWNLOADREQ )
 800c452:	7e7b      	ldrb	r3, [r7, #25]
 800c454:	2b20      	cmp	r3, #32
 800c456:	d13b      	bne.n	800c4d0 <SDOS_SdoInd+0x19c>
            {
                /* SDO Download */
                if ( bTransferType )
 800c458:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d00f      	beq.n	800c480 <SDOS_SdoInd+0x14c>
                {
                    /* Expedited Download */
                    if ( mbxSize != EXPEDITED_FRAME_SIZE )
 800c460:	8afb      	ldrh	r3, [r7, #22]
 800c462:	2b0a      	cmp	r3, #10
 800c464:	d001      	beq.n	800c46a <SDOS_SdoInd+0x136>
                        /* an Expedited SDO Download request has always a fixed size (2 Byte CoE-Header plus 8 Byte SDO-Header) */
                        return MBXERR_INVALIDSIZE;
 800c466:	2308      	movs	r3, #8
 800c468:	e1f5      	b.n	800c856 <SDOS_SdoInd+0x522>
                    /* dataSize gets the real size of the downloaded object data (1,2,3 or 4) */
                    dataSize = MAX_EXPEDITED_DATA - ((sdoHeader & SDOHEADER_DATASETSIZE) >> SDOHEADERSHIFT_DATASETSIZE);
 800c46a:	7ebb      	ldrb	r3, [r7, #26]
 800c46c:	109b      	asrs	r3, r3, #2
 800c46e:	f003 0303 	and.w	r3, r3, #3
 800c472:	f1c3 0304 	rsb	r3, r3, #4
 800c476:	627b      	str	r3, [r7, #36]	; 0x24
                    /* pData is the pointer to the downloaded object data */
                    pData = (UINT16 MBXMEM *) &pSdoInd[1];
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	330c      	adds	r3, #12
 800c47c:	61fb      	str	r3, [r7, #28]
 800c47e:	e027      	b.n	800c4d0 <SDOS_SdoInd+0x19c>
                {
                    /* Normal Download */
                    /* downloadSize gets the real size of the downloaded data */
                    /* '&' operator was too much */

                    UINT32 downloadSize = ((UINT32)(SWAPWORD(((TINITSDODOWNLOADNORMREQMBX MBXMEM *) pSdoInd)->CompleteSize[1]))<<16) + (SWAPWORD(((TINITSDODOWNLOADNORMREQMBX MBXMEM *) pSdoInd)->CompleteSize[0]));
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	89db      	ldrh	r3, [r3, #14]
 800c484:	041b      	lsls	r3, r3, #16
 800c486:	687a      	ldr	r2, [r7, #4]
 800c488:	8992      	ldrh	r2, [r2, #12]
 800c48a:	4413      	add	r3, r2
 800c48c:	60bb      	str	r3, [r7, #8]

                    /* HBu 29.03.06: if it is a segmented download the mbxSize has to be the complete mailbox size */
                    if ( (MBX_HEADER_SIZE+EXPEDITED_FRAME_SIZE+downloadSize) > u16ReceiveMbxSize )
 800c48e:	68bb      	ldr	r3, [r7, #8]
 800c490:	3310      	adds	r3, #16
 800c492:	4a50      	ldr	r2, [pc, #320]	; (800c5d4 <SDOS_SdoInd+0x2a0>)
 800c494:	8812      	ldrh	r2, [r2, #0]
 800c496:	4293      	cmp	r3, r2
 800c498:	d907      	bls.n	800c4aa <SDOS_SdoInd+0x176>
                    {
                        if ( mbxSize != (u16ReceiveMbxSize-MBX_HEADER_SIZE) )
 800c49a:	8afa      	ldrh	r2, [r7, #22]
 800c49c:	4b4d      	ldr	r3, [pc, #308]	; (800c5d4 <SDOS_SdoInd+0x2a0>)
 800c49e:	881b      	ldrh	r3, [r3, #0]
 800c4a0:	3b06      	subs	r3, #6
 800c4a2:	429a      	cmp	r2, r3
 800c4a4:	d008      	beq.n	800c4b8 <SDOS_SdoInd+0x184>
                            return MBXERR_INVALIDSIZE;
 800c4a6:	2308      	movs	r3, #8
 800c4a8:	e1d5      	b.n	800c856 <SDOS_SdoInd+0x522>
                    }
                    else
                    {
                        if ( mbxSize != (EXPEDITED_FRAME_SIZE+downloadSize) )
 800c4aa:	8afa      	ldrh	r2, [r7, #22]
 800c4ac:	68bb      	ldr	r3, [r7, #8]
 800c4ae:	330a      	adds	r3, #10
 800c4b0:	429a      	cmp	r2, r3
 800c4b2:	d001      	beq.n	800c4b8 <SDOS_SdoInd+0x184>
                            /* the mbxSize and the downloadSize are not consistent (mbxSize = downloadSize + 2 byte CoE-Header + 8 byte SDO Header */
                            return MBXERR_INVALIDSIZE;
 800c4b4:	2308      	movs	r3, #8
 800c4b6:	e1ce      	b.n	800c856 <SDOS_SdoInd+0x522>
                    }

                    /* pData is the pointer to the downloaded object data */
                    pData = (UINT16 MBXMEM *) ((TINITSDODOWNLOADNORMREQMBX MBXMEM *) pSdoInd)->Data;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	3310      	adds	r3, #16
 800c4bc:	61fb      	str	r3, [r7, #28]
                    /* the received dataSize will be checked in the object specific functions called from
                       OBJ_Write (in objdef.c) */
                    dataSize = downloadSize;
 800c4be:	68bb      	ldr	r3, [r7, #8]
 800c4c0:	627b      	str	r3, [r7, #36]	; 0x24
                    if ( dataSize > (UINT32)(mbxSize - DOWNLOAD_NORM_REQ_SIZE) )
 800c4c2:	8afb      	ldrh	r3, [r7, #22]
 800c4c4:	3b0a      	subs	r3, #10
 800c4c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4c8:	429a      	cmp	r2, r3
 800c4ca:	d901      	bls.n	800c4d0 <SDOS_SdoInd+0x19c>
                        /* Segmented Download */
                        segTransfer = 1;
 800c4cc:	2301      	movs	r3, #1
 800c4ce:	76fb      	strb	r3, [r7, #27]
                }
            }

            if ( sdoHeader & SDOHEADER_COMPLETEACCESS )
 800c4d0:	7ebb      	ldrb	r3, [r7, #26]
 800c4d2:	f003 0310 	and.w	r3, r3, #16
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d008      	beq.n	800c4ec <SDOS_SdoInd+0x1b8>
            {
                bCompleteAccess = 1;
 800c4da:	2301      	movs	r3, #1
 800c4dc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                // HBu 02.05.06: Complete Access is only supported with subindex 0 and 1
                if (subindex > 1)
 800c4e0:	7cfb      	ldrb	r3, [r7, #19]
 800c4e2:	2b01      	cmp	r3, #1
 800c4e4:	d902      	bls.n	800c4ec <SDOS_SdoInd+0x1b8>
                    abort = ABORTIDX_UNSUPPORTED_ACCESS;
 800c4e6:	2305      	movs	r3, #5
 800c4e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }

            if ( abort == 0 )
 800c4ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	f040 819a 	bne.w	800c82a <SDOS_SdoInd+0x4f6>
            {
                if ( segTransfer )
 800c4f6:	7efb      	ldrb	r3, [r7, #27]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	f000 80d2 	beq.w	800c6a2 <SDOS_SdoInd+0x36e>
                {
                    bSdoSegFollows         = TRUE;
 800c4fe:	4b36      	ldr	r3, [pc, #216]	; (800c5d8 <SDOS_SdoInd+0x2a4>)
 800c500:	2201      	movs	r2, #1
 800c502:	701a      	strb	r2, [r3, #0]
                    bSdoSegLastToggle     = 1;
 800c504:	4b35      	ldr	r3, [pc, #212]	; (800c5dc <SDOS_SdoInd+0x2a8>)
 800c506:	2201      	movs	r2, #1
 800c508:	701a      	strb	r2, [r3, #0]
                    bSdoSegAccess             = bCompleteAccess;
 800c50a:	4a35      	ldr	r2, [pc, #212]	; (800c5e0 <SDOS_SdoInd+0x2ac>)
 800c50c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c510:	7013      	strb	r3, [r2, #0]
                    nSdoSegIndex             = index;
 800c512:	4a34      	ldr	r2, [pc, #208]	; (800c5e4 <SDOS_SdoInd+0x2b0>)
 800c514:	8abb      	ldrh	r3, [r7, #20]
 800c516:	8013      	strh	r3, [r2, #0]
                    nSdoSegSubindex         = subindex;
 800c518:	4a33      	ldr	r2, [pc, #204]	; (800c5e8 <SDOS_SdoInd+0x2b4>)
 800c51a:	7cfb      	ldrb	r3, [r7, #19]
 800c51c:	7013      	strb	r3, [r2, #0]
                    pSdoSegObjEntry        = pObjEntry;
 800c51e:	4a33      	ldr	r2, [pc, #204]	; (800c5ec <SDOS_SdoInd+0x2b8>)
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	6013      	str	r3, [r2, #0]
                    if ( command == SDOSERVICE_INITIATEUPLOADREQ )
 800c524:	7e7b      	ldrb	r3, [r7, #25]
 800c526:	2b40      	cmp	r3, #64	; 0x40
 800c528:	d103      	bne.n	800c532 <SDOS_SdoInd+0x1fe>
                        nSdoSegCompleteSize    = objLength;
 800c52a:	4a31      	ldr	r2, [pc, #196]	; (800c5f0 <SDOS_SdoInd+0x2bc>)
 800c52c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c52e:	6013      	str	r3, [r2, #0]
 800c530:	e002      	b.n	800c538 <SDOS_SdoInd+0x204>
                    else
                        nSdoSegCompleteSize    = dataSize;
 800c532:	4a2f      	ldr	r2, [pc, #188]	; (800c5f0 <SDOS_SdoInd+0x2bc>)
 800c534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c536:	6013      	str	r3, [r2, #0]

                    if (pSdoSegData != NULL)
 800c538:	4b2e      	ldr	r3, [pc, #184]	; (800c5f4 <SDOS_SdoInd+0x2c0>)
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d007      	beq.n	800c550 <SDOS_SdoInd+0x21c>
                    {
                        FREEMEM( (UINT16 VARMEM *) pSdoSegData);
 800c540:	4b2c      	ldr	r3, [pc, #176]	; (800c5f4 <SDOS_SdoInd+0x2c0>)
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	4618      	mov	r0, r3
 800c546:	f000 fc67 	bl	800ce18 <free>
                        pSdoSegData = NULL;
 800c54a:	4b2a      	ldr	r3, [pc, #168]	; (800c5f4 <SDOS_SdoInd+0x2c0>)
 800c54c:	2200      	movs	r2, #0
 800c54e:	601a      	str	r2, [r3, #0]
                    }
                    pSdoSegData = (UINT16 VARMEM *) ALLOCMEM( ROUNDUPBYTE2WORD(nSdoSegCompleteSize) );
 800c550:	4b27      	ldr	r3, [pc, #156]	; (800c5f0 <SDOS_SdoInd+0x2bc>)
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	3301      	adds	r3, #1
 800c556:	f023 0301 	bic.w	r3, r3, #1
 800c55a:	4618      	mov	r0, r3
 800c55c:	f000 fc54 	bl	800ce08 <malloc>
 800c560:	4603      	mov	r3, r0
 800c562:	461a      	mov	r2, r3
 800c564:	4b23      	ldr	r3, [pc, #140]	; (800c5f4 <SDOS_SdoInd+0x2c0>)
 800c566:	601a      	str	r2, [r3, #0]

                    if ( pSdoSegData == NULL )
 800c568:	4b22      	ldr	r3, [pc, #136]	; (800c5f4 <SDOS_SdoInd+0x2c0>)
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d10b      	bne.n	800c588 <SDOS_SdoInd+0x254>
                    {
/*ECATCHANGE_START(V5.11) SDO4*/
                        if(bCompleteAccess)
 800c570:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c574:	2b00      	cmp	r3, #0
 800c576:	d003      	beq.n	800c580 <SDOS_SdoInd+0x24c>
                            abort = ABORTIDX_UNSUPPORTED_ACCESS;
 800c578:	2305      	movs	r3, #5
 800c57a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        } //if(pEntry) (Object handle found)
        else
        {
            abort = ABORTIDX_OBJECT_NOT_EXISTING;
        }
        break;
 800c57e:	e154      	b.n	800c82a <SDOS_SdoInd+0x4f6>
                            abort = ABORTIDX_OUT_OF_MEMORY;
 800c580:	2304      	movs	r3, #4
 800c582:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        break;
 800c586:	e150      	b.n	800c82a <SDOS_SdoInd+0x4f6>
                        if ( command == SDOSERVICE_INITIATEUPLOADREQ )
 800c588:	7e7b      	ldrb	r3, [r7, #25]
 800c58a:	2b40      	cmp	r3, #64	; 0x40
 800c58c:	d175      	bne.n	800c67a <SDOS_SdoInd+0x346>
                            abort = OBJ_Read( index, subindex, objLength, pObjEntry, (UINT16 MBXMEM *) pSdoSegData, bCompleteAccess );
 800c58e:	4b19      	ldr	r3, [pc, #100]	; (800c5f4 <SDOS_SdoInd+0x2c0>)
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	7cf9      	ldrb	r1, [r7, #19]
 800c594:	8ab8      	ldrh	r0, [r7, #20]
 800c596:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800c59a:	9201      	str	r2, [sp, #4]
 800c59c:	9300      	str	r3, [sp, #0]
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c5a2:	f7fe fc75 	bl	800ae90 <OBJ_Read>
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                            if ( abort == 0 )
 800c5ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d123      	bne.n	800c5fc <SDOS_SdoInd+0x2c8>
                                MBXMEMCPY( ((TINITSDOUPLOADNORMRESMBX MBXMEM *) pSdoInd)->Data, pSdoSegData, dataSize );
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	3310      	adds	r3, #16
 800c5b8:	4a0e      	ldr	r2, [pc, #56]	; (800c5f4 <SDOS_SdoInd+0x2c0>)
 800c5ba:	6811      	ldr	r1, [r2, #0]
 800c5bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5be:	4618      	mov	r0, r3
 800c5c0:	f000 fc42 	bl	800ce48 <memcpy>
                                nSdoSegService    = SDOSERVICE_UPLOADSEGMENTREQ;
 800c5c4:	4b0c      	ldr	r3, [pc, #48]	; (800c5f8 <SDOS_SdoInd+0x2c4>)
 800c5c6:	2260      	movs	r2, #96	; 0x60
 800c5c8:	701a      	strb	r2, [r3, #0]
 800c5ca:	e066      	b.n	800c69a <SDOS_SdoInd+0x366>
 800c5cc:	20000bc4 	.word	0x20000bc4
 800c5d0:	20000878 	.word	0x20000878
 800c5d4:	2000087a 	.word	0x2000087a
 800c5d8:	20000bc6 	.word	0x20000bc6
 800c5dc:	20000bd0 	.word	0x20000bd0
 800c5e0:	20000bc7 	.word	0x20000bc7
 800c5e4:	20000bc8 	.word	0x20000bc8
 800c5e8:	20000bca 	.word	0x20000bca
 800c5ec:	20000bd8 	.word	0x20000bd8
 800c5f0:	20000bd4 	.word	0x20000bd4
 800c5f4:	20000bb4 	.word	0x20000bb4
 800c5f8:	20000bc5 	.word	0x20000bc5
                            else if ( abort == ABORTIDX_WORKING )
 800c5fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c600:	2bff      	cmp	r3, #255	; 0xff
 800c602:	d14a      	bne.n	800c69a <SDOS_SdoInd+0x366>
                                u8PendingSdo = SDO_PENDING_SEG_READ;
 800c604:	4b96      	ldr	r3, [pc, #600]	; (800c860 <SDOS_SdoInd+0x52c>)
 800c606:	2204      	movs	r2, #4
 800c608:	701a      	strb	r2, [r3, #0]
                                bStoreCompleteAccess = bCompleteAccess;
 800c60a:	4a96      	ldr	r2, [pc, #600]	; (800c864 <SDOS_SdoInd+0x530>)
 800c60c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c610:	7013      	strb	r3, [r2, #0]
                                u8StoreSubindex = subindex;
 800c612:	4a95      	ldr	r2, [pc, #596]	; (800c868 <SDOS_SdoInd+0x534>)
 800c614:	7cfb      	ldrb	r3, [r7, #19]
 800c616:	7013      	strb	r3, [r2, #0]
                                u16StoreIndex = index;
 800c618:	4a94      	ldr	r2, [pc, #592]	; (800c86c <SDOS_SdoInd+0x538>)
 800c61a:	8abb      	ldrh	r3, [r7, #20]
 800c61c:	8013      	strh	r3, [r2, #0]
                                u32StoreDataSize = objLength;
 800c61e:	4a94      	ldr	r2, [pc, #592]	; (800c870 <SDOS_SdoInd+0x53c>)
 800c620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c622:	6013      	str	r3, [r2, #0]
                                pStoreData = pSdoSegData;
 800c624:	4b93      	ldr	r3, [pc, #588]	; (800c874 <SDOS_SdoInd+0x540>)
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	4a93      	ldr	r2, [pc, #588]	; (800c878 <SDOS_SdoInd+0x544>)
 800c62a:	6013      	str	r3, [r2, #0]
                                pSdoPendFunc = pObjEntry->Read;
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	69db      	ldr	r3, [r3, #28]
 800c630:	4a92      	ldr	r2, [pc, #584]	; (800c87c <SDOS_SdoInd+0x548>)
 800c632:	6013      	str	r3, [r2, #0]
                                bSdoInWork = TRUE;
 800c634:	4b92      	ldr	r3, [pc, #584]	; (800c880 <SDOS_SdoInd+0x54c>)
 800c636:	2201      	movs	r2, #1
 800c638:	701a      	strb	r2, [r3, #0]
                                pSdoResStored = pSdoInd;
 800c63a:	4a92      	ldr	r2, [pc, #584]	; (800c884 <SDOS_SdoInd+0x550>)
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	6013      	str	r3, [r2, #0]
                                pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET]   &= ~SDOHEADER_COMMANDMASK;
 800c640:	4b90      	ldr	r3, [pc, #576]	; (800c884 <SDOS_SdoInd+0x550>)
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	891a      	ldrh	r2, [r3, #8]
 800c646:	4b8f      	ldr	r3, [pc, #572]	; (800c884 <SDOS_SdoInd+0x550>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800c64e:	b292      	uxth	r2, r2
 800c650:	811a      	strh	r2, [r3, #8]
                                pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET]   |= (sdoHeader & (SDOHEADER_COMPLETEACCESS | SDOHEADER_COMMAND));
 800c652:	4b8c      	ldr	r3, [pc, #560]	; (800c884 <SDOS_SdoInd+0x550>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	891b      	ldrh	r3, [r3, #8]
 800c658:	b21a      	sxth	r2, r3
 800c65a:	7ebb      	ldrb	r3, [r7, #26]
 800c65c:	b21b      	sxth	r3, r3
 800c65e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c662:	b21b      	sxth	r3, r3
 800c664:	4313      	orrs	r3, r2
 800c666:	b21a      	sxth	r2, r3
 800c668:	4b86      	ldr	r3, [pc, #536]	; (800c884 <SDOS_SdoInd+0x550>)
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	b292      	uxth	r2, r2
 800c66e:	811a      	strh	r2, [r3, #8]
                                nSdoSegService    = SDOSERVICE_UPLOADSEGMENTREQ;
 800c670:	4b85      	ldr	r3, [pc, #532]	; (800c888 <SDOS_SdoInd+0x554>)
 800c672:	2260      	movs	r2, #96	; 0x60
 800c674:	701a      	strb	r2, [r3, #0]
                                return 0;
 800c676:	2300      	movs	r3, #0
 800c678:	e0ed      	b.n	800c856 <SDOS_SdoInd+0x522>
                            MBXMEMCPY( pSdoSegData, ((TINITSDODOWNLOADNORMREQMBX MBXMEM *) pSdoInd)->Data, mbxSize-DOWNLOAD_NORM_REQ_SIZE );
 800c67a:	4b7e      	ldr	r3, [pc, #504]	; (800c874 <SDOS_SdoInd+0x540>)
 800c67c:	6818      	ldr	r0, [r3, #0]
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	f103 0110 	add.w	r1, r3, #16
 800c684:	8afb      	ldrh	r3, [r7, #22]
 800c686:	3b0a      	subs	r3, #10
 800c688:	461a      	mov	r2, r3
 800c68a:	f000 fbdd 	bl	800ce48 <memcpy>
                            nSdoSegService    = SDOSERVICE_DOWNLOADSEGMENTREQ;
 800c68e:	4b7e      	ldr	r3, [pc, #504]	; (800c888 <SDOS_SdoInd+0x554>)
 800c690:	2200      	movs	r2, #0
 800c692:	701a      	strb	r2, [r3, #0]
                            dataSize = (mbxSize-DOWNLOAD_NORM_REQ_SIZE);
 800c694:	8afb      	ldrh	r3, [r7, #22]
 800c696:	3b0a      	subs	r3, #10
 800c698:	627b      	str	r3, [r7, #36]	; 0x24
                        nSdoSegBytesToHandle = dataSize;
 800c69a:	4a7c      	ldr	r2, [pc, #496]	; (800c88c <SDOS_SdoInd+0x558>)
 800c69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c69e:	6013      	str	r3, [r2, #0]
        break;
 800c6a0:	e0c3      	b.n	800c82a <SDOS_SdoInd+0x4f6>
                    if ( objLength == 0 )
 800c6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d108      	bne.n	800c6ba <SDOS_SdoInd+0x386>
                        nSdoSegIndex             = index;
 800c6a8:	4a79      	ldr	r2, [pc, #484]	; (800c890 <SDOS_SdoInd+0x55c>)
 800c6aa:	8abb      	ldrh	r3, [r7, #20]
 800c6ac:	8013      	strh	r3, [r2, #0]
                        nSdoSegSubindex         = subindex;
 800c6ae:	4a79      	ldr	r2, [pc, #484]	; (800c894 <SDOS_SdoInd+0x560>)
 800c6b0:	7cfb      	ldrb	r3, [r7, #19]
 800c6b2:	7013      	strb	r3, [r2, #0]
                        pSdoSegObjEntry        = pObjEntry;
 800c6b4:	4a78      	ldr	r2, [pc, #480]	; (800c898 <SDOS_SdoInd+0x564>)
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	6013      	str	r3, [r2, #0]
                    if ( command == SDOSERVICE_INITIATEUPLOADREQ )
 800c6ba:	7e7b      	ldrb	r3, [r7, #25]
 800c6bc:	2b40      	cmp	r3, #64	; 0x40
 800c6be:	d149      	bne.n	800c754 <SDOS_SdoInd+0x420>
                        abort = OBJ_Read( index, subindex, objLength, pObjEntry, pData, bCompleteAccess );
 800c6c0:	7cf9      	ldrb	r1, [r7, #19]
 800c6c2:	8ab8      	ldrh	r0, [r7, #20]
 800c6c4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c6c8:	9301      	str	r3, [sp, #4]
 800c6ca:	69fb      	ldr	r3, [r7, #28]
 800c6cc:	9300      	str	r3, [sp, #0]
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c6d2:	f7fe fbdd 	bl	800ae90 <OBJ_Read>
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        if ( abort == ABORTIDX_WORKING )
 800c6dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c6e0:	2bff      	cmp	r3, #255	; 0xff
 800c6e2:	f040 80a2 	bne.w	800c82a <SDOS_SdoInd+0x4f6>
                            u8PendingSdo = SDO_PENDING_READ;
 800c6e6:	4b5e      	ldr	r3, [pc, #376]	; (800c860 <SDOS_SdoInd+0x52c>)
 800c6e8:	2203      	movs	r2, #3
 800c6ea:	701a      	strb	r2, [r3, #0]
                            bStoreCompleteAccess = bCompleteAccess;
 800c6ec:	4a5d      	ldr	r2, [pc, #372]	; (800c864 <SDOS_SdoInd+0x530>)
 800c6ee:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c6f2:	7013      	strb	r3, [r2, #0]
                            u8StoreSubindex = subindex;
 800c6f4:	4a5c      	ldr	r2, [pc, #368]	; (800c868 <SDOS_SdoInd+0x534>)
 800c6f6:	7cfb      	ldrb	r3, [r7, #19]
 800c6f8:	7013      	strb	r3, [r2, #0]
                            u16StoreIndex = index;
 800c6fa:	4a5c      	ldr	r2, [pc, #368]	; (800c86c <SDOS_SdoInd+0x538>)
 800c6fc:	8abb      	ldrh	r3, [r7, #20]
 800c6fe:	8013      	strh	r3, [r2, #0]
                            u32StoreDataSize = objLength;
 800c700:	4a5b      	ldr	r2, [pc, #364]	; (800c870 <SDOS_SdoInd+0x53c>)
 800c702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c704:	6013      	str	r3, [r2, #0]
                            pStoreData = pData;
 800c706:	4a5c      	ldr	r2, [pc, #368]	; (800c878 <SDOS_SdoInd+0x544>)
 800c708:	69fb      	ldr	r3, [r7, #28]
 800c70a:	6013      	str	r3, [r2, #0]
                            pSdoPendFunc = pObjEntry->Read;
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	69db      	ldr	r3, [r3, #28]
 800c710:	4a5a      	ldr	r2, [pc, #360]	; (800c87c <SDOS_SdoInd+0x548>)
 800c712:	6013      	str	r3, [r2, #0]
                            bSdoInWork = TRUE;
 800c714:	4b5a      	ldr	r3, [pc, #360]	; (800c880 <SDOS_SdoInd+0x54c>)
 800c716:	2201      	movs	r2, #1
 800c718:	701a      	strb	r2, [r3, #0]
                            pSdoResStored = pSdoInd;
 800c71a:	4a5a      	ldr	r2, [pc, #360]	; (800c884 <SDOS_SdoInd+0x550>)
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	6013      	str	r3, [r2, #0]
                            pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] &= ~SDOHEADER_COMMANDMASK;
 800c720:	4b58      	ldr	r3, [pc, #352]	; (800c884 <SDOS_SdoInd+0x550>)
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	891a      	ldrh	r2, [r3, #8]
 800c726:	4b57      	ldr	r3, [pc, #348]	; (800c884 <SDOS_SdoInd+0x550>)
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800c72e:	b292      	uxth	r2, r2
 800c730:	811a      	strh	r2, [r3, #8]
                            pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET]    |= (sdoHeader & (SDOHEADER_COMPLETEACCESS | SDOHEADER_COMMAND));
 800c732:	4b54      	ldr	r3, [pc, #336]	; (800c884 <SDOS_SdoInd+0x550>)
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	891b      	ldrh	r3, [r3, #8]
 800c738:	b21a      	sxth	r2, r3
 800c73a:	7ebb      	ldrb	r3, [r7, #26]
 800c73c:	b21b      	sxth	r3, r3
 800c73e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c742:	b21b      	sxth	r3, r3
 800c744:	4313      	orrs	r3, r2
 800c746:	b21a      	sxth	r2, r3
 800c748:	4b4e      	ldr	r3, [pc, #312]	; (800c884 <SDOS_SdoInd+0x550>)
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	b292      	uxth	r2, r2
 800c74e:	811a      	strh	r2, [r3, #8]
                            return 0;
 800c750:	2300      	movs	r3, #0
 800c752:	e080      	b.n	800c856 <SDOS_SdoInd+0x522>
                        abort = OBJ_Write( index, subindex, dataSize, pObjEntry, pData, bCompleteAccess );
 800c754:	7cf9      	ldrb	r1, [r7, #19]
 800c756:	8ab8      	ldrh	r0, [r7, #20]
 800c758:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c75c:	9301      	str	r3, [sp, #4]
 800c75e:	69fb      	ldr	r3, [r7, #28]
 800c760:	9300      	str	r3, [sp, #0]
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c766:	f7fe fee7 	bl	800b538 <OBJ_Write>
 800c76a:	4603      	mov	r3, r0
 800c76c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        if ( abort == ABORTIDX_WORKING )
 800c770:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c774:	2bff      	cmp	r3, #255	; 0xff
 800c776:	d158      	bne.n	800c82a <SDOS_SdoInd+0x4f6>
                            u8PendingSdo = SDO_PENDING_WRITE;
 800c778:	4b39      	ldr	r3, [pc, #228]	; (800c860 <SDOS_SdoInd+0x52c>)
 800c77a:	2201      	movs	r2, #1
 800c77c:	701a      	strb	r2, [r3, #0]
                            bStoreCompleteAccess = bCompleteAccess;
 800c77e:	4a39      	ldr	r2, [pc, #228]	; (800c864 <SDOS_SdoInd+0x530>)
 800c780:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c784:	7013      	strb	r3, [r2, #0]
                            u8StoreSubindex = subindex;
 800c786:	4a38      	ldr	r2, [pc, #224]	; (800c868 <SDOS_SdoInd+0x534>)
 800c788:	7cfb      	ldrb	r3, [r7, #19]
 800c78a:	7013      	strb	r3, [r2, #0]
                            u16StoreIndex = index;
 800c78c:	4a37      	ldr	r2, [pc, #220]	; (800c86c <SDOS_SdoInd+0x538>)
 800c78e:	8abb      	ldrh	r3, [r7, #20]
 800c790:	8013      	strh	r3, [r2, #0]
                            u32StoreDataSize = dataSize;
 800c792:	4a37      	ldr	r2, [pc, #220]	; (800c870 <SDOS_SdoInd+0x53c>)
 800c794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c796:	6013      	str	r3, [r2, #0]
                            pStoreData = pData;
 800c798:	4a37      	ldr	r2, [pc, #220]	; (800c878 <SDOS_SdoInd+0x544>)
 800c79a:	69fb      	ldr	r3, [r7, #28]
 800c79c:	6013      	str	r3, [r2, #0]
                            pSdoPendFunc = pObjEntry->Write;
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	6a1b      	ldr	r3, [r3, #32]
 800c7a2:	4a36      	ldr	r2, [pc, #216]	; (800c87c <SDOS_SdoInd+0x548>)
 800c7a4:	6013      	str	r3, [r2, #0]
                            bSdoInWork = TRUE;
 800c7a6:	4b36      	ldr	r3, [pc, #216]	; (800c880 <SDOS_SdoInd+0x54c>)
 800c7a8:	2201      	movs	r2, #1
 800c7aa:	701a      	strb	r2, [r3, #0]
                            pSdoResStored = pSdoInd;
 800c7ac:	4a35      	ldr	r2, [pc, #212]	; (800c884 <SDOS_SdoInd+0x550>)
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	6013      	str	r3, [r2, #0]
                            pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] &= ~SDOHEADER_COMMANDMASK;
 800c7b2:	4b34      	ldr	r3, [pc, #208]	; (800c884 <SDOS_SdoInd+0x550>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	891a      	ldrh	r2, [r3, #8]
 800c7b8:	4b32      	ldr	r3, [pc, #200]	; (800c884 <SDOS_SdoInd+0x550>)
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800c7c0:	b292      	uxth	r2, r2
 800c7c2:	811a      	strh	r2, [r3, #8]
                            pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET]    |= (sdoHeader & (SDOHEADER_COMPLETEACCESS | SDOHEADER_COMMAND));
 800c7c4:	4b2f      	ldr	r3, [pc, #188]	; (800c884 <SDOS_SdoInd+0x550>)
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	891b      	ldrh	r3, [r3, #8]
 800c7ca:	b21a      	sxth	r2, r3
 800c7cc:	7ebb      	ldrb	r3, [r7, #26]
 800c7ce:	b21b      	sxth	r3, r3
 800c7d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c7d4:	b21b      	sxth	r3, r3
 800c7d6:	4313      	orrs	r3, r2
 800c7d8:	b21a      	sxth	r2, r3
 800c7da:	4b2a      	ldr	r3, [pc, #168]	; (800c884 <SDOS_SdoInd+0x550>)
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	b292      	uxth	r2, r2
 800c7e0:	811a      	strh	r2, [r3, #8]
                            return 0;
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	e037      	b.n	800c856 <SDOS_SdoInd+0x522>
            abort = ABORTIDX_OBJECT_NOT_EXISTING;
 800c7e6:	2308      	movs	r3, #8
 800c7e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        break;
 800c7ec:	e01d      	b.n	800c82a <SDOS_SdoInd+0x4f6>

    case SDOSERVICE_DOWNLOADSEGMENTREQ:
    case SDOSERVICE_UPLOADSEGMENTREQ:
        if ( command == nSdoSegService )
 800c7ee:	4b26      	ldr	r3, [pc, #152]	; (800c888 <SDOS_SdoInd+0x554>)
 800c7f0:	781b      	ldrb	r3, [r3, #0]
 800c7f2:	7e7a      	ldrb	r2, [r7, #25]
 800c7f4:	429a      	cmp	r2, r3
 800c7f6:	d110      	bne.n	800c81a <SDOS_SdoInd+0x4e6>
        {
            if ( command == SDOSERVICE_DOWNLOADSEGMENTREQ )
 800c7f8:	7e7b      	ldrb	r3, [r7, #25]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d106      	bne.n	800c80c <SDOS_SdoInd+0x4d8>
                abort = SdoDownloadSegmentInd( (TDOWNLOADSDOSEGREQMBX MBXMEM *) pSdoInd );
 800c7fe:	6878      	ldr	r0, [r7, #4]
 800c800:	f7ff f9f6 	bl	800bbf0 <SdoDownloadSegmentInd>
 800c804:	4603      	mov	r3, r0
 800c806:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            else
                abort = SdoUploadSegmentInd( (TUPLOADSDOSEGREQMBX MBXMEM *) pSdoInd );
        }
        else
            abort = ABORTIDX_COMMAND_SPECIFIER_UNKNOWN;
        break;
 800c80a:	e00f      	b.n	800c82c <SDOS_SdoInd+0x4f8>
                abort = SdoUploadSegmentInd( (TUPLOADSDOSEGREQMBX MBXMEM *) pSdoInd );
 800c80c:	6878      	ldr	r0, [r7, #4]
 800c80e:	f7ff fbaf 	bl	800bf70 <SdoUploadSegmentInd>
 800c812:	4603      	mov	r3, r0
 800c814:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        break;
 800c818:	e008      	b.n	800c82c <SDOS_SdoInd+0x4f8>
            abort = ABORTIDX_COMMAND_SPECIFIER_UNKNOWN;
 800c81a:	2303      	movs	r3, #3
 800c81c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        break;
 800c820:	e004      	b.n	800c82c <SDOS_SdoInd+0x4f8>

    default:
        abort = ABORTIDX_COMMAND_SPECIFIER_UNKNOWN;
 800c822:	2303      	movs	r3, #3
 800c824:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        break;
 800c828:	e000      	b.n	800c82c <SDOS_SdoInd+0x4f8>
        break;
 800c82a:	bf00      	nop
    }

    if(abort != ABORTIDX_WORKING)
 800c82c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c830:	2bff      	cmp	r3, #255	; 0xff
 800c832:	d00f      	beq.n	800c854 <SDOS_SdoInd+0x520>
    {
        /*  type cast was added because of warning */
        SdoRes(abort, command, (UINT8) (sdoHeader & SDOHEADER_COMPLETEACCESS), (UINT16) dataSize, objLength, pSdoInd);
 800c834:	7ebb      	ldrb	r3, [r7, #26]
 800c836:	f003 0310 	and.w	r3, r3, #16
 800c83a:	b2da      	uxtb	r2, r3
 800c83c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c83e:	b29c      	uxth	r4, r3
 800c840:	7e79      	ldrb	r1, [r7, #25]
 800c842:	f897 002f 	ldrb.w	r0, [r7, #47]	; 0x2f
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	9301      	str	r3, [sp, #4]
 800c84a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c84c:	9300      	str	r3, [sp, #0]
 800c84e:	4623      	mov	r3, r4
 800c850:	f7ff fcb2 	bl	800c1b8 <SdoRes>
    }

    return 0;
 800c854:	2300      	movs	r3, #0
}
 800c856:	4618      	mov	r0, r3
 800c858:	3734      	adds	r7, #52	; 0x34
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bd90      	pop	{r4, r7, pc}
 800c85e:	bf00      	nop
 800c860:	20000b90 	.word	0x20000b90
 800c864:	20000b91 	.word	0x20000b91
 800c868:	20000b92 	.word	0x20000b92
 800c86c:	20000b94 	.word	0x20000b94
 800c870:	20000b98 	.word	0x20000b98
 800c874:	20000bb4 	.word	0x20000bb4
 800c878:	20000b9c 	.word	0x20000b9c
 800c87c:	20000ba0 	.word	0x20000ba0
 800c880:	20000bc4 	.word	0x20000bc4
 800c884:	20000bc0 	.word	0x20000bc0
 800c888:	20000bc5 	.word	0x20000bc5
 800c88c:	20000bcc 	.word	0x20000bcc
 800c890:	20000bc8 	.word	0x20000bc8
 800c894:	20000bca 	.word	0x20000bca
 800c898:	20000bd8 	.word	0x20000bd8

0800c89c <SDOS_SdoRes>:

 \brief    This function is called when a SDO response shall be sent
*////////////////////////////////////////////////////////////////////////////////////////

void SDOS_SdoRes(UINT8 abort, UINT32 objLength, UINT16 MBXMEM *pData)
{
 800c89c:	b590      	push	{r4, r7, lr}
 800c89e:	b089      	sub	sp, #36	; 0x24
 800c8a0:	af02      	add	r7, sp, #8
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	60b9      	str	r1, [r7, #8]
 800c8a6:	607a      	str	r2, [r7, #4]
 800c8a8:	73fb      	strb	r3, [r7, #15]
    UINT16 dataSize = 0;
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	82fb      	strh	r3, [r7, #22]

    if (bSdoInWork)
 800c8ae:	4b38      	ldr	r3, [pc, #224]	; (800c990 <SDOS_SdoRes+0xf4>)
 800c8b0:	781b      	ldrb	r3, [r3, #0]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d068      	beq.n	800c988 <SDOS_SdoRes+0xec>
    {
        /* SDO-Response is expected */
        UINT8 command = pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] & SDOHEADER_COMMAND;
 800c8b6:	4b37      	ldr	r3, [pc, #220]	; (800c994 <SDOS_SdoRes+0xf8>)
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	891b      	ldrh	r3, [r3, #8]
 800c8bc:	b2db      	uxtb	r3, r3
 800c8be:	f023 031f 	bic.w	r3, r3, #31
 800c8c2:	757b      	strb	r3, [r7, #21]
        UINT8 completeAccess = pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] & SDOHEADER_COMPLETEACCESS;
 800c8c4:	4b33      	ldr	r3, [pc, #204]	; (800c994 <SDOS_SdoRes+0xf8>)
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	891b      	ldrh	r3, [r3, #8]
 800c8ca:	b2db      	uxtb	r3, r3
 800c8cc:	f003 0310 	and.w	r3, r3, #16
 800c8d0:	753b      	strb	r3, [r7, #20]

        if ( command == SDOSERVICE_INITIATEUPLOADREQ )
 800c8d2:	7d7b      	ldrb	r3, [r7, #21]
 800c8d4:	2b40      	cmp	r3, #64	; 0x40
 800c8d6:	d148      	bne.n	800c96a <SDOS_SdoRes+0xce>
        {
            /* dataSize contains the available size in one mailbox */
            dataSize = u16SendMbxSize - MBX_HEADER_SIZE - UPLOAD_NORM_RES_SIZE;
 800c8d8:	4b2f      	ldr	r3, [pc, #188]	; (800c998 <SDOS_SdoRes+0xfc>)
 800c8da:	881b      	ldrh	r3, [r3, #0]
 800c8dc:	3b10      	subs	r3, #16
 800c8de:	82fb      	strh	r3, [r7, #22]
            if ( dataSize < objLength )
 800c8e0:	8afb      	ldrh	r3, [r7, #22]
 800c8e2:	68ba      	ldr	r2, [r7, #8]
 800c8e4:	429a      	cmp	r2, r3
 800c8e6:	d91d      	bls.n	800c924 <SDOS_SdoRes+0x88>
            {
                /* Segmented Upload, the variables for the segmented transfer should be initialized */
                bSdoSegFollows         = TRUE;
 800c8e8:	4b2c      	ldr	r3, [pc, #176]	; (800c99c <SDOS_SdoRes+0x100>)
 800c8ea:	2201      	movs	r2, #1
 800c8ec:	701a      	strb	r2, [r3, #0]
                bSdoSegLastToggle     = 1;
 800c8ee:	4b2c      	ldr	r3, [pc, #176]	; (800c9a0 <SDOS_SdoRes+0x104>)
 800c8f0:	2201      	movs	r2, #1
 800c8f2:	701a      	strb	r2, [r3, #0]
                bSdoSegAccess             = completeAccess;
 800c8f4:	4a2b      	ldr	r2, [pc, #172]	; (800c9a4 <SDOS_SdoRes+0x108>)
 800c8f6:	7d3b      	ldrb	r3, [r7, #20]
 800c8f8:	7013      	strb	r3, [r2, #0]
                nSdoSegCompleteSize    = objLength;
 800c8fa:	4a2b      	ldr	r2, [pc, #172]	; (800c9a8 <SDOS_SdoRes+0x10c>)
 800c8fc:	68bb      	ldr	r3, [r7, #8]
 800c8fe:	6013      	str	r3, [r2, #0]
                nSdoSegService            = SDOSERVICE_UPLOADSEGMENTREQ;
 800c900:	4b2a      	ldr	r3, [pc, #168]	; (800c9ac <SDOS_SdoRes+0x110>)
 800c902:	2260      	movs	r2, #96	; 0x60
 800c904:	701a      	strb	r2, [r3, #0]
                pSdoSegData                = (UINT16 VARMEM *) pData;
 800c906:	4a2a      	ldr	r2, [pc, #168]	; (800c9b0 <SDOS_SdoRes+0x114>)
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	6013      	str	r3, [r2, #0]
                /* the first segment shall be copied */
                MBXMEMCPY(((TINITSDOUPLOADNORMRESMBX MBXMEM *) pSdoResStored)->Data, pData, dataSize);
 800c90c:	4b21      	ldr	r3, [pc, #132]	; (800c994 <SDOS_SdoRes+0xf8>)
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	3310      	adds	r3, #16
 800c912:	8afa      	ldrh	r2, [r7, #22]
 800c914:	6879      	ldr	r1, [r7, #4]
 800c916:	4618      	mov	r0, r3
 800c918:	f000 fa96 	bl	800ce48 <memcpy>
                nSdoSegBytesToHandle = dataSize;
 800c91c:	8afb      	ldrh	r3, [r7, #22]
 800c91e:	4a25      	ldr	r2, [pc, #148]	; (800c9b4 <SDOS_SdoRes+0x118>)
 800c920:	6013      	str	r3, [r2, #0]
 800c922:	e022      	b.n	800c96a <SDOS_SdoRes+0xce>
            }
            else
            if ( (objLength <= 4) && (objLength > 0) )
 800c924:	68bb      	ldr	r3, [r7, #8]
 800c926:	2b04      	cmp	r3, #4
 800c928:	d811      	bhi.n	800c94e <SDOS_SdoRes+0xb2>
 800c92a:	68bb      	ldr	r3, [r7, #8]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d00e      	beq.n	800c94e <SDOS_SdoRes+0xb2>
            {
                /* Expedited response */
                if ( pData != ((TINITSDOUPLOADEXPRESMBX MBXMEM *) pSdoResStored)->Data )
 800c930:	4b18      	ldr	r3, [pc, #96]	; (800c994 <SDOS_SdoRes+0xf8>)
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	330c      	adds	r3, #12
 800c936:	687a      	ldr	r2, [r7, #4]
 800c938:	429a      	cmp	r2, r3
 800c93a:	d016      	beq.n	800c96a <SDOS_SdoRes+0xce>
                {
                    /* the data is not in the response buffer yet, it shall be copied */
                    MBXMEMCPY(((TINITSDOUPLOADEXPRESMBX MBXMEM *) pSdoResStored)->Data, pData, objLength);
 800c93c:	4b15      	ldr	r3, [pc, #84]	; (800c994 <SDOS_SdoRes+0xf8>)
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	330c      	adds	r3, #12
 800c942:	68ba      	ldr	r2, [r7, #8]
 800c944:	6879      	ldr	r1, [r7, #4]
 800c946:	4618      	mov	r0, r3
 800c948:	f000 fa7e 	bl	800ce48 <memcpy>
                if ( pData != ((TINITSDOUPLOADEXPRESMBX MBXMEM *) pSdoResStored)->Data )
 800c94c:	e00d      	b.n	800c96a <SDOS_SdoRes+0xce>
                }
            }
            else
            {
                /* Normal response */
                if ( pData != ((TINITSDOUPLOADNORMRESMBX MBXMEM *) pSdoResStored)->Data )
 800c94e:	4b11      	ldr	r3, [pc, #68]	; (800c994 <SDOS_SdoRes+0xf8>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	3310      	adds	r3, #16
 800c954:	687a      	ldr	r2, [r7, #4]
 800c956:	429a      	cmp	r2, r3
 800c958:	d007      	beq.n	800c96a <SDOS_SdoRes+0xce>
                {
                    /* the data is not in the response buffer yet, it shall be copied */
                    MBXMEMCPY(((TINITSDOUPLOADNORMRESMBX MBXMEM *) pSdoResStored)->Data, pData, objLength);
 800c95a:	4b0e      	ldr	r3, [pc, #56]	; (800c994 <SDOS_SdoRes+0xf8>)
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	3310      	adds	r3, #16
 800c960:	68ba      	ldr	r2, [r7, #8]
 800c962:	6879      	ldr	r1, [r7, #4]
 800c964:	4618      	mov	r0, r3
 800c966:	f000 fa6f 	bl	800ce48 <memcpy>
                }
            }
        }

        /* SDO access is finished, send the response */
        bSdoInWork = FALSE;
 800c96a:	4b09      	ldr	r3, [pc, #36]	; (800c990 <SDOS_SdoRes+0xf4>)
 800c96c:	2200      	movs	r2, #0
 800c96e:	701a      	strb	r2, [r3, #0]
        SdoRes(abort, command, completeAccess, dataSize, objLength, pSdoResStored);
 800c970:	4b08      	ldr	r3, [pc, #32]	; (800c994 <SDOS_SdoRes+0xf8>)
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	8afc      	ldrh	r4, [r7, #22]
 800c976:	7d3a      	ldrb	r2, [r7, #20]
 800c978:	7d79      	ldrb	r1, [r7, #21]
 800c97a:	7bf8      	ldrb	r0, [r7, #15]
 800c97c:	9301      	str	r3, [sp, #4]
 800c97e:	68bb      	ldr	r3, [r7, #8]
 800c980:	9300      	str	r3, [sp, #0]
 800c982:	4623      	mov	r3, r4
 800c984:	f7ff fc18 	bl	800c1b8 <SdoRes>
    }
}
 800c988:	bf00      	nop
 800c98a:	371c      	adds	r7, #28
 800c98c:	46bd      	mov	sp, r7
 800c98e:	bd90      	pop	{r4, r7, pc}
 800c990:	20000bc4 	.word	0x20000bc4
 800c994:	20000bc0 	.word	0x20000bc0
 800c998:	20000878 	.word	0x20000878
 800c99c:	20000bc6 	.word	0x20000bc6
 800c9a0:	20000bd0 	.word	0x20000bd0
 800c9a4:	20000bc7 	.word	0x20000bc7
 800c9a8:	20000bd4 	.word	0x20000bd4
 800c9ac:	20000bc5 	.word	0x20000bc5
 800c9b0:	20000bb4 	.word	0x20000bb4
 800c9b4:	20000bcc 	.word	0x20000bcc

0800c9b8 <SDOS_SdoInfoInd>:
            is received from the master and calls depending from
            the opcode the concerning function.
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 SDOS_SdoInfoInd( TSDOINFORMATION MBXMEM *pSdoInfoInd )
{
 800c9b8:	b590      	push	{r4, r7, lr}
 800c9ba:	b08f      	sub	sp, #60	; 0x3c
 800c9bc:	af02      	add	r7, sp, #8
 800c9be:	6078      	str	r0, [r7, #4]
    UINT8 abort = 0;
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	73fb      	strb	r3, [r7, #15]
    /* the variable opCode contains the requested SDO Information type */
    UINT8 opCode = (UINT8) ((pSdoInfoInd->SdoHeader.InfoHead & INFOHEAD_OPCODE_MASK) >> INFOHEAD_OPCODE_SHIFT);
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	891b      	ldrh	r3, [r3, #8]
 800c9c8:	b2db      	uxtb	r3, r3
 800c9ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9ce:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    OBJCONST TOBJECT OBJMEM * pObjEntry;
    UINT16 index;
    UINT8 flags = COE_SERVICE;
 800c9d2:	2302      	movs	r3, #2
 800c9d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* it has to be checked if the mailbox protocol is correct, the sent mailbox data length has to
       great enough for the service header of the requested SDO Information type */
    if ( opCode == SDOINFOSERVICE_ENTRYDESCRIPTION_Q )
 800c9d8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800c9dc:	2b05      	cmp	r3, #5
 800c9de:	d105      	bne.n	800c9ec <SDOS_SdoInfoInd+0x34>
    {
        if ( pSdoInfoInd->MbxHeader.Length < SIZEOF_SDOINFOENTRYREQSTRUCT )
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	881b      	ldrh	r3, [r3, #0]
 800c9e4:	2b09      	cmp	r3, #9
 800c9e6:	d807      	bhi.n	800c9f8 <SDOS_SdoInfoInd+0x40>
            return MBXERR_SIZETOOSHORT;
 800c9e8:	2306      	movs	r3, #6
 800c9ea:	e1d6      	b.n	800cd9a <SDOS_SdoInfoInd+0x3e2>
    }
    else
    {
        if ( pSdoInfoInd->MbxHeader.Length < SIZEOF_SDOINFOLISTSTRUCT )
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	881b      	ldrh	r3, [r3, #0]
 800c9f0:	2b07      	cmp	r3, #7
 800c9f2:	d801      	bhi.n	800c9f8 <SDOS_SdoInfoInd+0x40>
            return MBXERR_SIZETOOSHORT;
 800c9f4:	2306      	movs	r3, #6
 800c9f6:	e1d0      	b.n	800cd9a <SDOS_SdoInfoInd+0x3e2>
    }

    switch ( opCode )
 800c9f8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800c9fc:	2b05      	cmp	r3, #5
 800c9fe:	f000 80c9 	beq.w	800cb94 <SDOS_SdoInfoInd+0x1dc>
 800ca02:	2b05      	cmp	r3, #5
 800ca04:	f300 8195 	bgt.w	800cd32 <SDOS_SdoInfoInd+0x37a>
 800ca08:	2b01      	cmp	r3, #1
 800ca0a:	d003      	beq.n	800ca14 <SDOS_SdoInfoInd+0x5c>
 800ca0c:	2b03      	cmp	r3, #3
 800ca0e:	f000 80c1 	beq.w	800cb94 <SDOS_SdoInfoInd+0x1dc>
 800ca12:	e18e      	b.n	800cd32 <SDOS_SdoInfoInd+0x37a>
    {
    case SDOINFOSERVICE_OBJDICTIONARYLIST_Q:
        /* an object list is requested, check if the list type is supported */
        if ( SWAPWORD(pSdoInfoInd->SdoHeader.Data.List.ListType) <= INFO_LIST_TYPE_MAX )
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	899b      	ldrh	r3, [r3, #12]
 800ca18:	2b05      	cmp	r3, #5
 800ca1a:	f200 818d 	bhi.w	800cd38 <SDOS_SdoInfoInd+0x380>
        {
            UINT16 size = 0;
 800ca1e:	2300      	movs	r3, #0
 800ca20:	85bb      	strh	r3, [r7, #44]	; 0x2c
            /* the variable listType contains the requested listType */
            UINT8 listType = (UINT8) SWAPWORD(pSdoInfoInd->SdoHeader.Data.List.ListType);
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	899b      	ldrh	r3, [r3, #12]
 800ca26:	75fb      	strb	r3, [r7, #23]

            /* the SDO Information Header has to be stored because this function will be
               called again if the response could not be sent with one mailbox service, the
               variable nSdoInfoFragmentsLeft is 0 zero for the first call and unequal 0
               for the following calls */
            MBXMEMCPY(aSdoInfoHeader, pSdoInfoInd, SDO_INFO_HEADER_BYTE_SIZE);
 800ca28:	220e      	movs	r2, #14
 800ca2a:	6879      	ldr	r1, [r7, #4]
 800ca2c:	489c      	ldr	r0, [pc, #624]	; (800cca0 <SDOS_SdoInfoInd+0x2e8>)
 800ca2e:	f000 fa0b 	bl	800ce48 <memcpy>
            if ( listType-- == 0 )
 800ca32:	7dfb      	ldrb	r3, [r7, #23]
 800ca34:	1e5a      	subs	r2, r3, #1
 800ca36:	75fa      	strb	r2, [r7, #23]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d122      	bne.n	800ca82 <SDOS_SdoInfoInd+0xca>
                /* List-Type 0: length of the lists */
                UINT8 i;

                /* the needed mailbox size for List-Type 0 response is just 24 bytes, the mailbox has always
                   to be at least 24 bytes to support the SDO Information service */
                nSdoInfoFragmentsLeft = 0;
 800ca3c:	4b99      	ldr	r3, [pc, #612]	; (800cca4 <SDOS_SdoInfoInd+0x2ec>)
 800ca3e:	2200      	movs	r2, #0
 800ca40:	801a      	strh	r2, [r3, #0]
                for (i = 0; i < INFO_LIST_TYPE_MAX; i++)
 800ca42:	2300      	movs	r3, #0
 800ca44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ca48:	e014      	b.n	800ca74 <SDOS_SdoInfoInd+0xbc>
                {
                    UINT16 n = OBJ_GetNoOfObjects(i);
 800ca4a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ca4e:	4618      	mov	r0, r3
 800ca50:	f7fd feae 	bl	800a7b0 <OBJ_GetNoOfObjects>
 800ca54:	4603      	mov	r3, r0
 800ca56:	823b      	strh	r3, [r7, #16]

                    /* copy the number of objects of the list type in the SDO Information response */
                    ((UINT16 MBXMEM *) &pSdoInfoInd->CoeHeader)[(SIZEOF_SDOINFOLISTSTRUCT>>1)+i] = SWAPWORD(n);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	1d9a      	adds	r2, r3, #6
 800ca5c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ca60:	3304      	adds	r3, #4
 800ca62:	005b      	lsls	r3, r3, #1
 800ca64:	4413      	add	r3, r2
 800ca66:	8a3a      	ldrh	r2, [r7, #16]
 800ca68:	801a      	strh	r2, [r3, #0]
                for (i = 0; i < INFO_LIST_TYPE_MAX; i++)
 800ca6a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ca6e:	3301      	adds	r3, #1
 800ca70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ca74:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ca78:	2b04      	cmp	r3, #4
 800ca7a:	d9e6      	bls.n	800ca4a <SDOS_SdoInfoInd+0x92>
                }

                /* size of the mailbox service response */
                size = (INFO_LIST_TYPE_MAX << 1) + SIZEOF_SDOINFOLISTSTRUCT;
 800ca7c:	2312      	movs	r3, #18
 800ca7e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800ca80:	e058      	b.n	800cb34 <SDOS_SdoInfoInd+0x17c>
            }
            else
            {
                /* object list with indexes is requested */
                UINT16 MBXMEM * pData;
                UINT16 n = 0;
 800ca82:	2300      	movs	r3, #0
 800ca84:	82bb      	strh	r3, [r7, #20]

                if ( nSdoInfoFragmentsLeft )
 800ca86:	4b87      	ldr	r3, [pc, #540]	; (800cca4 <SDOS_SdoInfoInd+0x2ec>)
 800ca88:	881b      	ldrh	r3, [r3, #0]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d011      	beq.n	800cab2 <SDOS_SdoInfoInd+0xfa>
                {
                    /* the next fragment of the SDO Information response shall be sent */
                    /* initialize size with the maximum size fits into one mailbox service */
                    {
                        size = u16SendMbxSize - SIZEOF_SDOINFO - MBX_HEADER_SIZE;
 800ca8e:	4b86      	ldr	r3, [pc, #536]	; (800cca8 <SDOS_SdoInfoInd+0x2f0>)
 800ca90:	881b      	ldrh	r3, [r3, #0]
 800ca92:	3b0c      	subs	r3, #12
 800ca94:	85bb      	strh	r3, [r7, #44]	; 0x2c
                    }
                    /* initialize pData with the pointer where the fragment has to be copied */
                    pData = &((UINT16 MBXMEM *) &pSdoInfoInd->CoeHeader)[SIZEOF_SDOINFO>>1];
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	3306      	adds	r3, #6
 800ca9a:	3306      	adds	r3, #6
 800ca9c:	627b      	str	r3, [r7, #36]	; 0x24
                    /* initialize index with the next index to be sent */
                    index = nSdoInfoIndex;
 800ca9e:	4b83      	ldr	r3, [pc, #524]	; (800ccac <SDOS_SdoInfoInd+0x2f4>)
 800caa0:	881b      	ldrh	r3, [r3, #0]
 800caa2:	81bb      	strh	r3, [r7, #12]
                    /* decrement the number of fragments to be sent */
                    nSdoInfoFragmentsLeft--;
 800caa4:	4b7f      	ldr	r3, [pc, #508]	; (800cca4 <SDOS_SdoInfoInd+0x2ec>)
 800caa6:	881b      	ldrh	r3, [r3, #0]
 800caa8:	3b01      	subs	r3, #1
 800caaa:	b29a      	uxth	r2, r3
 800caac:	4b7d      	ldr	r3, [pc, #500]	; (800cca4 <SDOS_SdoInfoInd+0x2ec>)
 800caae:	801a      	strh	r2, [r3, #0]
 800cab0:	e029      	b.n	800cb06 <SDOS_SdoInfoInd+0x14e>
                }
                else
                {
                    /* the first fragment of the SDO Information response has to be sent */
                    /* get the number of objects of the requested object list */
                    n = OBJ_GetNoOfObjects(listType);
 800cab2:	7dfb      	ldrb	r3, [r7, #23]
 800cab4:	4618      	mov	r0, r3
 800cab6:	f7fd fe7b 	bl	800a7b0 <OBJ_GetNoOfObjects>
 800caba:	4603      	mov	r3, r0
 800cabc:	82bb      	strh	r3, [r7, #20]
                    /* we start with index 0x1000 */
                    index = 0x1000;
 800cabe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cac2:	81bb      	strh	r3, [r7, #12]
                    /* initialize size with the maximum size fits into one mailbox service */
                    {
                        size = u16SendMbxSize - SIZEOF_SDOINFOLISTSTRUCT - MBX_HEADER_SIZE;
 800cac4:	4b78      	ldr	r3, [pc, #480]	; (800cca8 <SDOS_SdoInfoInd+0x2f0>)
 800cac6:	881b      	ldrh	r3, [r3, #0]
 800cac8:	3b0e      	subs	r3, #14
 800caca:	85bb      	strh	r3, [r7, #44]	; 0x2c
                    }
                    /* initialize pData with the pointer where the fragment has to be copied */
                    pData = &((UINT16 MBXMEM *) &pSdoInfoInd->CoeHeader)[SIZEOF_SDOINFOLISTSTRUCT>>1];
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	3306      	adds	r3, #6
 800cad0:	3308      	adds	r3, #8
 800cad2:	627b      	str	r3, [r7, #36]	; 0x24
                    /*Check if List need to be send in fragments*/
                    if( (n<<1) > size)
 800cad4:	8abb      	ldrh	r3, [r7, #20]
 800cad6:	005a      	lsls	r2, r3, #1
 800cad8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800cada:	429a      	cmp	r2, r3
 800cadc:	dd10      	ble.n	800cb00 <SDOS_SdoInfoInd+0x148>
                        /*number of Bytes to transmit don't fit into one mailbox datagram*/

                        /*calculate number of fragments which need to be send
                        total number of bytes - bytes which will be transmitted with the current response plus the fragment size - 1 (to round up) divided by the size of the following fragments 
                        */
                        UINT16 Fragsize = size + 2;
 800cade:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800cae0:	3302      	adds	r3, #2
 800cae2:	827b      	strh	r3, [r7, #18]
                        nSdoInfoFragmentsLeft = (((n<<1)-size + (Fragsize-1)) /Fragsize);
 800cae4:	8abb      	ldrh	r3, [r7, #20]
 800cae6:	005a      	lsls	r2, r3, #1
 800cae8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800caea:	1ad2      	subs	r2, r2, r3
 800caec:	8a7b      	ldrh	r3, [r7, #18]
 800caee:	3b01      	subs	r3, #1
 800caf0:	441a      	add	r2, r3
 800caf2:	8a7b      	ldrh	r3, [r7, #18]
 800caf4:	fb92 f3f3 	sdiv	r3, r2, r3
 800caf8:	b29a      	uxth	r2, r3
 800cafa:	4b6a      	ldr	r3, [pc, #424]	; (800cca4 <SDOS_SdoInfoInd+0x2ec>)
 800cafc:	801a      	strh	r2, [r3, #0]
 800cafe:	e002      	b.n	800cb06 <SDOS_SdoInfoInd+0x14e>
                    }
                    else
                    {
                        nSdoInfoFragmentsLeft = 0;
 800cb00:	4b68      	ldr	r3, [pc, #416]	; (800cca4 <SDOS_SdoInfoInd+0x2ec>)
 800cb02:	2200      	movs	r2, #0
 800cb04:	801a      	strh	r2, [r3, #0]
                    }
                }

                /* get the next part of the requested object list */
                size = OBJ_GetObjectList(listType, &index, size, pData,&abort);
 800cb06:	7dfb      	ldrb	r3, [r7, #23]
 800cb08:	b298      	uxth	r0, r3
 800cb0a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800cb0c:	f107 010c 	add.w	r1, r7, #12
 800cb10:	f107 030f 	add.w	r3, r7, #15
 800cb14:	9300      	str	r3, [sp, #0]
 800cb16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb18:	f7fd fe96 	bl	800a848 <OBJ_GetObjectList>
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	85bb      	strh	r3, [r7, #44]	; 0x2c

                /* store index for next fragment */
                nSdoInfoIndex = index;
 800cb20:	89ba      	ldrh	r2, [r7, #12]
 800cb22:	4b62      	ldr	r3, [pc, #392]	; (800ccac <SDOS_SdoInfoInd+0x2f4>)
 800cb24:	801a      	strh	r2, [r3, #0]
                /* size contains before the instruction the size still available in the mailbox buffer
                    and shall contain the size of the mailbox response data after the next instruction */
                {
                    size = u16SendMbxSize - size - MBX_HEADER_SIZE;
 800cb26:	4b60      	ldr	r3, [pc, #384]	; (800cca8 <SDOS_SdoInfoInd+0x2f0>)
 800cb28:	881a      	ldrh	r2, [r3, #0]
 800cb2a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800cb2c:	1ad3      	subs	r3, r2, r3
 800cb2e:	b29b      	uxth	r3, r3
 800cb30:	3b06      	subs	r3, #6
 800cb32:	85bb      	strh	r3, [r7, #44]	; 0x2c
                }
            }

            /* size of the mailbox response data */
            pSdoInfoInd->MbxHeader.Length    = size;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800cb38:	801a      	strh	r2, [r3, #0]

            if(abort == 0)
 800cb3a:	7bfb      	ldrb	r3, [r7, #15]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	f040 80fb 	bne.w	800cd38 <SDOS_SdoInfoInd+0x380>
            {
             pSdoInfoInd->SdoHeader.InfoHead &= ~INFOHEAD_OPCODE_MASK;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	891b      	ldrh	r3, [r3, #8]
 800cb46:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cb4a:	b29a      	uxth	r2, r3
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	811a      	strh	r2, [r3, #8]
             pSdoInfoInd->SdoHeader.InfoHead |= (UINT16) (SDOINFOSERVICE_OBJDICTIONARYLIST_S << INFOHEAD_OPCODE_SHIFT);
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	891b      	ldrh	r3, [r3, #8]
 800cb54:	f043 0302 	orr.w	r3, r3, #2
 800cb58:	b29a      	uxth	r2, r3
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	811a      	strh	r2, [r3, #8]
                /* number of fragments still has to be sent */
                pSdoInfoInd->SdoHeader.FragmentsLeft             = SWAPWORD(nSdoInfoFragmentsLeft);
 800cb5e:	4b51      	ldr	r3, [pc, #324]	; (800cca4 <SDOS_SdoInfoInd+0x2ec>)
 800cb60:	881a      	ldrh	r2, [r3, #0]
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	815a      	strh	r2, [r3, #10]

                if (nSdoInfoFragmentsLeft)
 800cb66:	4b4f      	ldr	r3, [pc, #316]	; (800cca4 <SDOS_SdoInfoInd+0x2ec>)
 800cb68:	881b      	ldrh	r3, [r3, #0]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	f000 80e4 	beq.w	800cd38 <SDOS_SdoInfoInd+0x380>
                {
                    /* there still are fragments to be sent,
                       the InComplete flag in the SDO Information response has to be sent */
                    pSdoInfoInd->SdoHeader.InfoHead &= ~ INFOHEADER_INCOMPLETE_MASK;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	891b      	ldrh	r3, [r3, #8]
 800cb74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cb78:	b29a      	uxth	r2, r3
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	811a      	strh	r2, [r3, #8]
                    pSdoInfoInd->SdoHeader.InfoHead |= (UINT16) (SDOINFOSERVICE_INCOMPLETE << INFOHEAD_OPCODE_SHIFT);
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	891b      	ldrh	r3, [r3, #8]
 800cb82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb86:	b29a      	uxth	r2, r3
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	811a      	strh	r2, [r3, #8]
                    /* the FRAGMENTS_FOLLOW flag has to be set for the function MBX_MailboxSendReq to
                       indicate the mailbox handler that still fragments has to be sent so that this
                        function shall be called again from COE_ContinueInd when the actual mailbox buffer
                        was sent */
                    flags = FRAGMENTS_FOLLOW | COE_SERVICE;
 800cb8c:	2382      	movs	r3, #130	; 0x82
 800cb8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                }
            }
        }
        break;
 800cb92:	e0d1      	b.n	800cd38 <SDOS_SdoInfoInd+0x380>

    case SDOINFOSERVICE_OBJDESCRIPTION_Q:
    case SDOINFOSERVICE_ENTRYDESCRIPTION_Q:
        /* get the requested index */
        index = SWAPWORD(pSdoInfoInd->SdoHeader.Data.Obj.Index);
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	899b      	ldrh	r3, [r3, #12]
 800cb98:	81bb      	strh	r3, [r7, #12]
        if(index < 0x1000)
 800cb9a:	89bb      	ldrh	r3, [r7, #12]
 800cb9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cba0:	d202      	bcs.n	800cba8 <SDOS_SdoInfoInd+0x1f0>
        {
            /*SDO Info access is only allowed for objects >= 0x1000*/
            abort = ABORTIDX_UNSUPPORTED_ACCESS;
 800cba2:	2305      	movs	r3, #5
 800cba4:	73fb      	strb	r3, [r7, #15]
                }
            }
            else
                abort = ABORTIDX_OBJECT_NOT_EXISTING;
        }
        break;
 800cba6:	e0c9      	b.n	800cd3c <SDOS_SdoInfoInd+0x384>
            pObjEntry = OBJ_GetObjectHandle( index );
 800cba8:	89bb      	ldrh	r3, [r7, #12]
 800cbaa:	4618      	mov	r0, r3
 800cbac:	f7fd fd12 	bl	800a5d4 <OBJ_GetObjectHandle>
 800cbb0:	61f8      	str	r0, [r7, #28]
            if ( pObjEntry )
 800cbb2:	69fb      	ldr	r3, [r7, #28]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	f000 80b9 	beq.w	800cd2c <SDOS_SdoInfoInd+0x374>
                UINT16 size = 0;
 800cbba:	2300      	movs	r3, #0
 800cbbc:	847b      	strh	r3, [r7, #34]	; 0x22
                if ( opCode == SDOINFOSERVICE_OBJDESCRIPTION_Q )
 800cbbe:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800cbc2:	2b03      	cmp	r3, #3
 800cbc4:	d126      	bne.n	800cc14 <SDOS_SdoInfoInd+0x25c>
                    OBJTOMBXMEMCPY(&pSdoInfoInd->SdoHeader.Data.Obj.Res, OBJ_GetObjDesc(pObjEntry), SDO_INFO_OBJ_DESC_SIZE);
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	f103 040e 	add.w	r4, r3, #14
 800cbcc:	69f8      	ldr	r0, [r7, #28]
 800cbce:	f7fd ff77 	bl	800aac0 <OBJ_GetObjDesc>
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	6023      	str	r3, [r4, #0]
                    size = OBJ_GetDesc(index, 0, pObjEntry, NULL) + SIZEOF_SDOINFOOBJSTRUCT;
 800cbd8:	89b8      	ldrh	r0, [r7, #12]
 800cbda:	2300      	movs	r3, #0
 800cbdc:	69fa      	ldr	r2, [r7, #28]
 800cbde:	2100      	movs	r1, #0
 800cbe0:	f7fd feae 	bl	800a940 <OBJ_GetDesc>
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	330c      	adds	r3, #12
 800cbe8:	847b      	strh	r3, [r7, #34]	; 0x22
                    if ( size > (u16SendMbxSize - MBX_HEADER_SIZE) )
 800cbea:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800cbec:	4b2e      	ldr	r3, [pc, #184]	; (800cca8 <SDOS_SdoInfoInd+0x2f0>)
 800cbee:	881b      	ldrh	r3, [r3, #0]
 800cbf0:	3b06      	subs	r3, #6
 800cbf2:	429a      	cmp	r2, r3
 800cbf4:	d902      	bls.n	800cbfc <SDOS_SdoInfoInd+0x244>
                        size = SIZEOF_SDOINFOOBJSTRUCT;
 800cbf6:	230c      	movs	r3, #12
 800cbf8:	847b      	strh	r3, [r7, #34]	; 0x22
 800cbfa:	e07b      	b.n	800ccf4 <SDOS_SdoInfoInd+0x33c>
                        size = OBJ_GetDesc(index, 0, pObjEntry, ((UINT16 MBXMEM *) &(&pSdoInfoInd->SdoHeader.Data.Obj.Res)[1])) + SIZEOF_SDOINFOOBJSTRUCT;
 800cbfc:	89b8      	ldrh	r0, [r7, #12]
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	330e      	adds	r3, #14
 800cc02:	3304      	adds	r3, #4
 800cc04:	69fa      	ldr	r2, [r7, #28]
 800cc06:	2100      	movs	r1, #0
 800cc08:	f7fd fe9a 	bl	800a940 <OBJ_GetDesc>
 800cc0c:	4603      	mov	r3, r0
 800cc0e:	330c      	adds	r3, #12
 800cc10:	847b      	strh	r3, [r7, #34]	; 0x22
 800cc12:	e06f      	b.n	800ccf4 <SDOS_SdoInfoInd+0x33c>
                    UINT8 subindex = (UINT8) ((pSdoInfoInd->SdoHeader.Data.Entry.Info & ENTRY_MASK_SUBINDEX) >> ENTRY_SUBINDEX_SHIFT);
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	89db      	ldrh	r3, [r3, #14]
 800cc18:	76fb      	strb	r3, [r7, #27]
                    UINT8 maxSubindex = (OBJ_GetObjDesc(pObjEntry)->ObjFlags & OBJFLAGS_MAXSUBINDEXMASK) >> OBJFLAGS_MAXSUBINDEXSHIFT;
 800cc1a:	69f8      	ldr	r0, [r7, #28]
 800cc1c:	f7fd ff50 	bl	800aac0 <OBJ_GetObjDesc>
 800cc20:	4603      	mov	r3, r0
 800cc22:	885b      	ldrh	r3, [r3, #2]
 800cc24:	76bb      	strb	r3, [r7, #26]
                    if ( subindex <= maxSubindex )
 800cc26:	7efa      	ldrb	r2, [r7, #27]
 800cc28:	7ebb      	ldrb	r3, [r7, #26]
 800cc2a:	429a      	cmp	r2, r3
 800cc2c:	d860      	bhi.n	800ccf0 <SDOS_SdoInfoInd+0x338>
                        OBJTOMBXMEMCPY(&pSdoInfoInd->SdoHeader.Data.Entry.Res, OBJ_GetEntryDesc(pObjEntry, subindex), SIZEOF(TSDOINFOENTRYDESC));
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	f103 0410 	add.w	r4, r3, #16
 800cc34:	7efb      	ldrb	r3, [r7, #27]
 800cc36:	4619      	mov	r1, r3
 800cc38:	69f8      	ldr	r0, [r7, #28]
 800cc3a:	f7fd ff15 	bl	800aa68 <OBJ_GetEntryDesc>
 800cc3e:	4603      	mov	r3, r0
 800cc40:	2206      	movs	r2, #6
 800cc42:	4619      	mov	r1, r3
 800cc44:	4620      	mov	r0, r4
 800cc46:	f000 f8ff 	bl	800ce48 <memcpy>
                        pSdoInfoInd->SdoHeader.Data.Entry.Info &= ~ENTRY_MASK_VALUEINFO;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	89db      	ldrh	r3, [r3, #14]
 800cc4e:	b2db      	uxtb	r3, r3
 800cc50:	b29a      	uxth	r2, r3
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	81da      	strh	r2, [r3, #14]
                        ObjectFlags = OBJ_GetObjDesc(pObjEntry)->ObjFlags;
 800cc56:	69f8      	ldr	r0, [r7, #28]
 800cc58:	f7fd ff32 	bl	800aac0 <OBJ_GetObjDesc>
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	885b      	ldrh	r3, [r3, #2]
 800cc60:	833b      	strh	r3, [r7, #24]
                        ObjectFlags = (ObjectFlags & OBJFLAGS_OBJCODEMASK) >> OBJFLAGS_OBJCODESHIFT;
 800cc62:	8b3b      	ldrh	r3, [r7, #24]
 800cc64:	121b      	asrs	r3, r3, #8
 800cc66:	b29b      	uxth	r3, r3
 800cc68:	f003 030f 	and.w	r3, r3, #15
 800cc6c:	833b      	strh	r3, [r7, #24]
                        if(((ObjectFlags == OBJCODE_ARR) || (ObjectFlags == OBJCODE_REC)) && (subindex == 0) )
 800cc6e:	8b3b      	ldrh	r3, [r7, #24]
 800cc70:	2b08      	cmp	r3, #8
 800cc72:	d002      	beq.n	800cc7a <SDOS_SdoInfoInd+0x2c2>
 800cc74:	8b3b      	ldrh	r3, [r7, #24]
 800cc76:	2b09      	cmp	r3, #9
 800cc78:	d11c      	bne.n	800ccb4 <SDOS_SdoInfoInd+0x2fc>
 800cc7a:	7efb      	ldrb	r3, [r7, #27]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d119      	bne.n	800ccb4 <SDOS_SdoInfoInd+0x2fc>
                            OBJTOMBXSTRCPY( ((UINT16 MBXMEM *) &(&pSdoInfoInd->SdoHeader.Data.Entry.Res)[1]), aSubindexDesc, SIZEOF(aSubindexDesc) );
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	3310      	adds	r3, #16
 800cc84:	3306      	adds	r3, #6
 800cc86:	4a0a      	ldr	r2, [pc, #40]	; (800ccb0 <SDOS_SdoInfoInd+0x2f8>)
 800cc88:	6814      	ldr	r4, [r2, #0]
 800cc8a:	6850      	ldr	r0, [r2, #4]
 800cc8c:	6891      	ldr	r1, [r2, #8]
 800cc8e:	601c      	str	r4, [r3, #0]
 800cc90:	6058      	str	r0, [r3, #4]
 800cc92:	6099      	str	r1, [r3, #8]
 800cc94:	7b12      	ldrb	r2, [r2, #12]
 800cc96:	731a      	strb	r2, [r3, #12]
                            size = 12 + SIZEOF_SDOINFO + SIZEOF(TSDOINFOENTRY); // 12: Length of "SubIndex 000"
 800cc98:	231c      	movs	r3, #28
 800cc9a:	847b      	strh	r3, [r7, #34]	; 0x22
 800cc9c:	e02a      	b.n	800ccf4 <SDOS_SdoInfoInd+0x33c>
 800cc9e:	bf00      	nop
 800cca0:	20000ba4 	.word	0x20000ba4
 800cca4:	20000bb8 	.word	0x20000bb8
 800cca8:	20000878 	.word	0x20000878
 800ccac:	20000bba 	.word	0x20000bba
 800ccb0:	20000360 	.word	0x20000360
                            size = OBJ_GetDesc(index, subindex, pObjEntry, NULL) + SIZEOF_SDOINFO + SIZEOF(TSDOINFOENTRY);
 800ccb4:	89b8      	ldrh	r0, [r7, #12]
 800ccb6:	7ef9      	ldrb	r1, [r7, #27]
 800ccb8:	2300      	movs	r3, #0
 800ccba:	69fa      	ldr	r2, [r7, #28]
 800ccbc:	f7fd fe40 	bl	800a940 <OBJ_GetDesc>
 800ccc0:	4603      	mov	r3, r0
 800ccc2:	3310      	adds	r3, #16
 800ccc4:	847b      	strh	r3, [r7, #34]	; 0x22
                            if ( size > (u16SendMbxSize - MBX_HEADER_SIZE) )
 800ccc6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ccc8:	4b36      	ldr	r3, [pc, #216]	; (800cda4 <SDOS_SdoInfoInd+0x3ec>)
 800ccca:	881b      	ldrh	r3, [r3, #0]
 800cccc:	3b06      	subs	r3, #6
 800ccce:	429a      	cmp	r2, r3
 800ccd0:	d902      	bls.n	800ccd8 <SDOS_SdoInfoInd+0x320>
                                size =  SIZEOF_SDOINFO + SIZEOF(TSDOINFOENTRY);
 800ccd2:	2310      	movs	r3, #16
 800ccd4:	847b      	strh	r3, [r7, #34]	; 0x22
 800ccd6:	e00d      	b.n	800ccf4 <SDOS_SdoInfoInd+0x33c>
                                size = OBJ_GetDesc(index, subindex, pObjEntry, ((UINT16 MBXMEM *) &(&pSdoInfoInd->SdoHeader.Data.Entry.Res)[1])) + SIZEOF_SDOINFO + SIZEOF(TSDOINFOENTRY);
 800ccd8:	89b8      	ldrh	r0, [r7, #12]
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	3310      	adds	r3, #16
 800ccde:	3306      	adds	r3, #6
 800cce0:	7ef9      	ldrb	r1, [r7, #27]
 800cce2:	69fa      	ldr	r2, [r7, #28]
 800cce4:	f7fd fe2c 	bl	800a940 <OBJ_GetDesc>
 800cce8:	4603      	mov	r3, r0
 800ccea:	3310      	adds	r3, #16
 800ccec:	847b      	strh	r3, [r7, #34]	; 0x22
 800ccee:	e001      	b.n	800ccf4 <SDOS_SdoInfoInd+0x33c>
                        abort = ABORTIDX_SUBINDEX_NOT_EXISTING;
 800ccf0:	2311      	movs	r3, #17
 800ccf2:	73fb      	strb	r3, [r7, #15]
                if ( abort == 0 )
 800ccf4:	7bfb      	ldrb	r3, [r7, #15]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d120      	bne.n	800cd3c <SDOS_SdoInfoInd+0x384>
                        pSdoInfoInd->SdoHeader.FragmentsLeft = 0;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	815a      	strh	r2, [r3, #10]
                        pSdoInfoInd->MbxHeader.Length = size;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800cd04:	801a      	strh	r2, [r3, #0]
                        pSdoInfoInd->SdoHeader.InfoHead &= ~INFOHEAD_OPCODE_MASK;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	891b      	ldrh	r3, [r3, #8]
 800cd0a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cd0e:	b29a      	uxth	r2, r3
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	811a      	strh	r2, [r3, #8]
                        pSdoInfoInd->SdoHeader.InfoHead |= (UINT16)((opCode + 1) << INFOHEAD_OPCODE_SHIFT);
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	891a      	ldrh	r2, [r3, #8]
 800cd18:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800cd1c:	b29b      	uxth	r3, r3
 800cd1e:	3301      	adds	r3, #1
 800cd20:	b29b      	uxth	r3, r3
 800cd22:	4313      	orrs	r3, r2
 800cd24:	b29a      	uxth	r2, r3
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	811a      	strh	r2, [r3, #8]
        break;
 800cd2a:	e007      	b.n	800cd3c <SDOS_SdoInfoInd+0x384>
                abort = ABORTIDX_OBJECT_NOT_EXISTING;
 800cd2c:	2308      	movs	r3, #8
 800cd2e:	73fb      	strb	r3, [r7, #15]
        break;
 800cd30:	e004      	b.n	800cd3c <SDOS_SdoInfoInd+0x384>
    default:
        abort = ABORTIDX_COMMAND_SPECIFIER_UNKNOWN;
 800cd32:	2303      	movs	r3, #3
 800cd34:	73fb      	strb	r3, [r7, #15]
 800cd36:	e002      	b.n	800cd3e <SDOS_SdoInfoInd+0x386>
        break;
 800cd38:	bf00      	nop
 800cd3a:	e000      	b.n	800cd3e <SDOS_SdoInfoInd+0x386>
        break;
 800cd3c:	bf00      	nop
    }

    if ( abort )
 800cd3e:	7bfb      	ldrb	r3, [r7, #15]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d01d      	beq.n	800cd80 <SDOS_SdoInfoInd+0x3c8>
    {
        /* send a SDO Information Error response */
        pSdoInfoInd->MbxHeader.Length = SIZEOF_SDOINFOERRORSTRUCT;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	220a      	movs	r2, #10
 800cd48:	801a      	strh	r2, [r3, #0]

        pSdoInfoInd->SdoHeader.InfoHead &= ~INFOHEAD_OPCODE_MASK;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	891b      	ldrh	r3, [r3, #8]
 800cd4e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cd52:	b29a      	uxth	r2, r3
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	811a      	strh	r2, [r3, #8]
        pSdoInfoInd->SdoHeader.InfoHead |= (UINT16) ((SDOINFOSERVICE_ERROR_Q) << INFOHEAD_OPCODE_SHIFT);
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	891b      	ldrh	r3, [r3, #8]
 800cd5c:	f043 0307 	orr.w	r3, r3, #7
 800cd60:	b29a      	uxth	r2, r3
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	811a      	strh	r2, [r3, #8]

        pSdoInfoInd->SdoHeader.FragmentsLeft = 0;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	2200      	movs	r2, #0
 800cd6a:	815a      	strh	r2, [r3, #10]
        pSdoInfoInd->SdoHeader.Data.Error.ErrorCode = SWAPDWORD(cAbortCode[abort]);
 800cd6c:	7bfb      	ldrb	r3, [r7, #15]
 800cd6e:	461a      	mov	r2, r3
 800cd70:	4b0d      	ldr	r3, [pc, #52]	; (800cda8 <SDOS_SdoInfoInd+0x3f0>)
 800cd72:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	60da      	str	r2, [r3, #12]

        nSdoInfoFragmentsLeft = 0;
 800cd7a:	4b0c      	ldr	r3, [pc, #48]	; (800cdac <SDOS_SdoInfoInd+0x3f4>)
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	801a      	strh	r2, [r3, #0]
    }

    if (MBX_MailboxSendReq((TMBX MBXMEM *) pSdoInfoInd, flags) != 0)
 800cd80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cd84:	4619      	mov	r1, r3
 800cd86:	6878      	ldr	r0, [r7, #4]
 800cd88:	f7fd fa50 	bl	800a22c <MBX_MailboxSendReq>
 800cd8c:	4603      	mov	r3, r0
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d002      	beq.n	800cd98 <SDOS_SdoInfoInd+0x3e0>
    {
        /* if the mailbox response could not be sent (or stored), the response will be
           stored in the variable pCoeSendStored and will be sent automatically
            from the mailbox handler (COE_ContinueInd) when the send mailbox will be read
            the next time from the master */
        pCoeSendStored = (TMBX MBXMEM *) pSdoInfoInd;
 800cd92:	4a07      	ldr	r2, [pc, #28]	; (800cdb0 <SDOS_SdoInfoInd+0x3f8>)
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	6013      	str	r3, [r2, #0]
    }

    return 0;
 800cd98:	2300      	movs	r3, #0
}
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	3734      	adds	r7, #52	; 0x34
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	bd90      	pop	{r4, r7, pc}
 800cda2:	bf00      	nop
 800cda4:	20000878 	.word	0x20000878
 800cda8:	0800db7c 	.word	0x0800db7c
 800cdac:	20000bb8 	.word	0x20000bb8
 800cdb0:	2000064c 	.word	0x2000064c

0800cdb4 <__errno>:
 800cdb4:	4b01      	ldr	r3, [pc, #4]	; (800cdbc <__errno+0x8>)
 800cdb6:	6818      	ldr	r0, [r3, #0]
 800cdb8:	4770      	bx	lr
 800cdba:	bf00      	nop
 800cdbc:	20000370 	.word	0x20000370

0800cdc0 <__libc_init_array>:
 800cdc0:	b570      	push	{r4, r5, r6, lr}
 800cdc2:	4d0d      	ldr	r5, [pc, #52]	; (800cdf8 <__libc_init_array+0x38>)
 800cdc4:	4c0d      	ldr	r4, [pc, #52]	; (800cdfc <__libc_init_array+0x3c>)
 800cdc6:	1b64      	subs	r4, r4, r5
 800cdc8:	10a4      	asrs	r4, r4, #2
 800cdca:	2600      	movs	r6, #0
 800cdcc:	42a6      	cmp	r6, r4
 800cdce:	d109      	bne.n	800cde4 <__libc_init_array+0x24>
 800cdd0:	4d0b      	ldr	r5, [pc, #44]	; (800ce00 <__libc_init_array+0x40>)
 800cdd2:	4c0c      	ldr	r4, [pc, #48]	; (800ce04 <__libc_init_array+0x44>)
 800cdd4:	f000 f94c 	bl	800d070 <_init>
 800cdd8:	1b64      	subs	r4, r4, r5
 800cdda:	10a4      	asrs	r4, r4, #2
 800cddc:	2600      	movs	r6, #0
 800cdde:	42a6      	cmp	r6, r4
 800cde0:	d105      	bne.n	800cdee <__libc_init_array+0x2e>
 800cde2:	bd70      	pop	{r4, r5, r6, pc}
 800cde4:	f855 3b04 	ldr.w	r3, [r5], #4
 800cde8:	4798      	blx	r3
 800cdea:	3601      	adds	r6, #1
 800cdec:	e7ee      	b.n	800cdcc <__libc_init_array+0xc>
 800cdee:	f855 3b04 	ldr.w	r3, [r5], #4
 800cdf2:	4798      	blx	r3
 800cdf4:	3601      	adds	r6, #1
 800cdf6:	e7f2      	b.n	800cdde <__libc_init_array+0x1e>
 800cdf8:	0800dbfc 	.word	0x0800dbfc
 800cdfc:	0800dbfc 	.word	0x0800dbfc
 800ce00:	0800dbfc 	.word	0x0800dbfc
 800ce04:	0800dc00 	.word	0x0800dc00

0800ce08 <malloc>:
 800ce08:	4b02      	ldr	r3, [pc, #8]	; (800ce14 <malloc+0xc>)
 800ce0a:	4601      	mov	r1, r0
 800ce0c:	6818      	ldr	r0, [r3, #0]
 800ce0e:	f000 b89d 	b.w	800cf4c <_malloc_r>
 800ce12:	bf00      	nop
 800ce14:	20000370 	.word	0x20000370

0800ce18 <free>:
 800ce18:	4b02      	ldr	r3, [pc, #8]	; (800ce24 <free+0xc>)
 800ce1a:	4601      	mov	r1, r0
 800ce1c:	6818      	ldr	r0, [r3, #0]
 800ce1e:	f000 b829 	b.w	800ce74 <_free_r>
 800ce22:	bf00      	nop
 800ce24:	20000370 	.word	0x20000370

0800ce28 <memcmp>:
 800ce28:	b510      	push	{r4, lr}
 800ce2a:	3901      	subs	r1, #1
 800ce2c:	4402      	add	r2, r0
 800ce2e:	4290      	cmp	r0, r2
 800ce30:	d101      	bne.n	800ce36 <memcmp+0xe>
 800ce32:	2000      	movs	r0, #0
 800ce34:	e005      	b.n	800ce42 <memcmp+0x1a>
 800ce36:	7803      	ldrb	r3, [r0, #0]
 800ce38:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ce3c:	42a3      	cmp	r3, r4
 800ce3e:	d001      	beq.n	800ce44 <memcmp+0x1c>
 800ce40:	1b18      	subs	r0, r3, r4
 800ce42:	bd10      	pop	{r4, pc}
 800ce44:	3001      	adds	r0, #1
 800ce46:	e7f2      	b.n	800ce2e <memcmp+0x6>

0800ce48 <memcpy>:
 800ce48:	440a      	add	r2, r1
 800ce4a:	4291      	cmp	r1, r2
 800ce4c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ce50:	d100      	bne.n	800ce54 <memcpy+0xc>
 800ce52:	4770      	bx	lr
 800ce54:	b510      	push	{r4, lr}
 800ce56:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce5e:	4291      	cmp	r1, r2
 800ce60:	d1f9      	bne.n	800ce56 <memcpy+0xe>
 800ce62:	bd10      	pop	{r4, pc}

0800ce64 <memset>:
 800ce64:	4402      	add	r2, r0
 800ce66:	4603      	mov	r3, r0
 800ce68:	4293      	cmp	r3, r2
 800ce6a:	d100      	bne.n	800ce6e <memset+0xa>
 800ce6c:	4770      	bx	lr
 800ce6e:	f803 1b01 	strb.w	r1, [r3], #1
 800ce72:	e7f9      	b.n	800ce68 <memset+0x4>

0800ce74 <_free_r>:
 800ce74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ce76:	2900      	cmp	r1, #0
 800ce78:	d044      	beq.n	800cf04 <_free_r+0x90>
 800ce7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce7e:	9001      	str	r0, [sp, #4]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	f1a1 0404 	sub.w	r4, r1, #4
 800ce86:	bfb8      	it	lt
 800ce88:	18e4      	addlt	r4, r4, r3
 800ce8a:	f000 f8e3 	bl	800d054 <__malloc_lock>
 800ce8e:	4a1e      	ldr	r2, [pc, #120]	; (800cf08 <_free_r+0x94>)
 800ce90:	9801      	ldr	r0, [sp, #4]
 800ce92:	6813      	ldr	r3, [r2, #0]
 800ce94:	b933      	cbnz	r3, 800cea4 <_free_r+0x30>
 800ce96:	6063      	str	r3, [r4, #4]
 800ce98:	6014      	str	r4, [r2, #0]
 800ce9a:	b003      	add	sp, #12
 800ce9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cea0:	f000 b8de 	b.w	800d060 <__malloc_unlock>
 800cea4:	42a3      	cmp	r3, r4
 800cea6:	d908      	bls.n	800ceba <_free_r+0x46>
 800cea8:	6825      	ldr	r5, [r4, #0]
 800ceaa:	1961      	adds	r1, r4, r5
 800ceac:	428b      	cmp	r3, r1
 800ceae:	bf01      	itttt	eq
 800ceb0:	6819      	ldreq	r1, [r3, #0]
 800ceb2:	685b      	ldreq	r3, [r3, #4]
 800ceb4:	1949      	addeq	r1, r1, r5
 800ceb6:	6021      	streq	r1, [r4, #0]
 800ceb8:	e7ed      	b.n	800ce96 <_free_r+0x22>
 800ceba:	461a      	mov	r2, r3
 800cebc:	685b      	ldr	r3, [r3, #4]
 800cebe:	b10b      	cbz	r3, 800cec4 <_free_r+0x50>
 800cec0:	42a3      	cmp	r3, r4
 800cec2:	d9fa      	bls.n	800ceba <_free_r+0x46>
 800cec4:	6811      	ldr	r1, [r2, #0]
 800cec6:	1855      	adds	r5, r2, r1
 800cec8:	42a5      	cmp	r5, r4
 800ceca:	d10b      	bne.n	800cee4 <_free_r+0x70>
 800cecc:	6824      	ldr	r4, [r4, #0]
 800cece:	4421      	add	r1, r4
 800ced0:	1854      	adds	r4, r2, r1
 800ced2:	42a3      	cmp	r3, r4
 800ced4:	6011      	str	r1, [r2, #0]
 800ced6:	d1e0      	bne.n	800ce9a <_free_r+0x26>
 800ced8:	681c      	ldr	r4, [r3, #0]
 800ceda:	685b      	ldr	r3, [r3, #4]
 800cedc:	6053      	str	r3, [r2, #4]
 800cede:	4421      	add	r1, r4
 800cee0:	6011      	str	r1, [r2, #0]
 800cee2:	e7da      	b.n	800ce9a <_free_r+0x26>
 800cee4:	d902      	bls.n	800ceec <_free_r+0x78>
 800cee6:	230c      	movs	r3, #12
 800cee8:	6003      	str	r3, [r0, #0]
 800ceea:	e7d6      	b.n	800ce9a <_free_r+0x26>
 800ceec:	6825      	ldr	r5, [r4, #0]
 800ceee:	1961      	adds	r1, r4, r5
 800cef0:	428b      	cmp	r3, r1
 800cef2:	bf04      	itt	eq
 800cef4:	6819      	ldreq	r1, [r3, #0]
 800cef6:	685b      	ldreq	r3, [r3, #4]
 800cef8:	6063      	str	r3, [r4, #4]
 800cefa:	bf04      	itt	eq
 800cefc:	1949      	addeq	r1, r1, r5
 800cefe:	6021      	streq	r1, [r4, #0]
 800cf00:	6054      	str	r4, [r2, #4]
 800cf02:	e7ca      	b.n	800ce9a <_free_r+0x26>
 800cf04:	b003      	add	sp, #12
 800cf06:	bd30      	pop	{r4, r5, pc}
 800cf08:	20000bdc 	.word	0x20000bdc

0800cf0c <sbrk_aligned>:
 800cf0c:	b570      	push	{r4, r5, r6, lr}
 800cf0e:	4e0e      	ldr	r6, [pc, #56]	; (800cf48 <sbrk_aligned+0x3c>)
 800cf10:	460c      	mov	r4, r1
 800cf12:	6831      	ldr	r1, [r6, #0]
 800cf14:	4605      	mov	r5, r0
 800cf16:	b911      	cbnz	r1, 800cf1e <sbrk_aligned+0x12>
 800cf18:	f000 f88c 	bl	800d034 <_sbrk_r>
 800cf1c:	6030      	str	r0, [r6, #0]
 800cf1e:	4621      	mov	r1, r4
 800cf20:	4628      	mov	r0, r5
 800cf22:	f000 f887 	bl	800d034 <_sbrk_r>
 800cf26:	1c43      	adds	r3, r0, #1
 800cf28:	d00a      	beq.n	800cf40 <sbrk_aligned+0x34>
 800cf2a:	1cc4      	adds	r4, r0, #3
 800cf2c:	f024 0403 	bic.w	r4, r4, #3
 800cf30:	42a0      	cmp	r0, r4
 800cf32:	d007      	beq.n	800cf44 <sbrk_aligned+0x38>
 800cf34:	1a21      	subs	r1, r4, r0
 800cf36:	4628      	mov	r0, r5
 800cf38:	f000 f87c 	bl	800d034 <_sbrk_r>
 800cf3c:	3001      	adds	r0, #1
 800cf3e:	d101      	bne.n	800cf44 <sbrk_aligned+0x38>
 800cf40:	f04f 34ff 	mov.w	r4, #4294967295
 800cf44:	4620      	mov	r0, r4
 800cf46:	bd70      	pop	{r4, r5, r6, pc}
 800cf48:	20000be0 	.word	0x20000be0

0800cf4c <_malloc_r>:
 800cf4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf50:	1ccd      	adds	r5, r1, #3
 800cf52:	f025 0503 	bic.w	r5, r5, #3
 800cf56:	3508      	adds	r5, #8
 800cf58:	2d0c      	cmp	r5, #12
 800cf5a:	bf38      	it	cc
 800cf5c:	250c      	movcc	r5, #12
 800cf5e:	2d00      	cmp	r5, #0
 800cf60:	4607      	mov	r7, r0
 800cf62:	db01      	blt.n	800cf68 <_malloc_r+0x1c>
 800cf64:	42a9      	cmp	r1, r5
 800cf66:	d905      	bls.n	800cf74 <_malloc_r+0x28>
 800cf68:	230c      	movs	r3, #12
 800cf6a:	603b      	str	r3, [r7, #0]
 800cf6c:	2600      	movs	r6, #0
 800cf6e:	4630      	mov	r0, r6
 800cf70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf74:	4e2e      	ldr	r6, [pc, #184]	; (800d030 <_malloc_r+0xe4>)
 800cf76:	f000 f86d 	bl	800d054 <__malloc_lock>
 800cf7a:	6833      	ldr	r3, [r6, #0]
 800cf7c:	461c      	mov	r4, r3
 800cf7e:	bb34      	cbnz	r4, 800cfce <_malloc_r+0x82>
 800cf80:	4629      	mov	r1, r5
 800cf82:	4638      	mov	r0, r7
 800cf84:	f7ff ffc2 	bl	800cf0c <sbrk_aligned>
 800cf88:	1c43      	adds	r3, r0, #1
 800cf8a:	4604      	mov	r4, r0
 800cf8c:	d14d      	bne.n	800d02a <_malloc_r+0xde>
 800cf8e:	6834      	ldr	r4, [r6, #0]
 800cf90:	4626      	mov	r6, r4
 800cf92:	2e00      	cmp	r6, #0
 800cf94:	d140      	bne.n	800d018 <_malloc_r+0xcc>
 800cf96:	6823      	ldr	r3, [r4, #0]
 800cf98:	4631      	mov	r1, r6
 800cf9a:	4638      	mov	r0, r7
 800cf9c:	eb04 0803 	add.w	r8, r4, r3
 800cfa0:	f000 f848 	bl	800d034 <_sbrk_r>
 800cfa4:	4580      	cmp	r8, r0
 800cfa6:	d13a      	bne.n	800d01e <_malloc_r+0xd2>
 800cfa8:	6821      	ldr	r1, [r4, #0]
 800cfaa:	3503      	adds	r5, #3
 800cfac:	1a6d      	subs	r5, r5, r1
 800cfae:	f025 0503 	bic.w	r5, r5, #3
 800cfb2:	3508      	adds	r5, #8
 800cfb4:	2d0c      	cmp	r5, #12
 800cfb6:	bf38      	it	cc
 800cfb8:	250c      	movcc	r5, #12
 800cfba:	4629      	mov	r1, r5
 800cfbc:	4638      	mov	r0, r7
 800cfbe:	f7ff ffa5 	bl	800cf0c <sbrk_aligned>
 800cfc2:	3001      	adds	r0, #1
 800cfc4:	d02b      	beq.n	800d01e <_malloc_r+0xd2>
 800cfc6:	6823      	ldr	r3, [r4, #0]
 800cfc8:	442b      	add	r3, r5
 800cfca:	6023      	str	r3, [r4, #0]
 800cfcc:	e00e      	b.n	800cfec <_malloc_r+0xa0>
 800cfce:	6822      	ldr	r2, [r4, #0]
 800cfd0:	1b52      	subs	r2, r2, r5
 800cfd2:	d41e      	bmi.n	800d012 <_malloc_r+0xc6>
 800cfd4:	2a0b      	cmp	r2, #11
 800cfd6:	d916      	bls.n	800d006 <_malloc_r+0xba>
 800cfd8:	1961      	adds	r1, r4, r5
 800cfda:	42a3      	cmp	r3, r4
 800cfdc:	6025      	str	r5, [r4, #0]
 800cfde:	bf18      	it	ne
 800cfe0:	6059      	strne	r1, [r3, #4]
 800cfe2:	6863      	ldr	r3, [r4, #4]
 800cfe4:	bf08      	it	eq
 800cfe6:	6031      	streq	r1, [r6, #0]
 800cfe8:	5162      	str	r2, [r4, r5]
 800cfea:	604b      	str	r3, [r1, #4]
 800cfec:	4638      	mov	r0, r7
 800cfee:	f104 060b 	add.w	r6, r4, #11
 800cff2:	f000 f835 	bl	800d060 <__malloc_unlock>
 800cff6:	f026 0607 	bic.w	r6, r6, #7
 800cffa:	1d23      	adds	r3, r4, #4
 800cffc:	1af2      	subs	r2, r6, r3
 800cffe:	d0b6      	beq.n	800cf6e <_malloc_r+0x22>
 800d000:	1b9b      	subs	r3, r3, r6
 800d002:	50a3      	str	r3, [r4, r2]
 800d004:	e7b3      	b.n	800cf6e <_malloc_r+0x22>
 800d006:	6862      	ldr	r2, [r4, #4]
 800d008:	42a3      	cmp	r3, r4
 800d00a:	bf0c      	ite	eq
 800d00c:	6032      	streq	r2, [r6, #0]
 800d00e:	605a      	strne	r2, [r3, #4]
 800d010:	e7ec      	b.n	800cfec <_malloc_r+0xa0>
 800d012:	4623      	mov	r3, r4
 800d014:	6864      	ldr	r4, [r4, #4]
 800d016:	e7b2      	b.n	800cf7e <_malloc_r+0x32>
 800d018:	4634      	mov	r4, r6
 800d01a:	6876      	ldr	r6, [r6, #4]
 800d01c:	e7b9      	b.n	800cf92 <_malloc_r+0x46>
 800d01e:	230c      	movs	r3, #12
 800d020:	603b      	str	r3, [r7, #0]
 800d022:	4638      	mov	r0, r7
 800d024:	f000 f81c 	bl	800d060 <__malloc_unlock>
 800d028:	e7a1      	b.n	800cf6e <_malloc_r+0x22>
 800d02a:	6025      	str	r5, [r4, #0]
 800d02c:	e7de      	b.n	800cfec <_malloc_r+0xa0>
 800d02e:	bf00      	nop
 800d030:	20000bdc 	.word	0x20000bdc

0800d034 <_sbrk_r>:
 800d034:	b538      	push	{r3, r4, r5, lr}
 800d036:	4d06      	ldr	r5, [pc, #24]	; (800d050 <_sbrk_r+0x1c>)
 800d038:	2300      	movs	r3, #0
 800d03a:	4604      	mov	r4, r0
 800d03c:	4608      	mov	r0, r1
 800d03e:	602b      	str	r3, [r5, #0]
 800d040:	f7f3 ffc6 	bl	8000fd0 <_sbrk>
 800d044:	1c43      	adds	r3, r0, #1
 800d046:	d102      	bne.n	800d04e <_sbrk_r+0x1a>
 800d048:	682b      	ldr	r3, [r5, #0]
 800d04a:	b103      	cbz	r3, 800d04e <_sbrk_r+0x1a>
 800d04c:	6023      	str	r3, [r4, #0]
 800d04e:	bd38      	pop	{r3, r4, r5, pc}
 800d050:	20000be4 	.word	0x20000be4

0800d054 <__malloc_lock>:
 800d054:	4801      	ldr	r0, [pc, #4]	; (800d05c <__malloc_lock+0x8>)
 800d056:	f000 b809 	b.w	800d06c <__retarget_lock_acquire_recursive>
 800d05a:	bf00      	nop
 800d05c:	20000be8 	.word	0x20000be8

0800d060 <__malloc_unlock>:
 800d060:	4801      	ldr	r0, [pc, #4]	; (800d068 <__malloc_unlock+0x8>)
 800d062:	f000 b804 	b.w	800d06e <__retarget_lock_release_recursive>
 800d066:	bf00      	nop
 800d068:	20000be8 	.word	0x20000be8

0800d06c <__retarget_lock_acquire_recursive>:
 800d06c:	4770      	bx	lr

0800d06e <__retarget_lock_release_recursive>:
 800d06e:	4770      	bx	lr

0800d070 <_init>:
 800d070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d072:	bf00      	nop
 800d074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d076:	bc08      	pop	{r3}
 800d078:	469e      	mov	lr, r3
 800d07a:	4770      	bx	lr

0800d07c <_fini>:
 800d07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d07e:	bf00      	nop
 800d080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d082:	bc08      	pop	{r3}
 800d084:	469e      	mov	lr, r3
 800d086:	4770      	bx	lr
